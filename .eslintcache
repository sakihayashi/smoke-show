[{"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/index.js":"1","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/reportWebVitals.js":"2","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/App.js":"3","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/aws-exports.js":"4","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/store/reducers/rootReducer.js":"5","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/InfluencerIndexPage.js":"6","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/HomePage.js":"7","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/AboutPage.js":"8","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/EmailConfirmation.js":"9","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/NotFoundPage.js":"10","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/ResetPassword.js":"11","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/CarStats.js":"12","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Swagg.js":"13","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Influencer/BioPage.js":"14","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Fan/BioPage.js":"15","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/CarSearch.js":"16","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Giveaways.js":"17","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/store/reducers/authReducer.js":"18","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/store/reducers/userReducer.js":"19","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/commentsTempData.js":"20","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/carTempData.js":"21","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Comments.js":"22","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Layout/Layout.js":"23","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/giveAwayData.js":"24","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/utils/youtubeAPI.js":"25","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Fan/vehicleCard.js":"26","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Fan/CreateNewCar.js":"27","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Layout/Header.js":"28","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Layout/Footer.js":"29","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Fan/SettingModal.js":"30","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Layout/SignUpModal.js":"31","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Layout/LoginModal.js":"32","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/store/actions/userActions.js":"33","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/store/actions/authActions.js":"34","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Shopify/Cart.js":"35","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Shopify/Products.js":"36","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Shopify/Product.js":"37","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Shopify/LineItem.js":"38","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Shopify/VariantSelector.js":"39","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Fan/ImageUpload.js":"40"},{"size":1122,"mtime":1612536438995,"results":"41","hashOfConfig":"42"},{"size":362,"mtime":1604942454463,"results":"43","hashOfConfig":"42"},{"size":1818,"mtime":1611093860931,"results":"44","hashOfConfig":"42"},{"size":1074,"mtime":1611365886225,"results":"45","hashOfConfig":"42"},{"size":368,"mtime":1605920900781,"results":"46","hashOfConfig":"42"},{"size":4571,"mtime":1612555723173,"results":"47","hashOfConfig":"42"},{"size":13390,"mtime":1612552857178,"results":"48","hashOfConfig":"42"},{"size":2385,"mtime":1612530430856,"results":"49","hashOfConfig":"42"},{"size":6739,"mtime":1611860315695,"results":"50","hashOfConfig":"42"},{"size":873,"mtime":1612402277036,"results":"51","hashOfConfig":"42"},{"size":6165,"mtime":1608424831604,"results":"52","hashOfConfig":"42"},{"size":16040,"mtime":1612560206712,"results":"53","hashOfConfig":"42"},{"size":3606,"mtime":1612402283053,"results":"54","hashOfConfig":"42"},{"size":11451,"mtime":1611094187241,"results":"55","hashOfConfig":"42"},{"size":17594,"mtime":1612547488748,"results":"56","hashOfConfig":"42"},{"size":8396,"mtime":1612556398771,"results":"57","hashOfConfig":"42"},{"size":7536,"mtime":1612402244448,"results":"58","hashOfConfig":"42"},{"size":434,"mtime":1606496773615,"results":"59","hashOfConfig":"42"},{"size":405,"mtime":1606150053437,"results":"60","hashOfConfig":"42"},{"size":1018,"mtime":1605734313167,"results":"61","hashOfConfig":"42"},{"size":30355,"mtime":1608082226445,"results":"62","hashOfConfig":"42"},{"size":7439,"mtime":1612553289300,"results":"63","hashOfConfig":"42"},{"size":1773,"mtime":1612547716398,"results":"64","hashOfConfig":"42"},{"size":1595,"mtime":1609789938707,"results":"65","hashOfConfig":"42"},{"size":364,"mtime":1605543123565,"results":"66","hashOfConfig":"42"},{"size":9566,"mtime":1612545905121,"results":"67","hashOfConfig":"42"},{"size":12058,"mtime":1612470731354,"results":"68","hashOfConfig":"42"},{"size":4673,"mtime":1612553052135,"results":"69","hashOfConfig":"42"},{"size":373,"mtime":1610140072353,"results":"70","hashOfConfig":"42"},{"size":18626,"mtime":1612545657818,"results":"71","hashOfConfig":"42"},{"size":5907,"mtime":1612551132493,"results":"72","hashOfConfig":"42"},{"size":6758,"mtime":1612550942250,"results":"73","hashOfConfig":"42"},{"size":521,"mtime":1607799014035,"results":"74","hashOfConfig":"42"},{"size":367,"mtime":1606247792385,"results":"75","hashOfConfig":"42"},{"size":2130,"mtime":1610065399614,"results":"76","hashOfConfig":"42"},{"size":613,"mtime":1610055684017,"results":"77","hashOfConfig":"42"},{"size":4052,"mtime":1610152774195,"results":"78","hashOfConfig":"42"},{"size":2086,"mtime":1596835430000,"results":"79","hashOfConfig":"42"},{"size":546,"mtime":1596835430000,"results":"80","hashOfConfig":"42"},{"size":3624,"mtime":1612401950074,"results":"81","hashOfConfig":"42"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},"1fkg0if",{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"95","messages":"96","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"84"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"84"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"84"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"84"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"84"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"84"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"84"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"84"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"84"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"84"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"155","messages":"156","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"157","messages":"158","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"84"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"84"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"84"},"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/index.js",[],["176","177"],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/reportWebVitals.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/App.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/aws-exports.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/store/reducers/rootReducer.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/InfluencerIndexPage.js",["178"],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/HomePage.js",["179","180","181"],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/AboutPage.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/EmailConfirmation.js",["182"],"import React, { useState, useEffect, useRef } from 'react'\nimport { Button, Form } from 'react-bootstrap'\n// import Logo from '../assets/global/Logo-smoke-show.png'\nimport * as Realm from \"realm-web\"\nimport { connect } from 'react-redux'\nimport jwt from 'jsonwebtoken'\nimport Layout from './Layout/Layout'\n\nconst EmailConfirmation = (props) =>{\n    const childRef = useRef()\n    let token = new URLSearchParams(props.location.search).get(\"token\")\n    let tokenId = new URLSearchParams(props.location.search).get(\"tokenId\")\n    const [userObj, setUserObj] = useState({fname: '', lname: '', token: token, tokenId: tokenId, username: '', email: '', password: ''})\n    const [hasError, setHasError] = useState(false)\n    const [hasRegistered, setHasRegistered] = useState(false)\n    const [msg, setMsg] = useState(\"\")\n    const maxAgeTest = 1 * 60 * 60\n    const id = process.env.REACT_APP_REALM_APP_ID\n    const config = { id };\n    const app = new Realm.App(config);\n    \n    const getApp = Realm.App.getApp(id)\n\n    const handleChange =(e) =>{\n        setUserObj({\n            ...userObj,\n            [e.target.name]: e.target.value\n        })\n    }\n    const createToken = (userData) =>{\n        return jwt.sign({ userData: userData }, process.env.REACT_APP_JWT_SECRET, {expiresIn: maxAgeTest});\n    }\n    const handleSubmit = async (e) =>{\n        e.preventDefault()\n        setHasError(false)\n        const email = userObj.email.toLowerCase()\n        \n        const credentials = Realm.Credentials.emailPassword(email, userObj.password)\n        await app.logIn(credentials).then(async user =>{\n            const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME);\n            const userData = {\n                userId: user.id,\n                fname: userObj.fname,\n                lname: userObj.lname,\n                username: userObj.username\n            }\n            \n            const mongoCollection = mongo.db(\"smoke-show\").collection(\"users\");\n            await mongoCollection.insertOne(userData).then(insertOneResult =>{\n                userData.login = {email: email, password: userObj.password}\n                let token = createToken(userData)\n                localStorage.setItem('session_token', token)\n                childRef.current.handleUserByParent(userObj.fname)\n            }).then(()=>{props.history.push(\"/\")})\n\n        })\n    }\n    const handleResendToken = async (e) =>{\n        e.preventDefault()\n        console.log('email', userObj.email)\n        const email = userObj.email\n        const response = await getApp.emailPasswordAuth.resendConfirmation(email)\n        console.log('response', response)\n    }\n    const resendToken = ()=>{\n        return(\n            <div>\n                <center>\n                    <h3>{msg}</h3>\n                </center>\n                \n                <div className=\"spacer-4rem\"></div>\n                <Form className=\"login-form\" onSubmit={handleResendToken}>\n                    <Form.Group controlId=\"formBasicEmail\">\n                        <Form.Label>Email address</Form.Label>\n                        <Form.Control type=\"email\" placeholder=\"e.g. example@example.com\" name=\"email\" onChange={handleChange} required />\n                    </Form.Group>\n                    <div className=\"login-btn-wrapper\">\n                        <Button className=\"login-btn\" type=\"submit\">\n                            Resend Confirmation Email\n                        </Button><br /><br />\n                     \n                    </div>\n                </Form>\n            </div>\n        )\n    }\n    const confirmUser = async () =>{\n        if(token){\n            try{\n                await app.emailPasswordAuth.confirmUser(token, tokenId).then(user =>{\n                    setHasRegistered(true)\n                    \n                })\n            }catch(error){\n                console.log('error', error)\n                setMsg('Oops, the link was expired. Please resend confirmation email.')\n                setHasRegistered(false)\n            }\n        }\n    }\n \n    useEffect(() => {\n        confirmUser()\n        \n    }, [])\n\n    return (\n        <Layout ref={childRef}>\n            <div className=\"custom-modal-body\">\n                <div style={{marginTop:'3rem'}}></div>\n                {hasRegistered ? \n                <React.Fragment>\n                    <div className=\"login-logo-wrapper\">\n                        <h3>You are registered to The Smoke Show.</h3>\n                        <p>Please fill in your info and login.</p>\n                    </div>\n                    <Form className=\"login-form\" onSubmit={handleSubmit}>\n                        <Form.Group >\n                            <Form.Label>First name</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"e.g. John\" name=\"fname\" onChange={handleChange} required/>\n                        </Form.Group>\n                        <Form.Group >\n                            <Form.Label>Last name</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"e.g. Due\" name=\"lname\" onChange={handleChange} required />\n                        </Form.Group>\n                        <Form.Group controlId=\"formBasicEmail\">\n                            <Form.Label>Username</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"e.g. Smoke Show love\" name=\"username\" onChange={handleChange} required/>\n                        </Form.Group>\n                        <Form.Group controlId=\"formBasicEmail\">\n                            <Form.Label>Email address</Form.Label>\n                            <Form.Control type=\"email\" placeholder=\"e.g. example@example.com\" name=\"email\" onChange={handleChange} />\n                        </Form.Group>\n                        <Form.Group controlId=\"formBasicPassword\">\n                            <Form.Label>Password</Form.Label>\n                            <Form.Control type=\"password\" placeholder=\"Between 6 and 128 characters long\" name=\"password\" onChange={handleChange} />\n                        </Form.Group>\n                        \n                        {hasError && <div className=\"error-msg\">{msg}</div>}\n                        <br/>\n                        <div className=\"login-btn-wrapper\">\n                            <Button className=\"login-btn\" type=\"submit\">\n                                Login\n                            </Button>\n                        </div>\n                        <div className=\"spacer-4rem\"></div>\n                    </Form>\n                </React.Fragment>\n                : resendToken()\n                }\n            \n            </div>\n        </Layout>\n        \n    )\n}\n\nexport default connect()(EmailConfirmation)\n\n\n","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/NotFoundPage.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/ResetPassword.js",["183","184","185"],"import React, { useState, useEffect, useRef } from 'react'\nimport { Button, Form } from 'react-bootstrap'\n// import Logo from '../assets/global/Logo-smoke-show.png'\nimport * as Realm from \"realm-web\"\nimport { connect } from 'react-redux'\nimport jwt from 'jsonwebtoken'\nimport Layout from './Layout/Layout'\n\nconst ResetPassword = (props) =>{\n    const childRef = useRef()\n    const token = new URLSearchParams(props.location.search).get(\"token\")\n    const tokenId = new URLSearchParams(props.location.search).get(\"tokenId\")\n    const [userObj, setUserObj] = useState({token: token, tokenId: tokenId, email: '', password: '', password2: ''})\n    const [hasError, setHasError] = useState(false)\n    const [hasReset, setHasReset] = useState(false)\n    const [msg, setMsg] = useState(\"\")\n    const maxAgeTest = 1 * 60 * 60\n    const id = process.env.REACT_APP_REALM_APP_ID\n    const config = { id };\n    const app = new Realm.App(config);\n\n\n    const handleChange =(e) =>{\n        setUserObj({\n            ...userObj,\n            [e.target.name]: e.target.value\n        })\n    }\n    const createToken = (userData) =>{\n        return jwt.sign({ userData: userData }, process.env.REACT_APP_JWT_SECRET, {expiresIn: maxAgeTest});\n    }\n    const handeleRestPw = async (e) =>{\n        e.preventDefault()\n        try{\n            await app.emailPasswordAuth.resetPassword(token, tokenId, userObj.password).then(res =>{\n                console.log('res', res)\n                hasReset(true)\n            })\n        }catch(error){\n            console.log(error)\n        }\n        \n    }\n    const handleLogin = async (e) =>{\n        e.preventDefault()\n        const emailLowerCase = userObj.email.toLocaleLowerCase()\n        const credentials = Realm.Credentials.emailPassword(emailLowerCase, userObj.password)\n\n        try{\n            // Authenticate the user\n            await app.logIn(credentials).then(async user=>{\n                    console.log('working?', user)\n                    // const key = await user.apiKeys.create(uid)\n                    const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME);\n                    const mongoCollection = mongo.db(\"smoke-show\").collection(\"users\");\n                    let token = ''\n                    const queryFilter = { userId: user.id };\n                    await mongoCollection.findOne(queryFilter).then(loginUserData =>{\n                        console.log('login user data', loginUserData)\n                        loginUserData.login = userObj\n                        token = createToken(loginUserData)\n                        \n                        localStorage.setItem('session_token', token)\n                    }).then(()=>{props.history.push(\"/\")})\n                    \n                    \n                });\n            \n      \n        }catch(error){\n            console.log('error', error)\n\n        }\n    }\n    useEffect(() => {\n        \n    }, [])\n\n    return (\n        <Layout ref={childRef}>\n            <div className=\"custom-modal-body theme-text-p height-adj-main\">\n                <div style={{marginTop:'4rem'}}></div>\n                {hasReset ? \n                <React.Fragment>\n                    <div style={{textAlign:\"center\"}}>\n                        <h4>Your password has been reset</h4><br/>\n                        <p> Login with your new password.</p>\n                    </div>\n                    <div className=\"spacer-4rem\"></div>\n                    <Form className=\"login-form\" onSubmit={handleLogin}>\n                        <Form.Group controlId=\"formBasicEmail\">\n                            <Form.Label>Email address</Form.Label>\n                            <Form.Control type=\"email\" placeholder=\"e.g. example@example.com\" name=\"email\" onChange={handleChange} />\n                        </Form.Group>\n\n                        <Form.Group controlId=\"formBasicPassword\">\n                            <Form.Label>Password</Form.Label>\n                            <Form.Control type=\"password\" placeholder=\"\" name=\"password\" onChange={handleChange} />\n                        </Form.Group>\n                        <div className=\"spacer-2rem\"></div>\n                        <div className=\"login-btn-wrapper\">\n                            <Button className=\"login-btn\" type=\"submit\">\n                                Login\n                            </Button><br /><br />\n                            \n                        </div>\n                    \n                    </Form>\n                </React.Fragment>\n                :\n                <React.Fragment>\n                    <div className=\"login-logo-wrapper theme-text-p\">\n                        <h4 className=\"h4-style\">Reset Your Password</h4>\n                        <div className=\"spacer-4rem\"></div>\n                        <p>Please enter your new password below</p>\n                    </div>\n                    <Form className=\"login-form\" onSubmit={handeleRestPw}>\n         \n                        <Form.Group >\n                            <Form.Label>New password</Form.Label>\n                            <Form.Control type=\"password\" placeholder=\"Between 6 and 128 characters long\" name=\"password\" onChange={handleChange} />\n                        </Form.Group>\n                        <br/>\n                        <Form.Group >\n                            <Form.Label>Confirm new password</Form.Label>\n                            <Form.Control type=\"password2\" placeholder=\"type your new password again\" name=\"password\" onChange={handleChange} />\n                        </Form.Group>\n                        {hasError && <div className=\"error-msg\">{msg}</div>}\n                        <br/>\n                        <div className=\"login-btn-wrapper\">\n                            <Button className=\"login-btn\" type=\"submit\">\n                                Set New Password\n                            </Button>\n                        </div>\n                        <div className=\"spacer-4rem\"></div>\n                    </Form>\n                </React.Fragment>\n                }\n            </div>\n        </Layout>\n        \n    )\n}\n\nexport default connect()(ResetPassword)\n\n\n","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/CarStats.js",["186","187","188","189","190"],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Swagg.js",["191"],"import React, { useEffect, useState } from 'react'\nimport {Helmet} from \"react-helmet\"\nimport Layout from './Layout/Layout'\nimport Client from 'shopify-buy';\nimport Products from './Shopify/Products'\nimport Cart from './Shopify/Cart'\nimport './Shopify/shopify.scss'\nimport Logo from '../assets/global/Logo-smoke-show.png'\n\nconst Swagg = () =>{\nconst [isCartOpen, setIsCartOpen] = useState(false)\nconst [checkout, setCheckout] = useState({ lineItems: [] })\nconst [products, setProducts] =useState([])\nconst [shop, setShop] = useState({})\n\nconst client = Client.buildClient({\n    storefrontAccessToken: process.env.REACT_APP_SHOPIFY_TOKEN,\n        domain: 'thehoongroup.myshopify.com',\n    });\n\nconst fetchData = () =>{\n    client.checkout.create().then((res) => {\n        console.log('cart', res)\n        setCheckout(res)\n      })\n\n      client.product.fetchAll().then((res) => {\n        console.log('product', res)\n        setProducts(res)\n      })\n  \n      client.shop.fetchInfo().then((res) => {\n        console.log('shop', res)\n        setShop(res)\n      });\n}\nconst addVariantToCart = async (variantId, quantity)=>{\n    setIsCartOpen(true)\n\n    const lineItemsToAdd = [{variantId, quantity: parseInt(quantity, 10)}]\n    // const checkoutId = checkout.id\n\n    return await client.checkout.addLineItems(checkout.id, lineItemsToAdd).then(res => {\n      console.log('res', res)\n      setCheckout(res)\n    });\n}\nconst updateQuantityInCart = async (lineItemId, quantity) =>{\n    // const checkoutId = checkout.id\n    const lineItemsToUpdate = [{id: lineItemId, quantity: parseInt(quantity, 10)}]\n\n    return await client.checkout.updateLineItems(checkout.id, lineItemsToUpdate).then(res => {\n        setCheckout(res)\n    });\n}\nconst removeLineItemInCart = async (lineItemId) =>{\n    return await client.checkout.removeLineItems(checkout.id, [lineItemId]).then(res => {\n        setCheckout(res)\n    });\n}\n\nconst handleCartClose = () =>{\n    setIsCartOpen(false)\n}\n\nuseEffect(() => {\n    fetchData()\n}, [])\n    return(\n        <Layout>\n        <Helmet>\n            <meta charSet=\"utf-8\" />\n            <title>Swagg | The Smoke Show</title>\n            <meta name=\"description\" content=\"Check out our swaggs here!\" />\n            <meta name=\"robots\" content=\"noindex, nofollow\" />\n            {/* <link rel=\"canonical\" href=\"http://mysite.com/example\" /> */}\n        </Helmet>\n            <div className=\"main-wrapper\">\n                <div className=\"spacer-4rem\"></div>\n                <h2 className=\"title\">Swagg</h2>\n                {/* <div className=\"swagg-wrapper\">\n                </div> */}\n                <div className=\"App\">\n        <div className=\"App__header\">\n          {!isCartOpen &&\n            <div className=\"App__view-cart-wrapper\">\n              <button className=\"App__view-cart\" onClick={()=> setIsCartOpen(true)}>Cart</button>\n            </div>\n          }\n          <div className=\"App__title\">\n            {/* <h1>{shop.name}</h1> */}\n            <img className=\"logo-header\" src={Logo} alt=\"The Smoke Show logo\"/>\n            <h2>{shop.description}</h2>\n          </div>\n        </div>\n        <div className=\"spacer-4rem\"></div>\n        <Products\n          products={products}\n          client={client}\n          addVariantToCart={addVariantToCart}\n        />\n        <Cart\n          checkout={checkout}\n          isCartOpen={isCartOpen}\n          handleCartClose={handleCartClose}\n          updateQuantityInCart={updateQuantityInCart}\n          removeLineItemInCart={removeLineItemInCart}\n        />\n      </div>\n            </div>\n        </Layout>\n    )\n}\n\nexport default Swagg","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Influencer/BioPage.js",["192","193","194","195","196"],"import React, { useEffect, useState } from 'react'\nimport {Helmet} from \"react-helmet\"\nimport { Row, Col, Form, FormControl } from 'react-bootstrap'\nimport { connect } from 'react-redux'\nimport * as Realm from \"realm-web\"\n// import Avatar from 'react-avatar'\nimport './bioPage.scss'\n// import * as Papa from 'papaparse'\nimport { youtubeAPI } from '../../utils/youtubeAPI'\nimport { carTempData } from '../carTempData'\nimport { commentsTempData } from '../commentsTempData' \nimport Comments from '../Comments'\nimport { uid } from 'react-uid'\nimport Layout from '../Layout/Layout'\n\nimport powerIcon from '../../assets/global/Horsepower.png'\nimport pistonIcon from '../../assets/global/piston.png'\nimport priceIcon from '../../assets/global/Price-Tag-icon.png'\n\nconst BioPage = (props) =>{\n    const influencerId = props.match.params.id\n    const [influencer, setInfluencer] = useState({})\n    // const { banner_img, username, profile_pic, fans } = props.location.state.influencer\n    const [formattedFans, setFormattedFans] = useState('')\n    \n    const { params: { id } } = props.match\n    const videoEmbedURL = 'https://www.youtube.com/embed/'\n    const EddieXChannelId = 'UCdOXRB936PKSwx0J7SgF6SQ'\n    const [searchKeyword, setSearchKeyword] = useState('')\n    const [titleStr, setTitleStr] = useState('Your search result')\n    const [searchedCarData, setSearchedCarData] = useState([])\n    // var d = new Date();\n    // var n = new Date().getTime();\n    const appConfig = {\n        id: process.env.REACT_APP_REALM_APP_ID,\n        timeout: 10000, // timeout in number of milliseconds\n      };\n    const app = new Realm.App(appConfig);\n\n    const handleChangeKeyword = (e) =>{\n        setSearchKeyword(e.target.value)\n    }\n    const handleVideoSearch = async e =>{\n        e.preventDefault()\n        await youtubeAPI.get('/search', {\n            params: {\n                q: searchKeyword,\n                channelId: EddieXChannelId\n            }\n        }).then(res =>{\n            console.log('res from youtube', res)\n            setTitleStr(\"EddieX \" + searchKeyword)\n            const searchResult = res.data.items\n            console.log('is this array?', res.data.items)\n            const datayoutube =[]\n            searchResult.map(data =>{\n                datayoutube.push({\n                    videoId: data.id.videoId,\n                    youtube:{\n                        snippet: {title: data.snippet.title}\n                    }\n                })\n            })\n            setSearchedCarData(datayoutube)\n            console.log('use state check: ', searchedCarData)\n            \n        })\n    }\n    const getInfluencer = async () =>{\n        const credentials = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTHAPI);\n        try {\n \n          await app.logIn(credentials).then( async user =>{\n            const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME);\n            const mongoCollection = mongo.db(\"smoke-show\").collection(\"influencers\");\n            const filter = {userId: influencerId} \n            await mongoCollection.findOne(filter).then(res =>{\n                setInfluencer(res)\n                if(res.fans > 999){\n                    setFormattedFans(Math.sign(res.fans)*((Math.abs(res.fans)/1000).toFixed(1)) + 'k')\n                }else{\n                    setFormattedFans(Math.sign(res.fans)*Math.abs(res.fans))\n                }\n            })\n           \n          }\n          )\n         }catch(error){console.log(error)}\n    }\n    useEffect( async () => {\n        const credentials = Realm.Credentials.emailPassword('saki@thehoongroup.com', 'aaaaaa')\n        try {\n        //   const app = new Realm.App(appConfig);\n      \n          // an authenticated user is required to access a MongoDB instance\n          await app.logIn(credentials).then( async user =>{\n            const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME);\n            const mongoCollection = mongo.db(\"smoke-show\").collection(\"comments\");\n            const filter = {videoId: 'QHLojVxs'} \n            await mongoCollection.find(filter).then(resAll =>{\n            })\n           \n          }\n          )\n         }catch(error){console.log(error)}\n      })\n      useEffect(() => {\n        getInfluencer()\n      }, [])\n    return(\n        <Layout>\n            <Helmet>\n                <title>Influencer {`${influencer.username}`} Bio | The Smoke Show</title>\n            </Helmet>\n            <div className=\"main-wrapper\">\n                <div className=\"banner-wrapper\">\n                    <img src={influencer.banner_img} alt={influencer.username} className=\"influencer-banner\"/>\n                </div>\n                <Row>\n                    <Col style={{paddingRight:0}}>\n                    <img src={influencer.profile_pic} className=\"bio-profile-pic\" />\n                    </Col>\n                    <Col className=\"bio-text-wrapper\" style={{paddingLeft: 0}}>\n                        <div className=\"bio-creator-name\">{influencer.username}</div>\n                        <div className=\"bio-creator-data\">{formattedFans} Fans</div>\n                    </Col>\n                    <Col sm={9} className=\"bio-sub-menu\">\n                        <ul className=\"\">\n                            <li>All Videos</li>\n                            <li>Garage</li>\n                            <li>Social</li>\n                            <li>Swagg</li>\n                        </ul>\n                    </Col>\n                </Row>\n                <div className=\"spacer-4rem\"></div>\n                <h2 className=\"title\">New Today</h2>\n                <Row style={{paddingLeft:'-7px', paddingRight:'-7px'}}>\n                {\n                    carTempData.map((car, index) =>{\n        \n                        return <>\n                        <Col sm={6} key={uid(car)}>\n                        <Row>\n                            <Col sm={8} >\n                                <div className=\"videoWrapper\">\n                                    <iframe src={videoEmbedURL + car.videoId}\n                                            frameBorder='0'\n                                            allow='autoplay; encrypted-media'\n                                            allowFullScreen\n                                            title='video'\n                                    \n                                    />\n                    \n                                </div>\n                                <h3 style={{marginTop:'10px'}}>{car.youtube.snippet.title}</h3>\n                                {/* <Row className=\"comment-wrapper\">\n                                    <Col sm={1} style={{margin:0,padding:0}}>\n                                    {car.profile_pic ? <img src={car.profile_pic} className=\"creator-profile-pic\" /> :\n                                    <Avatar color={Avatar.getRandomColor('sitebase', ['red', 'green', 'teal'])} className=\"creator-profile-pic\" name={car.creator} />\n                                    }\n                                        \n                                    </Col>\n                                    <Col sm={11} style={{margin: 0, paddingRight:0, margin: 'auto'}}>\n                                    <div className=\"creator-name\"><strong>{car.creator}</strong><br /> <span style={{color:'gray', fontSize: '13px'}}>{' '} {car.fans} fans</span></div>\n\n                                    </Col>\n                                </Row> */}\n                    \n                                <Comments comments={commentsTempData[index]} videoId={car.videoId}/>\n                            </Col>\n                            <Col sm={4} style={{paddingLeft:0}}>\n                                <div className=\"spec-wrapper\">\n                                <img alt={car.name} key={car.logoUrl} src={require(`../../assets/car-brand-logos/${car.logoUrl}`).default} className=\"icon-s\" />{' '}<span className=\"spec-text\"><strong>{car.name}</strong></span><br/>\n                                <img alt=\"price\" key={priceIcon} src={priceIcon} className=\"icon-s\" /><span className=\"spec-text\">{' '}${car.price}</span><br />\n                                <img alt=\"power \" key={powerIcon} src={powerIcon} className=\"icon-s\" /><span className=\"spec-text\">{' '}{car.engine}</span><br />\n                                <img alt=\"piston\" key={pistonIcon} src={pistonIcon} className=\"icon-s\" /><span className=\"spec-text\">{' '}{car.hoursepower}</span><br />\n                                </div>\n                            </Col>\n                        </Row>\n                    </Col>\n                        </>\n                    })\n                }\n            </Row>\n            <div className=\"spacer-4rem\"></div>\n            <div className=\"title title-adj\">\n                <h2 style={{marginBottom: '-1rem'}}>{titleStr}</h2>\n                <Form inline onSubmit={handleVideoSearch} style={{marginRight: '-8px'}}>\n                    <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2 form-adj\" onChange={handleChangeKeyword}/>\n                </Form>\n                </div>\n                <Row style={{paddingLeft:'-7px', paddingRight:'-7px'}}>\n                {searchedCarData &&\n                    searchedCarData.map((car, index) =>{\n        \n                        return <>\n                        <Col sm={6} key={uid(car)}>\n                        <Row>\n                            <Col sm={8} >\n                                <div className=\"videoWrapper\">\n                                    <iframe src={videoEmbedURL + car.videoId}\n                                            frameBorder='0'\n                                            allow='autoplay; encrypted-media'\n                                            allowFullScreen\n                                            title='video'\n                                    \n                                    />\n                        \n                                </div>\n                                <h3 style={{marginTop:'10px'}}>{car.youtube.snippet.title}</h3>\n                            </Col>\n                            <Col sm={4} style={{paddingLeft:0}}>\n                                <div className=\"spec-wrapper\">\n                                {/* <img alt={car.name} key={car.logoUrl} src={require(`../assets/car-brand-logos/${car.logoUrl}`).default} className=\"icon-s\" />{' '}<span className=\"spec-text\"><strong>{car.name}</strong></span><br/>\n                                <img alt=\"price\" key={priceIcon} src={priceIcon} className=\"icon-s\" /><span className=\"spec-text\">{' '}${car.price}</span><br />\n                                <img alt=\"power \" key={powerIcon} src={powerIcon} className=\"icon-s\" /><span className=\"spec-text\">{' '}{car.engine}</span><br />\n                                <img alt=\"piston\" key={pistonIcon} src={pistonIcon} className=\"icon-s\" /><span className=\"spec-text\">{' '}{car.hoursepower}</span><br /> */}\n                                </div>\n                            </Col>\n                        </Row>\n                    </Col>\n                        </>\n                })\n                }\n                </Row>\n            </div>\n        </Layout>\n        \n    )\n}\nconst mapStateToProps = (state) => {\n    //syntax is propName: state.key of combineReducer.key\n    return{\n      username: state.user.username,\n    }\n  }\n\nexport default connect(mapStateToProps)(BioPage)\n\n","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Fan/BioPage.js",["197","198","199","200","201"],"import React, { useState, useEffect, useRef } from 'react'\nimport {Helmet} from \"react-helmet\"\nimport * as Realm from \"realm-web\"\nimport Layout from '../Layout/Layout'\n// import bioImgXs from '../../assets/temp-photos/bio/sample_a1n16a_c_scale,w_375.jpg'\n// import bioImgS from '../../assets/temp-photos/bio/sample_a1n16a_c_scale,w_752.jpg'\n// import bioImgM from '../../assets/temp-photos/bio/sample_a1n16a_c_scale,w_1040.jpg'\n// import bioImgL from '../../assets/temp-photos/bio/sample_a1n16a_c_scale,w_1280.jpg'\n// import bioImgXL from '../../assets/temp-photos/bio/sample_a1n16a_c_scale,w_1500.jpg'\nimport noImg from '../../assets/global/no_image.jpg'\nimport bioPic from '../../assets/temp-photos/bio/avator-male.jpg'\nimport dayDriver from '../../assets/temp-photos/bio/placeholder-car-repair2.jpg'\nimport editIcon from '../../assets/global/edit-icon.svg'\nimport settingsIcon from '../../assets/global/Settings-icon-white.svg'\nimport SettingModal from './SettingModal'\nimport { Button, Row, Col, Form } from 'react-bootstrap'\n\nimport './biopage.scss'\nimport VehicleCard from './vehicleCard'\nimport CreateNewCar from './CreateNewCar'\nimport jwt from 'jsonwebtoken'\nimport moment from 'moment'\n\nconst BioPage = (props) =>{\n  \n    const childRef = useRef()\n    const profileUserId = props.match.params.id\n    const [theUser, setTheUser] = useState({})\n    const [profileUser, setProfileUser] = useState({})\n    const [allowEdit, setAllowEdit] = useState(false)\n    const [editMode, setEditMode] = useState(false)\n    const [showSetting, setShowSetting] = useState(false);\n    const [userCars, setUserCars] = useState([])\n    const [showAddCar, setShowAddCar] = useState(false)\n    const [numOfComments, setNumComments] = useState(null)\n    const altData = {uername: 'No username yet', userId: '', profileDesc: 'No description yet.', myCars: [] }\n    const [formattedTime, setFormattedTime] = useState(null)\n    const altCarData = {name: 'No data yet', upgrades: 'No data yet', color: 'No data yet', wheels: 'No data yet', performance: 'No data yet', category: 'Dream car', imgUlr: noImg}\n    const appConfig = {\n        id: process.env.REACT_APP_REALM_APP_ID,\n        // timeout: 10000, \n        // timeout in number of milliseconds\n      };\n    const app = new Realm.App(appConfig);\n    \n    const handleCloseAddCarModal = () => setShowAddCar(false)\n    const handleShowAddCarModal = () => setShowAddCar(true)\n\n    const handleChangeProfile = (e) =>{\n        console.log('data disappear', profileUser)\n        setProfileUser({\n            ...profileUser,\n            [e.target.name]: e.target.value\n        })\n    }\n    const handleShowSetting = () =>{\n        const token = localStorage.getItem('session_token')\n        jwt.verify(token, process.env.REACT_APP_JWT_SECRET, function(err, decoded) {\n            if (err) {\n                console.log('err', err)\n                \n            }else{\n                console.log('success', decoded.userData.login.email)\n                setProfileUser({\n                    ...profileUser,\n                    email: decoded.userData.login.email\n                })\n                setShowSetting(true)\n            }\n          });\n        \n    }\n    const handleCloseSetting = () =>{\n        setShowSetting(false)\n    }\n    const userLoggedIn = (id) =>{\n        if(id === profileUser.userId){\n            setAllowEdit(true)\n            regainData()\n        }\n    }\n    const userLoggedOut = (id) =>{\n        if(id === profileUserId){\n            setAllowEdit(false)\n        }\n    }\n    const updateProfileData = (data, key)=>{\n\n        setProfileUser({\n            ...profileUser,\n            [key]: data\n        })\n    }\n    const updateUserDetails = (fname, lname, username) =>{\n        setProfileUser({\n            ...profileUser,\n            fname: fname,\n            lname: lname,\n            username: username\n        })\n    }\n    const updateCarData = (data) =>{\n        setUserCars(prevArray => [...prevArray, data])\n    }\n    const handleDataUpdate = async (e) =>{\n        e.preventDefault()\n  \n        if(app.currentUser.id === profileUser.userId){\n            const mongodb = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME);\n            const mongoCollection = mongodb.db(process.env.REACT_APP_REALM_DB_NAME).collection(\"users\")\n    \n            try{\n                await mongoCollection.updateOne(\n                    { \"userId\": app.currentUser.id},\n                    {\n                        \"$set\": {\n                            \"profileDesc\": profileUser.profileDesc\n                          }\n                    }\n                ).then(res =>{\n                    console.log('res', res)\n                })\n            }catch(err){\n                console.log(err)\n            }\n            setEditMode(false)\n        }\n        \n    }\n    const editAbout = ()=>{\n        return(\n            <Form>\n                <Form.Group >\n                    <Form.Label>Edit</Form.Label>\n                    <Form.Control as=\"textarea\" rows={3} name=\"profileDesc\" value={profileUser.profileDesc && profileUser.profileDesc } onChange={handleChangeProfile} />\n                </Form.Group>\n                <div className=\"bio-edit-btn-wrapper\">\n                    <Button variant=\"primary\" type=\"submit\" onClick={handleDataUpdate} className=\"bio-edit-btn\">\n                        Submit\n                    </Button>\n                </div>\n                \n            </Form>\n        )\n    }\n    const regainData = ()=>{\n        const token = localStorage.getItem('session_token')\n        if(token){\n            jwt.verify(token, process.env.REACT_APP_JWT_SECRET, function(err, decoded) {\n                if (err) {\n                    getDataAsPublic()\n                    console.log('err login again', err)\n                    childRef.current.handleLoginModal(true)\n                }else{\n                    getDataAsTheUser(decoded)\n                }\n              });\n            \n        }else{\n            getDataAsPublic()\n        }\n    }\n    const getDataAsTheUser = async (decoded) =>{\n        setTheUser(decoded.userData)\n        const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n        const mongoCollectionUser = mongo.db(\"smoke-show\").collection(\"users\")\n        const filter = {userId: profileUserId}\n        try{\n            await mongoCollectionUser.findOne(filter).then(user =>{\n                        setProfileUser(user)\n                        setFormattedTime(moment(profileUser.joined).local().format('MMMM Do YYYY'))\n                        getTotalComments(user.userId, mongo)\n                        getMyCars(user.userId, mongo)\n            })\n        }catch(err){\n            console.log(err)\n        }\n        // const mongo = decoded.userData.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME);\n        if(theUser.userId === profileUser.userId){\n            setAllowEdit(true)\n        }\n    \n    }\n    \n    const getDataAsPublic = async () =>{\n        const credentials = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTHAPI)\n        try{\n            await app.logIn(credentials).then( async user =>{\n                const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME);\n                const mongoCollection = mongo.db(\"smoke-show\").collection(\"users\")\n\n                const filter = {userId: profileUserId} \n               \n                await mongoCollection.findOne(filter).then(user =>{\n                    if(user === null){\n                        setProfileUser({fname: 'No user data', lname: '', profileDesc: 'No user data', })\n                    }else{\n                        setProfileUser(user)\n                        // console.log('this is profile user', profileUser)\n                        // console.log('cars', profileUser.myCars)\n                        if(user.joined){\n                            setFormattedTime(moment(user.joined).local().format('MMMM Do YYYY'))\n                        }else{\n                            setFormattedTime('No data')\n                        }\n                        \n                        getTotalComments(user.userId, mongo)\n                        getMyCars(user.userId, mongo)\n                    }\n                    \n                })\n            })\n        }catch(err){\n            console.log(err)\n        }\n    }\n    const getTotalComments = async (profileUserId, mongo) =>{\n        \n        const mongoCollectionComments = mongo.db(\"smoke-show\").collection(\"comments\")\n        \n        const filter = {userId: profileUserId}\n        await mongoCollectionComments.find(filter).then(res =>{\n            // setProfileUser({...profileUser, totalComments: res.length})\n            setNumComments(res.length)\n        })\n    }\n    const getMyCars = async (id, mongo) =>{\n        const mongoCollection = mongo.db(\"smoke-show\").collection(\"my-cars\")\n        \n        const filter = {userId: profileUserId}\n        await mongoCollection.find(filter).then( cars =>{\n            setUserCars(cars)\n        })\n    }\n    useEffect(() => {\n       \n        const token = localStorage.getItem('session_token')\n        if(token){\n            jwt.verify(token, process.env.REACT_APP_JWT_SECRET, function(err, decoded) {\n                if (err) {\n                    getDataAsPublic()\n                    console.log('err login again', err)\n                    childRef.current.handleLoginModal(true)\n                }else{\n                    getDataAsTheUser(decoded)\n                }\n              });\n            \n        }else{\n            getDataAsPublic()\n        }\n   \n    }, [])\n\n    return(\n        <Layout ref={childRef} userLoggedIn={userLoggedIn} userLoggedOut={userLoggedOut}>\n        <Helmet>\n            <meta charSet=\"utf-8\" />\n            <title>User profile page | The Smoke Show</title>\n            <meta name=\"description\" content=\"Place the meta description text here.\" />\n            <meta name=\"robots\" content=\"noindex, nofollow\" />\n            {/* <link rel=\"canonical\" href=\"http://mysite.com/example\" /> */}\n        </Helmet>\n        {showAddCar && <CreateNewCar show={showAddCar} handleClose={handleCloseAddCarModal} profileUser={profileUser} updateProfileData={updateProfileData} updateCarData={updateCarData} />}\n            {showSetting && <SettingModal show={showSetting} handleShowSetting={handleShowSetting} handleCloseSetting={handleCloseSetting} profileUser={profileUser}  updateProfileData={updateProfileData} updateUserDetails={updateUserDetails}/>}\n            <div className=\"main-wrapper\">\n                <div className=\"spacer-4rem\"></div>\n                <h2 className=\"title\">User Profile</h2>\n                <div className=\"bio-fleet-img\">\n                    <img\n                    // sizes=\"(max-width: 1500px) 100vw, 1500px\"\n                    // srcset={`\n                    // ${bioImgXs} 375w,\n                    // ${bioImgS} 752w,\n                    // ${bioImgM} 1040w,\n                    // ${bioImgL} 1280w,\n                    // ${bioImgXL} 1500w\n                    // `}\n                    src={profileUser.profileCover == true || profileUser.profileCover !== null ? profileUser.profileCover : noImg}\n                    alt=\"user selected profile image\"\n                     />\n                </div>\n                <div className=\"bio-content-wrapper\">\n                    <div className=\"bio-main-wrapper\">\n                        <div className=\"bio-pic\">\n                            <img src={profileUser.profilePic ? profileUser.profilePic : bioPic} alt=\"the user profile picture\" />\n                        </div>\n                        \n                        <div className=\"bio-title-text\">\n                            <h3 className=\"bio-name-title\">{profileUser.fname && profileUser.fname} {profileUser.lname && profileUser.lname}</h3>\n                            <p>{profileUser.title}</p>\n                        </div>\n                        {allowEdit && \n                            <Button className=\"bio-setting-btn\" onClick={handleShowSetting}>\n                                <img src={settingsIcon} alt=\"setting\" className=\"setting-icon\"/>\n                                Settings\n                            </Button>\n                        }\n                        \n                    </div>\n           \n                    <Row className=\"bio-height-adj\">\n                        <Col sm={4}>\n                            <div className=\"bio-container box-shadow-white\">\n                                <p className=\"bio-about no-m-b\"><strong>About: {` ${profileUser.fname} ${profileUser.lname}`}</strong></p>\n                                <div className=\"\">\n                                    <p className=\"bio-content bio-border\">\n                                        {editMode ? editAbout()\n                                        : [\n                                            (profileUser.profileDesc \n                                                ? <p >{profileUser.profileDesc}</p>\n                                                : <p>{altData.profileDesc}</p>\n                                            )\n                                            ]\n                                        }\n                                    { !editMode && <br/> }\n                                    <div className=\"edit-icon-wrapper\" onClick={()=>{setEditMode(true)}}>\n                                        {editMode ? '' : [\n                                            (allowEdit && <img className=\"edit-icon\" src={editIcon} alt=\"Edit about you\"/>)\n                                        ]}\n                                    </div>\n                                    </p>\n                                </div>\n                                \n                                <Row className=\"bio-border pt-pb-15 bio-row-adj\">\n                                    <Col sm={4}>\n                                        <p className=\"no-m-b\">Joined:</p>\n                                    </Col>\n                                    <Col sm={8}>\n                                        <p>{formattedTime ? formattedTime : 'No data'}</p>\n                                    </Col>\n                                </Row>\n                                <Row className=\"bio-border pt-pb-15 bio-row-adj\">\n                                    <Col sm={4}>\n                                        <p className=\"no-m-b\">Total Comments:</p>\n                                    </Col>\n                                    <Col sm={8}>\n                                        <p className=\"no-m-b\">{numOfComments && numOfComments} comments</p>\n                                    </Col>\n                                </Row>\n                                <Row className=\"bio-border pt-pb-15 bio-row-adj\">\n                                    <Col sm={4}>\n                                        <p className=\"no-m-b\">Fans of:</p>\n                                    </Col>\n                                    <Col sm={8}>\n                                        <p className=\"no-m-b\">\n                                            { profileUser.fansOf &&\n                                                profileUser.fansOf.map((name, i) =>{\n                                                    return <span>{i > 0 && ', '}{name}</span>\n                                                })\n                                            }\n                                        </p>\n                                    </Col>\n                                </Row>\n                                <Row className=\"pt-pb-15 bio-row-adj\"> \n                                    <Col sm={4}>\n                                        <p className=\"no-m-b\">Favorite Driving Song:</p>\n                                    </Col>\n                                    <Col sm={8}>\n                                        <p className=\"no-m-b\">Sting</p>\n                                    </Col>\n                                </Row>\n                            </div>\n                        </Col>\n                        <Col sm={8} className=\"pl-0\">\n                        { userCars !== undefined ?\n                            userCars.map( car =>{\n                               return (\n                                <React.Fragment>\n                                    <VehicleCard car={car} allowEdit={allowEdit} profileUser={profileUser} getMyCars={getMyCars} />\n                                    <div className=\"spacer-2rem\"></div>\n                                </React.Fragment>\n                               )\n                            }) :\n                            <React.Fragment>\n                                <VehicleCard car={altCarData} allowEdit={allowEdit} />\n                                <div className=\"spacer-2rem\"></div>\n                            </React.Fragment>\n                        }\n\n                            <div className=\"spacer-2rem\"></div>\n                            { allowEdit && \n                                <div style={{padding: '0 6px'}}>\n                                    <Button className=\"btn-add-car\" onClick={handleShowAddCarModal}>Add my car</Button>\n                                </div>\n                            }\n                            <div className=\"spacer-2rem\"></div>\n                        </Col>\n                        \n                    </Row>\n                    \n                </div>\n                \n            </div>\n        </Layout>\n    )\n}\n\nexport default BioPage","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/CarSearch.js",["202","203","204","205","206","207","208","209","210","211"],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Giveaways.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/store/reducers/authReducer.js",["212"],"const initState = {\n    credentials: {},\n    loginUserData: {}\n}\n\nconst authReducer = (state = initState, action) =>{\n    \n    switch(action.type){\n        case 'AUTH_USER':\n            return {\n                credentials: action.userData.credentials,\n                loginUserData: action.userData.loginUserData\n            }\n        default: return state\n    }\nconsole.log('state', state)\nreturn state\n}\n\nexport default authReducer","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/store/reducers/userReducer.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/commentsTempData.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/carTempData.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Comments.js",["213","214","215"],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Layout/Layout.js",["216"],"import React, { useState, useImperativeHandle, forwardRef, useRef } from 'react'\nimport Header from './Header'\nimport Footer from './Footer'\nimport { withRouter } from \"react-router\"\n\nconst HeaderWithRouter = withRouter(Header);\n\nconst Layout = forwardRef((props, ref) =>{\n    const [modalShow, setModalShow] = useState(false)\n    const [user, setUser] = useState(false)\n    const [username, setUsername] = useState('')\n    const [userId, setUserId] = useState('')\n    const parentRef = useRef()\n    const modalShowHide = (state)=>{\n        setModalShow(state)\n    }\n    const changeUserState = (state) =>{\n        setUser(state)\n    }\n    const funcSetUsername = (name) =>{\n        setUsername(name)\n    }\n    const handleuser = (fname, userId) =>{\n        console.log('value check', userId)\n        setUser(true)\n        setUsername(fname)\n        setUserId(userId)\n        setModalShow(false)\n        // props.userLoggedIn(userId)\n    }\n    // const updateLoggedOut = (id) =>{\n    //     props.userLoggedOut(id)\n    // }\n    useImperativeHandle(\n        ref,\n        (fname) => ({\n            handleUserByParent(fname){\n                setUser(true)\n                setUsername(fname)\n            }\n        }),\n    )\n    useImperativeHandle(\n        ref,\n        () =>({\n            handleLoginModal(state){\n                modalShowHide(state)\n            }\n        })\n    )\n\n    return(\n        <div>\n            <HeaderWithRouter handleuser={handleuser} modalShowHide={modalShowHide} user={user} username={username} changeUserState={changeUserState} funcSetUsername={funcSetUsername} modalShow={modalShow} userLoggedOut={props.userLoggedOut} userId={userId} />\n                { props.children }\n            <Footer />\n        </div>\n\n    )\n})\n\nexport default Layout ","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/giveAwayData.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/utils/youtubeAPI.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Fan/vehicleCard.js",["217"],"import React, { useState, Fragment, useCallback } from 'react'\nimport { Row, Col, Modal, Button, Form } from 'react-bootstrap'\n// import {useDropzone} from 'react-dropzone'\nimport noImg from '../../assets/global/no_image.jpg'\nimport * as Realm from \"realm-web\"\nimport ImageUpload from './ImageUpload'\n\nimport editIcon from '../../assets/global/edit-icon.svg'\n// import uploadIcon from '../../assets/global/upload.svg'\n\nconst VehicleCard = (props) =>{\n    const [imgFile, setImgFile] = useState('')\n    const [imgData64, setImgData64] = useState('')\n    const [newImg, setNewImg] = useState(false)\n    const carColors = ['White', 'Black', 'Grey', 'Blue', 'Silver', 'Red', 'Orange', 'Bronze', 'Yellow', 'Green', 'Navy']\n    const [carObj, setCarObj] = useState({name: props.car.name, color: props.car.color, wheels: props.car.wheels, performance: props.car.performance, upgrades: props.car.upgrades, imgUrl: props.car.imgUrl})\n    const [show, setShow] = useState(false)\n    const bucketName = process.env.REACT_APP_AWS_BUCKET_NAME;\n    const appConfig = {\n        id: process.env.REACT_APP_REALM_APP_ID,\n        timeout: 10000, // timeout in number of milliseconds\n        };\n    const app = new Realm.App(appConfig)\n\n    const imgChange = (state) => {\n        setNewImg(state)\n    }\n    const handleClose = () => setShow(false)\n    const handleShow = () => setShow(true)\n    // const onDrop = useCallback(acceptedFiles => {\n    //     // Do something with the files\n    //   }, [])\n    // const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\n    const handleChange = (e) =>{\n        setCarObj({\n            ...carObj,\n            [e.target.name]: e.target.value\n        })\n    }\n    const updateData = async (carData, mongo) =>{\n        const collectionMyCars = mongo.db(process.env.REACT_APP_REALM_DB_NAME).collection(\"my-cars\")\n        try{\n            await collectionMyCars.updateOne(\n                {_id: props.car._id},\n                { $set: carData }\n            ).then(res =>{\n                console.log('res', res)\n                props.getMyCars(props.car.userId, mongo)\n                handleClose()\n            })\n            \n        }catch(err){\n            console.log(err)\n        }\n    }\n    const deleteImgObj = async (key) =>{\n\n        if(app.currentUser.id === props.profileUser.userId){\n            try{\n                await app.currentUser.functions.deleteImageObjToS3(bucketName, key).then(res =>{\n                    console.log('res', res)\n                })\n            }catch(err){console.log(err)}\n        }\n    }\n    const handleSubmit = async (e) =>{\n        console.log('checking')\n        const baseImgUrl = 'https://s3.amazonaws.com/images.test.smokeshow/'\n        const imgId = new Date().getTime()\n        const filekey = props.profileUser.userId + '/my-cars/' + imgId\n        const imgUrlWithKey = baseImgUrl + filekey\n        const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME);\n        \n        const carData ={\n            name: carObj.name,\n            upgrades: carObj.upgrades,\n            wheels: carObj.wheels,\n            color: carObj.color,\n            userId: props.profileUser.userId,\n            performance: carObj.performance\n        }\n        e.preventDefault()\n        if(app.currentUser.id === props.profileUser.userId){\n            \n            if(newImg){\n                carData.imgUrl = imgUrlWithKey\n                await app.currentUser.functions.putImageObjToS3(imgData64, bucketName, filekey, imgFile.type).then(res =>{\n                    const currentUrl = props.car.imgUrl\n                    const splitted = currentUrl.split('/');\n                    const key = splitted.splice(4, 7).join(\"/\")\n                    deleteImgObj(key)\n                    updateData(carData, mongo)\n                })\n            }else{\n                updateData(carData, mongo)\n            }\n            \n        }else{\n            console.log('figure out what is going on')\n        }\n    }\n    const setImgData = (obj) =>{\n    setImgFile(obj)\n    var file = obj\n    const reader = new FileReader();\n    reader.onload = (event) => {\n    const base64 = event.target.result.split(\",\").pop()\n        setImgData64(base64)\n    //   console.log(base64);\n    };\n    reader.readAsDataURL(file);\n    }\n\n    const editModal = \n    <Fragment>\n        <Modal show={show} onHide={handleClose} className=\"modal-wrapper-bio\">\n            <Modal.Header closeButton>\n            </Modal.Header>\n            <Modal.Body>\n                <Row className=\"bio-modal-inner-wrapper\">\n                    <Col sm={6} className=\"\">\n                    <ImageUpload fileObj={setImgData} imgChange={imgChange} />\n                    {/* <div {...getRootProps()} className=\"dropzone-wrapper\">\n                        <input {...getInputProps()} />\n                        {\n                            isDragActive ?\n                            <p>Drop the files here ...</p> :\n                            <div className=\"drag-dropzone\">\n                                <div className=\"bio-modal-container\">\n                                    <img src={uploadIcon} alt=\"upload files here\" />\n                                    <p>Drag and drop or click to upload an image</p>\n                                    <p>*3MB max image file size<br/>\n                                    *accepted file formats: jpg, png, gif</p>\n                                </div>\n\n                            </div>\n                        }\n                    </div> */}\n                    </Col>\n                    <Col sm={6}>\n                    <h3>Category: {props.car.category}</h3>\n                    <hr />\n                    <Form>\n                        <Form.Group >\n                            <Form.Label>Car name</Form.Label>\n                            <Form.Control type=\"text\" placeholder={carObj.name} onChange={handleChange} name=\"name\"/>\n                        </Form.Group>\n                        <br/>\n                        <Form.Group >\n                            <Form.Label>Color</Form.Label>\n                            {/* <Form.Control type=\"text\" placeholder=\"Select your color\" onChange={handleChange} name=\"color\" /> */}\n                            <Form.Control as=\"select\" onChange={handleChange}>\n                            {carColors.map((color, index) =>{\n                                return(\n                                    <option key={color + index}>{color}</option>\n                                )\n                            })}\n                                \n                            </Form.Control>\n                        </Form.Group>\n                        <br/>\n                        <Form.Group >\n                            <Form.Label>Wheels</Form.Label>\n                            <Form.Control type=\"text\" placeholder={carObj.wheels} onChange={handleChange} name=\"wheels\"/>\n                        </Form.Group>\n                        <br/>\n                        <Form.Group >\n                            <Form.Label>Performance</Form.Label>\n                            <Form.Control type=\"text\" placeholder={carObj.performance} onChange={handleChange} name=\"performance\" />\n                        </Form.Group>\n                        <br/>\n                        <Form.Group >\n                            <Form.Label>Upgrade</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"Enter your update\" onChange={handleChange} name={carObj.upgrades} />\n                        </Form.Group>\n                        <br/><br/>\n                        <Row>\n                            <Col sm={6}>\n                                <Button variant=\"secondary\" onClick={handleClose} className=\"cancel-btn\" > \n                                    Cancel\n                                </Button>\n                            </Col>\n                            <Col sm={6}>\n                                <Button variant=\"primary\" onClick={handleSubmit} className=\"save-changes-btn\">\n                                Save Changes\n                                </Button>\n                            </Col>\n                        </Row>\n                    </Form>\n                    </Col>\n                </Row>\n            </Modal.Body>\n            <Modal.Footer>\n  \n            </Modal.Footer>\n        </Modal>\n    </Fragment>\n    \n\n    return(\n        <div className=\"bio-container box-shadow-white\">\n        { editModal}\n            <div className=\"car-names\">\n                <strong>{props.car.category ? props.car.category : 'Dream Car'}</strong>\n                    <div className=\"edit-icon-wrapper-card\" onClick={handleShow}>\n                    {props.allowEdit && \n                        <img className=\"edit-icon\" src={editIcon} alt=\"Edit about you\"/>\n                    }\n                        \n                    </div>\n            </div>\n            <Row>\n                <Col sm={5} >\n                    <img src={props.car.imgUrl !== undefined ? props.car.imgUrl : noImg} className=\"bio-my-car\" alt=\"my daily driver\" />\n                </Col>\n                <Col sm={7} className=\"bio-car-contents\">\n                    <p>Name: {props.car.name}</p>\n                    <p>Upgrades: {props.car.upgrades}</p>\n                    <p>Color: {props.car.color}</p>\n                    <p>Wheels: {props.car.wheels}</p>\n                    <p>Performance: {props.car.performance}</p>\n                </Col>\n            </Row>\n        </div>\n    )\n}\nexport default VehicleCard","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Fan/CreateNewCar.js",["218"],"import React, { useState, Fragment } from 'react'\nimport { Row, Col, Modal, Button, Form } from 'react-bootstrap'\nimport * as Realm from \"realm-web\"\nimport ImageUpload from './ImageUpload'\nimport jwt from 'jsonwebtoken'\n\nconst CreateNewCar = (props) =>{\n    const bucketName = process.env.REACT_APP_AWS_BUCKET_NAME;\n    const [imgFile, setImgFile] = useState('')\n    const [imgData64, setImgData64] = useState('')\n    const appConfig = {\n        id: process.env.REACT_APP_REALM_APP_ID,\n        timeout: 10000, // timeout in number of milliseconds\n        };\n    const app = new Realm.App(appConfig)\n    const maxAgeTest = 1 * 60 * 60\n\n    const setImgData = (obj) =>{\n        setImgFile(obj)\n        var file = obj\n        const reader = new FileReader();\n        reader.onload = (event) => {\n        const base64 = event.target.result.split(\",\").pop()\n          setImgData64(base64)\n        //   console.log(base64);\n        };\n        reader.readAsDataURL(file);\n      }\n    const closeModal = () =>{\n        setNewCarObj({name: '', category: '', color: '', wheels: '', upgrades: ''})\n        props.handleClose()\n    }\n\n\n    // const onDrop = useCallback(acceptedFiles => {\n        \n        // var file = acceptedFiles[0]\n        // const reader = new FileReader();\n        // reader.onload = (event) => {\n        // setImgFile(acceptedFiles[0])\n        // const base64 = event.target.result.split(\",\").pop()\n        //   setImgData64(base64)\n        // //   console.log(event.target.result);\n        // };\n        // reader.readAsDataURL(file);\n    //     // Do something with the files\n    //   }, [])\n    // const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\n    \n    const carColors = ['White', 'Black', 'Grey', 'Blue', 'Silver', 'Red', 'Orange', 'Bronze', 'Yellow', 'Green', 'Navy']\n    const carCategories = ['Dream Car', 'Daily Driver', 'Vehicle #2']\n    const [newCarObj, setNewCarObj] = useState({name: '', category: 'Dream Car', color: 'White', wheels: '', upgrade: ''})\n\n    const handleChange = (e) =>{\n        setNewCarObj({\n            ...newCarObj,\n            [e.target.name]: e.target.value\n        })\n    }\n    const createToken = (userData) =>{\n        return jwt.sign({ userData: userData }, process.env.REACT_APP_JWT_SECRET, {expiresIn: maxAgeTest});\n    }\n\n \n\n    const handleSubmit = async (e) =>{\n        e.preventDefault()\n        const baseImgUrl = 'https://s3.amazonaws.com/images.test.smokeshow/'\n        const imgId = new Date().getTime()\n        const filekey = props.profileUser.userId + '/my-cars/' + imgId\n        const imgUrlWithKey = baseImgUrl + filekey\n        const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME);\n        const collectionUsers = mongo.db(process.env.REACT_APP_REALM_DB_NAME).collection(\"users\")\n        const collectionMyCars = mongo.db(process.env.REACT_APP_REALM_DB_NAME).collection(\"my-cars\")\n\n        const newCarData = {\n            name: newCarObj.name,\n            upgrades: newCarObj.upgrades,\n            wheels: newCarObj.wheels,\n            imgUrl: imgUrlWithKey,\n            category: newCarObj.category,\n            color: newCarObj.color,\n            userId: props.profileUser.userId,\n            performance: newCarObj.performance\n        }\n        if(app.currentUser.id === props.profileUser.userId){\n            \n            try{\n                await app.currentUser.functions.putImageObjToS3(imgData64, bucketName, filekey, imgFile.type).then( async res =>{\n                    \n                    try{\n                        await collectionMyCars.insertOne(newCarData).then(async res =>{\n                            console.log('res', res)\n                            console.log('inserted', res.insertedId)\n                            await collectionUsers.updateOne(\n                                { \"userId\": app.currentUser.id },\n                                {$push: { myCars:  res.insertedId}},\n                                { upsert: true }\n                                ).then(res =>{\n                                    console.log('res', res)\n                                    const oldArr = props.profileUser.myCars\n                                    const cars = {myCars: oldArr.push(newCarData)}\n                                    props.updateProfileData(cars, 'myCars')\n                                    props.updateCarData(newCarData)\n                                    closeModal()\n                                })\n                        })\n                    //     await mongoCollection.updateOne(\n                    //         { \"userId\": app.currentUser.id},\n                    //         {\n                    //          $push: { myCars: newCarData }\n                    //         }\n                    //         ).then(res =>{\n                    //             console.log('res', res)\n                    //             const oldArr = props.profileUser.myCars\n                    //             const cars = {myCars: oldArr.push(newCarData)}\n                    //             props.updateProfileData(cars, 'myCars')\n                    //             closeModal()\n                    //         })\n                    }catch(err){\n                        console.log(err)\n                    }\n                })\n            }catch(err){\n                console.log(err)\n            }\n        }else{\n            console.log('warning current user and the login user do not match')\n            const token = localStorage.getItem('session_token')\n            const decoded = jwt.verify(token, process.env.REACT_APP_JWT_SECRET)\n            const credentials = Realm.Credentials.emailPassword(decoded.userData.login.email, decoded.userData.login.password)\n            \n            try{\n                await app.logIn(credentials).then(user =>{\n                    user.functions.putImageObjToS3(imgData64, bucketName, filekey, imgFile.type).then( async res =>{\n             \n                        try{\n                            await collectionMyCars.insertOne(newCarData).then(async res =>{\n                                console.log('res', res)\n                                console.log('inserted', res.insertedId)\n                                await collectionUsers.updateOne(\n                                    { \"userId\": app.currentUser.id },\n                                    {$push: { myCars:  res.insertedId}},\n                                    { upsert: true }\n                                    ).then(res =>{\n                                        console.log('res', res)\n                                        const oldArr = props.profileUser.myCars\n                                        const cars = {myCars: oldArr.push(newCarData)}\n                                        props.updateProfileData(cars, 'myCars')\n                                        closeModal()\n                                    })\n                            })\n                        }catch(err){\n                            console.log(err)\n                        }\n                    })\n                    \n                })\n            }catch(err){\n                console.log(err)\n            }\n        }\n    }\n        \n\n\n    return(\n    <Fragment>\n        <Modal show={props.show} onHide={props.handleClose} className=\"modal-wrapper-bio\">\n            <Modal.Header closeButton>\n            </Modal.Header>\n            <Modal.Body>\n                <Row className=\"bio-modal-inner-wrapper\">\n                    <Col sm={6} className=\"\">\n                    <ImageUpload fileObj={setImgData} />\n\n                    {/* <div {...getRootProps()} className=\"dropzone-wrapper\">\n                        <input {...getInputProps()} />\n                        {\n                            isDragActive ?\n                            <p>Drop the files here ...</p> :\n                            <div className=\"drag-dropzone\">\n                                <div className=\"bio-modal-container\">\n                                    <img src={uploadIcon} alt=\"upload files here\" />\n                                    <p>Drag and drop or click to upload an image</p>\n                                    <p>*3MB max image file size<br/>\n                                    *accepted file formats: jpg, png, gif</p>\n                                </div>\n\n                            </div>\n                        }\n                    </div> */}\n                    \n                    </Col>\n                    <Col sm={6}>\n                    <Form>\n                        <Form.Group >\n                            <Form.Label>Category</Form.Label>\n                            <Form.Control as=\"select\"  onChange={handleChange} name=\"category\">\n                            {carCategories.map((category, index) =>{\n                                return(\n                                    <option key={category + index}>{category}</option>\n                                )\n                            })}\n\n                            </Form.Control>\n                        </Form.Group>\n                        <br/>\n                        <Form.Group >\n                            <Form.Label>Car name</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"Enter car name e.g. maker, model, year\" onChange={handleChange} name=\"name\"/>\n                        </Form.Group>\n                        <br/>\n                        <Form.Group >\n                            <Form.Label>Color</Form.Label>\n                            {/* <Form.Control type=\"text\" placeholder=\"Select your color\" onChange={handleChange} name=\"color\" /> */}\n                            <Form.Control as=\"select\" onChange={handleChange} name=\"color\">\n                            {carColors.map((color, index) =>{\n                                return(\n                                    <option key={color + index}>{color}</option>\n                                )\n                            })}\n                                \n                            </Form.Control>\n                        </Form.Group>\n                        <br/>\n                        <Form.Group >\n                            <Form.Label>Wheels</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"Enter your wheel\" onChange={handleChange} name=\"wheels\"/>\n                        </Form.Group>\n                        <br/>\n                        <Form.Group >\n                            <Form.Label>Performance</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"Enter your performance\" onChange={handleChange} name=\"performance\" />\n                        </Form.Group>\n                        <br/>\n                        <Form.Group >\n                            <Form.Label>Upgrades</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"Enter your update\" onChange={handleChange} name=\"upgrades\" />\n                        </Form.Group>\n                        <br/><br/>\n                        <Row>\n                            <Col sm={6}>\n                                <Button variant=\"secondary\" onClick={closeModal} className=\"cancel-btn\" > \n                                    Cancel\n                                </Button>\n                            </Col>\n                            <Col sm={6}>\n                                <Button variant=\"primary\" type=\"submit\" onClick={handleSubmit} className=\"save-changes-btn\">\n                                Add my new car\n                                </Button>\n                                {/* <br></br><br/>\n                                <button onClick={testImgUpload}>test upload</button> */}\n                            </Col>                          \n                        </Row>\n                    </Form>\n                    </Col>\n                </Row>\n            </Modal.Body>\n            <Modal.Footer>\n  \n            </Modal.Footer>\n        </Modal>\n    </Fragment>\n    )\n}\n\nexport default CreateNewCar","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Layout/Header.js",["219","220","221","222"],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Layout/Footer.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Fan/SettingModal.js",["223","224","225","226","227"],"import React, { useState, Fragment, useEffect} from 'react'\nimport { Row, Col, Modal, Button, Form, Alert } from 'react-bootstrap'\nimport bioPic from '../../assets/temp-photos/bio/avator-male.jpg'\nimport noImg from '../../assets/global/no_image.jpg'\nimport jwt from 'jsonwebtoken'\nimport * as Realm from \"realm-web\"\n\nconst appConfig = {\n    id: process.env.REACT_APP_REALM_APP_ID,\n    timeout: 10000, // timeout in number of milliseconds\n  };\nconst app = new Realm.App(appConfig);\n\nconst SettingModal = (props) =>{\n    const bucketName = process.env.REACT_APP_AWS_BUCKET_NAME\n    const [imgData64Profile, setImgData64Profile] = useState('')\n    const [imgData64Cover, setImgData64Cover] = useState('')\n    const [userObj, setUserObj] = useState({fname: props.profileUser.fname, lname: props.profileUser.lname, email: props.profileUser.email, username: props.profileUser.username})\n    const [userPw, setUserPw] = useState({newPw: '', conNewPw: '', currentPw: ''})\n    // const [file, setFile] = useState({})\n    const [profilePic, setProfilePic] = useState({})\n    const [coverPic, setCoverPic] = useState({})\n    const [imgThumb, setImgThumb] = useState()\n    const [coverImgThumb, setCoverImgThumb] = useState()\n    const msg = {profilePic: 'Your profile picture is successfully updated', coverPic: 'Your cover picture is successfully updated', userDetails: 'Your account information successfully updated', password: 'Your password is successfully updated'}\n    const [isSuccess, setIsSuccess] = useState({profilePic: false, coverPic: false, userDetails: false, password: false })\n    const [currentBioPic, setCurrentBioPic] = useState()\n    const [currentCover, setCurrentCover] = useState()\n    const [disableBtnStates, setDisableBtnStates] = useState({profilePic: true, coverPic: true, userDetails: true, password: true})\n    const baseImgUrl = 'https://s3.amazonaws.com/images.test.smokeshow/'\n\n    const handleClose = props.handleCloseSetting\n    // const handleShow = props.handleShowSetting\n\n    const handleChange = (e) =>{\n        \n        setUserObj({...userObj,\n            [e.target.name]: e.target.value\n        })\n        if(disableBtnStates){\n            setDisableBtnStates({\n                ...disableBtnStates,\n                userDetails: false\n            })\n        }\n\n    }\n    const handleChangePw = (e) =>{\n        setUserPw({\n            ...userPw,\n            [e.target.name]: e.target.value\n        })\n        setDisableBtnStates({\n            ...disableBtnStates,\n            password: false\n        })\n    }\n\n    const profilePicUpload = (e) =>{\n        setProfilePic(e.target.files[0])\n        setImgThumb(URL.createObjectURL(e.target.files[0]))\n        setDisableBtnStates({\n            ...disableBtnStates,\n            profilePic: false\n        })\n        const file = e.target.files[0] \n        const reader = new FileReader()\n        reader.onload = (event) => {\n        const base64 = event.target.result.split(\",\").pop()\n          setImgData64Profile(base64)\n        };\n        reader.readAsDataURL(file)\n    }\n    const saveProfilePic = async () =>{\n        // console.log('current', app.currentUser.id)\n        const imgId = new Date().getTime()\n        const filekey = props.profileUser.userId + '/profile/' + imgId\n        const imgUrlWithKey = baseImgUrl + filekey\n        if(app.currentUser.id === props.profileUser.userId){\n            try{\n                await app.currentUser.functions.putImageObjToS3(imgData64Profile, bucketName, filekey, profilePic.type).then( async res =>{\n                    console.log('res', res)\n                    if(props.profileUser.profilePic !== '' || typeof(props.profileUser.profilePic) !== \"undefined\"){\n                        const currentUrl = props.profileUser.profilePic\n                        const splitted = currentUrl.split('/');\n                        const key = splitted.splice(4, 7).join(\"/\")\n                        deleteImgObj(key)\n                    }\n                    const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n                    const collectionUser = mongo.db(\"smoke-show\").collection(\"users\")\n                    try{\n                        await collectionUser.updateOne(\n                            { \"userId\": app.currentUser.id},\n                            { \"$set\": { \"profilePic\": imgUrlWithKey } },\n                            { upsert: true}\n                        ).then(res =>{\n                            console.log('res', res)\n                            setIsSuccess({\n                                ...isSuccess,\n                                profilePic: true\n                            })\n                            setDisableBtnStates({\n                                ...disableBtnStates,\n                                profilePic: true\n                            })\n                            props.updateProfileData(imgUrlWithKey, \"profilePic\")\n                        })\n                    }catch(err){\n                        console.log(err)\n                    }\n                })\n            }catch(err){\n            console.log(err)\n            }\n        }else{\n        console.log('I have to debug', app.currentUser.id)\n    \n        }\n    }\n    const coverPicUpload = (e) =>{\n        setCoverPic(e.target.files[0])\n        setCoverImgThumb(URL.createObjectURL(e.target.files[0]))\n        setDisableBtnStates({\n            ...disableBtnStates,\n            coverPic: false\n        })\n        const file = e.target.files[0] \n        const reader = new FileReader()\n        reader.onload = (event) => {\n        const base64 = event.target.result.split(\",\").pop()\n          setImgData64Cover(base64)\n        };\n        reader.readAsDataURL(file)\n    }\n    const saveProfileCover = async  (e) =>{\n        const imgId = new Date().getTime()\n        const filekey = props.profileUser.userId + '/profile/' + imgId\n        const imgUrlWithKey = baseImgUrl + filekey\n        const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n        if(app.currentUser.id === props.profileUser.userId){\n            try{\n                await app.currentUser.functions.putImageObjToS3(imgData64Cover, bucketName, filekey, coverPic.type).then( async res =>{\n                    console.log('res', res)\n                    if(props.profileUser.profileCover !== '' || typeof(props.profileUser.profileCover) !== \"undefined\"){\n                        const currentUrl = props.profileUser.profileCover\n                        const splitted = currentUrl.split('/');\n                        const key = splitted.splice(4, 7).join(\"/\")\n                        deleteImgObj(key)\n                    }\n                    \n                    const collectionUser = mongo.db(\"smoke-show\").collection(\"users\")\n                    try{\n                        await collectionUser.updateOne(\n                            { \"userId\": app.currentUser.id},\n                            { \"$set\": { \"profileCover\": imgUrlWithKey } },\n                            { upsert: true}\n                        ).then(res =>{\n                            console.log('res', res)\n                            setIsSuccess({\n                                ...isSuccess,\n                                coverPic: true\n                            })\n                            setDisableBtnStates({\n                                ...disableBtnStates,\n                                coverPic: true\n                            })\n                            props.updateProfileData(imgUrlWithKey, 'profileCover')\n                        })\n                    }catch(err){\n                        console.log(err)\n                    }\n                })\n            }catch(err){\n            console.log(err)\n            }\n        }else{\n            console.log('I have to debug')\n            \n            \n        }\n    }\n\n    const handleUpdateProfile = async (e) =>{\n        e.preventDefault()\n        const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n        const collectionUser = mongo.db(\"smoke-show\").collection(\"users\")\n       \n        if(app.currentUser.id === props.profileUser.userId){\n            try{\n                await collectionUser.updateOne(\n                    { \"userId\": app.currentUser.id},\n                    {\n                        \"$set\": {\n                            \"fname\": userObj.fname,\n                            \"lname\": userObj.lname,\n                            \"username\": userObj.username\n                          }\n                    },\n                    { upsert: true}\n                ).then( res =>{\n                    console.log(res)\n                    setIsSuccess({\n                        ...isSuccess,\n                        userDetails: true\n                    })\n                    setDisableBtnStates({\n                        ...disableBtnStates,\n                        userDetails: true\n                    })\n                    props.updateUserDetails(userObj.fname, userObj.lname, userObj.username)\n                })\n            }catch(err){ console.log(err) }\n            \n        }else{\n            console.log('write login function')\n            console.log('id', app.currentUser.id)\n        }\n        \n    }\n\nconst deleteImgObj = async (key) =>{\n\n    if(app.currentUser.id === props.profileUser.userId){\n        try{\n            await app.currentUser.functions.deleteImageObjToS3(bucketName, key).then(res =>{\n                console.log('res', res)\n            })\n        }catch(err){console.log(err)}\n    }\n}\n\n    useEffect(() => {\n        if( typeof(props.profileUser.profilePic) == 'undefined' || props.profileUser.profilePic  == ''){\n            setCurrentBioPic(bioPic)\n        \n        }else{\n            setCurrentBioPic(props.profileUser.profilePic)\n        }\n        setUserObj({...userObj, profilePic: bioPic})\n        if(props.profileUser.profileCover == '' || typeof(props.profileUser.profileCover) == \"undefined\"){\n            setCurrentCover(noImg)\n        }else{\n            setCurrentCover(props.profileUser.profileCover)\n        }\n      \n        \n    }, [])\n\n    return(\n    <Fragment>\n        <Modal className=\"modal-wrapper-bio\" show={props.show} onHide={handleClose}>\n            <Modal.Header closeButton>\n            </Modal.Header>\n            <Modal.Body>\n                <Row className=\"bio-modal-inner-wrapper\">\n                    <Col sm={6} className=\"\">\n                    <p className=\"heading-modal\">Your profile picture</p>\n                    <Row>\n                    \n                        <Col sm={4}>\n                            <div className=\"change-bio-pic-wrapper\">\n                                <img src={imgThumb ? imgThumb : currentBioPic} alt=\"user avator\" className=\"change-pic\" />\n                            </div>\n                            \n                        </Col>\n                        <Col sm={8} className=\"setting-file-btn\" >\n                        \n                            <Form>\n                                <Form.Group>\n                                    <Form.File \n                                    id=\"bio-pic\"\n                                    label={profilePic.name ? profilePic.name : '' }\n                                    onChange={profilePicUpload}\n                                    custom\n                                     />\n                                </Form.Group>\n                                <small >Maximum file size is 3MB.</small>\n                                {isSuccess.profilePic ? <Alert variant=\"success\" style={{padding: '5px', marginTop: '1rem', textAlign:'center'}}><small>{msg.profilePic}</small></Alert> :\n                                <div style={{marginTop: '1rem'}}></div>\n                                }\n                                <Button variant=\"primary\" onClick={saveProfilePic} className=\"save-changes-btn\" disabled={disableBtnStates.profilePic}>\n                                Upload\n                                </Button>\n                                \n                            </Form>\n                        </Col>\n                    </Row>\n                    <hr />\n                    <div className=\"spacer-2rem\"></div>\n                    <p className=\"heading-modal\">Your account information</p>\n                              \n                    <Form>\n                        <Row>\n                            <Col sm={6}>\n                                <Form.Group >\n                                    <Form.Label>First Name</Form.Label>\n                                    <Form.Control name=\"fname\" type=\"text\" placeholder={props.profileUser.fname ? props.profileUser.fname : \"Enter your first name\"} onChange={handleChange} />\n                                </Form.Group>\n                            </Col>\n                            <Col sm={6}>\n                                <Form.Group >\n                                    <Form.Label>Last Name</Form.Label>\n                                    <Form.Control name=\"lname\" type=\"text\" placeholder={props.profileUser.lname ? props.profileUser.lname : \"Enter your first name\"} onChange={handleChange} />\n                                </Form.Group>\n                            </Col>\n                        </Row>\n                        \n                        <br/>\n                        <Form.Group >\n                            <Form.Label>Email</Form.Label>\n                            <Form.Control type=\"email\" name=\"email\" placeholder={props.profileUser.email ? props.profileUser.email: \"Please add your email\"} disabled />\n                        </Form.Group>\n                        <br/>\n                        <Form.Group >\n                            <Form.Label>Username</Form.Label>\n                            <Form.Control type=\"text\" name=\"username\" placeholder={props.profileUser.username ? props.profileUser.username : \"Please add your username\"} onChange={handleChange} />\n                        </Form.Group>\n                        <br/>\n                        {isSuccess.userDetails ? <Alert variant=\"success\" style={{padding: '5px', marginTop: '1rem', textAlign:'center'}}><small>{msg.userDetails}</small></Alert> : \"\"}\n                        <Button variant=\"primary\" onClick={handleUpdateProfile} className=\"save-changes-btn\" disabled={disableBtnStates.userDetails}>\n                                Save Changes\n                        </Button>\n                    </Form>\n                    </Col>\n                    <Col sm={6}>\n                        <p className=\"heading-modal\">Your cover image</p>\n                        <Row>\n                            <Col sm={4}>\n                                <div className=\"change-bio-pic-wrapper\">\n                                    <img src={coverImgThumb ? coverImgThumb : currentCover} alt=\"user uploaded photo\" className=\"change-pic\" />\n                                </div>\n                                \n                            </Col>\n                            <Col sm={8} className=\"setting-file-btn\" >\n                                <Form>\n                                    <Form.Group>\n                                        <Form.File \n                                        // id=\"exampleFormControlFile2\" className=\"upload-file-btn\"\n                                        id=\"bio-pic\"\n                                        label={coverPic.name ? coverPic.name : ''}\n                                        onChange={coverPicUpload}\n                                        custom\n                                        />\n                                    </Form.Group>\n                                    <small >Maximum file size 3MB.</small>\n                                    {isSuccess.coverPic ? <Alert variant=\"success\" style={{padding: '5px', marginTop: '1rem', textAlign:'center'}}><small>{msg.coverPic}</small></Alert> :\n                                    <div style={{marginTop: '1rem'}}></div>\n                                    }\n                                    <Button variant=\"primary\" onClick={saveProfileCover} className=\"save-changes-btn \" disabled={disableBtnStates.coverPic}>\n                                    Upload\n                                    </Button>\n                                </Form>\n                            </Col>\n                        </Row>\n                        \n                        <hr />\n                        <div className=\"spacer-2rem\"></div>\n                        \n                        <p className=\"heading-modal\">Change password</p>\n                        <Form>\n                            <Form.Group >\n                                <Form.Label>Current password</Form.Label>\n                                <Form.Control type=\"password\" placeholder=\"Enter your current password\" name=\"currentPw\" onChange={handleChangePw} />\n                            </Form.Group>\n                            <br/>\n                            <Form.Group >\n                                <Form.Label>New password</Form.Label>\n                                <Form.Control type=\"password\" placeholder=\"Enter your new password\" name=\"newPw\" onChange={handleChangePw} />\n                            </Form.Group>\n                            <br/>\n                            <Form.Group >\n                                <Form.Label>Confirm new password</Form.Label>\n                                <Form.Control type=\"password\" placeholder=\"Confirm your new password\" name=\"conNewPw\" onChange={handleChangePw} />\n                            </Form.Group>\n                            <br/>\n                            { isSuccess.password && <Alert variant=\"success\">{msg.password}</Alert> }\n\n                            <Button variant=\"primary\" onClick={handleClose} className=\"save-changes-btn\" disabled={disableBtnStates.password}>\n                                    Save new password\n                            </Button>\n                        </Form>\n                    </Col>\n                </Row>\n                \n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"primary\" onClick={handleClose} className=\"save-changes-btn btn-close-settings\">\n                        Close\n                </Button>\n                {/* <Button variant=\"primary\" onClick={testDelete} className=\"save-changes-btn btn-close-settings\">\n                        test delete\n                </Button> */}\n            </Modal.Footer>\n        </Modal>\n    </Fragment>\n    )\n}\n\nexport default SettingModal","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Layout/SignUpModal.js",["228","229","230"],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Layout/LoginModal.js",["231","232","233","234"],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/store/actions/userActions.js",["235"],"\nimport * as Realm from \"realm-web\"\n\nconst getApp = Realm.App.getApp(process.env.REACT_APP_REALM_APP_ID);\n\nexport const createNewUser = (userObj) =>{\n    //with thunk, we can reutrn function but otherwise, return state\n    \n    return (dispatch, getState) =>{\n        //make async call here\n        // await getApp.emailPasswordAuth.registerUser(userObj.email, userObj.password).then(res =>{\n        //     console.log('response', res)\n            dispatch({type: 'CREATE_USER', userObj})\n        // })\n        \n    }\n}\n\n","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/store/actions/authActions.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Shopify/Cart.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Shopify/Products.js",["236"],"import React, { Component } from 'react';\nimport Product from './Product';\nimport { Row, Container } from 'react-bootstrap'\n\nclass Products extends Component {\n  render() {\n    let products = this.props.products.map((product) => {\n      return (\n        <Product\n          addVariantToCart={this.props.addVariantToCart}\n          client={this.props.client}\n          key={product.id.toString()}\n          product={product}\n        />\n      );\n    });\n\n    return (\n      <div className=\"width-adj-shop\">\n        <Row>\n          {products}\n        </Row>\n      </div>\n      \n    );\n  }\n}\n\nexport default Products;\n","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Shopify/Product.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Shopify/LineItem.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Shopify/VariantSelector.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Fan/ImageUpload.js",["237"],"import React from 'react'\nimport { useState, useEffect } from 'react'\nimport uploadIcon from '../../assets/global/upload.svg'\n\nimport { useDropzone } from 'react-dropzone'\n\n  const thumbsContainer = {\n    display: 'flex',\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    marginTop: 16\n  };\n  \n  const thumb = {\n    display: 'inline-flex',\n    borderRadius: 2,\n    border: '1px solid #eaeaea',\n    marginBottom: 8,\n    marginRight: 8,\n    width: 100,\n    height: 100,\n    padding: 4,\n    boxSizing: 'border-box'\n  };\n  \n  const thumbInner = {\n    display: 'flex',\n    minWidth: 0,\n    overflow: 'hidden'\n  };\n  \n  const img = {\n    display: 'block',\n    width: 'auto',\n    height: '100%'\n  };\n\n\nconst ImageUpload = (props ) => {\n    \n    const [files, setFiles] = useState([])\n    const [msg, setMsg] = useState('')\n    const [uploaded, setUploaded] = useState(false)\n\n    const getFileData = (obj) => {\n        // Create a root reference\n        console.log('file obj', obj)\n        // const newValue = files[0]\n        props.fileObj(obj)\n    }\n\n    const {getRootProps, getInputProps, isDragActive} = useDropzone({\n            accept: 'image/*',\n            onDrop: acceptedFiles => {\n              \n              if(acceptedFiles.length > 1){\n                  setMsg('You can upload only one image.')\n              }else{\n                    getFileData(acceptedFiles[0])\n                    setUploaded(true)\n                    if(props.imgChange){\n                      props.imgChange(true)\n                    }\n                    \n                    setFiles(acceptedFiles.map( file => Object.assign(file, {\n                              preview: URL.createObjectURL(file)\n                          \n                        })\n                        ))\n              }\n            }\n          })\n\n    const thumbs = files.map(file => (\n      <div style={thumb} key={file.name}>\n        <div style={thumbInner}>\n          <img\n            src={file.preview}\n            style={img}\n          />\n        </div>\n      </div>\n    ));\n  \n    useEffect(() => {\n      // Make sure to revoke the data uris to avoid memory leaks\n        files.forEach(file => URL.revokeObjectURL(file.preview));\n    }, [files]);\n\n    return ( \n        <React.Fragment>\n            {msg ? <p>{msg}</p> : ''}\n                <div {...getRootProps({className: 'dropzone'})} className=\"dropzone dropzone-wrapper\" >\n                    <input {...getInputProps()} required/>\n                    {\n                            isDragActive ?\n                            <p>Drop the files here ...</p> :\n                            <div className=\"drag-dropzone\">\n                                <div className=\"bio-modal-container\">\n                                    <img src={uploadIcon} alt=\"upload files here\" />\n                                    <p style={{padding: '5px'}}>\n                                      { uploaded ? 'Change Image' : 'Drop an image file here or click to upload an image'}\n                                    </p>\n                                    <p>*3MB max image file size<br/>\n                                    *accepted file formats: jpg, png, gif</p>\n                                    <aside style={thumbsContainer}>\n                                        {uploaded ? thumbs : ''}\n                                    </aside>\n                                </div>\n                                \n                            </div>\n                        }\n                    \n                </div>\n                \n         \n        </React.Fragment>\n\n     );\n}\n \nexport default ImageUpload;",{"ruleId":"238","replacedBy":"239"},{"ruleId":"240","replacedBy":"241"},{"ruleId":"242","severity":1,"message":"243","line":48,"column":10,"nodeType":"244","endLine":48,"endColumn":12,"suggestions":"245"},{"ruleId":"246","severity":1,"message":"247","line":3,"column":39,"nodeType":"248","messageId":"249","endLine":3,"endColumn":45},{"ruleId":"250","severity":1,"message":"251","line":94,"column":17,"nodeType":"252","messageId":"253","endLine":94,"endColumn":23},{"ruleId":"246","severity":1,"message":"254","line":120,"column":13,"nodeType":"248","messageId":"249","endLine":120,"endColumn":23},{"ruleId":"242","severity":1,"message":"255","line":106,"column":8,"nodeType":"244","endLine":106,"endColumn":10,"suggestions":"256"},{"ruleId":"246","severity":1,"message":"257","line":14,"column":22,"nodeType":"248","messageId":"249","endLine":14,"endColumn":33},{"ruleId":"246","severity":1,"message":"258","line":15,"column":22,"nodeType":"248","messageId":"249","endLine":15,"endColumn":33},{"ruleId":"246","severity":1,"message":"259","line":16,"column":17,"nodeType":"248","messageId":"249","endLine":16,"endColumn":23},{"ruleId":"246","severity":1,"message":"260","line":15,"column":8,"nodeType":"248","messageId":"249","endLine":15,"endColumn":17},{"ruleId":"246","severity":1,"message":"261","line":26,"column":12,"nodeType":"248","messageId":"249","endLine":26,"endColumn":21},{"ruleId":"246","severity":1,"message":"262","line":26,"column":23,"nodeType":"248","messageId":"249","endLine":26,"endColumn":35},{"ruleId":"263","severity":1,"message":"264","line":66,"column":52,"nodeType":"265","messageId":"266","endLine":66,"endColumn":54},{"ruleId":"246","severity":1,"message":"267","line":257,"column":11,"nodeType":"248","messageId":"249","endLine":257,"endColumn":21},{"ruleId":"242","severity":1,"message":"268","line":68,"column":4,"nodeType":"244","endLine":68,"endColumn":6,"suggestions":"269"},{"ruleId":"246","severity":1,"message":"270","line":26,"column":23,"nodeType":"248","messageId":"249","endLine":26,"endColumn":25},{"ruleId":"250","severity":1,"message":"251","line":56,"column":35,"nodeType":"271","messageId":"272","endLine":56,"endColumn":37},{"ruleId":"242","severity":1,"message":"273","line":90,"column":16,"nodeType":"271","endLine":106,"endColumn":8},{"ruleId":"242","severity":1,"message":"274","line":109,"column":10,"nodeType":"244","endLine":109,"endColumn":12,"suggestions":"275"},{"ruleId":"276","severity":1,"message":"277","line":121,"column":21,"nodeType":"278","endLine":121,"endColumn":85},{"ruleId":"246","severity":1,"message":"279","line":12,"column":8,"nodeType":"248","messageId":"249","endLine":12,"endColumn":17},{"ruleId":"242","severity":1,"message":"280","line":253,"column":8,"nodeType":"244","endLine":253,"endColumn":10,"suggestions":"281"},{"ruleId":"282","severity":1,"message":"283","line":270,"column":21,"nodeType":"278","endLine":281,"endColumn":24},{"ruleId":"263","severity":1,"message":"264","line":279,"column":51,"nodeType":"265","messageId":"266","endLine":279,"endColumn":53},{"ruleId":"282","severity":1,"message":"283","line":286,"column":29,"nodeType":"278","endLine":286,"endColumn":130},{"ruleId":"246","severity":1,"message":"284","line":5,"column":23,"nodeType":"248","messageId":"249","endLine":5,"endColumn":31},{"ruleId":"246","severity":1,"message":"285","line":21,"column":12,"nodeType":"248","messageId":"249","endLine":21,"endColumn":21},{"ruleId":"246","severity":1,"message":"286","line":24,"column":11,"nodeType":"248","messageId":"249","endLine":24,"endColumn":19},{"ruleId":"250","severity":1,"message":"251","line":35,"column":23,"nodeType":"252","messageId":"253","endLine":35,"endColumn":29},{"ruleId":"250","severity":1,"message":"251","line":56,"column":32,"nodeType":"271","messageId":"272","endLine":56,"endColumn":34},{"ruleId":"250","severity":1,"message":"251","line":71,"column":22,"nodeType":"271","messageId":"272","endLine":71,"endColumn":24},{"ruleId":"250","severity":1,"message":"287","line":80,"column":43,"nodeType":"288","messageId":"289","endLine":80,"endColumn":52},{"ruleId":"250","severity":1,"message":"290","line":93,"column":43,"nodeType":"271","messageId":"289","endLine":93,"endColumn":45},{"ruleId":"250","severity":1,"message":"291","line":107,"column":48,"nodeType":"271","messageId":"289","endLine":107,"endColumn":50},{"ruleId":"263","severity":1,"message":"264","line":108,"column":25,"nodeType":"265","messageId":"266","endLine":108,"endColumn":27},{"ruleId":"292","severity":1,"message":"293","line":16,"column":1,"nodeType":"294","messageId":"295","endLine":17,"endColumn":13},{"ruleId":"246","severity":1,"message":"296","line":2,"column":15,"nodeType":"248","messageId":"249","endLine":2,"endColumn":18},{"ruleId":"246","severity":1,"message":"254","line":104,"column":13,"nodeType":"248","messageId":"249","endLine":104,"endColumn":23},{"ruleId":"242","severity":1,"message":"297","line":151,"column":8,"nodeType":"244","endLine":151,"endColumn":10,"suggestions":"298"},{"ruleId":"246","severity":1,"message":"299","line":13,"column":11,"nodeType":"248","messageId":"249","endLine":13,"endColumn":20},{"ruleId":"246","severity":1,"message":"300","line":1,"column":37,"nodeType":"248","messageId":"249","endLine":1,"endColumn":48},{"ruleId":"246","severity":1,"message":"301","line":60,"column":11,"nodeType":"248","messageId":"249","endLine":60,"endColumn":22},{"ruleId":"246","severity":1,"message":"302","line":3,"column":23,"nodeType":"248","messageId":"249","endLine":3,"endColumn":27},{"ruleId":"246","severity":1,"message":"303","line":3,"column":29,"nodeType":"248","messageId":"249","endLine":3,"endColumn":40},{"ruleId":"276","severity":1,"message":"277","line":44,"column":133,"nodeType":"278","endLine":44,"endColumn":187},{"ruleId":"242","severity":1,"message":"304","line":65,"column":9,"nodeType":"244","endLine":65,"endColumn":11,"suggestions":"305"},{"ruleId":"246","severity":1,"message":"306","line":5,"column":8,"nodeType":"248","messageId":"249","endLine":5,"endColumn":11},{"ruleId":"263","severity":1,"message":"264","line":233,"column":98,"nodeType":"265","messageId":"266","endLine":233,"endColumn":100},{"ruleId":"263","severity":1,"message":"264","line":240,"column":43,"nodeType":"265","messageId":"266","endLine":240,"endColumn":45},{"ruleId":"242","severity":1,"message":"307","line":247,"column":8,"nodeType":"244","endLine":247,"endColumn":10,"suggestions":"308"},{"ruleId":"282","severity":1,"message":"283","line":330,"column":37,"nodeType":"278","endLine":330,"endColumn":144},{"ruleId":"246","severity":1,"message":"309","line":57,"column":23,"nodeType":"248","messageId":"249","endLine":57,"endColumn":28},{"ruleId":"246","severity":1,"message":"310","line":58,"column":23,"nodeType":"248","messageId":"249","endLine":58,"endColumn":30},{"ruleId":"311","severity":1,"message":"312","line":116,"column":106,"nodeType":"313","endLine":116,"endColumn":122},{"ruleId":"246","severity":1,"message":"314","line":18,"column":11,"nodeType":"248","messageId":"249","endLine":18,"endColumn":14},{"ruleId":"246","severity":1,"message":"315","line":21,"column":11,"nodeType":"248","messageId":"249","endLine":21,"endColumn":20},{"ruleId":"246","severity":1,"message":"316","line":27,"column":11,"nodeType":"248","messageId":"249","endLine":27,"endColumn":17},{"ruleId":"246","severity":1,"message":"317","line":44,"column":11,"nodeType":"248","messageId":"249","endLine":44,"endColumn":22},{"ruleId":"246","severity":1,"message":"318","line":4,"column":7,"nodeType":"248","messageId":"249","endLine":4,"endColumn":13},{"ruleId":"246","severity":1,"message":"319","line":3,"column":15,"nodeType":"248","messageId":"249","endLine":3,"endColumn":24},{"ruleId":"276","severity":1,"message":"277","line":77,"column":11,"nodeType":"278","endLine":80,"endColumn":13},"no-native-reassign",["320"],"no-negated-in-lhs",["321"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getInfluencers'. Either include it or remove the dependency array.","ArrayExpression",["322"],"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","'userLogged' is defined but never used.","React Hook useEffect has a missing dependency: 'confirmUser'. Either include it or remove the dependency array.",["323"],"'setHasError' is assigned a value but never used.","'setHasReset' is assigned a value but never used.","'setMsg' is assigned a value but never used.","'driveIcon' is defined but never used.","'activeTab' is assigned a value but never used.","'setActiveTab' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'getImgData' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.",["324"],"'id' is assigned a value but never used.","ArrowFunctionExpression","expectedInside","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","React Hook useEffect has a missing dependency: 'getInfluencer'. Either include it or remove the dependency array.",["325"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'dayDriver' is defined but never used.","React Hook useEffect has missing dependencies: 'getDataAsPublic' and 'getDataAsTheUser'. Either include them or remove the dependency array.",["326"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","'carTypes' is defined but never used.","'carMakers' is assigned a value but never used.","'getMaker' is assigned a value but never used.","Array.prototype.filter() expects a value to be returned at the end of function.","FunctionExpression","expectedAtEnd","Array.prototype.map() expects a value to be returned at the end of arrow function.","Array.prototype.filter() expects a value to be returned at the end of arrow function.","no-unreachable","Unreachable code.","ExpressionStatement","unreachableCode","'Col' is defined but never used.","React Hook useEffect has a missing dependency: 'getComments'. Either include it or remove the dependency array.",["327"],"'parentRef' is assigned a value but never used.","'useCallback' is defined but never used.","'createToken' is assigned a value but never used.","'Form' is defined but never used.","'FormControl' is defined but never used.","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["328"],"'jwt' is defined but never used.","React Hook useEffect has missing dependencies: 'props.profileUser.profileCover', 'props.profileUser.profilePic', and 'userObj'. Either include them or remove the dependency array. If 'setCurrentBioPic' needs the current value of 'props.profileUser.profilePic', you can also switch to useReducer instead of useState and read 'props.profileUser.profilePic' in the reducer.",["329"],"'token' is assigned a value but never used.","'tokenId' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'uid' is assigned a value but never used.","'appConfig' is assigned a value but never used.","'maxAge' is assigned a value but never used.","'closeWindow' is assigned a value but never used.","'getApp' is assigned a value but never used.","'Container' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"330","fix":"331"},{"desc":"332","fix":"333"},{"desc":"334","fix":"335"},{"desc":"336","fix":"337"},{"desc":"338","fix":"339"},{"desc":"340","fix":"341"},{"desc":"342","fix":"343"},{"desc":"344","fix":"345"},"Update the dependencies array to be: [getInfluencers]",{"range":"346","text":"347"},"Update the dependencies array to be: [confirmUser]",{"range":"348","text":"349"},"Update the dependencies array to be: [fetchData]",{"range":"350","text":"351"},"Update the dependencies array to be: [getInfluencer]",{"range":"352","text":"353"},"Update the dependencies array to be: [getDataAsPublic, getDataAsTheUser]",{"range":"354","text":"355"},"Update the dependencies array to be: [getComments]",{"range":"356","text":"357"},"Update the dependencies array to be: [props]",{"range":"358","text":"359"},"Update the dependencies array to be: [props.profileUser.profileCover, props.profileUser.profilePic, userObj]",{"range":"360","text":"361"},[1643,1645],"[getInfluencers]",[4111,4113],"[confirmUser]",[1999,2001],"[fetchData]",[4271,4273],"[getInfluencer]",[9625,9627],"[getDataAsPublic, getDataAsTheUser]",[5572,5574],"[getComments]",[2512,2514],"[props]",[10149,10151],"[props.profileUser.profileCover, props.profileUser.profilePic, userObj]"]