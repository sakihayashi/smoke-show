[{"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/index.js":"1","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/reportWebVitals.js":"2","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/App.js":"3","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/aws-exports.js":"4","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/store/reducers/rootReducer.js":"5","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/InfluencerIndexPage.js":"6","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/HomePage.js":"7","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/AboutPage.js":"8","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/EmailConfirmation.js":"9","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/NotFoundPage.js":"10","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/ResetPassword.js":"11","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/CarStats.js":"12","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Swagg.js":"13","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Influencer/BioPage.js":"14","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Fan/BioPage.js":"15","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/CarSearch.js":"16","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Giveaways.js":"17","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/store/reducers/authReducer.js":"18","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/store/reducers/userReducer.js":"19","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/commentsTempData.js":"20","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/carTempData.js":"21","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Comments.js":"22","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Layout/Layout.js":"23","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/giveAwayData.js":"24","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/utils/youtubeAPI.js":"25","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Fan/vehicleCard.js":"26","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Fan/CreateNewCar.js":"27","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Layout/Header.js":"28","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Layout/Footer.js":"29","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Fan/SettingModal.js":"30","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Layout/SignUpModal.js":"31","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Layout/LoginModal.js":"32","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/store/actions/userActions.js":"33","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/store/actions/authActions.js":"34","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Shopify/Cart.js":"35","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Shopify/Products.js":"36","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Shopify/Product.js":"37","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Shopify/LineItem.js":"38","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Shopify/VariantSelector.js":"39","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Fan/ImageUpload.js":"40","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Influencer/Garage.js":"41","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Influencer/CreateNewCar.js":"42","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Influencer/ImageUpload.js":"43","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Influencer/SettingModal.js":"44","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Influencer/vehicleCard.js":"45","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Influencer/SubNav.js":"46","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Influencer/Social.js":"47","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Influencer/Swagg.js":"48","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/store/actions/bioActions.js":"49","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/store/reducers/bioReducer.js":"50","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Admin/QueryVideoData.js":"51","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Admin/EditVideoData.js":"52","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Admin/AddCarData.js":"53","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Admin/LoginDiv.js":"54","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Admin/colorDiv.js":"55","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Admin/colorInterior.js":"56","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Admin/FormText.js":"57","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Admin/FormCheckbox.js":"58","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Admin/CheckCarData.js":"59","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Admin/EditVideoDataKirk.js":"60","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Influencer/AllVideos.js":"61","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/store/reducers/influencerReducer.js":"62","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/store/actions/influencerActions.js":"63","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/SpecDiv.js":"64","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Layout/Head.js":"65","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/GiveawayCount.js":"66"},{"size":1122,"mtime":1612536438995,"results":"67","hashOfConfig":"68"},{"size":362,"mtime":1604942454463,"results":"69","hashOfConfig":"68"},{"size":2974,"mtime":1614311741718,"results":"70","hashOfConfig":"68"},{"size":1074,"mtime":1611365886225,"results":"71","hashOfConfig":"68"},{"size":375,"mtime":1613527744386,"results":"72","hashOfConfig":"68"},{"size":7506,"mtime":1614025733469,"results":"73","hashOfConfig":"68"},{"size":16447,"mtime":1614373242476,"results":"74","hashOfConfig":"68"},{"size":4926,"mtime":1614394289606,"results":"75","hashOfConfig":"68"},{"size":10805,"mtime":1614437976004,"results":"76","hashOfConfig":"68"},{"size":873,"mtime":1612402277036,"results":"77","hashOfConfig":"68"},{"size":6186,"mtime":1613325064396,"results":"78","hashOfConfig":"68"},{"size":16572,"mtime":1614370768810,"results":"79","hashOfConfig":"68"},{"size":3606,"mtime":1612402283053,"results":"80","hashOfConfig":"68"},{"size":15724,"mtime":1614373411385,"results":"81","hashOfConfig":"68"},{"size":20486,"mtime":1613878745468,"results":"82","hashOfConfig":"68"},{"size":10805,"mtime":1613355749339,"results":"83","hashOfConfig":"68"},{"size":8064,"mtime":1614444075804,"results":"84","hashOfConfig":"68"},{"size":2324,"mtime":1614450838558,"results":"85","hashOfConfig":"68"},{"size":456,"mtime":1614444728080,"results":"86","hashOfConfig":"68"},{"size":1018,"mtime":1605734313167,"results":"87","hashOfConfig":"68"},{"size":30355,"mtime":1608082226445,"results":"88","hashOfConfig":"68"},{"size":13009,"mtime":1614281392466,"results":"89","hashOfConfig":"68"},{"size":2057,"mtime":1614444685865,"results":"90","hashOfConfig":"68"},{"size":1508,"mtime":1614382073483,"results":"91","hashOfConfig":"68"},{"size":357,"mtime":1613936341740,"results":"92","hashOfConfig":"68"},{"size":13481,"mtime":1614391754613,"results":"93","hashOfConfig":"68"},{"size":11937,"mtime":1613877418773,"results":"94","hashOfConfig":"68"},{"size":5182,"mtime":1614450542606,"results":"95","hashOfConfig":"68"},{"size":373,"mtime":1610140072353,"results":"96","hashOfConfig":"68"},{"size":25533,"mtime":1614109851642,"results":"97","hashOfConfig":"68"},{"size":6155,"mtime":1614451099457,"results":"98","hashOfConfig":"68"},{"size":8312,"mtime":1614450697902,"results":"99","hashOfConfig":"68"},{"size":898,"mtime":1613507009065,"results":"100","hashOfConfig":"68"},{"size":4915,"mtime":1614451074137,"results":"101","hashOfConfig":"68"},{"size":2130,"mtime":1610065399614,"results":"102","hashOfConfig":"68"},{"size":613,"mtime":1610055684017,"results":"103","hashOfConfig":"68"},{"size":4052,"mtime":1610152774195,"results":"104","hashOfConfig":"68"},{"size":2086,"mtime":1596835430000,"results":"105","hashOfConfig":"68"},{"size":546,"mtime":1596835430000,"results":"106","hashOfConfig":"68"},{"size":3909,"mtime":1614110796875,"results":"107","hashOfConfig":"68"},{"size":20796,"mtime":1614091264513,"results":"108","hashOfConfig":"68"},{"size":12219,"mtime":1614007709537,"results":"109","hashOfConfig":"68"},{"size":3876,"mtime":1614110641730,"results":"110","hashOfConfig":"68"},{"size":24921,"mtime":1614110065911,"results":"111","hashOfConfig":"68"},{"size":13080,"mtime":1614008131314,"results":"112","hashOfConfig":"68"},{"size":7163,"mtime":1614444620748,"results":"113","hashOfConfig":"68"},{"size":7046,"mtime":1614091999488,"results":"114","hashOfConfig":"68"},{"size":5570,"mtime":1614095751027,"results":"115","hashOfConfig":"68"},{"size":126,"mtime":1613149275145,"results":"116","hashOfConfig":"68"},{"size":297,"mtime":1613151744775,"results":"117","hashOfConfig":"68"},{"size":13469,"mtime":1614311237409,"results":"118","hashOfConfig":"68"},{"size":9277,"mtime":1614097695062,"results":"119","hashOfConfig":"68"},{"size":29077,"mtime":1614099893826,"results":"120","hashOfConfig":"68"},{"size":1103,"mtime":1613271940405,"results":"121","hashOfConfig":"68"},{"size":956,"mtime":1613342848860,"results":"122","hashOfConfig":"68"},{"size":966,"mtime":1613343118738,"results":"123","hashOfConfig":"68"},{"size":447,"mtime":1613764194210,"results":"124","hashOfConfig":"68"},{"size":693,"mtime":1613757464952,"results":"125","hashOfConfig":"68"},{"size":2993,"mtime":1614097617655,"results":"126","hashOfConfig":"68"},{"size":8776,"mtime":1614097712754,"results":"127","hashOfConfig":"68"},{"size":16079,"mtime":1614365731058,"results":"128","hashOfConfig":"68"},{"size":662,"mtime":1613532378499,"results":"129","hashOfConfig":"68"},{"size":1616,"mtime":1614090874931,"results":"130","hashOfConfig":"68"},{"size":1553,"mtime":1614271943030,"results":"131","hashOfConfig":"68"},{"size":454,"mtime":1614362196984,"results":"132","hashOfConfig":"68"},{"size":8139,"mtime":1614449870608,"results":"133","hashOfConfig":"68"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},"1fkg0if",{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"136"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"136"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"136"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"136"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"136"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"136"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"136"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"136"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"136"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"178","messages":"179","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"136"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"136"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"136"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"209","messages":"210","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"211","messages":"212","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"136"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"136"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229","usedDeprecatedRules":"136"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232","usedDeprecatedRules":"136"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"136"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"136"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"136"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"246","messages":"247","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248","usedDeprecatedRules":"136"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251","usedDeprecatedRules":"136"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"136"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"259","messages":"260","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"261","usedDeprecatedRules":"136"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"264","usedDeprecatedRules":"136"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"277","usedDeprecatedRules":"136"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"280","usedDeprecatedRules":"136"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"283","usedDeprecatedRules":"136"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"286","usedDeprecatedRules":"136"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"289","usedDeprecatedRules":"136"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/index.js",[],["296","297"],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/reportWebVitals.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/App.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/aws-exports.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/store/reducers/rootReducer.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/InfluencerIndexPage.js",["298","299"],"import React, { useEffect, useState } from 'react'\nimport {Helmet} from \"react-helmet\"\nimport { Row, Col, Card, Button } from 'react-bootstrap'\nimport { connect } from 'react-redux'\nimport * as Realm from \"realm-web\"\nimport { Link } from 'react-router-dom'\nimport Layout from './Layout/Layout'\nimport './influencerIndexPage.scss'\nimport jwt from 'jsonwebtoken'\nimport noImg from '../assets/global/no_image.jpg'\nimport short from 'short-uuid'\nimport Logo from '../assets/global/Logo-smoke-show.png'\n\nconst InfluencerIndexPage = () =>{\n\n    const videoEmbedURL = 'https://www.youtube.com/embed/'\n\n    const [influencers, setInfluencers] = useState([])\n    const appConfig = {\n        id: process.env.REACT_APP_REALM_APP_ID,\n        // timeout: 10000, \n        // timeout in number of milliseconds\n      };\n    const app = new Realm.App(appConfig);\n   \n\n    const getInfluencers = async (credentials) =>{\n\n        try{\n            await app.logIn(credentials).then(async user =>{\n                const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n                const mongoCollection = mongo.db(\"smoke-show\").collection(\"influencers\")\n                try {\n            \n                    const filter = {isActive: true} \n                    await mongoCollection.find(filter).then(resAll =>{\n                        console.log('find all', resAll);\n                        setInfluencers(resAll)\n                    })\n                   \n                 }catch(error){console.log(error)}\n            })\n        }catch(err){\n            console.log(err)\n        }\n    }\n\n    useEffect(() => {\n        let token = sessionStorage.getItem('session_token')\n        if(token){\n            jwt.verify(token, process.env.REACT_APP_JWT_SECRET, (err, decoded)=>{\n                if(err){\n                    console.log(err)\n                    const credentials = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTH_PUBLIC_VIEW);\n                    getInfluencers(credentials)\n                }else{\n                    const tokenUser = sessionStorage.getItem('session_user')\n             \n                    const credentials = jwt.verify(tokenUser, process.env.REACT_APP_JWT_SECRET)\n                    getInfluencers(credentials.cre)\n                }\n            });\n            \n         }else{\n            const credentials = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTH_PUBLIC_VIEW);\n            getInfluencers(credentials)\n         }\n        \n\n      }, [])\n\n    return(\n        <Layout>\n        <Helmet>\n          <meta charSet=\"utf-8\" />\n          <title>All influencers | The Smoke Show</title>\n          <meta name=\"description\" content=\"Check out our influencers / authors\" />\n          <meta name=\"robots\" content=\"noindex, nofollow\" />\n          {/* <link rel=\"canonical\" href=\"http://mysite.com/example\" /> */}\n        </Helmet>\n            <div className=\"main-wrapper footer-pos\">\n                <div className=\"spacer-4rem\"></div>\n                <div className=\"title title-adj\">\n                    <h2 >All Influencers</h2>\n                </div>\n                <Row style={{paddingLeft:'-7px', paddingRight:'-7px'}}>\n                {influencers && influencers.map(influencer =>{\n                    const unique = short.generate()\n                    return(\n                        <Col sm={6} md={4} key={unique} className=\"bottom-space\">\n                            <Card className=\"card-influencer\" >\n                                <div className=\"videoWrapper\">\n                                        <iframe src={videoEmbedURL + influencer.featuredVideo.id}\n                                                frameBorder='0'\n                                                allow='autoplay; encrypted-media'\n                                                allowFullScreen\n                                                title='video'\n                                        />\n                                </div>\n                                <Card.Body>\n                                    <Card.Title>{influencer.username}</Card.Title>\n                                    <Card.Text className=\"influencer-desc\">{influencer.desc}</Card.Text>\n                                    <Link \n                                    to={{\n                                        pathname: `/influencer/${influencer.userId}`,\n                                        state: { influencer: influencer }\n                                        // influencer: influencer\n                                    }}\n                                    // activeStyle={{\n                                    //     color: \"gray\"\n                                    // }}\n                                    >\n                                        <Button className=\"login-btn\">See {influencer.username}'s Bio</Button>\n                                    </Link>\n                                    \n                                </Card.Body>\n                            </Card>\n                        </Col>\n                    )\n                    \n                })}\n                <Col sm={6} md={4} >\n                            <Card className=\"card-influencer\" >\n                                <div className=\"videoWrapper\">\n                                <img src={noImg} alt=\"coming soon\" style={{width: '100%'}}/>\n                                <img src={Logo} className=\"overlay-logo\"/>\n                                        {/* <iframe src={videoEmbedURL + influencer.featuredVideo.id}\n                                                frameBorder='0'\n                                                allow='autoplay; encrypted-media'\n                                                allowFullScreen\n                                                title='video'\n                                        /> */}\n                                </div>\n                                <Card.Body>\n                                    <Card.Title>More coming soon</Card.Title>\n                                    <Card.Text className=\"influencer-desc\">We are accepting applications<br/><br/>\n                                    <Link to=\"/about\"><span>Please visit here for the details</span></Link>\n                                    </Card.Text>\n                                    {/* <NavLink \n                                    to={{\n                                        pathname: `/influencer/${influencer.userId}`,\n                                        state: { influencer: influencer }\n                                        // influencer: influencer\n                                    }}\n                                    activeStyle={{\n                                        color: \"gray\"\n                                    }}\n                                    > */}\n                                        <Button className=\"login-btn\" disabled>No bio available</Button>\n                                    {/* </NavLink> */}\n                                    \n                                </Card.Body>\n                            </Card>\n                        </Col>\n                </Row>\n                <div className=\"spacer-4rem\"></div>\n            </div>\n        </Layout>\n        \n    )\n}\nconst mapStateToProps = (state) => {\n    //syntax is propName: state.key of combineReducer.key\n    return{\n      username: state.user.username,\n    }\n  }\n\nexport default connect(mapStateToProps)(InfluencerIndexPage)\n\n","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/HomePage.js",["300","301","302","303","304","305"],"import React, { useEffect, useState, Fragment } from 'react'\nimport {Helmet} from \"react-helmet\"\nimport { Row, Col } from 'react-bootstrap'\nimport { connect } from 'react-redux'\n// import { youtubeAPI } from '../utils/youtubeAPI'\n// import { carTempData } from './carTempData'\n// import { commentsTempData } from './commentsTempData' \n// import Avatar from 'react-avatar'\n// import { v4 as uuidv4 } from 'uuid';\nimport Head from './Layout/Head'\nimport Layout from './Layout/Layout'\nimport '../scss/spinner.css'\nimport './homepage.scss'\nimport jwt from 'jsonwebtoken'\nimport * as Realm from \"realm-web\"\nimport moment from 'moment'\n// import SpecDiv from './SpecDiv'\nimport loadable from '@loadable/component'\n\nconst Comments = loadable(() => import('./Comments'))\nconst SpecDiv = loadable(() => import('./SpecDiv'))\n\n\n// const Comments = React.lazy(() => import('./Comments'))\n\nconst HomePage = (props) =>{\nconst app = new Realm.App({ id: process.env.REACT_APP_REALM_APP_ID })\nconst videoEmbedURL = 'https://www.youtube.com/embed/'\nconst [latestVideos, setLatestVideos] = useState([])\n// const EddieXChannelId = 'UCdOXRB936PKSwx0J7SgF6SQ'\n// const [searchKeyword, setSearchKeyword] = useState('')\n// const [titleStr, setTitleStr] = useState('Your search result')\n// const [searchedCarData, setSearchedCarData] = useState([])\n// const [currentUser, setCurrentUser] = useState('')\n// const [influencerObj, setInfluencerObj] = useState([])\n\n    // const handleChangeKeyword = (e) =>{\n    //     setSearchKeyword(e.target.value)\n    // }\n    // const handleVideoSearch = async e =>{\n    //     e.preventDefault()\n    //     await youtubeAPI.get('/search', {\n    //         params: {\n    //             q: searchKeyword,\n    //             channelId: EddieXChannelId\n    //         }\n    //     }).then(res =>{\n    //         console.log('res from youtube', res)\n    //         setTitleStr(\"EddieX \" + searchKeyword)\n    //         const searchResult = res.data.items\n    //         console.log('is this array?', res.data.items)\n    //         const datayoutube =[]\n    //         searchResult.map(data =>{\n    //             datayoutube.push({\n    //                 videoId: data.id.videoId,\n    //                 youtube:{\n    //                     snippet: {title: data.snippet.title}\n    //                 }\n    //             })\n    //             return\n    //         })\n    //         setSearchedCarData(datayoutube)\n    //         console.log('use state check: ', searchedCarData)\n\n    //     })\n    // }\n    const getVideos = async (credentials) =>{\n        setLatestVideos([])\n        const now = new Date()\n        const days = 7\n        // let dates = []\n\n        // const today = moment(now).format('YYYY-MM-DD')\n        // dates.push(today)\n        const aWeekAgo = moment(now).add(-7, 'day').format('YYYY-MM-DD')\n\n        // for(let i =1; i < days; i++){\n        //     const result = moment(now).add(-[i], 'day').format('YYYY-MM-DD')\n        //     dates.push(result)\n        // }\n    \n        try {\n            await app.logIn(credentials).then(async user =>{\n                const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n                const collectionVideos = mongo.db(\"smoke-show\").collection(\"youtube-videos\")\n                \n                const filter = {'snippet.publishedAt': {$gt: aWeekAgo}}\n                const options = {sort: {\"snippet.publishedAt\": -1}  }\n                await collectionVideos.find(filter, options).then(async videos =>{\n                   \n                    const collectionInfluencer = mongo.db(\"smoke-show\").collection(\"influencers\")\n                    const collectionCars = mongo.db(\"smoke-show\").collection(\"cars\")\n                    const collectionManual = mongo.db(\"smoke-show\").collection(\"cars-manual\")\n                    \n                    const result = videos.map(async video =>{\n                        const filterCar = {_id: {\"$oid\": video.carDataId}}\n                        const filterInflu = {userId: video.userId}\n\n                        try {\n                            await collectionInfluencer.findOne(filterInflu).then(async influencer =>{\n                                let formattedFans;\n                                const collectionFans = mongo.db(\"smoke-show\").collection(`fans-${influencer.username}`)\n                                video.influencer = influencer\n                                try {\n                                    collectionFans.count().then(async num =>{\n                                        if(num > 999){\n                                            formattedFans = Math.sign(num)*((Math.abs(num)/1000).toFixed(1)) + 'k'\n                                            video.fans = formattedFans\n                                           \n                                        }else{\n                                            formattedFans = Math.sign(num)*Math.abs(num)\n                                            video.fans = formattedFans\n                                        }\n                                        \n                                        try {\n                                            await collectionCars.findOne(filterCar).then(async data =>{\n                                                if(data){\n                                                video.carData = data\n                                                setLatestVideos(latestVideos =>[...latestVideos, video])\n                                                }else{\n                                                await collectionManual.findOne(filterCar).then(data =>{\n                                                    if(data){\n                                                        video.carData = data\n                                                        setLatestVideos(latestVideos =>[...latestVideos, video])\n                                                    }else{\n                                                        console.log('no data')\n                                                    }\n                                                   \n                                                })\n                                                }\n                                            })\n                                        } catch (error) {\n                                            console.log(error)\n                                        }\n                                    })\n                                } catch (error) {\n                                    console.log(error)\n                                }\n                                \n                            })\n                        } catch (error) {\n                            console.log(error)\n                        }\n                        \n                    })\n                    \n                })\n            })\n        } catch (error) {\n            console.log(error)\n        }\n    }\n    const numberWithCommas = (x) =>{\n        return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    }\n    const loginCheck = async () =>{\n        const tokenUser = sessionStorage.getItem('session_user')\n        if(tokenUser){\n            jwt.verify(tokenUser, process.env.REACT_APP_JWT_SECRET, (err, decoded)=>{\n                if(err){\n                    const credentials = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTH_PUBLIC_VIEW);\n                    getVideos(credentials)\n                }else{\n                    getVideos(decoded.cre)\n                }\n            })\n        }else{\n            const credentials = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTH_PUBLIC_VIEW);\n            getVideos(credentials)\n        }\n    }\n\n    useEffect( () => {\n        loginCheck()\n\n      }, [])\n\n    return(\n        <Layout >\n            <Helmet>\n                <meta charSet=\"utf-8\" />\n                <title>Home | The Smoke Show</title>\n                <meta name=\"description\" content=\"Place the meta description text here.\" />\n                <meta name=\"robots\" content=\"noindex, nofollow\" />\n                <Head />\n                {/* <link rel=\"canonical\" href=\"http://mysite.com/example\" /> */}\n            </Helmet>\n                <div className=\"main-wrapper\" style={{minHeight: 'calc(100vh - 21rem'}}>\n                <div className=\"spacer-4rem\"></div>\n                <h2 className=\"title\">New This Week</h2>\n                <Row className=\"bio-main-row\">\n                {latestVideos &&\n                    latestVideos.map((video, index) =>{\n                        const str = video.carData.model\n                        const id = video.videoId\n                        \n                        const model = str.charAt(0).toUpperCase() +str.slice(1)\n                        const name = video.carData.make\n                        const titleCase = name.charAt(0).toUpperCase() +name.slice(1)\n                        let price;\n                        if(video.carData.price && video.carData.price.baseMSRP){\n                            price = numberWithCommas(video.carData.price.baseMSRP)\n                        }else{ price = ''}\n                        {/* const uuid = uuidv4() */}\n                        {/* let theInfluencer;\n                        if(influencerObj){\n                            const result = influencerObj.filter(obj => obj.userId === video.userId)\n                            video.theInfluencer = result[0]\n                           \n                        } */}\n                        const date = moment(video.snippet.publishedAt).fromNow()\n                        return(\n                            <Fragment key={video.videoId +index}>\n                                <Col sm={6} className=\"main-col\" >\n                                    <Row >\n                                        <Col sm >\n                                            <div className=\"videoWrapper\">\n                                                <iframe src={videoEmbedURL + id}\n                                                frameBorder='0'\n                                                allow='autoplay; encrypted-media'\n                                                // allow='autoplay; encrypted-media'\n                                                allowFullScreen\n                                                srcDoc={`<style>*{padding:0;margin:0;overflow:hidden}html,body{height:100%}img,span{position:absolute;width:100%;top:0;bottom:0;margin:auto}span{height:1.5em;text-align:center;font:48px/1.5 sans-serif;color:white;text-shadow:0 0 0.5em black}</style><a href=https://www.youtube.com/embed/${id}?autoplay=1><img src=https://img.youtube.com/vi/${id}/hqdefault.jpg alt=${video.snippet.title}><span>▶</span></a>`}\n                                                title={video.snippet.title}\n                                                />\n                                \n                                            </div>\n                                            <h3 style={{marginTop:'10px'}} className=\"video-title\">{video.snippet.title}</h3>\n                                            <small>{date}</small>\n                                           \n                                            <Row className=\"comment-wrapper\" >\n                                                <div className=\"col-1\" style={{margin:0,padding:0}} >\n                                                {video.influencer.profilePic ? <img src={video.influencer.profilePic} \n                                                \n                                                className=\"creator-profile-pic\" alt={video.snippet.channelTitle}/> :\n                                                <div\n                                                style={{width:'46px', height: '46px', backgroundColor: 'teal'}}\n                                                className=\"creator-profile-pic\" name={video.snippet.channelTitle}></div>\n                                                }\n                                                    \n                                                </div>\n                                                <div className=\"col-11\" style={{paddingRight:0, margin: 'auto'}} >\n                                                <div className=\"creator-name\"><strong>{video.snippet.channelTitle}</strong><br /> <span style={{color:'gray', fontSize: '13px'}}>{video.fans && video.fans} {''} fans</span></div>\n                                                </div>\n                                                \n                                            </Row>\n                                            \n                                            <input className=\"acd-input\" type=\"checkbox\" id={`title${index}`} />\n                                    \n                                            <label className=\"show-label\" htmlFor={`title${index}`} className=\"acd-label\">Show </label>\n                                            <div className=\"desc-box\">\n                                                {video.snippet.description}\n                                            </div> \n                                            <div className=\"content\">\n                                            <small className=\"wrap-text-desc\">{video.snippet.description}</small>\n                                            </div>\n                                           <div className=\"spacer-4rem\"></div>\n                                            <Comments videoId={video.videoId} />\n                                            \n                                        </Col>\n                                        <Col sm=\"auto\" className=\"spec-col\"  >\n                                            <SpecDiv video={video} titleCase={titleCase} price={price} model={model}/>\n                                        </Col>\n                                    </Row>\n                                </Col>\n                            </Fragment>\n                        )\n                    })\n                }\n            </Row>\n           \n            {/* <div className=\"spacer-4rem\"></div> */}\n            {/* <div className=\"title title-adj\">\n                <h2 style={{marginBottom: '-1rem'}}>{titleStr}</h2>\n                <Form inline onSubmit={handleVideoSearch} style={{marginRight: '-8px'}}>\n                    <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2 form-adj\" onChange={handleChangeKeyword}/>\n                </Form>\n            </div> */}\n            {/* <Row style={{paddingLeft:'-7px', paddingRight:'-7px'}}>\n                {searchedCarData &&\n                    searchedCarData.map((car, index) =>{\n                        const uuid = uuidv4()\n                        return(\n                            <Fragment key={uuid} >\n                                <Col sm={6}>\n                                    <Row >\n                                        <Col sm={8} >\n                                            <div className=\"videoWrapper\">\n                                                <iframe src={videoEmbedURL + car.videoId}\n                                                        frameBorder='0'\n                                                        allow='autoplay; encrypted-media'\n                                                        allowFullScreen\n                                                        title='video'\n                                                />\n                                    \n                                            </div>\n                                            <h3 style={{marginTop:'10px'}}>{car.youtube.snippet.title}</h3>\n                                        </Col>\n                                        <Col sm={4} style={{paddingLeft:0}} >\n                                            <div className=\"spec-wrapper\">\n                                            </div>\n                                        </Col>\n                                    </Row>\n                                </Col>\n                            </Fragment>\n                        )\n                })\n                }\n                </Row> */}\n            </div>\n        </Layout>\n    )\n}\nconst mapStateToProps = (state) => {\n    //syntax is propName: state.key of combineReducer.key\n    return{\n      username: state.user.username,\n    }\n  }\n\nexport default connect(mapStateToProps)(HomePage)\n\n","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/AboutPage.js",["306","307"],"import React from 'react'\nimport {Helmet} from \"react-helmet\"\nimport { Row, Col, Button } from 'react-bootstrap'\nimport Layout from './Layout/Layout'\nimport './about.scss'\nimport * as Realm from \"realm-web\"\n\n\nconst AboutPage = () =>{\n    // const id = process.env.REACT_APP_REALM_APP_ID\n    // const config = { id };\n    // const app = new Realm.App(config);\n    // const credentials = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTH_PUBLIC_VIEW);\n    // const checkRes = async () =>{\n    //     try {\n\n    //         await app.logIn(credentials).then( async user =>{\n    //             const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n    //             const collectionUsers = mongo.db(\"smoke-show\").collection(\"users\")\n    //             const filter = {username: 'smokySaki'}\n    //             try {\n    //                 await collectionUsers.findOne(filter).then(res =>{\n    //                     console.log(res)\n    //                     if(res){\n    //                         console.log('null read?')\n    //                     }else{\n    //                         console.log('null is false')\n    //                     }\n    //                 })\n    //             } catch (error) {\n                    \n    //             }\n    //         })\n    //     } catch (error) {\n            \n    //     }\n    // }\n return(\n     <Layout>\n     <Helmet>\n        <meta charSet=\"utf-8\" />\n        <title>About Us | The Smoke Show</title>\n        <meta name=\"description\" content=\"Who we are and how we started The Smoke Show. Stay in touch.\" />\n        <meta name=\"robots\" content=\"noindex, nofollow\" />\n\n        {/* <link rel=\"canonical\" href=\"http://mysite.com/example\" /> */}\n    </Helmet>\n        <div className=\"spacer-4rem\"></div>\n        <div className=\"main-wrapper\">\n            <div className=\"mission-wrapper\">\n                <h4 className=\"theme-text-color\">The Smoke Show Mission Statement</h4>\n                <div className=\"spacer-2rem\"></div>\n                <p className=\"about-p\">\n                Tired of BigTech and Old School Auto Magazines?<br />\n                 Welcome to The Smoke Show, aka the world’s best auto social platform. <br /><br />\n                 What are we trying to achieve? That’s simple, compiling everything we like to see, all in one place, and cutting out everything we don’t. <br /><br />\n                 The Smoke Show lets users have more fun, gives more control to creators, and further analytics to relevant advertisers. The Smoke Show is a home for auto fans, built by auto fans.\n                </p>\n            </div>\n            <div className=\"spacer-4rem\"></div>\n            <Row>\n                <Col sm={6} className=\"mb-2rem\">\n                <div className=\"contact-div\">\n                    <h3 className=\"theme-text-color\">Become an influencer</h3>\n                    <p className=\"contact-p\">\n                    Want your video to be featured on the site?\n                    <br /><br />\n                    Chat with us at:\n                    <br /><br />\n                    hello@thehoongroup.com\n                    </p>\n                </div>\n                </Col>\n                <Col sm={6} className=\"mb-2rem\" >\n                <div className=\"contact-div\">\n                    <h3 className=\"theme-text-color\">Advertising with us</h3>\n                    <p className=\"contact-p\">Want to have a direct channel for advertising next to sponsored content and reaching the automotive community?\n                    <br /><br />\n                    Reach out to us at:\n                    <br /><br />\n                    sales@thehoongroup.com\n                    </p>\n                </div>\n                </Col>\n                <Col sm={6} className=\"mb-2rem\">\n                <div className=\"contact-div\">\n                    <h3 className=\"theme-text-color\">Support</h3>\n                    <p className=\"contact-p\">\n                    Having technical trouble?\n                    <br /><br />\n                    Send us an email at:\n                    <br /><br />\n                    support@thehoongroup.com\n                    </p>\n                </div>\n                </Col>\n                <Col sm={6} className=\"mb-2rem\">\n                <div className=\"contact-div\">\n                    <h3 className=\"theme-text-color\">Feedback</h3>\n                    <p className=\"contact-p\">We thrive on feedback, do you have some suggestion to improve The Smoke Show?\n\n                    <br /><br />\n                    Send it our way at:\n                    <br /><br />\n                    feedback@thehoongroup.com\n                    </p>\n                </div>\n                </Col>\n            </Row>\n        </div>\n        <div className=\"spacer-4rem\"></div>\n        {/* <center><Button onClick={checkRes}>click me</Button></center> */}\n     </Layout>\n )\n}\n\nexport default AboutPage","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/EmailConfirmation.js",["308","309"],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/NotFoundPage.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/ResetPassword.js",["310","311","312","313"],"import React, { useState, useEffect } from 'react'\nimport { Button, Form } from 'react-bootstrap'\n// import Logo from '../assets/global/Logo-smoke-show.png'\nimport * as Realm from \"realm-web\"\nimport { connect } from 'react-redux'\nimport jwt from 'jsonwebtoken'\nimport Layout from './Layout/Layout'\n\nconst ResetPassword = (props) =>{\n\n    const token = new URLSearchParams(props.location.search).get(\"token\")\n    const tokenId = new URLSearchParams(props.location.search).get(\"tokenId\")\n    console.log(token)\n    console.log(tokenId)\n    const [userObj, setUserObj] = useState({token: token, tokenId: tokenId, email: '', password: '', password2: ''})\n    const [hasError, setHasError] = useState(false)\n    const [hasReset, setHasReset] = useState(false)\n    const [msg, setMsg] = useState(\"\")\n    const maxAgeTest = 1 * 60 * 60\n    const id = process.env.REACT_APP_REALM_APP_ID\n    const config = { id };\n    const app = new Realm.App(config);\n\n\n    const handleChange =(e) =>{\n        setUserObj({\n            ...userObj,\n            [e.target.name]: e.target.value\n        })\n    }\n    const createToken = (userData) =>{\n        return jwt.sign({ userData: userData }, process.env.REACT_APP_JWT_SECRET, {expiresIn: maxAgeTest});\n    }\n    const handeleRestPw = async (e) =>{\n        // console.log('pw', token, tokenId, userObj.password)\n        e.preventDefault()\n        try{\n            // await app.emailPasswordAuth.resetPassword(\"newPassw0rd\", token, tokenId);\n            // await app.emailPasswordAuth.resetPassword(token, tokenId, \"newPassw0rd\");\n            await app.emailPasswordAuth.resetPassword( token, tokenId, userObj.password).then(res =>{\n                console.log('res', res)\n                setHasReset(true)\n            })\n        }catch(error){\n            console.log(error)\n        }\n        \n    }\n    const handleLogin = async (e) =>{\n        e.preventDefault()\n        const emailLowerCase = userObj.email.toLocaleLowerCase()\n        const credentials = Realm.Credentials.emailPassword(emailLowerCase, userObj.password)\n\n        try{\n            // Authenticate the user\n            await app.logIn(credentials).then( user=>{\n                    console.log('working?', user)\n                    // const key = await user.apiKeys.create(uid)\n                    const customData = user.customData\n                    const token = jwt.sign({ userData: customData }, process.env.REACT_APP_JWT_SECRET, {expiresIn: maxAgeTest})\n                    sessionStorage.setItem('session_token', token)\n                    const tokenUser = jwt.sign({ cre: credentials }, process.env.REACT_APP_JWT_SECRET, {expiresIn: maxAgeTest})\n                    sessionStorage.setItem('session_user', tokenUser)\n                    \n                }).then(()=>{props.history.push(\"/\")})\n            \n      \n        }catch(error){\n            console.log('error', error)\n\n        }\n    }\n    useEffect(() => {\n        handeleRestPw()\n    }, [])\n\n    return (\n        <Layout>\n            <div className=\"custom-modal-body theme-text-p height-adj-main\">\n                <div style={{marginTop:'4rem'}}></div>\n                {hasReset ? \n                <React.Fragment>\n                    <div style={{textAlign:\"center\"}}>\n                        <h4>Your password has been reset</h4><br/>\n                        <p> Login with your new password.</p>\n                    </div>\n                    <div className=\"spacer-4rem\"></div>\n                    <Form className=\"login-form\" onSubmit={handleLogin}>\n                        <Form.Group controlId=\"formBasicEmail\">\n                            <Form.Label>Email address</Form.Label>\n                            <Form.Control type=\"email\" placeholder=\"e.g. example@example.com\" name=\"email\" onChange={handleChange} />\n                        </Form.Group>\n\n                        <Form.Group controlId=\"formBasicPassword\">\n                            <Form.Label>Password</Form.Label>\n                            <Form.Control type=\"password\" placeholder=\"\" name=\"password\" onChange={handleChange} />\n                        </Form.Group>\n                        <div className=\"spacer-2rem\"></div>\n                        <div className=\"login-btn-wrapper\">\n                            <Button className=\"login-btn\" type=\"submit\">\n                                Login\n                            </Button><br /><br />\n                            \n                        </div>\n                    \n                    </Form>\n                </React.Fragment>\n                :\n                <React.Fragment>\n                    <div className=\"login-logo-wrapper theme-text-p\">\n                        <h4 className=\"h4-style\">Reset Your Password</h4>\n                        <div className=\"spacer-4rem\"></div>\n                        <p>Please enter your new password below</p>\n                    </div>\n                    <Form className=\"login-form\" onSubmit={handeleRestPw}>\n         \n                        <Form.Group >\n                            <Form.Label>New password</Form.Label>\n                            <Form.Control type=\"password\" placeholder=\"Between 6 and 128 characters long\" name=\"password\" onChange={handleChange} />\n                        </Form.Group>\n                        <br/>\n                        {/* <Form.Group >\n                            <Form.Label>Confirm new password</Form.Label>\n                            <Form.Control type=\"password\" placeholder=\"type your new password again\" name=\"password2\" onChange={handleChange} />\n                        </Form.Group> */}\n                        {hasError && <div className=\"error-msg\">{msg}</div>}\n                        <br/>\n                        <div className=\"login-btn-wrapper\">\n                            <Button className=\"login-btn\" type=\"submit\">\n                                Set New Password\n                            </Button>\n                        </div>\n                        <div className=\"spacer-4rem\"></div>\n                    </Form>\n                </React.Fragment>\n                }\n            </div>\n        </Layout>\n        \n    )\n}\n\nexport default connect()(ResetPassword)\n\n\n","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/CarStats.js",["314","315","316","317","318"],"import React, { useState, Fragment, useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport Layout from './Layout/Layout'\nimport { Row, Col, Button} from 'react-bootstrap'\nimport './carStats.scss'\nimport { v4 as uuidv4 } from 'uuid'\nimport axios from 'axios';\n\nimport priceIcon from '../assets/global/Price-Tag-icon.svg'\nimport powerIcon from '../assets/global/Horsepower.svg'\nimport weightIcon from '../assets/global/weight.svg'\nimport pistonIcon from '../assets/global/piston.png'\n// import cylinderIcon from '../assets/global/cylinder.svg'\nimport transmissionIcon from '../assets/global/transmission.svg'\nimport mileageIcon from '../assets/global/mileage.svg'\nimport torqueIcon from '../assets/global/torque.png'\nimport frontWheels from '../assets/global/front-wheels.png'\nimport rearWheels from '../assets/global/rear-wheels.png'\nimport allWheels from '../assets/global/all-wheels.png'\nimport { Helmet } from 'react-helmet'\nimport Head from '../components/Layout/Head'\n\nconst CarStats = (props) =>{\n    const statsArr = ['Main Stats', 'Engine', 'Measurements', 'Comfort & Convenience', 'Drive Train', 'Suspension', 'Color', 'Warranty']\n    const [carImages, setCarImages] = useState([])\n    \n    // const [activeTab, setActiveTab] = useState('Main Stats')\n    let searchedCars = []\n    if(props.history.location.cars){\n        searchedCars = props.history.location.cars.map(item => ({...item, tabs: statsArr, activeTab: 'Main Stats'}))\n    }else{props.history.push('/car-search')}\n    \n    const [carData, setCarData] = useState(searchedCars)\n    \n    const handleTabClick = (tab, index) =>{\n        let tempCarArr = [...carData]\n       \n       tempCarArr[index].activeTab = tab\n       setCarData(tempCarArr)\n    }\n    \n\n    const switchTabs = (car, tab) =>{\n        let engine, warranty, measurements, comfort, drivetrain, suspension, mileage, weight, totalSeating, colors, baseMSRP, rearseats, driveIcon, driveType\n\n        if(car.features['Engine'] !== undefined) engine = car.features['Engine']\n        if(car.features['Warranty'] !== undefined) warranty = car.features['Warranty']\n        if(car.features['Measurements'] !== undefined) measurements = car.features['Measurements']\n        if(car.features['Measurements'] !== undefined) weight = car.features['Measurements']['Curb weight']\n        if(car.features['Comfort & Convenience'] !== undefined) comfort = car.features['Comfort & Convenience']\n        if(car.features['Drive Train'] !== undefined){\n            drivetrain = car.features['Drive Train']\n            driveType = drivetrain['Drive type']\n        } \n        if(driveType === undefined){\n            driveType = null\n        }else if(driveType === 'all wheel drive' || drivetrain['Drive type'] === 'four wheel drive'){\n            driveIcon = allWheels\n        }else if(driveType === 'front wheel drive'){\n            driveIcon = frontWheels\n        }else if(driveType === 'rear wheel drive'){\n            driveIcon = rearWheels\n        }else{driveIcon = allWheels}\n\n        if(car.features['Suspension'] !== undefined) suspension = car.features['Suspension']\n        if(car.features['Rearseats'] !== undefined) rearseats = car.features['Rearseats'] \n        if(car.features['Fuel']['EPA mileage est'] == undefined) {\n            console.log('no mileage')\n        }else{mileage = car.features['Fuel']['EPA mileage est'][' (cty/hwy)']}\n        if(car.totalSeating !== undefined) totalSeating = car.totalSeating\n        if(car.color !== undefined) colors = car.color\n     \n        if(car.price === undefined){\n            baseMSRP = null\n        }else if(car.price.baseMSRP === undefined){\n            baseMSRP = null\n        }else{\n            baseMSRP = car.price.baseMSRP.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n        }\n\n        \n        switch(tab) {\n            case 'Main Stats':\n              return <Fragment>\n                        {baseMSRP &&\n                        <div className=\"stats-box\">\n                        <div  className=\"xs-txt\">\n                            <img src={priceIcon} alt=\"price\" className=\"icon-stats\" />\n                            <div>MSRP</div>\n                        </div>\n                        <div className=\"stats-label\">\n                            ${' '} {baseMSRP}\n                        </div>\n                        \n                        </div>}\n\n                        {weight &&\n                        <div className=\"stats-box\">\n                            <div className=\"xs-txt\">\n                                <img src={weightIcon} alt=\"weight\" className=\"icon-stats\" />\n                                <div>Curb weight</div>\n                            </div>\n                            <div className=\"stats-label\">\n                                {weight.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}\n                            </div>\n                        </div>\n                        }\n                        {mileage &&\n                        <div className=\"stats-box\">\n                            <div className=\"xs-txt\">\n                                <img src={mileageIcon} alt=\"mileage\" className=\"icon-stats\" />\n                                <div>Mileage</div>\n                            </div>\n                            <div className=\"stats-label\">\n                                {mileage}\n                            </div>\n                        </div>\n                        }\n                        \n                        {drivetrain &&\n                        <div className=\"stats-box\">\n                            <div className=\"xs-txt\">\n                                <img src={transmissionIcon} alt=\"transmission\" className=\"icon-stats\" />\n                                <div>Transmission</div>\n                            </div>\n                            <div className=\"stats-label\">\n                                {drivetrain['Transmission']}\n                            </div>\n                        </div>\n                        }\n                        {driveType &&\n                        <div className=\"stats-box\">\n                            <div className=\"xs-txt\">\n                                <img src={driveIcon} alt=\"drive\" className=\"icon-stats\" />\n                                <div>Drive type</div>\n                            </div>\n                            <div className=\"stats-label\">\n                                {driveType}\n                            </div>\n                        </div>\n                        }\n                        {car.features.Engine.Torque && \n                        <div className=\"stats-box\">\n                            <div className=\"xs-txt\">\n                                <img src={torqueIcon} alt=\"torque\" className=\"icon-stats\" />\n                                Torque\n                            </div>\n                            <div className=\"stats-label\">\n                                { car.features.Engine.Torque }\n                            </div>\n                        </div>\n                        }\n                        {car.features.Engine.Horsepower &&\n                        <div className=\"stats-box\">\n                            <div className=\"xs-txt\">\n                                <img src={powerIcon} alt=\"hoursepower\" className=\"icon-stats\" />\n                                Horsepower\n                            </div>\n                            <div className=\"stats-label\">\n                                { car.features.Engine.Horsepower}\n                            </div>\n                        </div>\n                        }\n                        {car.features.Engine.Cylinders &&\n                        <div className=\"stats-box\">\n                            <div className=\"xs-txt\">\n                                <img src={pistonIcon} alt=\"Cylinders\" className=\"icon-stats\" />\n                                Cylinders\n                            </div>\n                            <div className=\"stats-label\">\n                                { car.features.Engine.Cylinders}\n                            </div>\n                            \n                        </div>\n                        }\n                    </Fragment>\n            case 'Engine':\n                return <Fragment>\n                        { engine && Object.entries(engine).map(([key, value]) =>{\n                            return <div className=\"stats-box\"><strong>{key}</strong>:  {value}</div>\n                        })}\n                      </Fragment>\n            case 'Warranty':\n                return <Fragment>\n                        {warranty && Object.entries(warranty).map(([key, value]) =>{\n                            return <div className=\"stats-box\" key={key}><strong>{key}</strong>:  {value}</div>\n                        })}\n                      </Fragment>\n            case 'Measurements':\n                return <Fragment>\n                        {totalSeating && \n                            <div className=\"stats-box\">Total Seating: {totalSeating}</div>\n                        }\n                        {rearseats && Object.entries(rearseats).map(([key, value]) =>{\n                            return <div className=\"stats-box\" key={key}><strong>{key}</strong>:  {value}</div>\n                        })\n                        }\n                        { measurements && Object.entries(measurements).map(([key, value]) =>{\n                            return <div className=\"stats-box\" key={key}><strong>{key}</strong>:  {value}</div>\n                        })}\n                          \n                     \n                      </Fragment>  \n            case 'Comfort & Convenience':\n                return <Fragment>\n                        { comfort && Object.keys(comfort).map((key, index)=>{\n                            return <div className=\"stats-box\" key={key}>{key}</div>\n                        })}\n                          \n                       \n                      </Fragment> \n            case 'Drive Train':\n                return <Fragment>\n                        { drivetrain && Object.entries(drivetrain).map(([key, value]) =>{\n                            if(value === true){\n                                return <div className=\"stats-box\" key={key}>{key}<strong></strong></div>\n                            }else{\n                                return <div className=\"stats-box\" key={key}><strong>{key}</strong>:  {value}</div>\n                            }\n                            \n                        })}\n                      </Fragment>\n            case 'Suspension':\n                return <Fragment>\n                        { suspension && Object.keys(suspension).map((key, index)=>{\n                            return <div className=\"stats-box\" key={key}>{key}</div>\n                        })}\n                          \n                       \n                      </Fragment>    \n            case 'Color':\n                return <Fragment>\n                        <p><strong>Exterior</strong></p>\n                        { colors && colors['EXTERIOR'].map((color, index)=>{\n                            const uuid = uuidv4()\n                            return <Fragment key={uuid}>\n                                    <div className=\"stats-box-outline\" >\n                                    <div className=\"color-thumbnail\" style={{backgroundColor: `rgb(${color.rgb})`}}></div>\n                                    <div className=\"color-name\">{color.name}</div>\n                                    </div>\n                                   </Fragment>\n                        })}\n                          <hr />\n                       <p><strong>Interior</strong></p>\n                       { colors && colors['INTERIOR'].map((color, index)=>{\n                            return <div className=\"stats-box-outline\" key={color.name}>\n                                    <div className=\"color-thumbnail\" style={{backgroundColor: `rgb(${color.rgb})`}}></div>\n                                    <div className=\"color-name\">{color.name}</div>\n                                    </div>\n                        })}\n                      </Fragment>  \n            default:\n              return <Fragment>\n                        <div className=\"stats-box\">Error</div>\n                    </Fragment>\n          }\n    }\n    // const getImgData = async () =>{\n    //     const selected = props.history.location.selected\n    //     console.log('selected', selected)\n    //     const url = `https://api.carsxe.com/images?key=${process.env.REACT_APP_CARXE_API_KEY}&year=${selected.year}&make=${selected.make}&model=${selected.model}&format=json&angle=front`\n    //     await axios.get(url).then(res =>{\n    //         console.log('img data', res.data)\n    //         setCarImages(res.dataimages)\n            \n    //     })\n        \n    // }\n    // useEffect(() => {\n        \n    // }, [])\n    return(\n        <Layout>\n            <Helmet>\n            \n            <title>{carData && carData[0].make}, {carData && carData[0].year}, {carData && carData[0].model} Specs, Reviews, and Pricing | The Smoke Show</title>\n                <Head />\n            </Helmet>\n            <div className=\"main-wrapper stats-container\">\n                <div className=\"spacer-4rem\"></div>\n                {carData && carData.map((car, index) =>{\n                    car.tabs = statsArr\n                    const maker = car.make.toUpperCase()\n                    const model = car.model.toUpperCase()\n                    {/* console.log('check', carImages) */}\n                    let carImg;\n                    if(carImages[0]){\n                        carImg = carImages[0].link\n                    }else{\n                        carImg = 'https://smoke-show.s3.amazonaws.com/car-photos/Ferrari-F8_Spider-2020-1280-01.jpg'\n                        }\n                    return(\n                        <Fragment key={car.name}>\n                            <h2 className=\"title\">{car.year} {' '} {maker} {' '} {model}</h2>\n                            <p className=\"theme-text-p\">{car.name}</p>\n                            <Row>\n                                <Col sm={4}>\n                                    {/* <img src=\"https://smoke-show.s3.amazonaws.com/car-photos/Ferrari-F8_Spider-2020-1280-01.jpg\" alt=\"Ferrari F8 spider\" style={{width: '100%'}}/> */}\n                                     <img src={typeof(car.imgUrl) === 'undefined' ?carImg : car.imgUrl} alt={car.name} style={{width: '100%'}}/> \n                                    {/* <img src={carImg} alt={car.name} style={{width: '100%'}}/> */}\n                                </Col>\n                                <Col sm={8} style={{paddingLeft: 0}} >\n                                    <div className=\"box-shadow-white car-stats-wrapper\" >\n                                        <table className=\"stats-tab-ul\">\n                                        <tbody>\n                                            <tr>\n                                            {car.tabs.map(tab =>{\n                                                const uuid = uuidv4()\n                                                return(\n                                                        <td key={uuid} id={uuid} name={tab} custom={tab} onClick={()=>handleTabClick(tab, index)} className={ tab === car.activeTab ? 'tab-link tab-active' : 'tab-link' }>{tab}</td>                                       \n                                                )\n                                                \n                                            })}\n                                         \n                                            </tr>\n                                            </tbody>\n                                        </table>\n                                        <div className=\"stats-div\">\n                                            {switchTabs(car, car.activeTab)}\n                                        </div>\n                                    </div>\n                                </Col>\n                            </Row>\n                            <div className=\"spacer-4rem\"></div>\n                        </Fragment>\n                    )\n                })\n                }\n                <div className=\"spacer-4rem\"></div>\n                <Link to=\"/car-search\">\n                    <Button className=\"login-btn\">Start New Search</Button>\n                </Link>\n                \n            </div>\n            \n        </Layout>\n    )\n}\n\nexport default CarStats","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Swagg.js",["319"],"import React, { useEffect, useState } from 'react'\nimport {Helmet} from \"react-helmet\"\nimport Layout from './Layout/Layout'\nimport Client from 'shopify-buy';\nimport Products from './Shopify/Products'\nimport Cart from './Shopify/Cart'\nimport './Shopify/shopify.scss'\nimport Logo from '../assets/global/Logo-smoke-show.png'\n\nconst Swagg = () =>{\nconst [isCartOpen, setIsCartOpen] = useState(false)\nconst [checkout, setCheckout] = useState({ lineItems: [] })\nconst [products, setProducts] =useState([])\nconst [shop, setShop] = useState({})\n\nconst client = Client.buildClient({\n    storefrontAccessToken: process.env.REACT_APP_SHOPIFY_TOKEN,\n        domain: 'thehoongroup.myshopify.com',\n    });\n\nconst fetchData = () =>{\n    client.checkout.create().then((res) => {\n        console.log('cart', res)\n        setCheckout(res)\n      })\n\n      client.product.fetchAll().then((res) => {\n        console.log('product', res)\n        setProducts(res)\n      })\n  \n      client.shop.fetchInfo().then((res) => {\n        console.log('shop', res)\n        setShop(res)\n      });\n}\nconst addVariantToCart = async (variantId, quantity)=>{\n    setIsCartOpen(true)\n\n    const lineItemsToAdd = [{variantId, quantity: parseInt(quantity, 10)}]\n    // const checkoutId = checkout.id\n\n    return await client.checkout.addLineItems(checkout.id, lineItemsToAdd).then(res => {\n      console.log('res', res)\n      setCheckout(res)\n    });\n}\nconst updateQuantityInCart = async (lineItemId, quantity) =>{\n    // const checkoutId = checkout.id\n    const lineItemsToUpdate = [{id: lineItemId, quantity: parseInt(quantity, 10)}]\n\n    return await client.checkout.updateLineItems(checkout.id, lineItemsToUpdate).then(res => {\n        setCheckout(res)\n    });\n}\nconst removeLineItemInCart = async (lineItemId) =>{\n    return await client.checkout.removeLineItems(checkout.id, [lineItemId]).then(res => {\n        setCheckout(res)\n    });\n}\n\nconst handleCartClose = () =>{\n    setIsCartOpen(false)\n}\n\nuseEffect(() => {\n    fetchData()\n}, [])\n    return(\n        <Layout>\n        <Helmet>\n            <meta charSet=\"utf-8\" />\n            <title>Swagg | The Smoke Show</title>\n            <meta name=\"description\" content=\"Check out our swaggs here!\" />\n            <meta name=\"robots\" content=\"noindex, nofollow\" />\n            {/* <link rel=\"canonical\" href=\"http://mysite.com/example\" /> */}\n        </Helmet>\n            <div className=\"main-wrapper\">\n                <div className=\"spacer-4rem\"></div>\n                <h2 className=\"title\">Swagg</h2>\n                {/* <div className=\"swagg-wrapper\">\n                </div> */}\n                <div className=\"App\">\n        <div className=\"App__header\">\n          {!isCartOpen &&\n            <div className=\"App__view-cart-wrapper\">\n              <button className=\"App__view-cart\" onClick={()=> setIsCartOpen(true)}>Cart</button>\n            </div>\n          }\n          <div className=\"App__title\">\n            {/* <h1>{shop.name}</h1> */}\n            <img className=\"logo-header\" src={Logo} alt=\"The Smoke Show logo\"/>\n            <h2>{shop.description}</h2>\n          </div>\n        </div>\n        <div className=\"spacer-4rem\"></div>\n        <Products\n          products={products}\n          client={client}\n          addVariantToCart={addVariantToCart}\n        />\n        <Cart\n          checkout={checkout}\n          isCartOpen={isCartOpen}\n          handleCartClose={handleCartClose}\n          updateQuantityInCart={updateQuantityInCart}\n          removeLineItemInCart={removeLineItemInCart}\n        />\n      </div>\n            </div>\n        </Layout>\n    )\n}\n\nexport default Swagg","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Influencer/BioPage.js",["320","321","322","323","324","325","326","327","328","329","330","331","332","333","334"],"import React, { useEffect, useState, Fragment } from 'react'\nimport { Helmet } from \"react-helmet\"\nimport { Row, Col } from 'react-bootstrap'\nimport { connect } from 'react-redux'\nimport * as Realm from \"realm-web\"\n// import Avatar from 'react-avatar'\nimport './bioPage.scss'\n// import * as Papa from 'papaparse'\nimport { youtubeAPI } from '../../utils/youtubeAPI'\nimport { carTempData } from '../carTempData'\nimport { commentsTempData } from '../commentsTempData' \nimport Comments from '../Comments'\nimport { uid } from 'react-uid'\nimport Layout from '../Layout/Layout'\nimport SubNav from './SubNav'\nimport jwt from 'jsonwebtoken'\n\nimport powerIcon from '../../assets/global/Horsepower.png'\nimport pistonIcon from '../../assets/global/piston.png'\nimport priceIcon from '../../assets/global/Price-Tag-icon.png'\n\nconst BioPage = (props) =>{\n    const influencerId = props.match.params.id\n    const [influencer, setInfluencer] = useState({userId: '', fname: '', lname: '', username: '', fans: null, desc: '', channelId: '', banner_img: '', profile_pic: '', featuredVideo: {id: '', title: ''}})\n    // const { banner_img, username, profile_pic, fans } = props.location.state.influencer\n    const [formattedFans, setFormattedFans] = useState('')\n    \n    // const { params: { id } } = props.match\n    const videoEmbedURL = 'https://www.youtube.com/embed/'\n    // const EddieXChannelId = 'UCdOXRB936PKSwx0J7SgF6SQ'\n    const [searchKeyword, setSearchKeyword] = useState('')\n    const [titleStr, setTitleStr] = useState('Your search result')\n    const [searchedCarData, setSearchedCarData] = useState([])\n    const [latestVideos, setLatestVideos] = useState([])\n    const appConfig = {\n        id: process.env.REACT_APP_REALM_APP_ID,\n        // timeout: 10000, \n        // timeout in number of milliseconds\n      };\n    const app = new Realm.App(appConfig);\n    // const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n    // const handleChangeKeyword = (e) =>{\n    //     setSearchKeyword(e.target.value)\n    // }\n    // const handleVideoSearch = async e =>{\n    //     e.preventDefault()\n    //     await youtubeAPI.get('/search', {\n    //         params: {\n    //             q: searchKeyword,\n    //             channelId: influencer.channelId\n    //         }\n    //     }).then(res =>{\n    //         console.log('res from youtube', res)\n    //         setTitleStr(\"EddieX \" + searchKeyword)\n    //         const searchResult = res.data.items\n    //         console.log('is this array?', res.data.items)\n    //         const datayoutube =[]\n    //         searchResult.map(data =>{\n    //             datayoutube.push({\n    //                 videoId: data.id.videoId,\n    //                 youtube:{\n    //                     snippet: {title: data.snippet.title}\n    //                 }\n    //             })\n    //         })\n    //         setSearchedCarData(datayoutube)\n    //         console.log('use state check: ', searchedCarData)\n            \n    //     })\n    // }\n    const numberWithCommas = (x) =>{\n        return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    }\n    const getInfluencer = async (mongo) =>{\n\n            try {\n                const mongoCollection = mongo.db(\"smoke-show\").collection(\"influencers\");\n                const filter = {userId: influencerId} \n                await mongoCollection.findOne(filter).then( async res =>{\n                    console.log('res', res)\n                    setInfluencer(res)\n                    const collectionFans = mongo.db(\"smoke-show\").collection(`fans-${res.username}`)\n                    try{\n                        await collectionFans.count().then(num =>{\n                            if(num > 999){\n                                setFormattedFans(Math.sign(num)*((Math.abs(num)/1000).toFixed(1)) + 'k')\n                            }else{\n                                setFormattedFans(Math.sign(num)*Math.abs(num))\n                            }\n                        })\n                    }catch(err){console.log(err)}\n                    \n                })\n             }catch(error){console.log(error)}\n        \n    }\n    const getVideos = async (mongo) =>{\n        setLatestVideos([])\n        const collectionVideos = mongo.db(\"smoke-show\").collection(\"youtube-videos\")\n        const collectionCars = mongo.db(\"smoke-show\").collection(\"cars\")\n        const collectionManual = mongo.db(\"smoke-show\").collection(\"cars-manual\")\n        const now = new Date()\n        const days = 6\n        let dates = []\n        let str = now.toISOString()\n        let cleaned = str.split(\"T\")\n        dates.push(cleaned[0])\n        for(let i =0; i<days; i++){\n            now.setDate(now.getDate() - 1);\n            now.getDate()\n            let temp = now.toISOString()\n            let res = temp.split(\"T\")\n            dates.push(res[0])\n        }\n        const filter = {userId: influencerId}\n        const options = {sort: {\"snippet.publishedAt\": -1}, limit: 5 }\n        let temp=[]\n        try {\n            await collectionVideos.find(filter, options).then(videos =>{\n                console.log(videos)\n                videos.map(video =>{\n                    dates.map(date =>{\n                        if(video.snippet.publishedAt.includes(date)){\n                            temp.push(video)\n                            return\n                        }\n                    })\n                })\n                return temp\n            }).then(async filtered =>{\n                filtered.map(async video =>{\n                    const filterCar = {_id: {\"$oid\": video.carDataId}}\n                    try {\n                        await collectionCars.findOne(filterCar).then(async data =>{\n                            if(data){\n                            video.carData = data\n                            console.log('video', video)\n                            setLatestVideos(latestVideos =>[...latestVideos, video])\n                            }else{\n                            await collectionManual.findOne(filterCar).then(data =>{\n                                if(data){\n                                    video.carData = data\n                                    setLatestVideos(latestVideos =>[...latestVideos, video])\n                                }else{\n                                    console.log('no data')\n                                }\n                               \n                            })\n                            }\n                        })\n                    } catch (error) {\n                        console.log(error)\n                    }\n                })\n            })\n        } catch (error) {\n            \n        }\n    }\n\n    const checkToken = async () =>{\n        const token = sessionStorage.getItem('session_user')\n        if(token){\n            jwt.verify(token, process.env.REACT_APP_JWT_SECRET, async( err, decoded) =>{\n                if(err){\n                    const credentials = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTH_PUBLIC_VIEW);\n                    await app.logIn(credentials).then( user =>{\n                    const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n                    return mongo\n                }).then( mongo => {\n                    getInfluencer(mongo)\n                    getVideos(mongo)\n                })\n                }else{\n                    const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n                    getInfluencer(mongo)\n                    getVideos(mongo)\n                }\n            })\n        }else{\n            const credentials = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTH_PUBLIC_VIEW);\n                    await app.logIn(credentials).then( user =>{\n                    const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n                    return mongo\n                }).then( mongo => {\n                    getInfluencer(mongo)\n                    getVideos(mongo)\n                })\n        }\n    }\n      useEffect(() => {\n        checkToken()\n        \n      }, [])\n\n    return(\n        <Layout>\n            <Helmet>\n                <title>Influencer {`${influencer.username}`} Bio | The Smoke Show</title>\n            </Helmet>\n            <div className=\"main-wrapper\">\n   \n                <SubNav influencer={influencer} formattedFans={formattedFans} />\n\n                <div className=\"spacer-2rem\"></div>\n                <Row className=\"bio-main-row\">\n                    <Col sm={6}>\n                        <div className=\"videoWrapper\">\n                            <iframe src={ typeof(influencer.featuredVideo.id) == 'undefined' ? '' : videoEmbedURL + influencer.featuredVideo.id}\n                                    frameBorder='0'\n                                    allow='autoplay; encrypted-media'\n                                    allowFullScreen\n                                    title='video'\n                            />\n                            \n                        </div>\n                        <h3 style={{marginTop:'10px'}}>{influencer.featuredVideo.title}</h3>\n                    </Col>\n                    <Col sm={6}>\n                        <div className=\"bio-desc-wrapper\">\n                            <p>{influencer.desc}</p>\n                        </div>\n                        \n                    </Col>\n                </Row>\n                <div className=\"spacer-4rem\"></div>\n                <h2 className=\"title\">New This Week</h2>\n                <Row className=\"bio-main-row\">\n                { latestVideos && \n                    latestVideos.map((video, index) =>{\n                        const str = video.carData.model\n                        const model = str.charAt(0).toUpperCase() +str.slice(1)\n                        const name = video.carData.make\n                        const titleCase = name.charAt(0).toUpperCase() +name.slice(1)\n                        let price;\n                        const car = video.carData\n                        console.log('price', video.carData.price)\n                        if(video.carData.price && video.carData.price.baseMSRP){\n                            price = numberWithCommas(video.carData.price.baseMSRP)\n                        }else{ price = ''}\n                        return (\n                        <Fragment key={video.videoId}>\n                        <Col sm={6} >\n                        <Row>\n                            <Col sm >\n                                <div className=\"videoWrapper\">\n                                    <iframe src={videoEmbedURL + video.videoId}\n                                            frameBorder='0'\n                                            allow='autoplay; encrypted-media'\n                                            allowFullScreen\n                                            title='video'\n                                    \n                                    />\n                                </div>\n                                <h3 style={{marginTop:'10px'}}>{video.snippet.title}</h3>\n                                \n                                <input className=\"acd-input\" type=\"checkbox\" id={`title${index}`} />\n                                    \n                                <label htmlFor={`title${index}`} className=\"acd-label\">Show </label>\n                                <div className=\"desc-box\">\n                                    {video.snippet.description}\n                                </div> \n                                <div className=\"content\">\n                                    <small>{video.snippet.description}</small>\n                                </div>\n                                <div className=\"spacer-4rem\"></div>\n                                <Comments videoId={video.videoId}/>\n                            </Col>\n                            <Col sm=\"auto\" className=\"bio-stats\">\n                                <div className=\"ad-size\">\n                                <div className=\"spec-wrapper\">\n                                <img alt={car.name}  src={require(`../../assets/maker_logos/${titleCase}_Logo.png`).default} className=\"icon-s\" />{' '}<span className=\"spec-text\"><strong>{car.name}</strong></span><br/>\n                                <img alt=\"price\" key={priceIcon} src={priceIcon} className=\"icon-s\" /><span className=\"spec-text\">{' '}${price.baseMSRP}</span><br />\n                                <img alt=\"power \" key={powerIcon} src={powerIcon} className=\"icon-s\" /><span className=\"spec-text\">{' '}{car.features.Engine.Torque}</span><br />\n                                <img alt=\"piston\" key={pistonIcon} src={pistonIcon} className=\"icon-s\" /><span className=\"spec-text\">{' '}{car.features.Engine.Horsepower}</span><br />\n                                </div>\n                                <div className=\"ad-container\">\n                                    <p style={{color: 'gray'}}>ads will go here</p>\n                                    <p style={{color: 'gray'}}> 160px x 600px <br/>for above 576px</p>\n                                    <p style={{color: 'gray'}}> 300px x 250px <br/> for above 1400px </p>\n                                </div>\n                                </div>\n                            </Col>\n                        </Row>\n                    </Col>\n                    </Fragment>)\n                    })\n                }\n            </Row>\n            {/* <div className=\"spacer-4rem\"></div> */}\n            {/* <div className=\"title title-adj\">\n                <h2 style={{marginBottom: '-1rem'}}>{titleStr}</h2>\n                <Form inline onSubmit={handleVideoSearch} style={{marginRight: '-8px'}}>\n                    <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2 form-adj\" onChange={handleChangeKeyword}/>\n                </Form>\n            </div> */}\n            {/* <Row style={{paddingLeft:'-7px', paddingRight:'-7px'}}>\n                {searchedCarData &&\n                    searchedCarData.map((car, index) =>{\n        \n                        return <>\n                        <Col sm={6} key={uid(car)}>\n                        <Row>\n                            <Col sm={8} >\n                                <div className=\"videoWrapper\">\n                                    <iframe src={videoEmbedURL + car.videoId}\n                                            frameBorder='0'\n                                            allow='autoplay; encrypted-media'\n                                            allowFullScreen\n                                            title='video'\n                                    \n                                    />\n                        \n                                </div>\n                                <h3 style={{marginTop:'10px'}}>{car.youtube.snippet.title}</h3>\n                            </Col>\n                            <Col sm={4} style={{paddingLeft:0}}>\n                                <div className=\"spec-wrapper\">\n                 \n                                </div>\n                            </Col>\n                        </Row>\n                    </Col>\n                        </>\n                })\n                }\n                </Row> */}\n            </div>\n        </Layout>\n        \n    )\n}\n\n\nconst mapDispatchToProps = (dispatch) =>{\n    return{\n        \n    }\n}\nconst mapStateToProps = (state) => {\n    console.log('no state?', state.auth.mongo)\n    //syntax is propName: state.key of combineReducer.key\n    return{\n      username: state.user.username,\n      mongo: state.auth.mongo\n    }\n  }\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BioPage)\n\n","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Fan/BioPage.js",["335","336","337","338"],"import React, { useState, useEffect } from 'react'\nimport {Helmet} from \"react-helmet\"\nimport * as Realm from \"realm-web\"\nimport Layout from '../Layout/Layout'\n\nimport noImg from '../../assets/global/no_image.jpg'\nimport bioPic from '../../assets/temp-photos/bio/avator-male.jpg'\nimport editIcon from '../../assets/global/edit-icon.svg'\nimport settingsIcon from '../../assets/global/Settings-icon-white.svg'\nimport SettingModal from './SettingModal'\nimport { Button, Row, Col, Form } from 'react-bootstrap'\nimport './biopage.scss'\nimport { connect } from 'react-redux'\nimport VehicleCard from './vehicleCard'\nimport CreateNewCar from './CreateNewCar'\nimport jwt from 'jsonwebtoken'\nimport moment from 'moment'\n// import axios from 'axios'\n\nconst BioPage = (props) =>{\n\n    let userIdParam = props.match.params.id\n\n    const [profileUser, setProfileUser] = useState({fname: '', lname: '', profilePic: '', profileCover: '', username: '', profileDesc: '', favSong: '', favArtist: ''})\n    const [allowEdit, setAllowEdit] = useState(false)\n    const [editMode, setEditMode] = useState({about: false, song: false, artist: false})\n    const [showSetting, setShowSetting] = useState(false);\n    const [userCars, setUserCars] = useState([])\n    const [showAddCar, setShowAddCar] = useState(false)\n    const [numOfComments, setNumComments] = useState(null)\n    const altData = {uername: 'No username yet', userId: '', profileDesc: 'No description yet.', myCars: [] }\n    const [formattedTime, setFormattedTime] = useState(null)\n    const altCarData = {name: 'No data yet', upgrades: 'No data yet', color: 'No data yet', wheels: 'No data yet', performance: 'No data yet', category: 'Dream car', imgUlr: noImg, favSong: 'Nodata yet', favArtist: 'No data yet'}\n    const appConfig = {\n        id: process.env.REACT_APP_REALM_APP_ID,\n        // timeout: 10000, \n        // timeout in number of milliseconds\n      };\n    const app = new Realm.App(appConfig);\n    \n    const handleCloseAddCarModal = () => setShowAddCar(false)\n    const handleShowAddCarModal = () => setShowAddCar(true)\n\n    const handleChangeProfile = (e) =>{\n        setProfileUser({\n            ...profileUser,\n            [e.target.name]: e.target.value\n        })\n    }\n    const handleShowSetting = () =>{\n        const token = sessionStorage.getItem('session_token')\n        jwt.verify(token, process.env.REACT_APP_JWT_SECRET, function(err, decoded) {\n            if (err) {\n                console.log('err', err)\n                \n            }else{\n                setProfileUser({\n                    ...profileUser,\n                    email: decoded.userData.email\n                })\n                setShowSetting(true)\n            }\n          });\n        \n    }\n    \n    const handleCloseSetting = () =>{\n        setShowSetting(false)\n    }\n    const userLoggedIn = (id) =>{\n        console.log('working?', id)\n        console.log('profileuser', profileUser.userId)\n        console.log('param', userIdParam)\n        \n        if(id === profileUser.userId){\n            console.log('working?', id)\n            setAllowEdit(true)\n            // regainData()\n        }\n    }\n    const userLoggedOut = (id) =>{\n        console.log('working?', id)\n        if(id === userIdParam){\n            setAllowEdit(false)\n        }\n    }\n    const updateProfileData = (data, key)=>{\n\n        setProfileUser({\n            ...profileUser,\n            [key]: data\n        })\n    }\n    const updateUserDetails = (fname, lname, username) =>{\n        setProfileUser({\n            ...profileUser,\n            fname: fname,\n            lname: lname,\n            username: username\n        })\n    }\n    const updateCarData = (data) =>{\n        setUserCars(prevArray => [...prevArray, data])\n    }\n   \n    const handleDataUpdate = async (e) =>{\n        e.preventDefault()\n  \n        if(app.currentUser.id === profileUser.userId){\n            const mongodb = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n            const mongoCollection = mongodb.db(process.env.REACT_APP_REALM_DB_NAME).collection(\"users\")\n    \n            try{\n                await mongoCollection.updateOne(\n                    { \"userId\": app.currentUser.id},\n                    {\n                        \"$set\": {\n                            \"profileDesc\": profileUser.profileDesc,\n                            \"favSong\": profileUser.favSong,\n                            \"favArtist\": profileUser.favArtist\n                          }\n                    }\n                ).then(res =>{\n                    console.log('res', res)\n                })\n            }catch(err){\n                console.log(err)\n            }\n            setEditMode({...editMode, about: false, song: false, artist: false})\n        }\n        \n    }\n    const editAbout = ()=>{\n        return(\n            <Form>\n                <Form.Group >\n                    <Form.Label>Edit</Form.Label>\n                    <Form.Control as=\"textarea\" rows={3} name=\"profileDesc\" value={profileUser.profileDesc && profileUser.profileDesc } onChange={handleChangeProfile} />\n                </Form.Group>\n                <div className=\"bio-edit-btn-wrapper\">\n                    <Button variant=\"primary\" type=\"submit\" onClick={handleDataUpdate} className=\"bio-edit-btn\">\n                        Submit\n                    </Button>\n                </div>\n                \n            </Form>\n        )\n    }\n    const editSong = ()=>{\n        return(\n            <Form>\n                <Form.Group >\n                    <Form.Label>Edit</Form.Label>\n                    <Form.Control as=\"textarea\" rows={3} name=\"favSong\" value={profileUser.favSong && profileUser.favSong } onChange={handleChangeProfile} />\n                </Form.Group>\n                <div className=\"bio-edit-btn-wrapper\">\n                    <Button variant=\"primary\" type=\"submit\" onClick={handleDataUpdate} className=\"bio-edit-btn\">\n                        Submit\n                    </Button>\n                </div>\n                \n            </Form>\n        )\n    }\n    const editArtist = ()=>{\n        return(\n            <Form>\n                <Form.Group >\n                    <Form.Label>Edit</Form.Label>\n                    <Form.Control as=\"textarea\" rows={3} name=\"favArtist\" value={profileUser.favArtist && profileUser.favArtist } onChange={handleChangeProfile} />\n                </Form.Group>\n                <div className=\"bio-edit-btn-wrapper\">\n                    <Button variant=\"primary\" type=\"submit\" onClick={handleDataUpdate} className=\"bio-edit-btn\">\n                        Submit\n                    </Button>\n                </div>\n                \n            </Form>\n        )\n    }\n\n    const getData = async (credentials) =>{\n        try{\n            await app.logIn(credentials).then(async logInUser =>{\n                const mongo = logInUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n                const mongoCollectionUser = mongo.db(\"smoke-show\").collection(\"users\")\n                const filter = {userId: userIdParam}\n                try{\n                    await mongoCollectionUser.findOne(filter).then(user =>{\n                            setProfileUser(user)\n                            console.log(profileUser.joined)\n                            if(user.joined){\n                                const formatted = moment(user.joined).local().format('MMMM Do YYYY')\n                                setFormattedTime(formatted)\n                            }else{\n                                setFormattedTime('No data')\n                            }\n                            \n                            getTotalComments(mongo)\n                            getMyCars(mongo)\n                            return user\n                    }).then(user =>{\n                        if( userIdParam === logInUser.id){\n                            setAllowEdit(true)\n                        }else{\n                            setAllowEdit(false)\n                        }\n                    })\n                }catch(err){\n                    console.log(err)\n                }\n            })\n        }catch(err){\n            console.log(err)\n        }\n    }\n\n    const getTotalComments = async (mongo) =>{\n        \n        const mongoCollectionComments = mongo.db(\"smoke-show\").collection(\"comments\")\n        \n        const filter = {userId: userIdParam}\n        await mongoCollectionComments.find(filter).then(res =>{\n            // setProfileUser({...profileUser, totalComments: res.length})\n            setNumComments(res.length)\n        })\n    }\n    const getMyCars = async (mongo) =>{\n        const mongoCollection = mongo.db(\"smoke-show\").collection(\"my-cars\")\n        \n        const filter = {userId: userIdParam}\n        await mongoCollection.find(filter).then( cars =>{\n            setUserCars(cars)\n        })\n    }\n    useEffect(() => {\n        if(props.isLoggedIn){\n            if(props.customData.userId === profileUser.userId){\n                setAllowEdit(true)\n            }else{\n                setAllowEdit(false)\n            }\n        }else{\n            setAllowEdit(false)\n\n        }\n    }, [props.isLoggedIn])\n    useEffect(() => {\n        // setUserIdParam(props.match.params.id)\n        const token = sessionStorage.getItem('session_token')\n        const tokenUser = sessionStorage.getItem('session_user')\n        if(token){\n            jwt.verify(token, process.env.REACT_APP_JWT_SECRET, function(err, decoded) {\n                if (err) {\n                    // timeout\n                    // childRef.current.handleLoginModal(true)\n                    const credentials = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTH_PUBLIC_VIEW)\n                    getData(credentials)\n                }else{\n                    const credentials = jwt.verify(tokenUser, process.env.REACT_APP_JWT_SECRET)\n                    getData(credentials.cre)\n                }\n              });\n            \n        }else{\n            const credentials = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTH_PUBLIC_VIEW)\n            getData(credentials)\n        }\n   \n    }, [])\n\n    return(\n        <Layout userLoggedIn={userLoggedIn} userLoggedOut={userLoggedOut} >\n        <Helmet>\n            <meta charSet=\"utf-8\" />\n            <title>User profile page | The Smoke Show</title>\n            <meta name=\"description\" content=\"Place the meta description text here.\" />\n            <meta name=\"robots\" content=\"noindex, nofollow\" />\n            {/* <link rel=\"canonical\" href=\"http://mysite.com/example\" /> */}\n        </Helmet>\n        {showAddCar && <CreateNewCar show={showAddCar} handleClose={handleCloseAddCarModal} profileUser={profileUser} updateProfileData={updateProfileData} updateCarData={updateCarData} />}\n            {showSetting && <SettingModal show={showSetting} handleShowSetting={handleShowSetting} handleCloseSetting={handleCloseSetting} profileUser={profileUser}  updateProfileData={updateProfileData} updateUserDetails={updateUserDetails}/>}\n            <div className=\"main-wrapper\">\n                <div className=\"spacer-4rem\"></div>\n                <h2 className=\"title\">User Profile</h2>\n                <div className=\"bio-fleet-img\">\n                    <img\n                    // sizes=\"(max-width: 1500px) 100vw, 1500px\"\n                    // srcset={`\n                    // ${bioImgXs} 375w,\n                    // ${bioImgS} 752w,\n                    // ${bioImgM} 1040w,\n                    // ${bioImgL} 1280w,\n                    // ${bioImgXL} 1500w\n                    // `}\n                    src={ typeof(profileUser.profileCover) == 'undefined' || !profileUser.hasOwnProperty(\"profileCover\") ?  noImg : profileUser.profileCover }\n                    alt=\"user selected profile image\"\n                     />\n                </div>\n                <div className=\"bio-content-wrapper\">\n                    <div className=\"bio-main-wrapper\">\n                        <div className=\"bio-pic\">\n                            <img src={profileUser.profilePic ? profileUser.profilePic : bioPic} alt=\"the user profile picture\" />\n                        </div>\n                        \n                        <div className=\"bio-title-text\">\n                            <h3 className=\"bio-name-title\">{profileUser.fname && profileUser.fname} {profileUser.lname && profileUser.lname}</h3>\n                            <p>{profileUser.title}</p>\n                        </div>\n                        {allowEdit && \n                            <Button className=\"bio-setting-btn\" onClick={handleShowSetting}>\n                                <img src={settingsIcon} alt=\"setting\" className=\"setting-icon\"/>\n                                Settings\n                            </Button>\n                        }\n                        \n                    </div>\n           \n                    <Row className=\"bio-height-adj\">\n                        <Col sm={4}>\n                            <div className=\"bio-container box-shadow-white\">\n                                <p className=\"bio-about no-m-b\"><strong>About: {` ${profileUser.fname} ${profileUser.lname}`}</strong></p>\n                                <div className=\"\">\n                                    <p className=\"bio-content bio-border\">\n                                        {editMode.about ? editAbout()\n                                        : [\n                                            (profileUser.profileDesc \n                                                ? <p >{profileUser.profileDesc}</p>\n                                                : <p>{altData.profileDesc}</p>\n                                            )\n                                            ]\n                                        }\n                                    { !editMode.about && <br/> }\n                                    <div className=\"edit-icon-wrapper\" onClick={()=>{setEditMode({...editMode, about: true})}}>\n                                        {editMode.about ? '' : [\n                                            (allowEdit && <img className=\"edit-icon\" src={editIcon} alt=\"Edit about you\"/>)\n                                        ]}\n                                    </div>\n                                    </p>\n                                </div>\n                                \n                                <Row className=\"bio-border pt-pb-15 bio-row-adj\">\n                                    <Col sm={4}>\n                                        <p className=\"no-m-b\">Joined:</p>\n                                    </Col>\n                                    <Col sm={8}>\n                                        <p>{formattedTime ? formattedTime : 'No data'}</p>\n                                    </Col>\n                                </Row>\n                                <Row className=\"bio-border pt-pb-15 bio-row-adj\">\n                                    <Col sm={4}>\n                                        <p className=\"no-m-b\">Total Comments:</p>\n                                    </Col>\n                                    <Col sm={8}>\n                                        <p className=\"no-m-b\">{numOfComments && numOfComments} comments</p>\n                                    </Col>\n                                </Row>\n                                <Row className=\"bio-border pt-pb-15 bio-row-adj\">\n                                    <Col sm={4}>\n                                        <p className=\"no-m-b\">Fans of:</p>\n                                    </Col>\n                                    <Col sm={8}>\n                                        <p className=\"no-m-b\">\n                                            { profileUser.fansOf &&\n                                                profileUser.fansOf.map((name, i) =>{\n                                                    return <span>{i > 0 && ', '}{name.username}</span>\n                                                })\n                                            }\n                                        </p>\n                                    </Col>\n                                </Row>\n                                <Row className=\"pt-pb-15 bio-row-adj\"> \n                                    <Col sm={4}>\n                                        <p className=\"no-m-b\">Favorite Driving Song:</p>\n                                    </Col>\n                                    <Col sm={8}>\n                                        {editMode.song ? editSong()\n                                        : [\n                                            (profileUser.favSong \n                                                ? <p className=\"no-m-b\">{profileUser.favSong}</p>\n                                                : <p className=\"no-m-b\">{altData.favSong}</p>\n                                            )\n                                            ]\n                                        }\n                                        <div className=\"edit-icon-wrapper\" onClick={()=>{setEditMode({...editMode, song: true})}}>\n                                        {editMode.song ? '' : [\n                                            (allowEdit && <img className=\"edit-icon\" src={editIcon} alt=\"Edit your favourite songs\"/>)\n                                        ]}\n                                    </div>\n                                    </Col>\n                                </Row>\n                                <Row className=\"pt-pb-15 bio-row-adj\"> \n                                    <Col sm={4}>\n                                        <p className=\"no-m-b\">Favorite Musician:</p>\n                                    </Col>\n                                    <Col sm={8}>\n                                    {editMode.artist ? editArtist()\n                                        : [\n                                            (profileUser.favArtist \n                                                ? <p className=\"no-m-b\">{profileUser.favArtist}</p>\n                                                : <p className=\"no-m-b\">{altData.favArtist}</p>\n                                            )\n                                            ]\n                                        }\n                                        <div className=\"edit-icon-wrapper\" onClick={()=>{setEditMode({...editMode, artist: true})}}>\n                                        {editMode.artist ? '' : [\n                                            (allowEdit && <img className=\"edit-icon\" src={editIcon} alt=\"Edit your favourite artists\"/>)\n                                        ]}\n                                    </div>\n                                    </Col>\n                                </Row>\n                            </div>\n                        </Col>\n                        <Col sm={8} className=\"pl-0-pc\">\n                        { userCars !== undefined ?\n                            userCars.map( car =>{\n                               return (\n                                <React.Fragment>\n                                    <VehicleCard car={car} allowEdit={allowEdit} profileUser={profileUser} getMyCars={getMyCars} />\n                                    <div className=\"spacer-2rem\"></div>\n                                </React.Fragment>\n                               )\n                            }) :\n                            <React.Fragment>\n                                <VehicleCard car={altCarData} allowEdit={allowEdit} />\n                                <div className=\"spacer-2rem\"></div>\n                            </React.Fragment>\n                        }\n\n                            <div className=\"spacer-2rem\"></div>\n                            { allowEdit && \n                                <div style={{padding: '0 6px'}}>\n                                    <Button className=\"btn-add-car\" onClick={handleShowAddCarModal}>Add my car</Button>\n                                </div>\n                            }\n                            <div className=\"spacer-2rem\"></div>\n                        </Col>\n                        \n                    </Row>\n                    \n                </div>\n                \n            </div>\n        </Layout>\n    )\n}\nconst mapStateToProps = (state) =>{\n    return{\n        isLoggedIn: state.auth.isLoggedIn,\n        customData: state.auth.customData\n    }\n}\nexport default connect(mapStateToProps)(BioPage)","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/CarSearch.js",["339","340","341","342","343","344"],"import React, { Fragment, useState, useEffect  } from 'react'\nimport { Dropdown, DropdownButton, Button } from 'react-bootstrap'\nimport Layout from './Layout/Layout'\nimport * as Realm from \"realm-web\"\nimport { carsAllYear } from './carTempData'\nimport './carStats.scss'\nimport { v4 as uuidv4 } from 'uuid'\nimport jwt from 'jsonwebtoken'\n\nconst CarSearch = (props) =>{\n    const [modelName, setModelName] = useState([])\n    const [selectedCar, setSelectedCar] = useState({make: \"Select a maker\", model: \"Select a model\", type: \"Select a type\", year: \"Select a year\"})\n    const [carTypeArr, setCarTypeArr] = useState([])\n    const [carYearArr, setCarYearArr] = useState([])\n    const [mongo, setMongo] = useState()\n    const [cars, setCars] = useState([])\n    const appConfig = {\n        id: process.env.REACT_APP_REALM_APP_ID,\n        // timeout: 10000, \n      };\n    const app = new Realm.App(appConfig)\n    // const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n    // const [carMakers, setCarMakers] = useState([])\n    const searchId = uuidv4()\n\n    // const getMaker = async () =>{\n    //     try {\n    //         await app.logIn(credentials).then( async user =>{\n    //           const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME);\n    //           let carMakerArr = []\n    //           const mongoCollection = mongo.db(\"smoke-show\").collection(\"cars\");\n    //         //   const filter = {make: 'aston-martin'} \n    //           await mongoCollection.find().then(cars =>{\n    //               cars.map(car =>{\n    //                   if (carMakerArr.includes(car.make) === false) carMakerArr.push(car.make);\n    //                   return\n    //               })\n    //               setCarMakers(carMakerArr)\n                  \n    //               console.log('checkarr',carMakerArr)\n    //           })\n             \n    //         })\n            \n    //        }catch(error){console.log(error)}\n    // }\n    const getModel = async (e) =>{\n        setSelectedCar({...selectedCar, make: e})\n        let carModelArr = []\n        const mongoCollection = mongo.db(\"smoke-show\").collection(\"cars\")\n        const makeLowerCase = e.toLowerCase()\n        const filter = {make: makeLowerCase} \n        try{\n            await mongoCollection.find(filter).then(cars =>{\n                          cars.map(car =>{\n                              if (carModelArr.includes(car.model) === false) carModelArr.push(car.model);\n                              return car\n                          })\n                          setModelName(carModelArr.sort())\n                  setCars(cars)\n              })\n        }catch(err){console.log(err)}\n        // try {\n        //     await app.logIn(credentials).then( async user =>{\n        //       const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME);\n        //       const mongoCollection = mongo.db(\"smoke-show\").collection(\"cars\");\n        //       const makeLowerCase = e.toLowerCase()\n        //       const filter = {make: makeLowerCase} \n        //       await mongoCollection.find(filter).then(cars =>{\n        //           cars.map(car =>{\n        //               if (carModelArr.includes(car.model) === false) carModelArr.push(car.model);\n        //           })\n                  \n        //           setModelName(carModelArr.sort())\n        //           setCars(cars)\n        //       })\n             \n        //     })\n            \n        //    }catch(error){console.log(error)}\n        \n    }\n    const getCarYear = (data) =>{\n        let yearArr = []\n        data.map(car =>{\n            if(yearArr.includes(car.year) === false){\n                yearArr.push(car.year)\n            }\n        })\n        setCarYearArr(yearArr.sort())\n    }\n    const filterByModel = (e) =>{\n        setSelectedCar({...selectedCar, model: e})\n        let filteredByModel = cars.filter(function (car) {\n            if(car.model === e){\n                return car\n            }\n        });\n\n        setCars(filteredByModel)\n        getCarYear(filteredByModel)\n        \n    }\n    const getModelNames = (data) =>{\n        \n        const regCarTypes = /Sedan|Coupe|SUV|Minivan|Wagon|Sport|Station Wagon|Hatchback|Truck/i\n        let availableTypes = data.map(car =>{\n          const result = car.name.match(regCarTypes) \n          if(result){\n              return result[0]\n              \n          }\n          \n        })\n        const finalResult = [...new Set(availableTypes)]\n        setCarTypeArr(finalResult.sort())\n\n    }\n    const filterByYear = (e) =>{\n        setSelectedCar({...selectedCar, year: e})\n        let filteredByYear = cars.filter((car) =>{\n            if(car.year == e){\n                return car\n            }\n        })\n        setCars(filteredByYear)\n        getModelNames(filteredByYear)\n    }\n\n    const filterByType = (e) =>{\n       \n        setSelectedCar({...selectedCar, type: e})\n     \n        let filtered =  cars.filter(car => car.name.includes(e))\n        console.log('filtered', filtered)\n        setCars(filtered)\n    }\n   const goStatsPage = () =>{\n       sessionStorage.setItem(searchId, cars)\n       props.history.push({\n        pathname: `/car-stats/${searchId}`,\n        cars: cars,\n        selected: selectedCar\n      })\n   }\n   const checkToken = async () =>{\n    let token = sessionStorage.getItem('session_token')\n    const tokenUser = sessionStorage.getItem('session_user')\n    if(token){\n        jwt.verify(token, process.env.REACT_APP_JWT_SECRET, async (err, decoded)=>{\n            if(err){\n                console.log(err)\n                const credentials = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTH_PUBLIC_VIEW)\n                try{\n                    await app.logIn(credentials).then(  user =>{\n                        const mongoClient = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n                        setMongo(mongoClient)\n                    })\n                }catch(err){\n                    console.log(err)\n                }\n            }else{\n                const credentials = jwt.verify(tokenUser, process.env.REACT_APP_JWT_SECRET)\n             \n                try{\n                    await app.logIn(credentials.cre).then( user =>{\n                        const mongoClient = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n                        setMongo(mongoClient)\n                    })\n                }catch(err){\n                    console.log(err)\n                }\n            }\n        });\n        \n     }else{\n        const credentials = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTH_PUBLIC_VIEW);\n        try{\n            await app.logIn(credentials).then(  user =>{\n                const mongoClient = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n                setMongo(mongoClient)\n            })\n        }catch(err){\n            console.log(err)\n        }\n     }\n   }\n   useEffect(() => {\n    checkToken()\n   }, [])\n    return(\n        <Layout>\n            <div className=\"spacer-4rem\"></div>\n            <div className=\"main-wrapper\" style={{minHeight: 'calc(100vh - 21rem)'}}>\n            \n                <div className=\"search-wrapper\" >\n                    <div className=\"center-box\">\n                    {/* maker */}\n                    <DropdownButton id=\"dropdown-brand\" title={selectedCar.make} onSelect={getModel} className=\"custom-dropdown\">\n                        { carsAllYear && carsAllYear.map((maker, index) =>{\n                            const titleCase = maker.replace(/\\w\\S*/g, function(txt){return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();});\n                            return(\n                                <Fragment key={maker}>\n                                    <Dropdown.Item  eventKey={titleCase} >\n                                    <img src={require(`../assets/maker_logos/${titleCase}_Logo.png`).default} alt={titleCase} className=\"maker-img\"/>\n                                    {titleCase}\n                                    </Dropdown.Item>\n                                </Fragment>\n                            )\n                            \n                            \n                        })}\n                    </DropdownButton>\n                    </div>\n                    \n                    <div className=\"center-box\">\n                    {/* model */}\n                        <DropdownButton id=\"dropdown-year\" title={selectedCar.model} onSelect={filterByModel} className=\"dropdown-middle\">\n                            {modelName.map(model =>{\n                                const titleCase = model.replace(/\\w\\S*/g, function(txt){return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();})\n                                return(\n                                    <Fragment key={model}>\n                                        <Dropdown.Item eventKey={model} >{titleCase}</Dropdown.Item>\n                                    </Fragment>\n                                )\n                            })}\n                        </DropdownButton>\n                    </div>\n                    <div className=\"center-box\">\n                    {/* year */}\n                        <DropdownButton id=\"dropdown-model\" title={selectedCar.year} onSelect={filterByYear}>\n                            {carYearArr.map(year =>{\n                                const uuid = uuidv4()\n                                return(\n                                    <Fragment key={uuid} >\n                                        <Dropdown.Item eventKey={year} >{year}</Dropdown.Item>\n                                    </Fragment>\n                                )\n                            })}\n                        </DropdownButton>\n                    </div>\n                    <div className=\"center-box\">\n                        <DropdownButton id=\"dropdown-type\" title={selectedCar.type} onSelect={filterByType} >\n                            { carTypeArr && carTypeArr.map(type =>{\n                                return(\n                                    <Fragment key={type}>\n                                        <Dropdown.Item eventKey={type} >{type}</Dropdown.Item>\n                                    </Fragment>\n                                )\n                                \n                                \n                            })}\n                        </DropdownButton>\n                    </div>\n                    \n                    <div className=\"center-box\">\n                        <Button className=\"search-btn\" onClick={goStatsPage}>Search</Button>\n                    </div>\n                    \n                </div>\n\n                \n            </div>\n        \n        </Layout>\n    )\n}\n\nexport default CarSearch","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Giveaways.js",["345","346","347","348"],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/store/reducers/authReducer.js",["349"],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/store/reducers/userReducer.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/commentsTempData.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/carTempData.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Comments.js",["350","351","352","353","354"],"import React, { useState, useEffect } from 'react'\nimport { Row, Button, Form, Accordion, Card } from 'react-bootstrap'\nimport Avatar from 'react-avatar'\nimport { connect } from 'react-redux'\nimport * as Realm from \"realm-web\"\nimport { Link } from 'react-router-dom'\n// import { authUser } from '../store/actions/authActions'\nimport moment from 'moment'\nimport jwt from 'jsonwebtoken'\nimport { openLoginModal, attachMsg } from '../store/actions/authActions'\nimport './comments.scss'\n\nconst Comments = (props) =>{\n    const [commentsDB, setCommentsDB] = useState([])\n    const [moreComments, setMoreComments] = useState([])\n    const [isComment, setIsComment] = useState(false)\n\n    const [userComment, setUserComment] = useState(\"\")\n    const app = new Realm.App({ id: process.env.REACT_APP_REALM_APP_ID })\n    // const getApp = Realm.App.getApp(process.env.REACT_APP_REALM_APP_ID);\n\n    const handleChange = (e) =>{\n        setUserComment(e.target.value)\n    }\n    const handleSubmitComment = async (e) =>{\n        e.preventDefault()\n        let tokenSessionStorage= sessionStorage.getItem('session_token')\n        const tokenUser = sessionStorage.getItem('session_user')\n        let newComment ={}\n        let credentials = null\n        if(tokenSessionStorage){\n            jwt.verify(tokenSessionStorage, process.env.REACT_APP_JWT_SECRET, (err, decoded)=>{\n                if(err){\n                    console.log('please log in. session time out')\n                }else{\n                    newComment={\n                        userId: decoded.userData.userId,\n                        comment: userComment,\n                        date_posted: new Date().getTime(),\n                        videoId: props.videoId,\n                        username: decoded.userData.fname\n                    }\n                    credentials = jwt.verify(tokenUser, process.env.REACT_APP_JWT_SECRET)\n                }\n            })\n        }\n        try{\n            // Authenticate the user\n            await app.logIn(credentials.cre).then(async user=>{\n                \n                    const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME);\n                    const mongoCollection = mongo.db(\"smoke-show\").collection(\"comments\");\n\n                    await mongoCollection.insertOne(newComment).then(res =>{\n                            e.target.reset();\n                            console.log('new comment', res)\n                            getComments(credentials.cre)\n                    })\n                });\n\n        }catch(error){\n            console.log('error', error)\n\n        }\n   \n    }\n    const writeComment = () =>{\n        return (\n        <Row className=\"comment-wrapper\">\n            <div className=\"col-1\" style={{margin:0,padding:0}}>\n\n                <Avatar color={Avatar.getRandomColor('sitebase', ['red', 'green', 'teal'])} className=\"profile-pic\" name=\"saki\" />\n            </div>\n            <div className=\"col-11\" style={{margin: 0, paddingRight:0}}>\n                <Form onSubmit={handleSubmitComment} >\n                    <Form.Group >\n                    <Form.Control className=\"comment-input\" type=\"text\" placeholder=\"Add a comment here\" name=\"comment\" onChange={handleChange} required/>\n                        <div className=\"comment-login-wrapper\">\n                            <Button className=\"comment-btn\" type=\"submit\"> Comment</Button>\n                        </div>\n                    </Form.Group>\n                </Form>\n            </div>\n        </Row>\n        )\n        \n    }\n        \n    const askLogin = () =>{\n        props.openLoginModal(true)\n        props.attachMsg('Please login to comment.')\n    }\n    const loginToComment = () => {\n        return (\n            <Row className=\"comment-wrapper\">\n                <div className=\"col-1\" style={{margin:0,padding:0}}>\n\n                <Avatar color={Avatar.getRandomColor('sitebase', ['red', 'green', 'teal'])} className=\"profile-pic\" name=\"\" />\n                </div>\n                 <div className=\"col-11\" style={{margin: 0, paddingRight:0}}>\n                    <Form onSubmit={handleSubmitComment} >\n                        <Form.Group >\n                        <Form.Control className=\"comment-input\" type=\"text\" placeholder=\"Write a comment\" name=\"comment\" onChange={askLogin} />\n                            <div className=\"comment-login-wrapper\">\n                                <Button \n                                disabled\n                                className=\"comment-btn\" type=\"submit\">Comment</Button>\n                            </div>\n                        </Form.Group>\n                    </Form>\n                </div>\n            </Row>\n           \n        )\n       \n    }\n    const chunkArray = (allComments) =>{\n        let all = allComments.slice(2)\n        let chunk_size = 10\n        let index = 0;\n        let arrayLength = all.length;\n        let tempArray = [];\n        let myChunk\n        \n        for (index = 0; index < arrayLength; index += chunk_size) {\n            myChunk = all.slice(index, index+chunk_size);\n            // Do something if you want with the group\n            tempArray.push(myChunk);\n        }\n\n        return tempArray;\n    }\n\n    const getComments = async (credentials) =>{\n        const filter = {videoId: props.videoId} \n        const options = {sort: {date_posted: -1}, limit: 12}\n        setCommentsDB([])\n\n        try{\n            await app.logIn(credentials).then(async user =>{\n                if(user.id === app.currentUser.id){\n                }else{\n                    console.log('current user and logged in user do not match')\n                }\n                const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n                const collectionComments = mongo.db(\"smoke-show\").collection(\"comments\")\n                const collectionUsers = mongo.db(\"smoke-show\").collection(\"users\")\n                await collectionComments.find(filter, options).then(async resAll =>{\n                    if( resAll.length !== 0){\n                        let picAttached = resAll.map(async res =>{\n                            const filterUser = {userId: res.userId}\n                            try {\n                                await collectionUsers.findOne(filterUser).then(user =>{\n                                    res.profilePic = user.profilePic\n                                })\n                            } catch (error) {\n                                console.log(error)\n                            }\n                            return res\n                        })\n                        setIsComment(true)\n                        const finalResults = await Promise.all(picAttached);\n                        setIsComment(true)\n                         if(finalResults.length == 1){\n                            setCommentsDB(finalResults)\n                         }else if(finalResults.length == 2){\n                            for(let i=0;i<2; i++){\n                                setCommentsDB(commentsDB=>[...commentsDB, finalResults[i]])\n                            }\n                        }else if(finalResults.length >= 3){\n                            const chunked = chunkArray(finalResults)\n                            setMoreComments(chunked)\n                        }\n                        \n                        \n                    }else if(resAll.length == 0){\n                        setIsComment(false)\n                        setCommentsDB([])\n                    }\n                    \n                })\n            })\n                \n            }catch(err){console.log(err)}\n    }\n\n\n    useEffect( () => {\n        \n        // const token = sessionStorage.getItem('session_token')\n        const tokenUser = sessionStorage.getItem('session_user')\n         if(tokenUser){\n            jwt.verify(tokenUser, process.env.REACT_APP_JWT_SECRET, (err, decoded)=>{\n                if(err){\n                    // setIsLoggedIn(false)\n                    const credentials = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTH_PUBLIC_VIEW);\n                    getComments(credentials)\n                }else{\n                    // setIsLoggedIn(true)\n                    \n                    getComments(decoded.cre)\n                }\n            });\n            \n         }else{\n            // setIsLoggedIn(false)\n            const credentials = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTH_PUBLIC_VIEW);\n                    getComments(credentials)\n         }\n    }, [])\n    return(\n        <React.Fragment>\n    \n        {props.isLoggedIn ? writeComment() : loginToComment() }\n        { isComment === true && commentsDB.length !== 0 ? commentsDB.map((comment, index) =>{\n         \n            {/* var localtime = moment(comment.date_posted).local().format('MM-DD-YYYY') */}\n            let localtime = moment(comment.date_posted).fromNow()\n            return(\n                <Row className=\"comment-wrapper\" key={localtime + index}>\n\n                    <div style={{margin:0,padding:0}} className=\"col-1\">\n                        <Link to={{\n                            pathname: `/user/${comment.userId}`\n                        }}>\n                            {comment.profilePic ? <img src={comment.profilePic} className=\"profile-pic \" alt={comment.username} /> :\n                            <Avatar className=\"profile-pic\" name={comment.username} color=\"#6E4DD5\"/>\n                            }\n                        </Link>\n                    </div>\n                    \n                    <div  style={{margin: 0, paddingRight:0}} className=\"col-11\">\n                    <div className=\"comment-username \">\n                        <Link to={{\n                            pathname: `/user/${comment.userId}`\n                        }}>\n                            <strong>{comment.username}</strong>\n                        </Link>\n                     {\" \"} | <span style={{color:'gray'}}>{localtime}</span></div>\n                    <div className=\"comment-txt\" >{comment.comment}</div>\n                    </div>\n                </Row>\n            )\n        }) : ''\n        }\n        <Accordion defaultActiveKey=\"0\">\n         \n            <Card className=\"card-comments\">\n                <Card.Header className=\"card-comments-h\">\n                { moreComments[0] && \n                    <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"1\" className=\"btn-load\">\n                    Load more\n                    </Accordion.Toggle>\n                }\n                \n                </Card.Header>\n                <Accordion.Collapse eventKey=\"1\">\n                <Card.Body className=\"collapsed-body\">\n                { moreComments[0] == null && <p>No more comment</p>}\n                {moreComments[0] && moreComments[0].map((comment, index) =>{\n                    let localtime = moment(comment.date_posted).fromNow()\n                    return(\n                        <Row className=\"comment-wrapper\" key={localtime + index}>\n\n                            <div style={{margin:0,padding:0}} className=\"col-1\">\n                                <Link to={{\n                                    pathname: `/user/${comment.userId}`\n                                }}>\n                                    {comment.profile_pic ? <img src={comment.profile_pic} className=\"profile-pic \" alt={comment.username} /> :\n                                    <Avatar className=\"profile-pic\" name={comment.username} color=\"#6E4DD5\"/>\n                                    }\n                                </Link>\n                            </div>\n                            \n                            <div  style={{margin: 0, paddingRight:0}} className=\"col-11\">\n                            <div className=\"comment-username \">\n                                <Link to={{\n                                    pathname: `/user/${comment.userId}`\n                                }}>\n                                    <strong>{comment.username}</strong>\n                                </Link>\n                            {\" \"} | <span style={{color:'gray'}}>{localtime}</span></div>\n                            <div className=\"comment-txt\" >{comment.comment}</div>\n                            </div>\n                        </Row>\n                    )\n                })}\n                </Card.Body>\n                </Accordion.Collapse>\n            </Card>\n        </Accordion>\n        </React.Fragment>\n        \n        \n    )\n}\nconst mapDispatchToProps = (dispatch)=>{\n    return{\n        openLoginModal: (state) => dispatch(openLoginModal(state)),\n        attachMsg: (msg)=> dispatch(attachMsg(msg))\n    }\n}\nconst mapStateToProps = (state) => {\n    //syntax is propName: state.key of combineReducer.key\n    return{\n        loginUserData: state.auth.loginUserData,\n        isLoggedIn: state.auth.isLoggedIn,\n        customData: state.auth.customData\n    }\n  }\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Comments)","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Layout/Layout.js",["355","356","357","358"],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/giveAwayData.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/utils/youtubeAPI.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Fan/vehicleCard.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Fan/CreateNewCar.js",["359","360"],"import React, { useState, Fragment } from 'react'\nimport { Row, Col, Modal, Button, Form } from 'react-bootstrap'\nimport * as Realm from \"realm-web\"\nimport ImageUpload from './ImageUpload'\nimport jwt from 'jsonwebtoken'\nimport short from 'short-uuid'\nimport { createMyCar } from '../../store/actions/bioActions'\nimport { connect } from 'react-redux'\n\nconst CreateNewCar = (props) =>{\n    const bucketName = process.env.REACT_APP_AWS_BUCKET_NAME;\n    const [imgFile, setImgFile] = useState('')\n    const [imgData64, setImgData64] = useState('')\n    const appConfig = {\n        id: process.env.REACT_APP_REALM_APP_ID,\n        timeout: 10000, // timeout in number of milliseconds\n        };\n    const app = new Realm.App(appConfig)\n    const maxAgeTest = 1 * 60 * 60\n\n    const setImgData = (obj) =>{\n        setImgFile(obj)\n        var file = obj\n        const reader = new FileReader();\n        reader.onload = (event) => {\n        const base64 = event.target.result.split(\",\").pop()\n          setImgData64(base64)\n        //   console.log(base64);\n        };\n        reader.readAsDataURL(file);\n      }\n    const closeModal = () =>{\n        setNewCarObj({name: '', category: '', color: '', wheels: '', upgrades: ''})\n        props.handleClose()\n    }\n\n    \n    const carColors = ['White', 'Black', 'Grey', 'Blue', 'Silver', 'Red', 'Orange', 'Bronze', 'Yellow', 'Green', 'Navy']\n    const carCategories = ['Dream Car', 'Daily Driver', 'Vehicle #2']\n    const [newCarObj, setNewCarObj] = useState({name: '', category: 'Dream Car', color: 'White', wheels: '', upgrade: ''})\n\n    const handleChange = (e) =>{\n        setNewCarObj({\n            ...newCarObj,\n            [e.target.name]: e.target.value\n        })\n    }\n\n    const handleSubmit = async (e) =>{\n        e.preventDefault()\n        const baseImgUrl = 'https://s3.amazonaws.com/images.test.smokeshow/'\n        const imgId = short.generate()\n        const filekey = props.profileUser.userId + '/my-cars/' + imgId\n        const imgUrlWithKey = baseImgUrl + filekey\n        const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME);\n        const collectionUsers = mongo.db(process.env.REACT_APP_REALM_DB_NAME).collection(\"users\")\n        const collectionMyCars = mongo.db(process.env.REACT_APP_REALM_DB_NAME).collection(\"my-cars\")\n\n        const newCarData = {\n            name: newCarObj.name,\n            upgrades: newCarObj.upgrades,\n            wheels: newCarObj.wheels,\n            imgUrl: imgUrlWithKey,\n            category: newCarObj.category,\n            color: newCarObj.color,\n            userId: props.profileUser.userId,\n            performance: newCarObj.performance\n        }\n        if(app.currentUser.id === props.profileUser.userId){\n            \n            try{\n                await app.currentUser.functions.putImageObjToS3(imgData64, bucketName, filekey, imgFile.type).then( async res =>{\n                    \n                    try{\n                        await collectionMyCars.insertOne(newCarData).then(async res =>{\n                            console.log('res', res)\n                            console.log('inserted', res.insertedId)\n                            await collectionUsers.updateOne(\n                                { \"userId\": app.currentUser.id },\n                                {$push: { myCars:  res.insertedId}},\n                                { upsert: true }\n                                ).then(res =>{\n                                    console.log('res', res)\n                                    let oldArr = []\n                                    if(props.profileUser.myCars){\n                                        oldArr.push(props.profileUser.myCars)\n                                    }\n                                    \n                                    const cars = {myCars: oldArr.push(newCarData)}\n                                    props.updateProfileData(cars, 'myCars')\n                                    props.updateCarData(newCarData)\n                                    closeModal()\n                                })\n                        })\n                    //     await mongoCollection.updateOne(\n                    //         { \"userId\": app.currentUser.id},\n                    //         {\n                    //          $push: { myCars: newCarData }\n                    //         }\n                    //         ).then(res =>{\n                    //             console.log('res', res)\n                    //             const oldArr = props.profileUser.myCars\n                    //             const cars = {myCars: oldArr.push(newCarData)}\n                    //             props.updateProfileData(cars, 'myCars')\n                    //             closeModal()\n                    //         })\n                    }catch(err){\n                        console.log(err)\n                    }\n                })\n            }catch(err){\n                console.log(err)\n            }\n        }else{\n            console.log('warning current user and the login user do not match')\n            const token = sessionStorage.getItem('session_token')\n            const tokenUser = sessionStorage.getItem('session_user')\n            const decoded = jwt.verify(token, process.env.REACT_APP_JWT_SECRET)\n            const credentials = jwt.verify(tokenUser, process.env.REACT_APP_JWT_SECRET)\n            \n            try{\n                await app.logIn(credentials.cre).then(user =>{\n                    user.functions.putImageObjToS3(imgData64, bucketName, filekey, imgFile.type).then( async res =>{\n             \n                        try{\n                            await collectionMyCars.insertOne(newCarData).then(async res =>{\n                                console.log('res', res)\n                                await collectionUsers.updateOne(\n                                    { \"userId\": app.currentUser.id },\n                                    {$push: { myCars:  res.insertedId}},\n                                    { upsert: true }\n                                    ).then(res =>{\n                                        console.log('res', res)\n                                        const oldArr = props.profileUser.myCars\n                                        const cars = {myCars: oldArr.push(newCarData)}\n                                        props.updateProfileData(cars, 'myCars')\n                                        closeModal()\n                                    })\n                            })\n                        }catch(err){\n                            console.log(err)\n                        }\n                    })\n                    \n                })\n            }catch(err){\n                console.log(err)\n            }\n        }\n    }\n        \n\n\n    return(\n    <Fragment>\n        <Modal show={props.show} onHide={props.handleClose} className=\"modal-wrapper-bio\">\n            <Modal.Header closeButton>\n            </Modal.Header>\n            <Modal.Body>\n                <Row className=\"bio-modal-inner-wrapper\">\n                    <Col sm={6} className=\"\">\n                    <ImageUpload fileObj={setImgData} />\n\n                    {/* <div {...getRootProps()} className=\"dropzone-wrapper\">\n                        <input {...getInputProps()} />\n                        {\n                            isDragActive ?\n                            <p>Drop the files here ...</p> :\n                            <div className=\"drag-dropzone\">\n                                <div className=\"bio-modal-container\">\n                                    <img src={uploadIcon} alt=\"upload files here\" />\n                                    <p>Drag and drop or click to upload an image</p>\n                                    <p>*3MB max image file size<br/>\n                                    *accepted file formats: jpg, png, gif</p>\n                                </div>\n\n                            </div>\n                        }\n                    </div> */}\n                    \n                    </Col>\n                    <Col sm={6}>\n                    <Form>\n                        <Form.Group >\n                            <Form.Label>Category</Form.Label>\n                            <Form.Control as=\"select\"  onChange={handleChange} name=\"category\">\n                            {carCategories.map((category, index) =>{\n                                return(\n                                    <option key={category + index}>{category}</option>\n                                )\n                            })}\n\n                            </Form.Control>\n                        </Form.Group>\n                        <br/>\n                        <Form.Group >\n                            <Form.Label>Car name</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"Enter car name e.g. maker, model, year\" onChange={handleChange} name=\"name\"/>\n                        </Form.Group>\n                        <br/>\n                        <Form.Group >\n                            <Form.Label>Color</Form.Label>\n                            {/* <Form.Control type=\"text\" placeholder=\"Select your color\" onChange={handleChange} name=\"color\" /> */}\n                            <Form.Control as=\"select\" onChange={handleChange} name=\"color\">\n                            {carColors.map((color, index) =>{\n                                return(\n                                    <option key={color + index}>{color}</option>\n                                )\n                            })}\n                                \n                            </Form.Control>\n                        </Form.Group>\n                        <br/>\n                        <Form.Group >\n                            <Form.Label>Wheels</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"Enter your wheel\" onChange={handleChange} name=\"wheels\"/>\n                        </Form.Group>\n                        <br/>\n                        <Form.Group >\n                            <Form.Label>Performance</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"Enter your performance\" onChange={handleChange} name=\"performance\" />\n                        </Form.Group>\n                        <br/>\n                        <Form.Group >\n                            <Form.Label>Upgrades</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"Enter your update\" onChange={handleChange} name=\"upgrades\" />\n                        </Form.Group>\n                        <br/><br/>\n                        <Row>\n                            <Col sm={6}>\n                                <Button variant=\"secondary\" onClick={closeModal} className=\"cancel-btn\" > \n                                    Cancel\n                                </Button>\n                            </Col>\n                            <Col sm={6}>\n                                <Button variant=\"primary\" type=\"submit\" onClick={handleSubmit} className=\"save-changes-btn\">\n                                Add my new car\n                                </Button>\n                                {/* <Button onClick={testSubmit}>\n                                    test Submit\n                                </Button> */}\n                                {/* <br></br><br/>\n                                <button onClick={testImgUpload}>test upload</button> */}\n                            </Col>                          \n                        </Row>\n                    </Form>\n                    </Col>\n                </Row>\n            </Modal.Body>\n            <Modal.Footer>\n  \n            </Modal.Footer>\n        </Modal>\n    </Fragment>\n    )\n}\n\nconst mapDispatchToProps = (dispatch) =>{\n    return{\n        createMyCar: (car) => dispatch(createMyCar(car))\n    }\n}\n\nexport default connect(null, mapDispatchToProps)(CreateNewCar)","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Layout/Header.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Layout/Footer.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Fan/SettingModal.js",["361","362","363","364","365","366"],"import React, { useState, Fragment, useEffect} from 'react'\nimport { Row, Col, Modal, Button, Form, Alert } from 'react-bootstrap'\nimport bioPic from '../../assets/temp-photos/bio/avator-male.jpg'\nimport noImg from '../../assets/global/no_image.jpg'\nimport jwt from 'jsonwebtoken'\nimport * as Realm from \"realm-web\"\nimport short from 'short-uuid'\n\nconst appConfig = {\n    id: process.env.REACT_APP_REALM_APP_ID,\n    timeout: 10000, // timeout in number of milliseconds\n  };\nconst app = new Realm.App(appConfig);\n\nconst SettingModal = (props) =>{\n    const bucketName = process.env.REACT_APP_AWS_BUCKET_NAME\n    const [imgData64Profile, setImgData64Profile] = useState('')\n    const [imgData64Cover, setImgData64Cover] = useState('')\n    const [userObj, setUserObj] = useState({fname: props.profileUser.fname, lname: props.profileUser.lname, email: props.profileUser.email, username: props.profileUser.username})\n    const [uploadMsg, setUploadMsg] = useState({profile: '', cover: ''})\n    const [currentUserId] = useState(app.currentUser.id)\n    const [userPw, setUserPw] = useState({newPw: '', conNewPw: '', currentPw: ''})\n    const [tooBig, setTooBig] = useState({profile: false, cover: false})\n    const [profilePic, setProfilePic] = useState({})\n    const [coverPic, setCoverPic] = useState({})\n    const [imgThumb, setImgThumb] = useState()\n    const [coverImgThumb, setCoverImgThumb] = useState()\n    const msg = {profilePic: 'Your profile picture is successfully updated', coverPic: 'Your cover picture is successfully updated', userDetails: 'Your account information successfully updated', password: 'Your password is successfully updated'}\n    const [isSuccess, setIsSuccess] = useState({profilePic: false, coverPic: false, userDetails: false, password: false })\n    const [currentBioPic, setCurrentBioPic] = useState()\n    const [currentCover, setCurrentCover] = useState()\n    const [disableBtnStates, setDisableBtnStates] = useState({profilePic: true, coverPic: true, userDetails: true, password: true})\n    const baseImgUrl = 'https://s3.amazonaws.com/images.test.smokeshow/'\n\n    const handleClose = props.handleCloseSetting\n    // const handleShow = props.handleShowSetting\n\n    const handleChange = (e) =>{\n        \n        setUserObj({...userObj,\n            [e.target.name]: e.target.value\n        })\n        if(disableBtnStates){\n            setDisableBtnStates({\n                ...disableBtnStates,\n                userDetails: false\n            })\n        }\n\n    }\n    const handleChangePw = (e) =>{\n        setUserPw({\n            ...userPw,\n            [e.target.name]: e.target.value\n        })\n        setDisableBtnStates({\n            ...disableBtnStates,\n            password: false\n        })\n    }\n\n    const profilePicUpload = (e) =>{\n        if (e.target.files[0].size / (1024 * 1024) > 3){\n            setTooBig({...tooBig, profile: true})\n            setUploadMsg({...uploadMsg, profile: 'The file size is too big. Please choose different file.'})\n            return\n        }else{\n        setProfilePic(e.target.files[0])\n        setImgThumb(URL.createObjectURL(e.target.files[0]))\n        setDisableBtnStates({\n            ...disableBtnStates,\n            profilePic: false\n        })\n        const file = e.target.files[0] \n        const reader = new FileReader()\n        reader.onload = (event) => {\n        const base64 = event.target.result.split(\",\").pop()\n          setImgData64Profile(base64)\n        };\n        reader.readAsDataURL(file)\n        }\n    }\n    const saveProfilePic = async () =>{\n        const imgId = short.generate()\n        const filekey = props.profileUser.userId + '/profile/' + imgId\n        const imgUrlWithKey = baseImgUrl + filekey\n        const oldProfilePic = props.profileUser.profilePic\n\n        if( currentUserId === props.profileUser.userId){\n            \n            try{\n                await app.currentUser.functions.putImageObjToS3(imgData64Profile, bucketName, filekey, profilePic.type).then( async res =>{\n                    console.log('res', res)\n                    if(typeof(oldProfilePic) !== \"undefined\"){\n                  \n                            const currentUrl = props.profileUser.profilePic\n                            const splitted = currentUrl.split('/');\n                            const key = splitted.splice(4, 7).join(\"/\")\n                            deleteImgObj(key)\n                        \n                    }\n                    const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n                    const collectionUser = mongo.db(\"smoke-show\").collection(\"users\")\n                    try{\n                        await collectionUser.updateOne(\n                            { \"userId\": app.currentUser.id},\n                            { \"$set\": { \"profilePic\": imgUrlWithKey } },\n                            { upsert: true}\n                        ).then(res =>{\n                            console.log('res', res)\n                            setIsSuccess({\n                                ...isSuccess,\n                                profilePic: true\n                            })\n                            setDisableBtnStates({\n                                ...disableBtnStates,\n                                profilePic: true\n                            })\n                            props.updateProfileData(imgUrlWithKey, \"profilePic\")\n                            return\n                        })\n                    }catch(err){\n                        console.log(err)\n                    }\n                })\n            }catch(err){\n            console.log(err)\n            }\n        }else{\n        const token = sessionStorage.getItem('session_token')\n        const tokenUser = sessionStorage.getItem('session_user')\n        const decoded = jwt.verify(token, process.env.REACT_APP_JWT_SECRET)\n        const credentials = jwt.verify(tokenUser, process.env.REACT_APP_JWT_SECRET)\n        try{\n            await app.logIn(credentials.cre).then(async user =>{\n                const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n                const collectionUser = mongo.db(\"smoke-show\").collection(\"users\")\n                await user.functions.putImageObjToS3(imgData64Profile, bucketName, filekey, profilePic.type).then( res =>{\n                    console.log(res)\n                    if(typeof(oldProfilePic) !== \"undefined\"){\n                  \n                        const currentUrl = props.profileUser.profilePic\n                        const splitted = currentUrl.split('/');\n                        const key = splitted.splice(4, 7).join(\"/\")\n                        deleteImgObj(key)\n                    \n                    }\n                })\n                try{\n                    await collectionUser.updateOne(\n                        { \"userId\": user.userId},\n                        { \"$set\": { \"profilePic\": imgUrlWithKey } },\n                        { upsert: true}\n                    ).then(res =>{\n                        console.log('res', res)\n                        setIsSuccess({\n                            ...isSuccess,\n                            profilePic: true\n                        })\n                        setDisableBtnStates({\n                            ...disableBtnStates,\n                            profilePic: true\n                        })\n                        props.updateProfileData(imgUrlWithKey, \"profilePic\")\n\n                        return\n                    })\n                }catch(err){\n                    console.log(err)\n                }\n            })\n        }catch(err){\n            console.log(err)\n        }\n        }\n    }\n    const coverPicUpload = (e) =>{\n        \n        if (e.target.files[0].size / (1024 * 1024) > 3){\n            setTooBig({...tooBig, cover: true})\n            setUploadMsg({...uploadMsg, cover: 'The file size is too big. Please choose different file.'})\n            return\n        }else{\n            setTooBig({...tooBig, cover: false})\n            setUploadMsg({...uploadMsg, cover: ''})\n            console.log(e.target.files[0])\n            setCoverPic(e.target.files[0])\n            setCoverImgThumb(URL.createObjectURL(e.target.files[0]))\n            setDisableBtnStates({\n                ...disableBtnStates,\n                coverPic: false\n            })\n            const file = e.target.files[0] \n            const reader = new FileReader()\n            reader.onload = (event) => {\n            const base64 = event.target.result.split(\",\").pop()\n              setImgData64Cover(base64)\n            };\n            reader.readAsDataURL(file)\n        }\n        \n    }\n    const saveProfileCover = async  (e) =>{\n        const imgId = short.generate()\n        const filekey = props.profileUser.userId + '/profile/' + imgId\n        const imgUrlWithKey = baseImgUrl + filekey\n        \n        if(currentUserId === props.profileUser.userId){\n            const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n            try{\n                await app.currentUser.functions.putImageObjToS3(imgData64Cover, bucketName, filekey, coverPic.type).then( async res =>{\n                    console.log('res', res)\n                    if( typeof(props.profileUser.profileCover) !== \"undefined\"){\n                        const currentUrl = props.profileUser.profileCover\n                        const splitted = currentUrl.split('/');\n                        const key = splitted.splice(4, 7).join(\"/\")\n                        deleteImgObj(key)\n                    }\n                    \n                    const collectionUser = mongo.db(\"smoke-show\").collection(\"users\")\n                    try{\n                        await collectionUser.updateOne(\n                            { \"userId\": props.profileUser.userId},\n                            { \"$set\": { \"profileCover\": imgUrlWithKey } },\n                            { upsert: true}\n                        ).then( res =>{\n                            console.log('res', res)\n                            setIsSuccess({\n                                ...isSuccess,\n                                profilePic: true\n                            })\n                            setDisableBtnStates({\n                                ...disableBtnStates,\n                                profilePic: true\n                            })\n                            props.updateProfileData(imgUrlWithKey, \"profileCover\")\n                        })\n                    }catch(err){ console.log(err) }\n                })\n            }catch(err){\n            console.log(err)\n            }\n        }else{\n            const tokenUser = sessionStorage.getItem('session_user')\n            // const decoded = jwt.verify(token, process.env.REACT_APP_JWT_SECRET)\n            const credentials = jwt.verify(tokenUser, process.env.REACT_APP_JWT_SECRET)\n            try{\n                await app.logIn(credentials.cre).then(async  user =>{\n                    const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n                    const collectionUser = mongo.db(\"smoke-show\").collection(\"users\")\n                    await user.functions.putImageObjToS3(imgData64Cover, bucketName, filekey, coverPic.type).then( async res =>{\n                        if( typeof(props.profileUser.profileCover) !== \"undefined\"){\n                            const currentUrl = props.profileUser.profileCover\n                            const splitted = currentUrl.split('/');\n                            const key = splitted.splice(4, 7).join(\"/\")\n                            deleteImgObj(key)\n                        }\n\n                    })\n                try{\n                    await collectionUser.updateOne(\n                        { \"userId\": user.userId},\n                        { \"$set\": { \"profileCover\": imgUrlWithKey } },\n                        { upsert: true}\n                    ).then(res =>{\n                        console.log('res', res)\n                        setIsSuccess({\n                            ...isSuccess,\n                            coverPic: true\n                        })\n                        setDisableBtnStates({\n                            ...disableBtnStates,\n                            coverPic: true\n                        })\n                        props.updateProfileData(imgUrlWithKey, 'profileCover')\n                    })\n                }catch(err){\n                    console.log(err)\n                }\n                })\n            }catch(err){\n                console.log(err)\n            }\n            \n        }\n    }\n\n\n    const handleUpdateProfile = async (e) =>{\n        e.preventDefault()\n        const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n        const collectionUser = mongo.db(\"smoke-show\").collection(\"users\")\n       \n        if(app.currentUser.id === props.profileUser.userId){\n            try{\n                await collectionUser.updateOne(\n                    { \"userId\": app.currentUser.id},\n                    {\n                        \"$set\": {\n                            \"fname\": userObj.fname,\n                            \"lname\": userObj.lname,\n                            \"username\": userObj.username\n                          }\n                    },\n                    { upsert: true}\n                ).then( res =>{\n                    console.log(res)\n                    setIsSuccess({\n                        ...isSuccess,\n                        userDetails: true\n                    })\n                    setDisableBtnStates({\n                        ...disableBtnStates,\n                        userDetails: true\n                    })\n                    props.updateUserDetails(userObj.fname, userObj.lname, userObj.username)\n                })\n            }catch(err){ console.log(err) }\n            \n        }else{\n            console.log('write login function')\n            const token = sessionStorage.getItem('session_user')\n            const decoded = jwt.verify(token, process.env.REACT_APP_JWT_SECRET)\n            \n            try{\n                await app.logIn(decoded.cre).then( async user =>{\n                    const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n                    collectionUser = mongo.db(\"smoke-show\").collection(\"users\")\n                    try{\n                        await collectionUser.updateOne(\n                            { \"userId\": user.userId },\n                            {\n                                \"$set\": {\n                                    \"fname\": userObj.fname,\n                                    \"lname\": userObj.lname,\n                                    \"username\": userObj.username\n                                  }\n                            },\n                            { upsert: true }\n                        ).then( res =>{\n                            console.log(res)\n                            setIsSuccess({\n                                ...isSuccess,\n                                userDetails: true\n                            })\n                            setDisableBtnStates({\n                                ...disableBtnStates,\n                                userDetails: true\n                            })\n                            props.updateUserDetails(userObj.fname, userObj.lname, userObj.username)\n                        })\n                    }catch(err){ console.log(err) }\n                })\n            }catch(err){ console.log(err) }\n        }\n        \n    }\n\nconst deleteImgObj = async (key) =>{\n\n    if(app.currentUser.id === props.profileUser.userId){\n        try{\n            await app.currentUser.functions.deleteImageObjToS3(bucketName, key).then(res =>{\n                console.log('res', res)\n            })\n        }catch(err){console.log(err)}\n    }else{\n        const token = sessionStorage.getItem('session_user')\n        const decoded = jwt.verify(token, process.env.REACT_APP_JWT_SECRET)\n        try{\n            await app.logIn(decoded.cre).then(async user =>{\n                await user.functions.deleteImageObjToS3(bucketName, key).then(res =>{\n                    console.log('res', res)\n                })\n            })\n        }catch(err){console.log(err)}\n    }\n}\n\n    useEffect(() => {\n\n        if( typeof(props.profileUser.profilePic) == 'undefined' || props.profileUser.profilePic  == ''){\n            setCurrentBioPic(bioPic)\n        \n        }else{\n            setCurrentBioPic(props.profileUser.profilePic)\n        }\n        setUserObj({...userObj, profilePic: bioPic})\n        if(props.profileUser.profileCover == '' || typeof(props.profileUser.profileCover) == \"undefined\"){\n            setCurrentCover(noImg)\n        }else{\n            setCurrentCover(props.profileUser.profileCover)\n        }\n      \n        \n    }, [])\n\n    return(\n    <Fragment>\n        <Modal className=\"modal-wrapper-bio\" show={props.show} onHide={handleClose}>\n            <Modal.Header closeButton>\n            </Modal.Header>\n            <Modal.Body>\n                <Row className=\"bio-modal-inner-wrapper\">\n                    <Col sm={6} className=\"\">\n                    <p className=\"heading-modal\">Your profile picture</p>\n                    <Row>\n                    \n                        <Col sm={4}>\n                            <div className=\"change-bio-pic-wrapper\">\n                                <img src={imgThumb ? imgThumb : currentBioPic} alt=\"user avator\" className=\"change-pic\" />\n                            </div>\n                            \n                        </Col>\n                        <Col sm={8} className=\"setting-file-btn\" >\n                        \n                            <Form>\n                                <Form.Group>\n                                    <Form.File \n                                    id=\"bio-pic\"\n                                    label={profilePic.name ? profilePic.name : '' }\n                                    onChange={profilePicUpload}\n                                    custom\n                                     />\n                                </Form.Group>\n                                <small >Maximum file size is 3MB.</small>\n                                {isSuccess.profilePic ? <Alert variant=\"success\" style={{padding: '5px', marginTop: '1rem', textAlign:'center'}}><small>{msg.profilePic}</small></Alert> :\n                                <div style={{marginTop: '1rem'}}></div>\n                                }\n                                {tooBig.profile && <Alert variant=\"danger\">{uploadMsg.profile}</Alert>}\n                                <Button variant=\"primary\" onClick={saveProfilePic} className=\"save-changes-btn\" disabled={disableBtnStates.profilePic}>\n                                Upload\n                                </Button>\n                                \n                            </Form>\n                        </Col>\n                    </Row>\n                    <hr />\n                    <div className=\"spacer-2rem\"></div>\n                    <p className=\"heading-modal\">Your account information</p>\n                              \n                    <Form>\n                        <Row>\n                            <Col sm={6}>\n                                <Form.Group >\n                                    <Form.Label>First Name</Form.Label>\n                                    <Form.Control name=\"fname\" type=\"text\" placeholder={props.profileUser.fname ? props.profileUser.fname : \"Enter your first name\"} onChange={handleChange} />\n                                </Form.Group>\n                            </Col>\n                            <Col sm={6}>\n                                <Form.Group >\n                                    <Form.Label>Last Name</Form.Label>\n                                    <Form.Control name=\"lname\" type=\"text\" placeholder={props.profileUser.lname ? props.profileUser.lname : \"Enter your first name\"} onChange={handleChange} />\n                                </Form.Group>\n                            </Col>\n                        </Row>\n                        \n                        <br/>\n                        <Form.Group >\n                            <Form.Label>Email</Form.Label>\n                            <Form.Control type=\"email\" name=\"email\" placeholder={props.profileUser.email ? props.profileUser.email: \"Please add your email\"} disabled />\n                        </Form.Group>\n                        <br/>\n                        <Form.Group >\n                            <Form.Label>Username</Form.Label>\n                            <Form.Control type=\"text\" name=\"username\" placeholder={props.profileUser.username ? props.profileUser.username : \"Please add your username\"} disabled/>\n                        </Form.Group>\n                        <br/>\n                        {isSuccess.userDetails ? <Alert variant=\"success\" style={{padding: '5px', marginTop: '1rem', textAlign:'center'}}><small>{msg.userDetails}</small></Alert> : \"\"}\n                        <Button variant=\"primary\" onClick={handleUpdateProfile} className=\"save-changes-btn\" disabled={disableBtnStates.userDetails}>\n                                Save Changes\n                        </Button>\n                    </Form>\n                    </Col>\n                    <Col sm={6}>\n                        <p className=\"heading-modal\">Your cover image</p>\n                        <Row>\n                            <Col sm={4}>\n                                <div className=\"change-bio-pic-wrapper\">\n                                    <img src={coverImgThumb ? coverImgThumb : currentCover} alt=\"user uploaded photo\" className=\"change-pic\" />\n                                </div>\n                                \n                            </Col>\n                            <Col sm={8} className=\"setting-file-btn\" >\n                                <Form>\n                                    <Form.Group>\n                                        <Form.File \n                                        // id=\"exampleFormControlFile2\" className=\"upload-file-btn\"\n                                        id=\"bio-pic\"\n                                        label={coverPic.name ? coverPic.name : ''}\n                                        onChange={coverPicUpload}\n                                        custom\n                                        />\n                                    </Form.Group>\n                                    <small >Maximum file size 3MB.</small>\n                                    {isSuccess.coverPic ? <Alert variant=\"success\" style={{padding: '5px', marginTop: '1rem', textAlign:'center'}}><small>{msg.coverPic}</small></Alert> :\n                                    <div style={{marginTop: '1rem'}}></div>\n                                    }\n                                    {tooBig.cover && <Alert variant=\"danger\">{uploadMsg.cover}</Alert>}\n                                    <Button variant=\"primary\" onClick={saveProfileCover} className=\"save-changes-btn \" disabled={disableBtnStates.coverPic}>\n                                    Upload\n                                    </Button>\n                                </Form>\n                            </Col>\n                        </Row>\n                        \n                        <hr />\n                        <div className=\"spacer-2rem\"></div>\n                        \n                        <p className=\"heading-modal\">Change password</p>\n                        <Form>\n                            <Form.Group >\n                                <Form.Label>Current password</Form.Label>\n                                <Form.Control type=\"password\" placeholder=\"Enter your current password\" name=\"currentPw\" onChange={handleChangePw} />\n                            </Form.Group>\n                            <br/>\n                            <Form.Group >\n                                <Form.Label>New password</Form.Label>\n                                <Form.Control type=\"password\" placeholder=\"Enter your new password\" name=\"newPw\" onChange={handleChangePw} />\n                            </Form.Group>\n                            <br/>\n                            <Form.Group >\n                                <Form.Label>Confirm new password</Form.Label>\n                                <Form.Control type=\"password\" placeholder=\"Confirm your new password\" name=\"conNewPw\" onChange={handleChangePw} />\n                            </Form.Group>\n                            <br/>\n                            { isSuccess.password && <Alert variant=\"success\">{msg.password}</Alert> }\n\n                            <Button variant=\"primary\" onClick={handleClose} className=\"save-changes-btn\" disabled={disableBtnStates.password}>\n                                    Save new password\n                            </Button>\n                        </Form>\n                    </Col>\n                </Row>\n                \n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"primary\" onClick={handleClose} className=\"save-changes-btn btn-close-settings\">\n                        Close\n                </Button>\n                {/* <Button variant=\"primary\" onClick={testDelete} className=\"save-changes-btn btn-close-settings\">\n                        test delete\n                </Button> */}\n            </Modal.Footer>\n        </Modal>\n    </Fragment>\n    )\n}\n\nexport default SettingModal","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Layout/SignUpModal.js",["367"],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Layout/LoginModal.js",["368","369","370"],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/store/actions/userActions.js",["371"],"\nimport * as Realm from \"realm-web\"\n\nconst getApp = Realm.App.getApp(process.env.REACT_APP_REALM_APP_ID);\n\n// export const createNewUser = (userObj) =>{\n//     //with thunk, we can reutrn function but otherwise, return state\n    \n//     return (dispatch, getState) =>{\n//         //make async call here\n//         // await getApp.emailPasswordAuth.registerUser(userObj.email, userObj.password).then(res =>{\n//         //     console.log('response', res)\n//             dispatch({type: 'CREATE_USER', userObj})\n//         // })\n        \n//     }\n// }\n// export const openLoginModal = (state) =>{\n//     console.log('working?', state)\n//     return (dispatch, getState)=>{\n//         dispatch({type: 'OPEN_LOGIN_MODAL', state})\n//     }\n// }\n\nexport const becomeAFan = (data) =>{\n    return (dispatch, getState) =>{\n        //save data to mongodb\n        dispatch({type: 'BECOME_FAN', data})\n    }\n\n}","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/store/actions/authActions.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Shopify/Cart.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Shopify/Products.js",["372"],"import React, { Component } from 'react';\nimport Product from './Product';\nimport { Row, Container } from 'react-bootstrap'\n\nclass Products extends Component {\n  render() {\n    let products = this.props.products.map((product) => {\n      return (\n        <Product\n          addVariantToCart={this.props.addVariantToCart}\n          client={this.props.client}\n          key={product.id.toString()}\n          product={product}\n        />\n      );\n    });\n\n    return (\n      <div className=\"width-adj-shop\">\n        <Row>\n          {products}\n        </Row>\n      </div>\n      \n    );\n  }\n}\n\nexport default Products;\n","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Shopify/Product.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Shopify/LineItem.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Shopify/VariantSelector.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Fan/ImageUpload.js",["373"],"import React from 'react'\nimport { useState, useEffect } from 'react'\nimport uploadIcon from '../../assets/global/upload.svg'\nimport { Alert } from 'react-bootstrap'\nimport { useDropzone } from 'react-dropzone'\n\n  const thumbsContainer = {\n    display: 'flex',\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    marginTop: 16\n  };\n  \n  const thumb = {\n    display: 'inline-flex',\n    borderRadius: 2,\n    border: '1px solid #eaeaea',\n    marginBottom: 8,\n    marginRight: 8,\n    width: 100,\n    height: 100,\n    padding: 4,\n    boxSizing: 'border-box'\n  };\n  \n  const thumbInner = {\n    display: 'flex',\n    minWidth: 0,\n    overflow: 'hidden'\n  };\n  \n  const img = {\n    display: 'block',\n    width: 'auto',\n    height: '100%'\n  };\n\n\nconst ImageUpload = (props ) => {\n    \n    const [files, setFiles] = useState([])\n    const [msg, setMsg] = useState('')\n    const [uploaded, setUploaded] = useState(false)\n\n    const getFileData = (obj) => {\n        // Create a root reference\n        console.log('file obj', obj)\n        // const newValue = files[0]\n        props.fileObj(obj)\n    }\n\n    const {getRootProps, getInputProps, isDragActive} = useDropzone({\n            accept: 'image/*',\n            onDrop: acceptedFiles => {\n              \n              if(acceptedFiles.length > 1){\n                  setMsg('You can upload only one image.')\n              }else if(acceptedFiles[0].size / (1024 * 1024) > 3){\n                  setMsg('The file size is too big. Please choose different file.')\n              }else{\n                    getFileData(acceptedFiles[0])\n                    setUploaded(true)\n                    if(props.imgChange){\n                      props.imgChange(true)\n                    }\n                    \n                    setFiles(acceptedFiles.map( file => Object.assign(file, {\n                              preview: URL.createObjectURL(file)\n                          \n                        })\n                        ))\n              }\n            }\n          })\n\n    const thumbs = files.map(file => (\n      <div style={thumb} key={file.name}>\n        <div style={thumbInner}>\n          <img\n            src={file.preview}\n            style={img}\n          />\n        </div>\n      </div>\n    ));\n  \n    useEffect(() => {\n      // Make sure to revoke the data uris to avoid memory leaks\n        files.forEach(file => URL.revokeObjectURL(file.preview));\n    }, [files]);\n\n    return ( \n        <React.Fragment>\n            {/* {msg ? <p>{msg}</p> : ''} */}\n                <div {...getRootProps({className: 'dropzone'})} className=\"dropzone dropzone-wrapper\" >\n                    <input {...getInputProps()} required/>\n                    {\n                            isDragActive ?\n                            <p>Drop the files here ...</p> :\n                            <div className=\"drag-dropzone\">\n                                <div className=\"bio-modal-container\">\n                                    <img src={uploadIcon} alt=\"upload files here\" />\n                                    <p style={{padding: '5px'}}>\n                                      { uploaded ? 'Change Image' : 'Drop an image file here or click to upload an image'}\n                                    </p>\n                                    {msg ? <Alert variant=\"danger\">{msg}</Alert> : ''}\n                                    <p>*3MB max image file size<br/>\n                                    *accepted file formats: jpg, png, gif</p>\n                                    <aside style={thumbsContainer}>\n                                        {uploaded ? thumbs : ''}\n                                    </aside>\n                                </div>\n                                \n                            </div>\n                        }\n                    \n                </div>\n                \n         \n        </React.Fragment>\n\n     );\n}\n \nexport default ImageUpload;","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Influencer/Garage.js",["374","375"],"import React, { useState, useEffect } from 'react'\nimport { Helmet } from \"react-helmet\"\nimport * as Realm from \"realm-web\"\nimport Layout from '../Layout/Layout'\nimport SubNav from './SubNav'\nimport { connect } from 'react-redux'\nimport noImg from '../../assets/global/no_image.jpg'\n// import bioPic from '../../assets/temp-photos/bio/avator-male.jpg'\nimport editIcon from '../../assets/global/edit-icon.svg'\nimport SettingModal from './SettingModal'\nimport { Button, Row, Col, Form } from 'react-bootstrap'\nimport { attachMsg, logOutUser, openLoginModal } from '../../store/actions/authActions'\nimport './garage.scss'\nimport VehicleCard from './vehicleCard'\nimport CreateNewCar from './CreateNewCar'\nimport jwt from 'jsonwebtoken'\nimport moment from 'moment'\nimport { getInfluencer }from '../../store/actions/influencerActions'\n\nconst Garage = (props) =>{\n  \n    const userIdParam = props.match.params.id\n    const [profileUser, setProfileUser] = useState({fname: '', lname: '', profilePic: '', profileCover: '', username: '', profileDesc: '', favSong: '', favArtist: ''})\n    const [allowEdit, setAllowEdit] = useState(false)\n    const [editMode, setEditMode] = useState({about: false, song: false, artist: false})\n    // const [formattedFans, setFormattedFans] = useState('')\n    const [showSetting, setShowSetting] = useState(false);\n    const [userCars, setUserCars] = useState([])\n    const [showAddCar, setShowAddCar] = useState(false)\n    const [numOfComments, setNumComments] = useState(null)\n    const altData = {uername: 'No username yet', userId: '', profileDesc: 'No description yet.', myCars: [] }\n    const [formattedTime, setFormattedTime] = useState(null)\n    const altCarData = {name: 'No data yet', upgrades: 'No data yet', color: 'No data yet', wheels: 'No data yet', performance: 'No data yet', category: 'Dream car', imgUlr: noImg, favSong: 'Nodata yet', favArtist: 'No data yet'}\n    const appConfig = {\n        id: process.env.REACT_APP_REALM_APP_ID,\n        // timeout: 10000, \n        // timeout in number of milliseconds\n      };\n    const app = new Realm.App(appConfig);\n    \n    const handleCloseAddCarModal = () => setShowAddCar(false)\n    const handleShowAddCarModal = () => setShowAddCar(true)\n\n    const handleChangeProfile = (e) =>{\n        setProfileUser({\n            ...profileUser,\n            [e.target.name]: e.target.value\n        })\n    }\n    const handleShowSetting = () =>{\n        \n        const token = sessionStorage.getItem('session_token')\n        jwt.verify(token, process.env.REACT_APP_JWT_SECRET, function(err, decoded) {\n            if (err) {\n                console.log('err', err)\n                \n            }else{\n                setProfileUser({\n                    ...profileUser,\n                    email: decoded.userData.email\n                })\n                setShowSetting(true)\n            }\n          });\n        \n    }\n    const handleCloseSetting = () =>{\n        setShowSetting(false)\n    }\n    const userLoggedIn = (id) =>{\n        \n        if(id === profileUser.userId){\n            console.log('loggedin?', id)\n            setAllowEdit(true)\n            \n        }else{\n            getInfluencerData()\n        }\n    }\n    const userLoggedOut = (id) =>{\n        console.log('logged out?', id)\n        if(id === userIdParam){\n            setAllowEdit(false)\n        }\n    }\n    const updateProfileData = (data, key)=>{\n\n        setProfileUser({\n            ...profileUser,\n            [key]: data\n        })\n    }\n    const updateUserDetails = (fname, lname, username) =>{\n        setProfileUser({\n            ...profileUser,\n            fname: fname,\n            lname: lname,\n            username: username\n        })\n    }\n    const updateCarData = (data) =>{\n        setUserCars(prevArray => [...prevArray, data])\n    }\n   \n    const handleDataUpdate = async (e) =>{\n        e.preventDefault()\n  \n        if(app.currentUser.id === profileUser.userId){\n            const mongodb = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME);\n            const mongoCollection = mongodb.db(process.env.REACT_APP_REALM_DB_NAME).collection(\"influencers\")\n    \n            try{\n                await mongoCollection.updateOne(\n                    { \"userId\": app.currentUser.id},\n                    {\n                        \"$set\": {\n                            \"profileDesc\": profileUser.profileDesc,\n                            \"favSong\": profileUser.favSong,\n                            \"favArtist\": profileUser.favArtist\n                          }\n                    }\n                ).then(res =>{\n                    console.log('res', res)\n                })\n            }catch(err){\n                console.log(err)\n            }\n            setEditMode({...editMode, about: false, song: false, artist: false})\n        }\n        \n    }\n    const editAbout = ()=>{\n        return(\n            <Form>\n                <Form.Group >\n                    <Form.Label>Edit</Form.Label>\n                    <Form.Control as=\"textarea\" rows={3} name=\"profileDesc\" value={profileUser.profileDesc && profileUser.profileDesc } onChange={handleChangeProfile} />\n                </Form.Group>\n                <div className=\"bio-edit-btn-wrapper\">\n                    <Button variant=\"primary\" type=\"submit\" onClick={handleDataUpdate} className=\"bio-edit-btn\">\n                        Submit\n                    </Button>\n                </div>\n                \n            </Form>\n        )\n    }\n    const editSong = ()=>{\n        return(\n            <Form>\n                <Form.Group >\n                    <Form.Label>Edit</Form.Label>\n                    <Form.Control as=\"textarea\" rows={3} name=\"favSong\" value={profileUser.favSong && profileUser.favSong } onChange={handleChangeProfile} />\n                </Form.Group>\n                <div className=\"bio-edit-btn-wrapper\">\n                    <Button variant=\"primary\" type=\"submit\" onClick={handleDataUpdate} className=\"bio-edit-btn\">\n                        Submit\n                    </Button>\n                </div>\n                \n            </Form>\n        )\n    }\n    const editArtist = ()=>{\n        return(\n            <Form>\n                <Form.Group >\n                    <Form.Label>Edit</Form.Label>\n                    <Form.Control as=\"textarea\" rows={3} name=\"favArtist\" value={profileUser.favArtist && profileUser.favArtist } onChange={handleChangeProfile} />\n                </Form.Group>\n                <div className=\"bio-edit-btn-wrapper\">\n                    <Button variant=\"primary\" type=\"submit\" onClick={handleDataUpdate} className=\"bio-edit-btn\">\n                        Submit\n                    </Button>\n                </div>\n                \n            </Form>\n        )\n    }\n\n    const getInfluencerData = async (credentials) =>{\n        try{\n            await app.logIn(credentials).then(async user =>{\n                if(userIdParam === user.id){\n                    console.log('param matched')\n                    setAllowEdit(true)\n                }else{\n                    console.log('param not matched', user.id)\n                    setAllowEdit(false)\n                }\n                const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n                const collectionInfluencer = mongo.db(\"smoke-show\").collection(\"influencers\")\n                const filter = {userId: userIdParam}\n                try{\n                    await collectionInfluencer.findOne(filter).then( user =>{\n                        setProfileUser(user)\n                        if(typeof(user.joined) == 'undefined'){\n                            setFormattedTime('No data')\n                        }else{\n                            const formatted = moment(user.joined).local().format('MMMM Do YYYY')\n                            setFormattedTime(formatted)\n                        }\n                        \n                        // if(user.fans > 999){\n                        //     setFormattedFans(Math.sign(user.fans)*((Math.abs(user.fans)/1000).toFixed(1)) + 'k')\n                        // }else{\n                        //     setFormattedFans(Math.sign(user.fans)*Math.abs(user.fans))\n                        // }\n                        getTotalComments(mongo)\n                        getMyCars(mongo)\n                        return user\n                    })\n                }catch(err){\n                    console.log(err)\n                }\n\n            })\n        }catch(err){\n            console.log(err)\n        }\n        \n    }\n    \n    const getTotalComments = async (mongo) =>{\n        \n        const mongoCollectionComments = mongo.db(\"smoke-show\").collection(\"comments\")\n        \n        const filter = {userId: userIdParam}\n        await mongoCollectionComments.find(filter).then(res =>{\n            setNumComments(res.length)\n        })\n    }\n    const getMyCars = async (mongo) =>{\n        const mongoCollection = mongo.db(\"smoke-show\").collection(\"my-cars\")\n        \n        const filter = {userId: userIdParam}\n        await mongoCollection.find(filter).then( cars =>{\n            setUserCars(cars)\n        })\n    }\n    const loginCheck = async () =>{\n        const token = sessionStorage.getItem('session_token')\n        const tokenUser = sessionStorage.getItem('session_user')\n        if(token){\n            jwt.verify(token, process.env.REACT_APP_JWT_SECRET, function(err, decoded) {\n                if (err) {\n                    console.log('time out')\n                    // timeout\n                    const credentials = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTH_PUBLIC_VIEW);\n                    props.logOutUser()\n                    props.openLoginModal(true)\n                    getInfluencerData(credentials)\n                }else{\n                    console.log('logged in')\n                    const credentials = jwt.verify(tokenUser, process.env.REACT_APP_JWT_SECRET)\n                    getInfluencerData(credentials.cre)\n                    if(decoded.userData.userId === userIdParam){\n                        setAllowEdit(true)\n                    }else{setAllowEdit(false)}\n                }\n              });\n            \n        }else{\n            console.log('no token')\n            const credentials = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTH_PUBLIC_VIEW);\n            getInfluencerData(credentials)\n        }\n    }\n    useEffect(() => {\n        if(props.customData.userId === userIdParam){\n            setAllowEdit(true)\n        }else{\n            setAllowEdit(false)\n        }\n    }, [props.customData])\n\n    useEffect(() => {\n        // getDataAsCurrent()\n        loginCheck()\n        props.getInfluencer(userIdParam)\n    }, [])\n\n    return(\n        <Layout  userLoggedIn={userLoggedIn} userLoggedOut={userLoggedOut} >\n        <Helmet>\n            <meta charSet=\"utf-8\" />\n            <title>Influencer Garage page | The Smoke Show</title>\n            <meta name=\"description\" content=\"Place the meta description text here.\" />\n            <meta name=\"robots\" content=\"noindex, nofollow\" />\n        </Helmet>\n        {showAddCar && <CreateNewCar show={showAddCar} handleClose={handleCloseAddCarModal} profileUser={profileUser} updateProfileData={updateProfileData} updateCarData={updateCarData} />}\n            {showSetting && <SettingModal show={showSetting} handleShowSetting={handleShowSetting} handleCloseSetting={handleCloseSetting} profileUser={profileUser}  updateProfileData={updateProfileData} updateUserDetails={updateUserDetails}/>}\n            <div className=\"main-wrapper\">\n                <div className=\"spacer-4rem\"></div>\n                <SubNav influencer={profileUser} formattedFans={props.formattedFans} allowEdit={allowEdit} handleShowSetting={handleShowSetting} />\n                {/* <div className=\"garage-setting-wrapper\">\n                    {allowEdit && \n                        <Button className=\"garage-setting-btn\" onClick={handleShowSetting} >\n                            <img src={settingsIcon} alt=\"setting\" className=\"setting-icon\"/>\n                            Settings\n                        </Button>\n                    }\n                </div> */}\n                    \n                <div className=\"spacer-4rem\"></div>\n                <h2 className=\"title\">Influencer Garage</h2>\n                {/* <div className=\"bio-fleet-img\">\n                    <img\n                    src={ typeof(profileUser.profileCover) == 'undefined' || !profileUser.hasOwnProperty(\"profileCover\") ?  noImg : profileUser.profileCover }\n                    alt=\"user selected profile image\"\n                     />\n                </div> */}\n                <div className=\"spacer-2rem\"></div>\n                <div className=\"bio-content-wrapper\">\n           \n                    <Row className=\"bio-height-adj\">\n                        <Col sm={4}>\n                            <div className=\"bio-container box-shadow-white\">\n                                <p className=\"bio-about no-m-b\"><strong>About: {` ${profileUser.fname} ${profileUser.lname}`}</strong></p>\n                                <div className=\"\">\n                                    <p className=\"bio-content bio-border\">\n                                        {editMode.about ? editAbout()\n                                        : [\n                                            (profileUser.profileDesc \n                                                ? <p >{profileUser.profileDesc}</p>\n                                                : <p>{altData.profileDesc}</p>\n                                            )\n                                            ]\n                                        }\n                                    { !editMode.about && <br/> }\n                                    <div className=\"edit-icon-wrapper\" onClick={()=>{setEditMode({...editMode, about: true})}}>\n                                        {editMode.about ? '' : [\n                                            (allowEdit && <img className=\"edit-icon\" src={editIcon} alt=\"Edit about you\"/>)\n                                        ]}\n                                    </div>\n                                    </p>\n                                </div>\n                                \n                                <Row className=\"bio-border pt-pb-15 bio-row-adj\">\n                                    <Col sm={4}>\n                                        <p className=\"no-m-b\">Joined:</p>\n                                    </Col>\n                                    <Col sm={8}>\n                                        <p>{formattedTime ? formattedTime : 'No data'}</p>\n                                    </Col>\n                                </Row>\n                                <Row className=\"bio-border pt-pb-15 bio-row-adj\">\n                                    <Col sm={4}>\n                                        <p className=\"no-m-b\">Total Comments:</p>\n                                    </Col>\n                                    <Col sm={8}>\n                                        <p className=\"no-m-b\">{numOfComments && numOfComments} comments</p>\n                                    </Col>\n                                </Row>\n                                <Row className=\"bio-border pt-pb-15 bio-row-adj\">\n                                    <Col sm={4}>\n                                        <p className=\"no-m-b\">Fans of:</p>\n                                    </Col>\n                                    <Col sm={8}>\n                                        <p className=\"no-m-b\">\n                                            { profileUser.fansOf &&\n                                                profileUser.fansOf.map((name, i) =>{\n                                                    return <span>{i > 0 && ', '}{name}</span>\n                                                })\n                                            }\n                                        </p>\n                                    </Col>\n                                </Row>\n                                <Row className=\"pt-pb-15 bio-row-adj\"> \n                                    <Col sm={4}>\n                                        <p className=\"no-m-b\">Favorite Driving Song:</p>\n                                    </Col>\n                                    <Col sm={8}>\n                                        {editMode.song ? editSong()\n                                        : [\n                                            (profileUser.favSong \n                                                ? <p className=\"no-m-b\">{profileUser.favSong}</p>\n                                                : <p className=\"no-m-b\">{altData.favSong}</p>\n                                            )\n                                            ]\n                                        }\n                                        <div className=\"edit-icon-wrapper\" onClick={()=>{setEditMode({...editMode, song: true})}}>\n                                        {editMode.song ? '' : [\n                                            (allowEdit && <img className=\"edit-icon\" src={editIcon} alt=\"Edit your favourite songs\"/>)\n                                        ]}\n                                    </div>\n                                    </Col>\n                                </Row>\n                                <Row className=\"pt-pb-15 bio-row-adj\"> \n                                    <Col sm={4}>\n                                        <p className=\"no-m-b\">Favorite Musician:</p>\n                                    </Col>\n                                    <Col sm={8}>\n                                    {editMode.artist ? editArtist()\n                                        : [\n                                            (profileUser.favArtist \n                                                ? <p className=\"no-m-b\">{profileUser.favArtist}</p>\n                                                : <p className=\"no-m-b\">{altData.favArtist}</p>\n                                            )\n                                            ]\n                                        }\n                                        <div className=\"edit-icon-wrapper\" onClick={()=>{setEditMode({...editMode, artist: true})}}>\n                                        {editMode.artist ? '' : [\n                                            (allowEdit && <img className=\"edit-icon\" src={editIcon} alt=\"Edit your favourite artists\"/>)\n                                        ]}\n                                    </div>\n                                    </Col>\n                                </Row>\n                            </div>\n                        </Col>\n                        <Col sm={8} className=\"pl-0-pc\">\n                        { userCars !== undefined ?\n                            userCars.map( car =>{\n                               return (\n                                <React.Fragment>\n                                    <VehicleCard car={car} allowEdit={allowEdit} profileUser={profileUser} getMyCars={getMyCars} />\n                                    <div className=\"spacer-2rem\"></div>\n                                </React.Fragment>\n                               )\n                            }) :\n                            <React.Fragment>\n                                <VehicleCard car={altCarData} allowEdit={allowEdit} />\n                                <div className=\"spacer-2rem\"></div>\n                            </React.Fragment>\n                        }\n\n                            <div className=\"spacer-2rem\"></div>\n                            { allowEdit && \n                                <div style={{padding: '0 6px'}}>\n                                    <Button className=\"btn-add-car\" onClick={handleShowAddCarModal}>Add my car</Button>\n                                </div>\n                            }\n                            <div className=\"spacer-2rem\"></div>\n                        </Col>\n                        \n                    </Row>\n                    \n                </div>\n                \n            </div>\n        </Layout>\n    )\n}\nconst mapDispatchToProps = (dispatch) =>{\n    return{\n        openLoginModal: (state) => dispatch(openLoginModal(state)),\n        attachMsg: (msg)=> dispatch(attachMsg(msg)),\n        logOutUser: ()=>dispatch(logOutUser()),\n        getInfluencer: (id)=> dispatch(getInfluencer(id))\n    }\n}\nconst mapStateToProps = (state) =>{\n    console.log('props state from garage', state)\n    return{\n        customData: state.auth.customData,\n        influencerObj: state.influ.influencerObj,\n        formattedFans: state.influ.formattedFans\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Garage)","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Influencer/CreateNewCar.js",["376"],"import React, { useState, Fragment } from 'react'\nimport { Row, Col, Modal, Button, Form } from 'react-bootstrap'\nimport * as Realm from \"realm-web\"\nimport ImageUpload from './ImageUpload'\nimport jwt from 'jsonwebtoken'\nimport short from 'short-uuid'\n\nconst CreateNewCar = (props) =>{\n    const bucketName = process.env.REACT_APP_AWS_BUCKET_NAME;\n    const [imgFile, setImgFile] = useState('')\n    const [imgData64, setImgData64] = useState('')\n    const appConfig = {\n        id: process.env.REACT_APP_REALM_APP_ID,\n        timeout: 10000, // timeout in number of milliseconds\n        };\n    const app = new Realm.App(appConfig)\n    const maxAgeTest = 1 * 60 * 60\n\n    const setImgData = (obj) =>{\n        setImgFile(obj)\n        var file = obj\n        const reader = new FileReader();\n        reader.onload = (event) => {\n        const base64 = event.target.result.split(\",\").pop()\n          setImgData64(base64)\n        //   console.log(base64);\n        };\n        reader.readAsDataURL(file);\n      }\n    const closeModal = () =>{\n        setNewCarObj({name: '', category: '', color: '', wheels: '', upgrades: ''})\n        props.handleClose()\n    }\n\n\n    // const onDrop = useCallback(acceptedFiles => {\n        \n        // var file = acceptedFiles[0]\n        // const reader = new FileReader();\n        // reader.onload = (event) => {\n        // setImgFile(acceptedFiles[0])\n        // const base64 = event.target.result.split(\",\").pop()\n        //   setImgData64(base64)\n        // //   console.log(event.target.result);\n        // };\n        // reader.readAsDataURL(file);\n    //     // Do something with the files\n    //   }, [])\n    // const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\n    \n    const carColors = ['White', 'Black', 'Grey', 'Blue', 'Silver', 'Red', 'Orange', 'Bronze', 'Yellow', 'Green', 'Navy']\n    const carCategories = ['Dream Car', 'Daily Driver', 'Vehicle #2']\n    const [newCarObj, setNewCarObj] = useState({name: '', category: 'Dream Car', color: 'White', wheels: '', upgrade: ''})\n\n    const handleChange = (e) =>{\n        setNewCarObj({\n            ...newCarObj,\n            [e.target.name]: e.target.value\n        })\n    }\n    const createToken = (userData) =>{\n        return jwt.sign({ userData: userData }, process.env.REACT_APP_JWT_SECRET, {expiresIn: maxAgeTest});\n    }\n\n \n\n    const handleSubmit = async (e) =>{\n        e.preventDefault()\n        const baseImgUrl = 'https://s3.amazonaws.com/images.test.smokeshow/'\n        const imgId = short.generate()\n        const filekey = props.profileUser.userId + '/my-cars/' + imgId\n        const imgUrlWithKey = baseImgUrl + filekey\n        const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME);\n        const collectionInfluencer = mongo.db(process.env.REACT_APP_REALM_DB_NAME).collection(\"influencers\")\n        const collectionMyCars = mongo.db(process.env.REACT_APP_REALM_DB_NAME).collection(\"my-cars\")\n\n        const newCarData = {\n            name: newCarObj.name,\n            upgrades: newCarObj.upgrades,\n            wheels: newCarObj.wheels,\n            imgUrl: imgUrlWithKey,\n            category: newCarObj.category,\n            color: newCarObj.color,\n            userId: props.profileUser.userId,\n            performance: newCarObj.performance\n        }\n        if(app.currentUser.id === props.profileUser.userId){\n            \n            try{\n                await app.currentUser.functions.putImageObjToS3(imgData64, bucketName, filekey, imgFile.type).then( async res =>{\n                    console.log(res)\n                    try{\n                        await collectionMyCars.insertOne(newCarData).then(async res =>{\n                            console.log('res', res)\n                            console.log('inserted', res.insertedId)\n                            await collectionInfluencer.updateOne(\n                                { \"userId\": app.currentUser.id },\n                                { $push: { myCars:  res.insertedId }},\n                                { upsert: true }\n                                ).then(res =>{\n                                    console.log('res', res)\n                                    let oldArr = []\n                                    if(props.profileUser.myCars){\n                                        oldArr = props.profileUser.myCars\n                                    }else{\n                                        oldArr = []\n                                    }\n                                    \n                                    let cars = {myCars: oldArr.push(newCarData)}\n                                    props.updateProfileData(cars, 'myCars')\n                                    props.updateCarData(newCarData)\n                                    closeModal()\n                                })\n                        })\n                    //     await mongoCollection.updateOne(\n                    //         { \"userId\": app.currentUser.id},\n                    //         {\n                    //          $push: { myCars: newCarData }\n                    //         }\n                    //         ).then(res =>{\n                    //             console.log('res', res)\n                    //             const oldArr = props.profileUser.myCars\n                    //             const cars = {myCars: oldArr.push(newCarData)}\n                    //             props.updateProfileData(cars, 'myCars')\n                    //             closeModal()\n                    //         })\n                    }catch(err){\n                        console.log(err)\n                    }\n                })\n            }catch(err){\n                console.log(err)\n            }\n        }else{\n            console.log('warning current user and the login user do not match')\n            const token = sessionStorage.getItem('session_user')\n            const decoded = jwt.verify(token, process.env.REACT_APP_JWT_SECRET)\n        \n            \n            try{\n                await app.logIn(decoded.cre).then(user =>{\n                    user.functions.putImageObjToS3(imgData64, bucketName, filekey, imgFile.type).then( async res =>{\n             \n                        try{\n                            await collectionMyCars.insertOne(newCarData).then(async res =>{\n                                console.log('res', res)\n                                await collectionInfluencer.updateOne(\n                                    { \"userId\": app.currentUser.id },\n                                    {$push: { myCars:  res.insertedId}},\n                                    { upsert: true }\n                                    ).then(res =>{\n                                        console.log('res', res)\n                                        const oldArr = props.profileUser.myCars\n                                        const cars = {myCars: oldArr.push(newCarData)}\n                                        props.updateProfileData(cars, 'myCars')\n                                        closeModal()\n                                    })\n                            })\n                        }catch(err){\n                            console.log(err)\n                        }\n                    })\n                    \n                })\n            }catch(err){\n                console.log(err)\n            }\n        }\n    }\n        \n\n\n    return(\n    <Fragment>\n        <Modal show={props.show} onHide={props.handleClose} className=\"modal-wrapper-bio\">\n            <Modal.Header closeButton>\n            </Modal.Header>\n            <Modal.Body>\n                <Row className=\"bio-modal-inner-wrapper\">\n                    <Col sm={6} className=\"\">\n                    <ImageUpload fileObj={setImgData} />\n\n                    {/* <div {...getRootProps()} className=\"dropzone-wrapper\">\n                        <input {...getInputProps()} />\n                        {\n                            isDragActive ?\n                            <p>Drop the files here ...</p> :\n                            <div className=\"drag-dropzone\">\n                                <div className=\"bio-modal-container\">\n                                    <img src={uploadIcon} alt=\"upload files here\" />\n                                    <p>Drag and drop or click to upload an image</p>\n                                    <p>*3MB max image file size<br/>\n                                    *accepted file formats: jpg, png, gif</p>\n                                </div>\n\n                            </div>\n                        }\n                    </div> */}\n                    \n                    </Col>\n                    <Col sm={6}>\n                    <Form>\n                        <Form.Group >\n                            <Form.Label>Category</Form.Label>\n                            <Form.Control as=\"select\"  onChange={handleChange} name=\"category\">\n                            {carCategories.map((category, index) =>{\n                                return(\n                                    <option key={category + index}>{category}</option>\n                                )\n                            })}\n\n                            </Form.Control>\n                        </Form.Group>\n                        <br/>\n                        <Form.Group >\n                            <Form.Label>Car name</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"Enter car name e.g. maker, model, year\" onChange={handleChange} name=\"name\"/>\n                        </Form.Group>\n                        <br/>\n                        <Form.Group >\n                            <Form.Label>Color</Form.Label>\n                            {/* <Form.Control type=\"text\" placeholder=\"Select your color\" onChange={handleChange} name=\"color\" /> */}\n                            <Form.Control as=\"select\" onChange={handleChange} name=\"color\">\n                            {carColors.map((color, index) =>{\n                                return(\n                                    <option key={color + index}>{color}</option>\n                                )\n                            })}\n                                \n                            </Form.Control>\n                        </Form.Group>\n                        <br/>\n                        <Form.Group >\n                            <Form.Label>Wheels</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"Enter your wheel\" onChange={handleChange} name=\"wheels\"/>\n                        </Form.Group>\n                        <br/>\n                        <Form.Group >\n                            <Form.Label>Performance</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"Enter your performance\" onChange={handleChange} name=\"performance\" />\n                        </Form.Group>\n                        <br/>\n                        <Form.Group >\n                            <Form.Label>Upgrades</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"Enter your update\" onChange={handleChange} name=\"upgrades\" />\n                        </Form.Group>\n                        <br/><br/>\n                        <Row>\n                            <Col sm={6}>\n                                <Button variant=\"secondary\" onClick={closeModal} className=\"cancel-btn\" > \n                                    Cancel\n                                </Button>\n                            </Col>\n                            <Col sm={6}>\n                                <Button variant=\"primary\" type=\"submit\" onClick={handleSubmit} className=\"save-changes-btn\">\n                                Add my new car\n                                </Button>\n                                {/* <br></br><br/>\n                                <button onClick={testImgUpload}>test upload</button> */}\n                            </Col>                          \n                        </Row>\n                    </Form>\n                    </Col>\n                </Row>\n            </Modal.Body>\n            <Modal.Footer>\n  \n            </Modal.Footer>\n        </Modal>\n    </Fragment>\n    )\n}\n\nexport default CreateNewCar","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Influencer/ImageUpload.js",["377"],"import React from 'react'\nimport { useState, useEffect } from 'react'\nimport uploadIcon from '../../assets/global/upload.svg'\nimport { Alert } from 'react-bootstrap'\nimport { useDropzone } from 'react-dropzone'\n\n  const thumbsContainer = {\n    display: 'flex',\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    marginTop: 16\n  };\n  \n  const thumb = {\n    display: 'inline-flex',\n    borderRadius: 2,\n    border: '1px solid #eaeaea',\n    marginBottom: 8,\n    marginRight: 8,\n    width: 100,\n    height: 100,\n    padding: 4,\n    boxSizing: 'border-box'\n  };\n  \n  const thumbInner = {\n    display: 'flex',\n    minWidth: 0,\n    overflow: 'hidden'\n  };\n  \n  const img = {\n    display: 'block',\n    width: 'auto',\n    height: '100%'\n  };\n\n\nconst ImageUpload = (props ) => {\n    \n    const [files, setFiles] = useState([])\n    const [msg, setMsg] = useState('')\n    const [uploaded, setUploaded] = useState(false)\n\n    const getFileData = (obj) => {\n        // Create a root reference\n        console.log('file obj', obj)\n        // const newValue = files[0]\n        props.fileObj(obj)\n    }\n\n    const {getRootProps, getInputProps, isDragActive} = useDropzone({\n            accept: 'image/*',\n            onDrop: acceptedFiles => {\n              \n              if(acceptedFiles.length > 1){\n                  setMsg('You can upload only one image.')\n              }else if(acceptedFiles[0].size / (1024 * 1024) > 3){\n                  setMsg('The file size is too big. Please choose different file.')\n              }else{\n                    getFileData(acceptedFiles[0])\n                    setUploaded(true)\n                    if(props.imgChange){\n                      props.imgChange(true)\n                    }\n                    \n                    setFiles(acceptedFiles.map( file => Object.assign(file, {\n                              preview: URL.createObjectURL(file)\n                          \n                        })\n                        ))\n              }\n            }\n          })\n\n    const thumbs = files.map(file => (\n      <div style={thumb} key={file.name}>\n        <div style={thumbInner}>\n          <img\n            src={file.preview}\n            style={img}\n          />\n        </div>\n      </div>\n    ));\n  \n    useEffect(() => {\n      // Make sure to revoke the data uris to avoid memory leaks\n        files.forEach(file => URL.revokeObjectURL(file.preview));\n    }, [files]);\n\n    return ( \n        <React.Fragment>\n            \n                <div {...getRootProps({className: 'dropzone'})} className=\"dropzone dropzone-wrapper\" >\n                    <input {...getInputProps()} required/>\n                    {\n                            isDragActive ?\n                            <p>Drop the files here ...</p> :\n                            <div className=\"drag-dropzone\">\n                                <div className=\"bio-modal-container\">\n                                    <img src={uploadIcon} alt=\"upload files here\" />\n                                    <p style={{padding: '5px'}}>\n                                      { uploaded ? 'Change Image' : 'Drop an image file here or click to upload an image'}\n                                    </p>\n                                    {msg ? <Alert variant=\"danger\">{msg}</Alert> : ''}\n                                    <p>*3MB max image file size<br/>\n                                    *accepted file formats: jpg, png, gif</p>\n                                    <aside style={thumbsContainer}>\n                                        {uploaded ? thumbs : ''}\n                                    </aside>\n                                </div>\n                                \n                            </div>\n                        }\n                    \n                </div>\n                \n         \n        </React.Fragment>\n\n     );\n}\n \nexport default ImageUpload;","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Influencer/SettingModal.js",["378","379","380","381"],"import React, { useState, Fragment, useEffect} from 'react'\nimport { Row, Col, Modal, Button, Form, Alert } from 'react-bootstrap'\nimport bioPic from '../../assets/temp-photos/bio/avator-male.jpg'\nimport noImg from '../../assets/global/no_image.jpg'\nimport jwt from 'jsonwebtoken'\nimport * as Realm from \"realm-web\"\nimport short from 'short-uuid'\n\nconst appConfig = {\n    id: process.env.REACT_APP_REALM_APP_ID,\n    timeout: 10000, // timeout in number of milliseconds\n  };\nconst app = new Realm.App(appConfig);\n\nconst SettingModal = (props) =>{\n    const bucketName = process.env.REACT_APP_AWS_BUCKET_NAME\n    const [imgData64Profile, setImgData64Profile] = useState('')\n    const [imgData64Cover, setImgData64Cover] = useState('')\n    const [userObj, setUserObj] = useState({fname: props.profileUser.fname, lname: props.profileUser.lname, email: props.profileUser.email, username: props.profileUser.username})\n    const [currentUserId] = useState(app.currentUser.id)\n    const [userPw, setUserPw] = useState({newPw: '', conNewPw: '', currentPw: ''})\n    const [uploadMsg, setUploadMsg] = useState({profile: '', cover: ''})\n    const [tooBig, setTooBig] = useState({profile: false, cover: false})\n    const [profilePic, setProfilePic] = useState({})\n    const [coverPic, setCoverPic] = useState({})\n    const [imgThumb, setImgThumb] = useState()\n    const [coverImgThumb, setCoverImgThumb] = useState()\n    const msg = {profilePic: 'Your profile picture is successfully updated', coverPic: 'Your cover picture is successfully updated', userDetails: 'Your account information successfully updated', password: 'Your password is successfully updated'}\n    const [isSuccess, setIsSuccess] = useState({profilePic: false, coverPic: false, userDetails: false, password: false })\n    const [currentBioPic, setCurrentBioPic] = useState()\n    const [currentCover, setCurrentCover] = useState()\n    const [disableBtnStates, setDisableBtnStates] = useState({profilePic: true, coverPic: true, userDetails: true, password: true})\n    const baseImgUrl = 'https://s3.amazonaws.com/images.test.smokeshow/'\n\n    const handleClose = props.handleCloseSetting\n    // const handleShow = props.handleShowSetting\n\n    const handleChange = (e) =>{\n        \n        setUserObj({...userObj,\n            [e.target.name]: e.target.value\n        })\n        if(disableBtnStates){\n            setDisableBtnStates({\n                ...disableBtnStates,\n                userDetails: false\n            })\n        }\n\n    }\n    const handleChangePw = (e) =>{\n        setUserPw({\n            ...userPw,\n            [e.target.name]: e.target.value\n        })\n        setDisableBtnStates({\n            ...disableBtnStates,\n            password: false\n        })\n    }\n\n    const profilePicUpload = (e) =>{\n        if (e.target.files[0].size / (1024 * 1024) > 3){\n            setTooBig({...tooBig, profile: true})\n            setUploadMsg({...uploadMsg, profile: 'The file size is too big. Please choose different file.'})\n            return\n        }else{\n        setProfilePic(e.target.files[0])\n        setImgThumb(URL.createObjectURL(e.target.files[0]))\n        setDisableBtnStates({\n            ...disableBtnStates,\n            profilePic: false\n        })\n        const file = e.target.files[0] \n        const reader = new FileReader()\n        reader.onload = (event) => {\n        const base64 = event.target.result.split(\",\").pop()\n          setImgData64Profile(base64)\n        };\n        reader.readAsDataURL(file)\n        }\n    }\n    const saveProfilePic = async () =>{\n        \n        const imgId = short.generate()\n        const filekey = props.profileUser.userId + '/profile/' + imgId\n        const imgUrlWithKey = baseImgUrl + filekey\n        const oldProfilePic = props.profileUser.profilePic\n        if( currentUserId === props.profileUser.userId){\n            try{\n                await app.currentUser.functions.putImageObjToS3(imgData64Profile, bucketName, filekey, profilePic.type).then( async res =>{\n                    console.log('res', res)\n                    if(typeof(oldProfilePic) !== \"undefined\"){\n                  \n                            const currentUrl = props.profileUser.profilePic\n                            const splitted = currentUrl.split('/');\n                            const key = splitted.splice(4, 7).join(\"/\")\n                            deleteImgObj(key)\n                        \n                    }\n                    const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n                    const collectionInfluencer = mongo.db(\"smoke-show\").collection(\"influencers\")\n                    try{\n                        await collectionInfluencer.updateOne(\n                            { \"userId\": app.currentUser.id},\n                            { \"$set\": { \"profilePic\": imgUrlWithKey } },\n                            { upsert: true}\n                        ).then(res =>{\n                            console.log('res', res)\n                            setIsSuccess({\n                                ...isSuccess,\n                                profilePic: true\n                            })\n                            setDisableBtnStates({\n                                ...disableBtnStates,\n                                profilePic: true\n                            })\n                            props.updateProfileData(imgUrlWithKey, \"profilePic\")\n                        })\n                    }catch(err){\n                        console.log(err)\n                    }\n                })\n            }catch(err){\n            console.log(err)\n            }\n        }else{\n        console.log('I have to debug', app.currentUser.id)\n        const token = sessionStorage.getItem('session_user')\n        const decoded = jwt.verify(token, process.env.REACT_APP_JWT_SECRET)\n\n        try{\n            await app.logIn(decoded.cre).then(async user =>{\n                const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n                const collectionInfluencer = mongo.db(\"smoke-show\").collection(\"influencers\")\n                await user.functions.putImageObjToS3(imgData64Profile, bucketName, filekey, profilePic.type).then( res =>{\n                    if(typeof(oldProfilePic) !== \"undefined\"){\n                  \n                        const currentUrl = props.profileUser.profilePic\n                        const splitted = currentUrl.split('/');\n                        const key = splitted.splice(4, 7).join(\"/\")\n                        deleteImgObj(key)\n                    \n                    }\n                })\n                try{\n                    await collectionInfluencer.updateOne(\n                        { \"userId\": user.userId},\n                        { \"$set\": { \"profilePic\": imgUrlWithKey } },\n                        { upsert: true}\n                    ).then(res =>{\n                        console.log('res', res)\n                        setIsSuccess({\n                            ...isSuccess,\n                            profilePic: true\n                        })\n                        setDisableBtnStates({\n                            ...disableBtnStates,\n                            profilePic: true\n                        })\n                        props.updateProfileData(imgUrlWithKey, \"profilePic\")\n                    })\n                }catch(err){\n                    console.log(err)\n                }\n            })\n        }catch(err){\n            console.log(err)\n        }\n        }\n    }\n    const coverPicUpload = (e) =>{\n        if (e.target.files[0].size / (1024 * 1024) > 3){\n            setTooBig({...tooBig, cover: true})\n            setUploadMsg({...uploadMsg, cover: 'The file size is too big. Please choose different file.'})\n            return\n        }else{\n        setCoverPic(e.target.files[0])\n        setCoverImgThumb(URL.createObjectURL(e.target.files[0]))\n        setDisableBtnStates({\n            ...disableBtnStates,\n            coverPic: false\n        })\n        const file = e.target.files[0] \n        const reader = new FileReader()\n        reader.onload = (event) => {\n        const base64 = event.target.result.split(\",\").pop()\n          setImgData64Cover(base64)\n        };\n        reader.readAsDataURL(file)\n        }\n    }\n    const saveProfileCover = async  (e) =>{\n        const imgId = short.generate()\n        const filekey = props.profileUser.userId + '/profile/' + imgId\n        const imgUrlWithKey = baseImgUrl + filekey\n        const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n        if(currentUserId === props.profileUser.userId){\n            try{\n                await app.currentUser.functions.putImageObjToS3(imgData64Cover, bucketName, filekey, coverPic.type).then( async res =>{\n                    console.log('res', res)\n                    if( typeof(props.profileUser.profileCover) !== \"undefined\"){\n                        const currentUrl = props.profileUser.profileCover\n                        const splitted = currentUrl.split('/');\n                        const key = splitted.splice(4, 7).join(\"/\")\n                        deleteImgObj(key)\n                    }\n                    \n                    const collectionInfluencer = mongo.db(\"smoke-show\").collection(\"influencers\")\n                    try{\n                        await collectionInfluencer.updateOne(\n                            { \"userId\": props.profileUser.userId},\n                            { \"$set\": { \"profileCover\": imgUrlWithKey } },\n                            { upsert: true}\n                        ).then(res =>{\n                            console.log('res', res)\n                            setIsSuccess({\n                                ...isSuccess,\n                                coverPic: true\n                            })\n                            setDisableBtnStates({\n                                ...disableBtnStates,\n                                coverPic: true\n                            })\n                            props.updateProfileData(imgUrlWithKey, \"profileCover\")\n                        })\n                    }catch(err){\n                        console.log(err)\n                    }\n                    \n                })\n            }catch(err){\n            console.log(err)\n            }\n        }else{\n            const token = sessionStorage.getItem('session_user')\n            const decoded = jwt.verify(token, process.env.REACT_APP_JWT_SECRET)\n      \n            try{\n                await app.logIn(decoded.cre).then(async  user =>{\n                    const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n                    const collectionInfluencer = mongo.db(\"smoke-show\").collection(\"influencers\")\n                    await user.functions.putImageObjToS3(imgData64Cover, bucketName, filekey, coverPic.type).then( async res =>{\n                        if( typeof(props.profileUser.profileCover) !== \"undefined\"){\n                            const currentUrl = props.profileUser.profileCover\n                            const splitted = currentUrl.split('/');\n                            const key = splitted.splice(4, 7).join(\"/\")\n                            deleteImgObj(key)\n                        }\n\n                    })\n                try{\n                    await collectionInfluencer.updateOne(\n                        { \"userId\": user.userId},\n                        { \"$set\": { \"profileCover\": imgUrlWithKey } },\n                        { upsert: true}\n                    ).then(res =>{\n                        console.log('res', res)\n                        setIsSuccess({\n                            ...isSuccess,\n                            coverPic: true\n                        })\n                        setDisableBtnStates({\n                            ...disableBtnStates,\n                            coverPic: true\n                        })\n                        props.updateProfileData(imgUrlWithKey, 'profileCover')\n                    })\n                }catch(err){\n                    console.log(err)\n                }\n                })\n            }catch(err){\n                console.log(err)\n            }\n            \n        }\n    }\n\n\n    const handleUpdateProfile = async (e) =>{\n        e.preventDefault()\n        const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n        const collectionInfluencer = mongo.db(\"smoke-show\").collection(\"influencers\")\n       \n        if(app.currentUser.id === props.profileUser.userId){\n            try{\n                await collectionInfluencer.updateOne(\n                    { \"userId\": app.currentUser.id},\n                    {\n                        \"$set\": {\n                            \"fname\": userObj.fname,\n                            \"lname\": userObj.lname,\n                            \"username\": userObj.username\n                          }\n                    },\n                    { upsert: true}\n                ).then( res =>{\n                    console.log(res)\n                    setIsSuccess({\n                        ...isSuccess,\n                        userDetails: true\n                    })\n                    setDisableBtnStates({\n                        ...disableBtnStates,\n                        userDetails: true\n                    })\n                    props.updateUserDetails(userObj.fname, userObj.lname, userObj.username)\n                })\n            }catch(err){ console.log(err) }\n            \n        }else{\n            const token = sessionStorage.getItem('session_user')\n            const decoded = jwt.verify(token, process.env.REACT_APP_JWT_SECRET)\n    \n            try{\n                await app.logIn(decoded.cre).then( async user =>{\n                    const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n                    const collectionInfluencer = mongo.db(\"smoke-show\").collection(\"influencers\")\n                    try{\n                        await collectionInfluencer.updateOne(\n                            { \"userId\": user.userId},\n                            {\n                                \"$set\": {\n                                    \"fname\": userObj.fname,\n                                    \"lname\": userObj.lname,\n                                    \"username\": userObj.username\n                                  }\n                            },\n                            { upsert: true}\n                        ).then( res =>{\n                            console.log(res)\n                            setIsSuccess({\n                                ...isSuccess,\n                                userDetails: true\n                            })\n                            setDisableBtnStates({\n                                ...disableBtnStates,\n                                userDetails: true\n                            })\n                            props.updateUserDetails(userObj.fname, userObj.lname, userObj.username)\n                        })\n                    }catch(err){ console.log(err) }\n                })\n            }catch(err){ console.log(err) }\n        }\n        \n    }\n\nconst deleteImgObj = async (key) =>{\n\n    if(app.currentUser.id === props.profileUser.userId){\n        try{\n            await app.currentUser.functions.deleteImageObjToS3(bucketName, key).then(res =>{\n                console.log('res', res)\n            })\n        }catch(err){console.log(err)}\n    }else{\n        const token = sessionStorage.getItem('session_user')\n        const decoded = jwt.verify(token, process.env.REACT_APP_JWT_SECRET)\n\n        try{\n            await app.logIn(decoded.cre).then(async user =>{\n                await user.functions.deleteImageObjToS3(bucketName, key).then(res =>{\n                    console.log('res', res)\n                })\n            })\n        }catch(err){console.log(err)}\n    }\n}\n\n    useEffect(() => {\n\n        if( typeof(props.profileUser.profilePic) == 'undefined' || props.profileUser.profilePic  == ''){\n            setCurrentBioPic(bioPic)\n        \n        }else{\n            setCurrentBioPic(props.profileUser.profilePic)\n        }\n        setUserObj({...userObj, profilePic: bioPic})\n        if(props.profileUser.profileCover == '' || typeof(props.profileUser.profileCover) == \"undefined\"){\n            setCurrentCover(noImg)\n        }else{\n            setCurrentCover(props.profileUser.profileCover)\n        }\n      \n        \n    }, [])\n\n    return(\n    <Fragment>\n        <Modal className=\"modal-wrapper-bio\" show={props.show} onHide={handleClose}>\n            <Modal.Header closeButton>\n            </Modal.Header>\n            <Modal.Body>\n                <Row className=\"bio-modal-inner-wrapper\">\n                    <Col sm={6} className=\"\">\n                    <p className=\"heading-modal\">Your profile picture</p>\n                    <Row>\n                    \n                        <Col sm={4}>\n                            <div className=\"change-bio-pic-wrapper\">\n                                <img src={imgThumb ? imgThumb : currentBioPic} alt=\"user avator\" className=\"change-pic\" />\n                            </div>\n                            \n                        </Col>\n                        <Col sm={8} className=\"setting-file-btn\" >\n                        \n                            <Form>\n                                <Form.Group>\n                                    <Form.File \n                                    id=\"bio-pic\"\n                                    label={profilePic.name ? profilePic.name : '' }\n                                    onChange={profilePicUpload}\n                                    custom\n                                     />\n                                </Form.Group>\n                                <small >Maximum file size is 3MB.</small>\n                                {isSuccess.profilePic ? <Alert variant=\"success\" style={{padding: '5px', marginTop: '1rem', textAlign:'center'}}><small>{msg.profilePic}</small></Alert> :\n                                <div style={{marginTop: '1rem'}}></div>\n                                }\n                                <Button variant=\"primary\" onClick={saveProfilePic} className=\"save-changes-btn\" disabled={disableBtnStates.profilePic}>\n                                Upload\n                                </Button>\n                                \n                            </Form>\n                        </Col>\n                    </Row>\n                    <hr />\n                    <div className=\"spacer-2rem\"></div>\n                    <p className=\"heading-modal\">Your account information</p>\n                              \n                    <Form>\n                        <Row>\n                            <Col sm={6}>\n                                <Form.Group >\n                                    <Form.Label>First Name</Form.Label>\n                                    <Form.Control name=\"fname\" type=\"text\" placeholder={props.profileUser.fname ? props.profileUser.fname : \"Enter your first name\"} onChange={handleChange} />\n                                </Form.Group>\n                            </Col>\n                            <Col sm={6}>\n                                <Form.Group >\n                                    <Form.Label>Last Name</Form.Label>\n                                    <Form.Control name=\"lname\" type=\"text\" placeholder={props.profileUser.lname ? props.profileUser.lname : \"Enter your first name\"} onChange={handleChange} />\n                                </Form.Group>\n                            </Col>\n                        </Row>\n                        \n                        <br/>\n                        <Form.Group >\n                            <Form.Label>Email</Form.Label>\n                            <Form.Control type=\"email\" name=\"email\" placeholder={props.profileUser.email ? props.profileUser.email: \"Please add your email\"} disabled />\n                        </Form.Group>\n                        <br/>\n                        <Form.Group >\n                            <Form.Label>Username</Form.Label>\n                            <Form.Control type=\"text\" name=\"username\" placeholder={props.profileUser.username ? props.profileUser.username : \"Please add your username\"} disabled />\n                        </Form.Group>\n                        <br/>\n                        {isSuccess.userDetails ? <Alert variant=\"success\" style={{padding: '5px', marginTop: '1rem', textAlign:'center'}}><small>{msg.userDetails}</small></Alert> : \"\"}\n                        <Button variant=\"primary\" onClick={handleUpdateProfile} className=\"save-changes-btn\" disabled={disableBtnStates.userDetails}>\n                                Save Changes\n                        </Button>\n                    </Form>\n                    </Col>\n                    <Col sm={6}>\n                        <p className=\"heading-modal\">Your cover image</p>\n                        <Row>\n                            <Col sm={4}>\n                                <div className=\"change-bio-pic-wrapper\">\n                                    <img src={coverImgThumb ? coverImgThumb : currentCover} alt=\"user uploaded photo\" className=\"change-pic\" />\n                                </div>\n                                \n                            </Col>\n                            <Col sm={8} className=\"setting-file-btn\" >\n                                <Form>\n                                    <Form.Group>\n                                        <Form.File \n                                        // id=\"exampleFormControlFile2\" className=\"upload-file-btn\"\n                                        id=\"bio-pic\"\n                                        label={coverPic.name ? coverPic.name : ''}\n                                        onChange={coverPicUpload}\n                                        custom\n                                        />\n                                    </Form.Group>\n                                    <small >Maximum file size 3MB.</small>\n                                    {isSuccess.coverPic ? <Alert variant=\"success\" style={{padding: '5px', marginTop: '1rem', textAlign:'center'}}><small>{msg.coverPic}</small></Alert> :\n                                    <div style={{marginTop: '1rem'}}></div>\n                                    }\n                                    <Button variant=\"primary\" onClick={saveProfileCover} className=\"save-changes-btn \" disabled={disableBtnStates.coverPic}>\n                                    Upload\n                                    </Button>\n                                </Form>\n                            </Col>\n                        </Row>\n                        \n                        <hr />\n                        <div className=\"spacer-2rem\"></div>\n                        \n                        <p className=\"heading-modal\">Change password</p>\n                        <Form>\n                            <Form.Group >\n                                <Form.Label>Current password</Form.Label>\n                                <Form.Control type=\"password\" placeholder=\"Enter your current password\" name=\"currentPw\" onChange={handleChangePw} />\n                            </Form.Group>\n                            <br/>\n                            <Form.Group >\n                                <Form.Label>New password</Form.Label>\n                                <Form.Control type=\"password\" placeholder=\"Enter your new password\" name=\"newPw\" onChange={handleChangePw} />\n                            </Form.Group>\n                            <br/>\n                            <Form.Group >\n                                <Form.Label>Confirm new password</Form.Label>\n                                <Form.Control type=\"password\" placeholder=\"Confirm your new password\" name=\"conNewPw\" onChange={handleChangePw} />\n                            </Form.Group>\n                            <br/>\n                            { isSuccess.password && <Alert variant=\"success\">{msg.password}</Alert> }\n\n                            <Button variant=\"primary\" onClick={handleClose} className=\"save-changes-btn\" disabled={disableBtnStates.password}>\n                                    Save new password\n                            </Button>\n                        </Form>\n                    </Col>\n                </Row>\n                \n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"primary\" onClick={handleClose} className=\"save-changes-btn btn-close-settings\">\n                        Close\n                </Button>\n                {/* <Button variant=\"primary\" onClick={testDelete} className=\"save-changes-btn btn-close-settings\">\n                        test delete\n                </Button> */}\n            </Modal.Footer>\n        </Modal>\n    </Fragment>\n    )\n}\n\nexport default SettingModal","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Influencer/vehicleCard.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Influencer/SubNav.js",["382","383","384","385","386"],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Influencer/Social.js",["387"],"import React, { Fragment, useEffect, useState} from 'react'\nimport { Link } from 'react-router-dom'\nimport { Row, Col } from 'react-bootstrap'\nimport Layout from '../Layout/Layout'\nimport { Helmet } from \"react-helmet\"\nimport SubNav from './SubNav'\nimport * as Realm from \"realm-web\"\nimport './social.scss'\nimport { getInfluencer }from '../../store/actions/influencerActions'\nimport instaIcon from '../../assets/social/instagram.svg'\nimport fbIcon from '../../assets/social/facebook.svg'\nimport twitterIcon from '../../assets/social/twitter.svg'\nimport tiktokIcon from '../../assets/social/TikTok.svg'\nimport amazonIcon from '../../assets/social/Amazon-Affiliate-program.jpg'\nimport { connect } from 'react-redux'\nimport jwt from 'jsonwebtoken'\n\nconst Social = (props) =>{\n    const appConfig = {\n        id: process.env.REACT_APP_REALM_APP_ID,\n        // timeout: 10000, \n        // timeout in number of milliseconds\n      };\n    const app = new Realm.App(appConfig);\n    const userIdParam = props.match.params.id\n    const [influencer, setInfluencer] = useState({profileCover: '', profilePic: '', username: '', userId: '', social: {instagram: '', facebook: '', twitter: ''}})\n    // const generateCode = () =>{\n    //     const shortID = short.generate()\n    //     console.log('id', shortID)\n    // }\n    // const getData = async () =>{\n    //     const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n    //     const collectionInfluencer = mongo.db(\"smoke-show\").collection(\"influencers\")\n    //     const filter = {userId: userIdParam}\n    //     try{\n    //         await collectionInfluencer.findOne(filter).then(user =>{\n    //             setInfluencer(user)\n\n    //         })\n    //     }catch(err){ console.log(err) }\n    // }\n    const userLogin =async (cre) =>{\n         try{\n             await app.logIn(cre).then(user =>{\n                 console.log('user logged in', user.id)\n             })\n         }catch(err){console.log(err)}\n    }\n    const loginCheck = () =>{\n        const tokenUser = sessionStorage.getItem('session_user')\n        if(tokenUser){\n            jwt.verify(tokenUser, process.env.REACT_APP_JWT_SECRET, function(err, decoded) {\n                if (err) {\n                    // timeout\n                    const cre = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTH_PUBLIC_VIEW);\n                    userLogin(cre)\n                    \n                }else{\n                    userLogin(decoded.cre)\n                }\n              });\n            \n        }else{\n            const cre = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTH_PUBLIC_VIEW);\n            userLogin(cre)\n        }\n    }\n    useEffect(() => {\n        setInfluencer(props.influencerObj)\n    }, [props.influencerObj])\n    \n    useEffect(() => {\n        loginCheck()\n        props.getInfluencer(userIdParam)\n    }, [])\n    return(\n        <Fragment>\n            <Helmet>\n                <title>Influencer Social Media Links | The Smoke Show</title>\n                <meta name=\"description\" content=\"Place the meta description text here.\" />\n            <meta name=\"robots\" content=\"noindex, nofollow\" />\n            </Helmet>\n            <Layout>\n                <div className=\"main-wrapper\">\n                    <div className=\"spacer-4rem\"></div>\n                    <SubNav influencer={influencer} formattedFans={props.formattedFans}/>\n                    <div className=\"spacer-4rem\"></div>\n                    <h2 className=\"title\">{influencer.username} Social Media</h2>\n                    <div className=\"spacer-4rem\"></div>\n                    <Row>\n                        <Col sm={6}>\n                            <ul style={{listStyle: 'none'}}>\n                            {influencer.social.instagram && \n                                <li className=\"social-media-container\">\n                                    <Link to={influencer.social.instagram}>\n                                        <img className=\"social-img\" src={instaIcon} alt=\"Instagram\" />\n                                        <p className=\"social-text\">{influencer.social.instagram}</p>\n                                    </Link>\n                                </li>\n                            }\n                            \n                            {influencer.social.facebook && \n                                <li className=\"social-media-container\">\n                                    <Link to={influencer.social.facebook}>\n                                        <img className=\"social-img\" src={fbIcon} alt=\"Instagram\" />\n                                        <p className=\"social-text\">{influencer.social.facebook}</p>\n                                    </Link>\n                                </li>\n                            }\n                            {influencer.social.twitter && \n                                <li className=\"social-media-container\">\n                                    <Link to={influencer.social.twitter}>\n                                        <img className=\"social-img\" src={twitterIcon} alt=\"Instagram\" />\n                                        <p className=\"social-text\">{influencer.social.twitter}</p>\n                                    </Link>\n                                </li>\n                            }\n                            {influencer.social.tiktok && \n                                <li className=\"social-media-container\">\n                                    <Link to={influencer.social.tiktok}>\n                                        <img className=\"social-img\" src={tiktokIcon} alt=\"Instagram\" />\n                                        <p className=\"social-text\">{influencer.social.tiktok}</p>\n                                    </Link>\n                                </li>\n                            }\n                            </ul>\n                        </Col>\n                        <Col sm={6}>\n                            <ul style={{listStyle: 'none'}}>\n                            {influencer.social.amazon && \n                                <li className=\"social-media-container\">\n                                    <Link to={influencer.social.amazon}>\n                                        <img className=\"social-img\" src={amazonIcon} alt=\"Instagram\" />\n                                        <p className=\"social-text\">{influencer.social.amazon}</p>\n                                    </Link>\n                                </li>\n                            }\n                            </ul>\n                        </Col>\n                    </Row>\n                    \n                </div>\n            </Layout>\n        </Fragment>\n        \n    )\n}\nconst mapDispatchToProps = (dispatch) =>{\n    return{\n        getInfluencer: (id)=> dispatch(getInfluencer(id))\n    }\n}\nconst mapStateToProps = (state)=>{\n    return{\n        influencerObj: state.influ.influencerObj,\n        formattedFans: state.influ.formattedFans\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Social)","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Influencer/Swagg.js",["388","389","390"],"import React, { Fragment, useState, useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport Layout from '../Layout/Layout'\nimport { Helmet } from \"react-helmet\"\nimport * as Realm from \"realm-web\"\nimport SubNav from './SubNav'\nimport { Row, Col } from 'react-bootstrap'\nimport './social.scss'\nimport teeSpringIcon from '../../assets/swagg/teespring-logo.jpg'\nimport printfulIcon from '../../assets/swagg/printful.jpg'\nimport { getInfluencer }from '../../store/actions/influencerActions'\nimport jwt from 'jsonwebtoken'\nimport { connect } from 'react-redux'\n\n\nconst SwaggInfluencer = (props) =>{\n    const [influencer, setInfluencer] = useState({profileCover: '', profilePic: '', username: '', userId: '', swagg: {teeSpring: '', printful: ''}})\n    const [formattedFans, setFormattedFans] = useState('')\n    const [noData, setNodata] = useState(false)\n    const appConfig = {\n        id: process.env.REACT_APP_REALM_APP_ID,\n        // timeout: 10000, \n        // timeout in number of milliseconds\n      };\n    const app = new Realm.App(appConfig)\n    const userIdParam = props.match.params.id\n    const getData = async () =>{\n        const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n        const collectionInfluencer = mongo.db(\"smoke-show\").collection(\"influencers\")\n        const filter = {userId: userIdParam}\n        try{\n            await collectionInfluencer.findOne(filter).then(user =>{\n                setInfluencer(user)\n                if(!user.swagg.teeSpring && !user.swagg.printful) setNodata(true)\n                if(user.fans > 999){\n                    setFormattedFans(Math.sign(user.fans)*((Math.abs(user.fans)/1000).toFixed(1)) + 'k')\n                }else{\n                    setFormattedFans(Math.sign(user.fans)*Math.abs(user.fans))\n                }\n\n            })\n        }catch(err){ console.log(err) }\n    }\n    const userLogin =async (cre) =>{\n        try{\n            await app.logIn(cre).then(user =>{\n                console.log('user logged in', user.id)\n            })\n        }catch(err){console.log(err)}\n   }\n   const loginCheck = () =>{\n    const tokenUser = sessionStorage.getItem('session_user')\n    if(tokenUser){\n        jwt.verify(tokenUser, process.env.REACT_APP_JWT_SECRET, function(err, decoded) {\n            if (err) {\n                // timeout\n                const cre = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTH_PUBLIC_VIEW);\n                userLogin(cre)\n                \n            }else{\n                userLogin(decoded.cre)\n            }\n          });\n        \n    }else{\n        const cre = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTH_PUBLIC_VIEW);\n        userLogin(cre)\n    }\n}\n    useEffect(() => {\n        if(typeof(props.influencerObj.swagg) !== 'undefined'){\n            setInfluencer(props.influencerObj)\n            if(!props.influencerObj.swagg.teeSpring && !props.influencerObj.swagg.printful) setNodata(true)\n        }\n        \n    }, [props.influencerObj])\n\n    useEffect(() => {\n        // getData()\n        loginCheck()\n        props.getInfluencer(userIdParam)\n    }, [])\n    return(\n        <Fragment>\n            <Helmet>\n                <title>Swagg Influencer | The Smoke Show</title>\n            </Helmet>\n            <Layout>\n                <div className=\"main-wrapper\" style={{minHeight: 'calc(100vh - 21rem)'}}>\n                    <div className=\"spacer-4rem\"></div>\n                    <SubNav influencer={influencer} formattedFans={props.formattedFans}/>\n                    <div className=\"spacer-4rem\"></div>\n                    <h2 className=\"title\">{influencer.username} Swagg</h2>\n                    <div className=\"spacer-4rem\"></div>\n                    <Row>\n                        <Col sm={6}>\n                            <ul style={{listStyle: 'none'}}>\n                                { noData && <p>No Swagg</p>}\n                                { influencer.swagg.teeSpring &&\n                                <li className=\"social-media-container\">\n                                    <Link to={influencer.swagg.teeSpring}>\n                                        <img src={teeSpringIcon} alt=\"Teespring\" className=\"social-img\"/>\n                                        <p className=\"social-text\">{influencer.swagg.teeSpring}</p>\n                                    </Link>\n                                </li>\n                                }\n                                {influencer.swagg.printful && \n                                <li className=\"social-media-container\">\n                                    <Link to={influencer.swagg.teeSpring}>\n                                        <img src={printfulIcon} alt=\"Printful\" className=\"social-img\"/>\n                                        <p className=\"social-text\">{influencer.swagg.printful}</p>\n                                    </Link>\n                                </li>\n                                }\n                            </ul>\n                        </Col>\n                        <Col sm={6}>\n                            \n                        </Col>\n                    </Row>\n                </div>\n            </Layout>\n        </Fragment>\n    )\n}\nconst mapDispatchToProps = (dispatch) =>{\n    return{\n        getInfluencer: (id)=> dispatch(getInfluencer(id))\n    }\n}\nconst mapStateToProps = (state)=>{\n    return{\n        influencerObj: state.influ.influencerObj,\n        formattedFans: state.influ.formattedFans\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SwaggInfluencer)","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/store/actions/bioActions.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/store/reducers/bioReducer.js",["391","392"],"import * as Realm from \"realm-web\"\n\nconst initState = {}\n\nconst bioReducer = (state = initState, action) =>{\n    \n    switch(action.type){\n        case 'CREATE_CAR':\n            console.log('car created', action.car)\n        // default: return state\n    }\nreturn state\n}\n\nexport default bioReducer","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Admin/QueryVideoData.js",["393","394","395","396","397","398","399","400","401","402","403","404","405"],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Admin/EditVideoData.js",["406","407","408"],"import React, { useState, Fragment, useEffect } from 'react'\nimport * as Realm from \"realm-web\"\n\nimport { Container, Row, Col, Form, Pagination, Button } from 'react-bootstrap'\nimport jwt from 'jsonwebtoken'\n\nconst EditVideoData = () =>{\n    const [activePag, setActivePag] = useState(0)\n    const [isLoggedIn, setIsLoggedIn] = useState(false)\n    const [userObj, setUserObj] = useState({email: '', password: ''})\n    const app = new Realm.App({ id: process.env.REACT_APP_REALM_APP_ID })\n    const [allVideos, setAllVideos] = useState([])\n    const [message, setMessage] = useState('')\n    const [carDataId, setCarDataId] = useState('')\n    const [editVideoId, setEditVideoId] = useState('')\n    const [editMode, setEditMode] = useState(false)\n    const maxAgeTest = 1 * 60 * 60\n\n    const handlePagNum = (num) =>{\n        console.log('num', num)\n        setActivePag(num)\n        setAllVideos({...allVideos})\n    }\n    let items = [];\n    for (let number = 0; number <= 10; number++) {\n    items.push(\n        <Pagination.Item key={number} active={number === activePag} onClick={()=>{handlePagNum(number)}}>\n        {number}\n        </Pagination.Item>,\n    );\n    }\n    \n    const handleChange = (e) =>[\n        setUserObj({\n            ...userObj,\n            [e.target.name]: e.target.value\n        })\n    ]\n    const videoEmbedURL = 'https://www.youtube.com/embed/'\n\n    const chunkArray = (allVideos) =>{\n        let chunk_size = 15\n        let index = 0;\n        let arrayLength = allVideos.length;\n        let tempArray = [];\n        let myChunk\n        \n        for (index = 0; index < arrayLength; index += chunk_size) {\n            myChunk = allVideos.slice(index, index+chunk_size);\n            // Do something if you want with the group\n            tempArray.push(myChunk);\n        }\n\n        return tempArray;\n    }\n    \n    const handleSubmitLogin = async (e) =>{\n        e.preventDefault()\n        const emailLowerCase = userObj.email.toLowerCase()\n        const credentials = Realm.Credentials.emailPassword(emailLowerCase, userObj.password)\n        try{\n            app.logIn(credentials).then(async user =>{\n                setIsLoggedIn(true)\n                const customData = user.customData\n                const token = jwt.sign({ userData: customData }, process.env.REACT_APP_JWT_SECRET, {expiresIn: maxAgeTest})\n                const tokenCredentials = jwt.sign({ cre: credentials }, process.env.REACT_APP_JWT_SECRET, {expiresIn: maxAgeTest})\n                sessionStorage.setItem('session_token', token)\n                sessionStorage.setItem('session_user', tokenCredentials)\n                const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME);\n                const mongoCollection = mongo.db(\"smoke-show\").collection(\"youtube-videos\")\n                const filter = {channelId: 'UCdOXRB936PKSwx0J7SgF6SQ'}\n                await mongoCollection.find(filter).then( videos =>{\n                    console.log(videos)\n                    const chunkedVideos = chunkArray(videos)\n                    setAllVideos(chunkedVideos)\n                    \n                })\n            })\n        }catch(err){\n            console.log(err)\n            setMessage('login fail')\n        }\n        \n    }\n\n    const loginDiv =\n    <Container style={{alignItems: 'center', justifyContent: 'center', marginTop: '5rem'}}>\n        <Form onSubmit={handleSubmitLogin}>\n            <Form.Group controlId=\"formBasicEmail\">\n                <Form.Label>Email address</Form.Label>\n                <Form.Control type=\"email\" placeholder=\"Enter email\" name=\"email\" onChange={handleChange}/>\n                <Form.Text className=\"text-muted\">\n                </Form.Text>\n            </Form.Group>\n\n            <Form.Group controlId=\"formBasicPassword\">\n                <Form.Label>Password</Form.Label>\n                <Form.Control type=\"password\" placeholder=\"Password\" onChange={handleChange} name=\"password\" />\n            </Form.Group>\n            <br />\n            <Button variant=\"primary\" type=\"submit\">\n                Log in\n            </Button>\n        </Form>\n    </Container>\n    \n    const handleChangeCarData = (e) =>{\n        console.log('change', e.target.value)\n        console.log('name', e.target.name)\n        setCarDataId(e.target.value)\n        setEditVideoId(e.target.name)\n    }\n    const handleDataUpdate = async (e) =>{\n        e.preventDefault()\n        const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME);\n        const collectionYoutube = mongo.db(process.env.REACT_APP_REALM_DB_NAME).collection(\"youtube-videos\")\n        let str = carDataId\n        str = str.replace(/\\s/g, '')\n        setCarDataId(str)\n        try{\n            await collectionYoutube.updateOne(\n                { \"videoId\": editVideoId},\n                { \"$set\": { \"carDataId\": carDataId } },\n                { upsert: true}\n            ).then( async res =>{\n                console.log(res)\n                // e.target.reset()\n                setEditVideoId('')\n                setCarDataId('')\n                setEditMode(false)\n                const filter = {channelId: 'UCdOXRB936PKSwx0J7SgF6SQ'}\n                await collectionYoutube.find(filter).then( videos =>{\n                    const chunkedVideos = chunkArray(videos)\n                    setAllVideos(chunkedVideos)\n                })\n            })\n        }catch(err){\n            console.log(err)\n        }\n        \n    }\n    const editCarData = (video)=>{\n        // setEditVideoId(video.videoId)\n        return(\n            <Form>\n                <Form.Group >\n                    <Form.Label>Edit car data ID</Form.Label>\n                    <Form.Control as=\"textarea\" rows={2} name={video.videoId} value={allVideos[activePag].carDataId && allVideos[activePag].carDataId } onChange={handleChangeCarData} />\n                </Form.Group>\n                \n                <div className=\"bio-edit-btn-wrapper\">\n                    <Button variant=\"primary\" type=\"submit\" onClick={handleDataUpdate} className=\"bio-edit-btn\">\n                        Submit\n                    </Button>\n                </div>\n                \n            </Form>\n        )\n    }\n    const queryData = async () =>{\n        const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME);\n        const collectionYoutube = mongo.db(process.env.REACT_APP_REALM_DB_NAME).collection(\"youtube-videos\")\n        const filter = {channelId: 'UCdOXRB936PKSwx0J7SgF6SQ'}\n        await collectionYoutube.find(filter).then( videos =>{\n            const chunkedVideos = chunkArray(videos)\n            setAllVideos(chunkedVideos)\n        })\n    }\n    useEffect(() => {\n        const tokenUser = sessionStorage.getItem('session_user')\n        if(tokenUser){\n            setIsLoggedIn(true)\n            queryData()\n        }else{\n            setIsLoggedIn(false)\n        }\n\n    }, [])\n    return(\n        <Fragment>\n            {isLoggedIn ? \n            <Container>\n                <h1>Edit video data</h1>\n                <center><Pagination>{items}</Pagination></center>\n                <hr />\n                <Row>\n                {console.log('array 0', allVideos[0])}\n                { allVideos[activePag] && \n                    allVideos[activePag].map(video =>{\n                        return(\n                            <Col style={{marginBottom: '2rem'}}>\n                                <iframe src={videoEmbedURL + video.videoId}\n                                    frameBorder='0'\n                                    allow='autoplay; encrypted-media'\n                                    allowFullScreen\n                                    title='video'\n                                />\n                                <h3>{video.snippet.title}</h3>\n                                <p>Date: {video.snippet.publishedAt}</p>\n                                <p>Youtube videoId: {video.videoId}</p>\n                                {video.carDataId ? \n                                <div>\n                                <p>Car data ID: {video.carDataId ? video.carDataId : 'No data'}</p>\n                                 {/* <Button onClick={()=>setEditMode(true)}>Edit</Button> */}\n                                \n                                </div>\n                                \n                                 :\n                                editCarData(video)\n                                }\n                                {/* {editMode && editCarData(video)} */}\n                            </Col>\n                        )\n                        \n                        \n                    })\n                }\n                \n                    {/* <div className=\"videoWrapper\">\n                        <iframe src={videoEmbedURL + car.videoId}\n                                frameBorder='0'\n                                allow='autoplay; encrypted-media'\n                                allowFullScreen\n                                title='video'\n                        />\n                    <h3 style={{marginTop:'10px'}} >{car.youtube.snippet.title}</h3>\n                    </div> */}\n                </Row>\n            </Container>\n            : loginDiv}\n        </Fragment>\n    )\n}\n\nexport default EditVideoData","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Admin/AddCarData.js",["409"],"import React, { Fragment, useEffect, useState } from 'react'\nimport * as Realm from \"realm-web\"\n\nimport LoginDiv from './LoginDiv'\nimport { Container, Button, Form, Col, Row, Alert } from 'react-bootstrap'\nimport ColorDiv from './colorDiv'\nimport ColorInterior from './colorInterior'\nimport FormText from './FormText'\nimport FormCheckbox from './FormCheckbox'\nimport { logInUser } from '../../store/actions/authActions'\nimport { connect } from 'react-redux'\nimport short from 'short-uuid'\n\nconst AddCarData = (props) =>{\n    const [userObj, setUserObj] = useState({email: '', password: ''})\n    const [isLoggedIn, setIsLoggedIn] = useState(false)\n    // const maxAgeTest = 1 * 60 * 60\n    const app = new Realm.App({ id: process.env.REACT_APP_REALM_APP_ID })\n    const [price, setPrice] = useState({baseMSRP: null, baseInvoice: null})\n    const [powerFeatures, setPowerFeatures] = useState({})\n    const [colorExterior, setColorExterior] = useState([{name: '', rgb: null}])\n    const [colorInterior, setColorInterior] = useState([{name: '', rgb: null}])\n    const [basicData, setBasicData] = useState({make: '', model: '', year: null, id: null, name: '', totalSeating: null })\n    const [warranty, setWarranty] = useState({Basic: \"\", Drivetrain: \"\", Rust: \"\", Roadside: \"\"})\n    const [isSaved, setIsSaved] = useState(false)\n    const [measurements, setMeasurements] = useState({\n        \"Maximum cargo capacity\": \"\",\n        \"Curb weight\": \"\",\n        \"Cargo capacity, all seats in place\": \"\",\n        \"Angle of approach\": \"\",\n        \"Angle of departure\": \"\",\n        Length: \"\",\n        \"Ground clearance\": \"\",\n        Height: \"\",\n        \"Wheel base\": \"\",\n        Width: \"\"\n    })\n    const [fuel, setFuel] = useState({\n        \"Range in miles (cty/hwy)\": \"\",\n        \"Fuel tank capacity\": \"\",\n        \"Combined MPG\": \"\",\n        \"Fuel type\": \"\"\n    })\n    const [fuelMileage, setFuelMileage] = useState({\n        \"EPA mileage est\": {\n            \"(cty/hwy)\": \"\"\n        }\n    })\n    const [engine, setEngine] = useState({\n        Torque: \"\",\n        \"Base engine size\": \"\",\n        Horsepower: \"\",\n        \"Turning circle\": \"\",\n        Valves: \"\",\n        \"Base engine type\": \"\",\n        \"Valve timing\": \"\",\n        \"Cam type\": \"\",\n        Cylinders: \"\"\n    })\n    const [rearseats, setRearseats] = useState({})\n    const [comfort, setComfort] = useState({})\n    const [exteriorOptions, setExteriorOptions] = useState({})\n    const [driveTrain, setDriveTrain] = useState({})\n    const [suspension, setSuspension] = useState({})\n    const [instrumentation, setInstrumentation] = useState({})\n    const [entertainment, setEntertainment] = useState({})\n    const [frontseats, setFrontseats] = useState({})\n    const [safety, setSafety] = useState({})\n    const [tires, setTires] = useState({})\n    const [interiorOptions, setInteriorOptions] = useState({})\n    const [carObj, setCarObj] = useState({\n        id: null,\n        name: '',\n        make: '',\n        model: '',\n        year: null,\n        totalSeating: null,\n        typeCategories: {},\n        price: {\n            baseMSRP: null,\n            baseInvoice: null\n        },\n        color: {\n            EXTERIOR: [],\n            INTERIOR: []\n        },\n        features: {\n            \"Power Feature\": {\n                \"1 one-touch power windows\": false,\n                \"remote keyless power door locks\": false,\n                \"Heated mirrors\": false\n            },\n            Rearseats: {\n                \"Rear head room\": \"\",\n                \"Rear hip Room\": \"\",\n                \"Rear leg room\": \"\",\n                \"Rear shoulder room\": \"\",\n                \"reclining rear seats\": false,\n                \"Split-folding rear seatback\": false,\n                \"folding center armrest\": false\n            },\n            Warranty: {\n                Basic: \"\",\n                Drivetrain: \"\",\n                Rust: \"\",\n                Roadside: \"\"\n            },\n            Measurements: {\n                \"Maximum cargo capacity\": \"\",\n                \"Curb weight\": \"\",\n                \"Cargo capacity, all seats in place\": \"\",\n                \"Angle of approach\": \"\",\n                \"Angle of departure\": \"\",\n                Length: \"\",\n                \"Ground clearance\": \"\",\n                Height: \"\",\n                \"Wheel base\": \"\",\n                Width: \"\"\n            },\n            \"Comfort & Convenience\": {\n                \"Audio and cruise controls on steering wheel\": false,\n                \"cruise control\": false,\n                \"front and rear door pockets\": false,\n                \"rear view camera\": false,\n                \"tilt and telescopic steering wheel\": false\n            },\n            \"Exterior Options\": {\n                \"Wheel Locks\": false\n            },\n            \"Drive Train\": {\n                \"Drive type\": \"\",\n                Transmission: \"\"\n            },\n            Suspension: {\n                \"four-wheel independent suspension\": false\n            },\n            Instrumentation: {\n                clock: false,\n                \"trip computer\": false,\n                \"tachometer\": false\n            },\n            \"In Car Entertainment\": {\n                \"auxiliary audio input and USB with external media control\": false,\n                \"USB connection\": false,\n                \"AM/FM stereo\": false,\n                \"6 total speakers\": false\n            },\n            Frontseats: {\n                \"Front head room\": \"\",\n                \"bucket front seats\": false,\n                \"height adjustable driver seat\": false,\n                \"Front shoulder room\": \"\",\n                \"Front leg room\": \"\",\n                \"4 -way manual passenger seat adjustment\": false,\n                \"Front hip room\": \"\",\n                cloth: false\n            },\n            Fuel: {\n                \"EPA mileage est\": {\n                    \"(cty/hwy)\": \"\"\n                },\n                \"Range in miles (cty/hwy)\": \"\",\n                \"Fuel tank capacity\": \"\",\n                \"Combined MPG\": \"\",\n                \"Fuel type\": \"\"\n            },\n            Safety: {\n                \"4-wheel ABS\": false,\n                \"Rear door child safety locks\": false,\n                \"Rear center 3-point belt\": false,\n                \"child seat anchors\": false,\n                \"dual front side-mounted airbags\": false,\n                \"stability control\": false,\n                \"Passenger airbag occupant sensing deactivation\": false,\n                \"remote anti-theft alarm system\": false,\n                \"2 front headrests\": false,\n                \"3 rear headrests\": false,\n                \"dusk sensing headlamps\": false,\n                \"tire pressure monitoring\": false,\n                \"traction control\": false,\n                \"Ventilated front disc / solid rear disc brakes\": false\n//                 0: \"Rear door child safety locks\"\n// 1: \"daytime running lights\"\n// 2: \"stability control\"\n// 3: \"Passenger airbag occupant sensing deactivation\"\n// 4: \"remote anti-theft alarm system\"\n// 5: \"2 front headrests\"\n// 6: \"tire pressure monitoring\"\n// 7: \"traction control\"\n// 8: \"4-wheel ABS\"\n// 9: \"Rear center 3-point belt\"\n// 10: \"child seat anchors\"\n// 11: \"front and rear head airbags\"\n// 12: \"dusk sensing headlamps\"\n// 13: \"3 rear headrests\"\n// 14: \"dual front side-mounted airbags\"\n// 15: \"Ventilated front disc / solid rear disc brakes\"\n            },\n            \"Tires and Wheels\": {\n                \"temporary spare tire\": false,\n                \"All season tires\": false,\n            },\n            Engine: {\n                Torque: \"\",\n                \"Base engine size\": \"\",\n                Horsepower: \"\",\n                \"Turning circle\": \"\",\n                Valves: \"\",\n                \"Base engine type\": \"\",\n                \"Valve timing\": \"\",\n                \"Cam type\": \"\",\n                Cylinders: \"\"\n            },\n            \"Interior Options\": {\n                \"Carpet Floor Mats\": false,\n                \"Interior Light Kit\": false,\n                \"Cargo Mat\": false\n            }\n        }\n    })\n    // console.log('obj', carObj.features['Comfort & Convenience'])\n    const addDiv = () =>{\n        setColorExterior(colorExterior=>[...colorExterior, {name: '', rgb: null}])\n    }\n    const addDivInterior = () =>{\n        setColorInterior(colorInterior => [...colorInterior, {name: '', rgb: null}])\n        console.log(colorInterior)\n    }\n        \n    const changeColorExterior = (e, index) =>{\n        let newArr = [...colorExterior]; // copying the old datas array\n        newArr[index] = {...newArr[index], [e.target.name]: e.target.value} // \n        setColorExterior(newArr)\n    }\n    const changeColorInterior = (e, index) =>{\n        let newArr = [...colorInterior]; // copying the old datas array\n        newArr[index] = {...newArr[index], [e.target.name]: e.target.value} // \n        setColorInterior(newArr)\n        console.log(colorInterior)\n    }\n    const handleChange = (e) =>[\n        setUserObj({\n            ...userObj,\n            [e.target.name]: e.target.value\n        })\n    ]\n    const changeBasicData = (e) =>{\n        setBasicData({\n            ...basicData,\n            [e.target.name]: e.target.value\n        })\n    }\n    const changePrice =(e)=>{\n        setPrice({\n            ...price,\n            [e.target.name]: Number(e.target.value)\n        })\n    }\n    const changeWarranty = (e)=>{\n        setWarranty({\n            ...warranty,\n            [e.target.name]: e.target.value\n        })\n    }\n    const changeMeasurements = (e) =>{\n        setMeasurements({\n            ...measurements,\n            [e.target.name]: e.target.value\n        })\n    }\n    const changeFuel = (e)=>{\n        setFuel({\n            ...fuel,\n            [e.target.name]: e.target.value\n        })\n    }\n    const changeFuelMileage = (e)=>{\n        setFuelMileage({ \n            \"(cty/hwy)\": e.target.value\n        })\n    }\n    const changeEngine = (e)=>{\n        setEngine({\n            ...engine,\n            [e.target.name]: e.target.value\n        })\n    }\n    const changePowerFeatures = (e) =>{\n        if(e.target.checked === true){\n            setPowerFeatures({\n                ...powerFeatures,\n                [e.target.name]: e.target.checked\n            })\n        }\n    }\n    const changeRearseats = (e) =>{\n        if(e.target.checked){\n            if(e.target.checked === true){\n                setRearseats({\n                    ...rearseats,\n                    [e.target.name]: e.target.checked\n                })\n            }\n        }else{\n            setRearseats({\n                ...rearseats,\n                [e.target.name]: e.target.value\n            })\n        }\n    }\n    const changeComfort = (e) =>{\n        if(e.target.checked === true){\n            setComfort({\n                ...comfort,\n                [e.target.name]: e.target.checked\n            })\n        }\n    }\n    const changeExteriorOptions = (e) =>{\n        if(e.target.checked === true){\n            setExteriorOptions({\n                ...exteriorOptions,\n                [e.target.name]: e.target.checked\n            })\n        }\n    }\n    const changeDriveTrain = (e) =>{\n        setDriveTrain({\n            ...driveTrain,\n            [e.target.name]: e.target.value\n        })\n    }\n    const changeSuspension = (e) =>{\n        if(e.target.checked === true){\n            setSuspension({\n                ...suspension,\n                [e.target.name]: e.target.checked\n            })\n        }\n    }\n    const changeInstrumentation = (e) =>{\n        if(e.target.checked === true){\n            setInstrumentation({\n                ...instrumentation,\n                [e.target.name]: e.target.checked\n            })\n        }\n    }\n    const changeFrontseats = (e)=>{\n        if(e.target.checked){\n            if(e.target.checked === true){\n                setFrontseats({\n                    ...frontseats,\n                    [e.target.name]: e.target.checked\n                })\n            }\n        }else{\n            setFrontseats({\n                ...frontseats,\n                [e.target.name]: e.target.value\n            })\n        }\n    }\n    const changeSafety = (e) =>{\n        if(e.target.checked === true){\n            setSafety({\n                ...safety,\n                [e.target.name]: e.target.checked\n            })\n        }\n    }\n    const changeTires = (e) =>{\n        if(e.target.checked === true){\n            setTires({\n                ...tires,\n                [e.target.name]: e.target.checked\n            })\n        }\n    }\n    const changeInteriorOptions = (e) =>{\n        if(e.target.checked === true){\n            setInteriorOptions({\n                ...interiorOptions,\n                [e.target.name]: e.target.checked\n            })\n        }\n    }\n    const changeEntertainment = (e) =>{\n        if(e.target.checked === true){\n            setEntertainment({\n                ...entertainment,\n                [e.target.name]: e.target.checked\n            })\n        }\n    }\n    const handleSubmitLogin = async (e) =>{\n        e.preventDefault()\n        e.preventDefault()\n        const emailLowerCase = userObj.email.toLowerCase()\n        const credentials = Realm.Credentials.emailPassword(emailLowerCase, userObj.password)\n        props.logInUser(credentials, emailLowerCase)\n        \n    }\n    const handleSubmitData = async (e) =>{\n        // e.preventDefault()\n        setFuel({\n            ...fuel,\n            \"EPA mileage est\": fuelMileage\n        })\n        const carData = {\n            isManual: true,\n            id: basicData.id,\n            name: basicData.name,\n            make: basicData.make,\n            model: basicData.model,\n            year: Number(basicData.year),\n            totalSeating: Number(basicData.totalSeating),\n            price: price,\n            color: {\n                EXTERIOR: colorExterior,\n                INTERIOR: colorInterior\n            },\n            features: {\n                \"Power Feature\": powerFeatures,\n                Rearseats: rearseats,\n                Warranty: warranty,\n                Measurements: measurements,\n                \"Comfort & Convenience\": comfort,\n                \"Exterior Options\": exteriorOptions,\n                \"Drive Train\": driveTrain,\n                Suspension: suspension,\n                Instrumentation: instrumentation,\n                \"In Car Entertainment\": entertainment,\n                Frontseats: frontseats,\n                Fuel: fuel,\n                Safety: safety,\n                \"Tires and Wheels\": tires,\n                Engine: engine,\n                \"Interior Options\": interiorOptions\n            }\n        }\n        const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n        const collection = mongo.db(\"smoke-show\").collection(\"cars-manual\")\n        try{\n            await collection.insertOne(carData).then(res =>{\n                console.log('success!')\n                setIsSaved(true)\n            })\n        }catch(err){\n            console.log(err)\n        }\n    }\n    useEffect(() => {\n        if(props.isLoggedIn){\n            setIsLoggedIn(true)\n        }else{\n            setIsLoggedIn(false)\n        }\n    }, [props.isLoggedIn])\n    useEffect(() => {\n        const token = sessionStorage.getItem('session_token')\n        if(token){\n            setIsLoggedIn(true)\n        }else{\n            setIsLoggedIn(false)\n        }\n    }, [])\n    return(\n        <Fragment>\n            {isLoggedIn ?\n            <Container>\n            <div className=\"spacer-4rem\"></div>\n                <h1>Add New Car Data</h1>\n                <div className=\"spacer-2rem\"></div>\n                <Form>\n                    <Form.Group as={Row} >\n                        <Form.Label column sm=\"4\">\n                        ID\n                        </Form.Label>\n                        <Col sm=\"8\">\n                        <Form.Control type=\"number\" pattern=\"\\d*\" placeholder=\"type number | leave blank if no data found\" name=\"id\" onChange={changeBasicData}/>\n                        </Col>\n                    </Form.Group>\n\n                    <Form.Group as={Row} >\n                        <Form.Label column sm=\"4\">\n                        Name\n                        </Form.Label>\n                        <Col sm=\"8\">\n                        <Form.Control type=\"text\" placeholder=\"Name\" name=\"name\" onChange={changeBasicData}/>\n                        </Col>\n                    </Form.Group>\n                    <Form.Group as={Row} >\n                        <Form.Label column sm=\"4\">\n                        Make\n                        </Form.Label>\n                        <Col sm=\"8\">\n                        <Form.Control type=\"text\" placeholder=\"Maker\" onChange={changeBasicData} name=\"make\" />\n                        </Col>\n                    </Form.Group>\n                    <Form.Group as={Row} >\n                        <Form.Label column sm=\"4\">\n                        Model\n                        </Form.Label>\n                        <Col sm=\"8\">\n                        <Form.Control type=\"text\" placeholder=\"Model\" onChange={changeBasicData} name=\"model\"/>\n                        </Col>\n                    </Form.Group>\n                    <Form.Group as={Row} >\n                        <Form.Label column sm=\"4\">\n                        year\n                        </Form.Label>\n                        <Col sm=\"8\">\n                        <Form.Control type=\"number\" pattern=\"\\d*\" placeholder=\"Type number\" onChange={changeBasicData} name=\"year\" />\n                        </Col>\n                    </Form.Group>\n                    <Form.Group as={Row} >\n                        <Form.Label column sm=\"4\">\n                        Price | base MSRP\n                        </Form.Label>\n                        <Col sm=\"8\">\n                        <Form.Control type=\"number\" pattern=\"\\d*\" placeholder=\"Type number\" name=\"baseMSRP\" onChange={changePrice}/>\n                        </Col>\n                    </Form.Group>\n                    <Form.Group as={Row} >\n                        <Form.Label column sm=\"4\">\n                        Price | base Invoice\n                        </Form.Label>\n                        <Col sm=\"8\">\n                        <Form.Control type=\"number\" pattern=\"\\d*\" placeholder=\"Type number\" onChange={changePrice} name=\"baseInvoice\" />\n                        </Col>\n                    </Form.Group>\n                    <Form.Group as={Row} >\n                        <Form.Label column sm=\"4\">\n                        totalSeating\n                        </Form.Label>\n                        <Col sm=\"8\">\n                        <Form.Control type=\"number\" placeholder=\"Type number\" onChange={changeBasicData} name=\"totalSeating\"/>\n                        </Col>\n                    </Form.Group>\n                    <Form.Group as={Row} >\n                        <Form.Label column sm=\"4\">\n                        Color | EXTERIOR <Button size=\"sm\" onClick={addDiv}>add color</Button>\n                        </Form.Label>\n                        <Col sm=\"8\">\n                        <Form.Control onChange={(e)=>changeColorExterior(e, 0)} name=\"name\" type=\"text\" placeholder=\"Name\" />\n                        </Col>\n                    </Form.Group>\n                    <Form.Group as={Row} >\n                        <Form.Label column sm=\"4\">\n                        Color EXTERIOR : RGB\n                        </Form.Label>\n                        <Col sm=\"8\">\n                        <Form.Control type=\"text\" pattern=\"\\d*\" placeholder=\"111,111,111\" name=\"rgb\" onChange={(e)=>changeColorExterior(e, 0)}  />\n                        </Col>\n                    </Form.Group>\n                    {\n                        colorExterior.map((exterior, index) =>{\n                            const unique = short.generate()\n                            return(\n                                <ColorDiv num={index + 1} changeColorExterior={changeColorExterior} key={unique}/>\n                            )\n                            \n                        })\n                    }\n                    <hr />\n                    <Form.Group as={Row} >\n                        <Form.Label column sm=\"4\">\n                        Color | Interior <Button size=\"sm\" onClick={addDivInterior}>add color</Button>\n                        </Form.Label>\n                        <Col sm=\"8\">\n                        <Form.Control onChange={(e)=>changeColorInterior(e, 0)} name=\"name\" type=\"text\" placeholder=\"Name\" />\n                        </Col>\n                    </Form.Group>\n                    <Form.Group as={Row} >\n                        <Form.Label column sm=\"4\">\n                        Color Interior : RGB\n                        </Form.Label>\n                        <Col sm=\"8\">\n                        <Form.Control type=\"text\" pattern=\"\\d*\" placeholder=\"111,111,111\" name=\"rgb\" onChange={(e)=>changeColorInterior(e, 0)}  />\n                        </Col>\n                    </Form.Group>\n                    {\n                        colorInterior.map((interior, index) =>{\n                            const unique = short.generate()\n                            return(\n                                <ColorInterior changeColorInterior={changeColorInterior} num={index +1} key={unique}/>\n                            )\n                            \n                        })\n                    }\n                    <hr/>\n                    <h3>Features</h3>\n                    <h3>Power Feature</h3>\n                    {  \n                        Object.keys(carObj.features['Power Feature']).map(key =>{\n                            const unique = short.generate()\n                        return <FormCheckbox key={unique} objKey={key} handleChange={changePowerFeatures}/>\n                    })}\n                    <hr/>\n                    <h3>Rearseats</h3>\n                    { Object.keys(carObj.features.Rearseats).map(key=>{\n                        const unique = short.generate()\n                        if(carObj.features.Rearseats[key]=== false || carObj.features.Rearseats[key]=== true){\n                            return <FormCheckbox key={unique} objKey={key} handleChange={changeRearseats} />\n                        }else{\n                            return (<Fragment key={unique}>\n                                    <FormText objKey={key} handleChange={changeRearseats} />\n                                    <hr/>\n                                    </Fragment>)\n                        }\n                    })}\n                    <h3>Warranty</h3>\n                    {Object.keys(carObj.features.Warranty).map(key =>{\n                        const unique = short.generate()\n                        return <FormText key={unique} objKey={key} handleChange={changeWarranty}/>\n                    })}\n                    <hr />\n                    <h3>Measurements</h3>\n                    {Object.keys(carObj.features.Measurements).map(key =>{\n                        const unique = short.generate()\n                        return <FormText key={unique} objKey={key} handleChange={changeMeasurements} />\n                    })}\n                    <hr />\n                    <h3>Comfort & Convenience</h3>\n                    {  \n                        Object.keys(carObj.features['Comfort & Convenience']).map(key =>{\n                            const unique = short.generate()\n                        return <FormCheckbox key={unique} objKey={key} handleChange={changeComfort}/>\n                    })}\n                    <h3>Exterior Options</h3>\n                    {  \n                        Object.keys(carObj.features['Exterior Options']).map(key =>{\n                            const unique = short.generate()\n                        return <FormCheckbox key={unique} objKey={key} handleChange={changeExteriorOptions}/>\n                    })}\n                    <hr />\n                    <h3>Drive Train</h3>\n                    { Object.keys(carObj.features['Drive Train']).map(key =>{\n                        const unique = short.generate()\n                        return <FormText key={unique} objKey={key} handleChange={changeDriveTrain} />\n                    })\n                    }\n                    <hr />\n                    <h3>Suspension</h3>\n                    {  \n                        Object.keys(carObj.features.Suspension).map(key =>{\n                            const unique = short.generate()\n                        return <FormCheckbox key={unique} objKey={key} handleChange={changeSuspension}/>\n                    })}\n                    <hr />\n                    <h3>Instrumentation</h3>\n                    {  \n                        Object.keys(carObj.features.Instrumentation).map(key =>{\n                            const unique = short.generate()\n                        return <FormCheckbox key={unique} objKey={key} handleChange={changeInstrumentation}/>\n                    })}\n                    <h3>In Car Entertainment</h3>\n                    {  \n                        Object.keys(carObj.features['In Car Entertainment']).map(key =>{\n                            const unique = short.generate()\n                        return <FormCheckbox key={unique} objKey={key} handleChange={changeEntertainment}/>\n                    })}\n                    <h3>Frontseats</h3>\n                    { Object.keys(carObj.features.Frontseats).map(key=>{\n                        const unique = short.generate()\n                        if(carObj.features.Frontseats[key]=== false || carObj.features.Frontseats[key]=== true){\n                            return <FormCheckbox key={unique} objKey={key} handleChange={changeFrontseats} />\n                        }else{\n                            return <Fragment>\n                                    <FormText key={unique} objKey={key} handleChange={changeFrontseats}/>\n                                    <hr/>\n                                    </Fragment>\n                        }\n                    })}\n                    <h3>Fuel</h3>\n                    <Form.Group as={Row} >\n                        <Form.Label column sm=\"4\">\n                        EPA mileage est | (cty/hwy)\n                        </Form.Label>\n                        <Col sm=\"8\">\n                        <Form.Control type=\"text\" placeholder=\"Type text\" onChange={changeFuelMileage}/>\n                        </Col>\n                    </Form.Group>\n                    { Object.keys(carObj.features.Fuel).map(key =>{\n                        const unique = short.generate()\n                        if(key === carObj.features.Fuel['EPA mileage est'] ){\n                            return ''\n                        }else{\n                            return <FormText key={unique} objKey={key} handleChange={changeFuel} />\n                        }\n                        \n                    })\n                    }\n                    <hr/>\n                    <h3>Safety</h3>\n                    {  \n                        Object.keys(carObj.features.Safety).map(key =>{\n                            const unique = short.generate()\n                        return <FormCheckbox key={unique} objKey={key} handleChange={changeSafety}/>\n                    })}\n                    <hr />\n                    <h3>Tires and Wheels</h3>\n                    {  \n                        Object.keys(carObj.features['Tires and Wheels']).map(key =>{\n                            const unique = short.generate()\n                        return <FormCheckbox key={unique} objKey={key} handleChange={changeTires} />\n                    })}\n                    <h3>Engine</h3>\n                    { Object.keys(carObj.features.Engine).map(key =>{\n                        const unique = short.generate()\n                        return <FormText key={unique} objKey={key} handleChange={changeEngine} />\n                    })\n                    }\n                    <hr />\n                    <h3>Interior Options</h3>\n                    {  \n                        Object.keys(carObj.features['Interior Options']).map(key =>{\n                            const unique = short.generate()\n                        return <FormCheckbox key={unique} objKey={key} handleChange={changeInteriorOptions}/>\n                    })}\n                    {isSaved && <Alert variant=\"success\">Successfully saved!</Alert>}\n                    <Button style={{margin:'4rem auto', width: '100%'}} onClick={handleSubmitData}>Save data</Button>\n                </Form>\n            </Container>\n             : <LoginDiv handleSubmitLogin={handleSubmitLogin} handleChange={handleChange} />}\n        </Fragment>\n    )\n}\nconst mapDispatchToProps = (dispatch) =>{\n    return {\n        logInUser: (credentials, email) => dispatch(logInUser(credentials, email))\n    }\n}\nconst mapStateToProps = (state) => {\n    //syntax is propName: state.key of combineReducer.key\n    return{\n        isLoggedIn: state.auth.isLoggedIn\n    }\n  }\nexport default connect(mapStateToProps, mapDispatchToProps)(AddCarData)","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Admin/LoginDiv.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Admin/colorDiv.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Admin/colorInterior.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Admin/FormText.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Admin/FormCheckbox.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Admin/CheckCarData.js",["410","411","412","413"],"import React, { useState } from 'react'\nimport * as Realm from \"realm-web\"\nimport { Button } from 'react-bootstrap'\n\nconst CheckCarData = () =>{\n    // const [cars, setCars] = useState([])\n    const [safety, setSafety] = useState([])\n    // const field = features['Safety']\n    const appConfig = {\n        id: process.env.REACT_APP_REALM_APP_ID,\n        // timeout: 10000, \n        // timeout in number of milliseconds\n      };\n    const app = new Realm.App(appConfig);\n    // const maxAgeTest = 1 * 60 * 60\n    const credentials = Realm.Credentials.emailPassword('saki@thehoongroup.com', 'aaaaaa')\n    const queryData = async () =>{\n        try{\n            await app.logIn(credentials).then( async user =>{\n                const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME);\n                const mongoCollection = mongo.db(\"smoke-show\").collection(\"cars\");\n                const filter = {make: 'bentley'}\n                let tempArr = []\n                await mongoCollection.find(filter).then(cars =>{\n                    // console.log('cars', cars)\n                    \n                    cars.map(car =>{\n                        const category = car.features['Comfort & Convenience']\n                        console.log('log', category)\n                        if(typeof(category) !== 'undefined'){\n                            Object.keys(category).map(key=>{\n                                tempArr.push(key)\n                            })\n                            \n                            // return Object.keys(car.features['Safety'])\n                            // console.log('checking', Object.keys(car.features['Safety']))\n                        }\n                        \n                 \n                        \n                    })\n                    console.log('temp', tempArr)\n                   \n                    return tempArr\n                }).then( async arr =>{\n                    let unique = [...new Set(arr)]\n                    const insertData = {\n                        // make: 'kia',\n                        powerFeatureArr: unique\n                    }\n                    console.log('log', unique); \n                    const collectionDataAnalysis = mongo.db(\"smoke-show\").collection(\"cars-data-analysis\");\n                    collectionDataAnalysis.updateOne(\n                        { make: \"bentley\" },\n                        { $set: { comfortArr: unique } },\n                        { upsert: true }\n                    ).then(res =>{\n                        console.log(res)\n                    })\n                })\n            })\n        }catch(err){\n            console.log(err)\n        }\n    }\n    return(\n        <div>\n\n            <Button onClick={queryData}>Check car data</Button>\n            {console.log(safety)}\n        {safety && \n        Object.keys(safety).map((key, index) =>{\n            return <p key={index}>{key}</p>\n        })\n        }\n        </div>\n    )\n}\n\nexport default CheckCarData","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Admin/EditVideoDataKirk.js",["414","415","416"],"import React, { useState, Fragment, useEffect } from 'react'\nimport * as Realm from \"realm-web\"\n\nimport { Container, Row, Col, Form, Pagination, Button } from 'react-bootstrap'\nimport jwt from 'jsonwebtoken'\n\nconst EditVideoDataKirk = () =>{\n    const [activePag, setActivePag] = useState(0)\n    const [isLoggedIn, setIsLoggedIn] = useState(false)\n    const [userObj, setUserObj] = useState({email: '', password: ''})\n    const kirkChannelId = 'UCXPVB7s1TJTE0WjDpakGp5Q'\n    const app = new Realm.App({ id: process.env.REACT_APP_REALM_APP_ID })\n    const [allVideos, setAllVideos] = useState([])\n    const [message, setMessage] = useState('')\n    const [carDataId, setCarDataId] = useState('')\n    const [editVideoId, setEditVideoId] = useState('')\n    const [editMode, setEditMode] = useState(false)\n    const maxAgeTest = 1 * 60 * 60\n\n    const handlePagNum = (num) =>{\n        console.log('num', num)\n        setActivePag(num)\n        setAllVideos({...allVideos})\n    }\n    let items = [];\n    for (let number = 0; number <= 6; number++) {\n    items.push(\n        <Pagination.Item key={number} active={number === activePag} onClick={()=>{handlePagNum(number)}}>\n        {number}\n        </Pagination.Item>,\n    );\n    }\n    \n    const handleChange = (e) =>[\n        setUserObj({\n            ...userObj,\n            [e.target.name]: e.target.value\n        })\n    ]\n    const videoEmbedURL = 'https://www.youtube.com/embed/'\n\n    const chunkArray = (allVideos) =>{\n        let chunk_size = 15\n        let index = 0;\n        let arrayLength = allVideos.length;\n        let tempArray = [];\n        let myChunk\n        \n        for (index = 0; index < arrayLength; index += chunk_size) {\n            myChunk = allVideos.slice(index, index+chunk_size);\n            // Do something if you want with the group\n            tempArray.push(myChunk);\n        }\n\n        return tempArray;\n    }\n    \n    const handleSubmitLogin = async (e) =>{\n        e.preventDefault()\n        const emailLowerCase = userObj.email.toLowerCase()\n        const credentials = Realm.Credentials.emailPassword(emailLowerCase, userObj.password)\n        try{\n            app.logIn(credentials).then(async user =>{\n                setIsLoggedIn(true)\n                const customData = user.customData\n                const token = jwt.sign({ userData: customData }, process.env.REACT_APP_JWT_SECRET, {expiresIn: maxAgeTest})\n                const tokenCredentials = jwt.sign({ cre: credentials }, process.env.REACT_APP_JWT_SECRET, {expiresIn: maxAgeTest})\n                sessionStorage.setItem('session_token', token)\n                sessionStorage.setItem('session_user', tokenCredentials)\n                const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME);\n                const mongoCollection = mongo.db(\"smoke-show\").collection(\"youtube-videos\")\n                const filter = {channelId: kirkChannelId}\n                await mongoCollection.find(filter).then( videos =>{\n                    console.log(videos)\n                    const chunkedVideos = chunkArray(videos)\n                    setAllVideos(chunkedVideos)\n                    \n                })\n            })\n        }catch(err){\n            console.log(err)\n            setMessage('login fail')\n        }\n        \n    }\n\n    const loginDiv =\n    <Container style={{alignItems: 'center', justifyContent: 'center', marginTop: '5rem'}}>\n        <Form onSubmit={handleSubmitLogin}>\n            <Form.Group controlId=\"formBasicEmail\">\n                <Form.Label>Email address</Form.Label>\n                <Form.Control type=\"email\" placeholder=\"Enter email\" name=\"email\" onChange={handleChange}/>\n                <Form.Text className=\"text-muted\">\n                </Form.Text>\n            </Form.Group>\n\n            <Form.Group controlId=\"formBasicPassword\">\n                <Form.Label>Password</Form.Label>\n                <Form.Control type=\"password\" placeholder=\"Password\" onChange={handleChange} name=\"password\" />\n            </Form.Group>\n            <br />\n            <Button variant=\"primary\" type=\"submit\">\n                Log in\n            </Button>\n        </Form>\n    </Container>\n    \n    const handleChangeCarData = (e) =>{\n      \n        setCarDataId(e.target.value)\n        setEditVideoId(e.target.name)\n    }\n    const handleDataUpdate = async (e) =>{\n        e.preventDefault()\n        const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME);\n        const collectionYoutube = mongo.db(process.env.REACT_APP_REALM_DB_NAME).collection(\"youtube-videos\")\n        let str = carDataId\n        str = str.replace(/\\s/g, '')\n        setCarDataId(str)\n        try{\n            await collectionYoutube.updateOne(\n                { \"videoId\": editVideoId},\n                { \"$set\": { \"carDataId\": carDataId } },\n                { upsert: true}\n            ).then( async res =>{\n                console.log(res)\n                // e.target.reset()\n                setEditVideoId('')\n                setCarDataId('')\n                setEditMode(false)\n                const filter = {channelId: kirkChannelId}\n                await collectionYoutube.find(filter).then( videos =>{\n                    const chunkedVideos = chunkArray(videos)\n                    setAllVideos(chunkedVideos)\n                })\n            })\n        }catch(err){\n            console.log(err)\n        }\n        \n    }\n    const editCarData = (video)=>{\n        // setEditVideoId(video.videoId)\n        return(\n            <Form>\n                <Form.Group >\n                    <Form.Label>Edit car data ID</Form.Label>\n                    <Form.Control as=\"textarea\" rows={2} name={video.videoId} value={allVideos[activePag].carDataId && allVideos[activePag].carDataId } onChange={handleChangeCarData} />\n                </Form.Group>\n                \n                <div className=\"bio-edit-btn-wrapper\">\n                    <Button variant=\"primary\" type=\"submit\" onClick={handleDataUpdate} className=\"bio-edit-btn\">\n                        Submit\n                    </Button>\n                </div>\n                \n            </Form>\n        )\n    }\n    const queryData = async () =>{\n        const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME);\n        const collectionYoutube = mongo.db(process.env.REACT_APP_REALM_DB_NAME).collection(\"youtube-videos\")\n        const filter = {channelId: kirkChannelId}\n        await collectionYoutube.find(filter).then( videos =>{\n            const chunkedVideos = chunkArray(videos)\n            setAllVideos(chunkedVideos)\n        })\n    }\n    useEffect(() => {\n        const tokenUser = sessionStorage.getItem('session_user')\n        if(tokenUser){\n            setIsLoggedIn(true)\n            queryData()\n        }else{\n            setIsLoggedIn(false)\n        }\n\n    }, [])\n    return(\n        <Fragment>\n            {isLoggedIn ? \n            <Container>\n                <h1>Edit video data</h1>\n                <center><Pagination>{items}</Pagination></center>\n                <hr />\n                <Row>\n                {console.log('array 0', allVideos[0])}\n                { allVideos[activePag] && \n                    allVideos[activePag].map(video =>{\n                        return(\n                            <Col style={{marginBottom: '2rem'}} key={video.videoId}>\n                                <iframe src={videoEmbedURL + video.videoId}\n                                    frameBorder='0'\n                                    allow='autoplay; encrypted-media'\n                                    allowFullScreen\n                                    title='video'\n                                />\n                                <h3>{video.snippet.title}</h3>\n                                <p>Date: {video.snippet.publishedAt}</p>\n                                <p>Youtube videoId: {video.videoId}</p>\n                                {video.carDataId ? \n                                <div>\n                                <p>Car data ID: {video.carDataId ? video.carDataId : 'No data'}</p>\n                                 {/* <Button onClick={()=>setEditMode(true)}>Edit</Button> */}\n                                \n                                </div>\n                                \n                                 :\n                                editCarData(video)\n                                }\n                                {/* {editMode && editCarData(video)} */}\n                            </Col>\n                        )\n                        \n                        \n                    })\n                }\n                \n           \n                </Row>\n            </Container>\n            : loginDiv}\n        </Fragment>\n    )\n}\n\nexport default EditVideoDataKirk","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Influencer/AllVideos.js",["417","418"],"import React, { useEffect, useState, Fragment } from 'react'\nimport {Helmet} from \"react-helmet\"\nimport { Row, Col } from 'react-bootstrap'\nimport * as Realm from \"realm-web\"\nimport Pagination from 'react-bootstrap/Pagination'\n\nimport Comments from '../Comments'\nimport Avatar from 'react-avatar'\nimport powerIcon from '../../assets/global/Horsepower.png'\nimport pistonIcon from '../../assets/global/piston.png'\nimport priceIcon from '../../assets/global/Price-Tag-icon.png'\nimport Layout from '../Layout/Layout'\nimport { logInAsPublic, updateLogin } from '../../store/actions/authActions'\nimport { connect } from 'react-redux'\nimport jwt from 'jsonwebtoken'\n// import noImg from '../../assets/global/no_image.jpg'\nimport { getInfluencer }from '../../store/actions/influencerActions'\nimport SubNav from './SubNav'\nimport './allVideos.scss'\nimport short from 'short-uuid'\n\nconst AllVideos = (props) =>{\n    const influencerId = props.match.params.id\n    const videoEmbedURL = 'https://www.youtube.com/embed/'\n    const [videoArr, setVideoArr] = useState([])\n    const [allVideoData, setAllVideoData] = useState([])\n    // const [showMore, setShowMore] = useState(false)\n    // const [videoIds, setVideoIds] = useState([])\n    // const [pageNum, setPageNum] = useState(0)\n    const [pgNum, setPgNum] = useState(null)\n    // const [credentials, setCredentials] = useState(null)\n    const [active, setActive] = useState(1)\n    // let active = 1;\n  \n    const appConfig = {\n        id: process.env.REACT_APP_REALM_APP_ID,\n        // timeout: 10000, \n        // timeout in number of milliseconds\n        };\n    const app = new Realm.App(appConfig);\n    // const [divId, setDivId] = useState(null)\n    \n    const chunkArray = (allVideos) =>{\n        let chunk_size = 12\n        let index = 0;\n        let arrayLength = allVideos.length;\n        let tempArray = [];\n        let myChunk\n        \n        for (index = 0; index < arrayLength; index += chunk_size) {\n            myChunk = allVideos.slice(index, index+chunk_size);\n            // Do something if you want with the group\n            tempArray.push(myChunk);\n        }\n\n        return tempArray;\n    }\n\n    // const expandDiv = (index)=>{\n    //     setDivId(index)\n    //     setShowMore(!showMore)\n    // }\n    const attachCarData = async (chunk, num) =>{\n       setVideoArr([])\n        // try{\n        //     await app.logIn(credentials).then( user =>{\n                const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n                const collectionCars = mongo.db(\"smoke-show\").collection(\"cars\")\n                const collectionManual = mongo.db(\"smoke-show\").collection(\"cars-manual\")\n                if(chunk){\n                    chunk[num].map(async video =>{\n                        const filterCar = {_id: {\"$oid\": video.carDataId}}\n                        \n                        try{\n                            await collectionCars.findOne(filterCar).then(async data =>{\n                            \n                               if(data){\n                                video.carData = data\n                                setVideoArr(videoArr =>[...videoArr, video])\n                               }else{\n                                await collectionManual.findOne(filterCar).then(data =>{\n                                    video.carData = data\n                                    setVideoArr(videoArr =>[...videoArr, video])\n                                })\n                               }\n                                \n                            }).then(res =>{\n                                \n                            })\n                        }catch(err){\n                         console.log(err)\n                        }\n                        \n                    })\n                }else{\n                    console.log('chunk not read')\n                    // allVideoData[num].map(async video =>{\n                    //     console.log()\n                    //     const filterCar = {_id: {\"$oid\": video.carDataId}}\n                        \n                    //     try{\n                    //         await collectionCars.findOne(filterCar).then(async data =>{\n                            \n                    //            if(data){\n                    //             video.carData = data\n                    //             setVideoArr(videoArr =>[...videoArr, video])\n                    //            }else{\n                    //             await collectionManual.findOne(filterCar).then(data =>{\n                    //                 video.carData = data\n                    //                 setVideoArr(videoArr =>[...videoArr, video])\n                    //             })\n                    //            }\n                                \n                    //         }).then(res =>{\n                                \n                    //         })\n                    //     }catch(err){\n                    //      console.log(err)\n                    //     }\n                        \n                    // })\n                }\n                \n        //     })\n        // }catch(err){\n        //     console.log(err)\n        // }\n        \n    }\n    const getVideos = async (cre) =>{\n        \n        try{\n            await app.logIn(cre).then(async  user =>{\n                if(app.currentUser.id === user.id){\n                    console.log('user login updated')\n                }\n                const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n                const mongoCollection = mongo.db(\"smoke-show\").collection(\"youtube-videos\")\n                const filter = {userId: influencerId}\n                const options = {sort: {\"snippet.publishedAt\": -1}}\n                try{\n                    await mongoCollection.find(filter, options).then(async videos =>{\n                      console.log('videos', videos)\n                        const res = Math.floor(videos.length / 12)\n                        setPgNum(res)\n                        const chunk = chunkArray(videos)\n                        setAllVideoData(chunk)\n\n                        return chunk\n                    }).then( chunk =>{\n                        attachCarData(chunk, 0)\n                    })\n                }catch(err){\n                    console.log(err)\n                }\n                \n            })\n        }catch(err){\n            console.log(err)\n        }\n        \n    }\n\n    const numberWithCommas = (x) =>{\n        return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    }\n    const loginCheck = () =>{\n        const tokenUser = sessionStorage.getItem('session_user')\n        if(tokenUser){\n            jwt.verify(tokenUser, process.env.REACT_APP_JWT_SECRET, function(err, decoded) {\n                if (err) {\n                    // timeout\n                    const cre = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTH_PUBLIC_VIEW);\n                    getVideos(cre)\n                    \n                }else{\n                    getVideos(decoded.cre)\n                }\n              });\n            \n        }else{\n            const cre = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTH_PUBLIC_VIEW);\n            // setCredentials(cre)\n            getVideos(cre)\n            \n        }\n    }\n    const getselectedPage =(number)=>{\n        setActive(number)\n        attachCarData(null, number)\n    }\n    const paginationItems = () =>{\n        let items = [];\n        for (let number = 1; number <= pgNum; number++) {\n            items.push(\n                <Pagination.Item key={`page-${number}`} active={number === active} onClick={()=>getselectedPage(number)} >\n                {number}\n                </Pagination.Item>\n            )\n        }\n        return items\n    }\n\n    useEffect( () => {\n        loginCheck()\n        props.getInfluencer(influencerId)\n    }, [])\n    \n    return(\n        <Layout >\n            <Helmet>\n                <meta charSet=\"utf-8\" />\n                <title>All Videos from  | The Smoke Show</title>\n                <meta name=\"description\" content=\"Place the meta description text here.\" />\n                <meta name=\"robots\" content=\"noindex, nofollow\" />\n                {/* <link rel=\"canonical\" href=\"http://mysite.com/example\" /> */}\n            </Helmet>\n            \n            <div className=\"main-wrapper\">\n                <SubNav influencer={props.influencerObj} formattedFans={props.formattedFans} />\n            <div className=\"spacer-4rem\"></div>\n            <h2 className=\"title\">All Videos from {props.influencerObj.username && props.influencerObj.username}</h2>\n            <div className=\"pagination-wrapper\">\n                <Pagination>\n                    { pgNum && paginationItems() }\n                </Pagination>\n            </div>\n            <Row style={{paddingLeft:'-7px', paddingRight:'-7px'}}>\n            {   videoArr[0] &&\n                videoArr.map((video, index) =>{\n                    console.log('video', video)\n                    const unique = short.generate()\n                    const str = video.carData.model\n                    const id = video.videoId\n                    const model = str.charAt(0).toUpperCase() +str.slice(1)\n                    const name = video.carData.make\n                    const titleCase = name.charAt(0).toUpperCase() +name.slice(1)\n                    let price;\n                    if(video.carData.price && video.carData.price.baseMSRP){\n                        price = numberWithCommas(video.carData.price.baseMSRP)\n                    }else{ price = ''}\n                    \n                    return(\n                        <Fragment key={unique} >\n                            <Col sm={6} className=\"main-col\" >\n                                <Row className=\"video-row\">\n                                    <Col sm={8} >\n                                        <div className=\"videoWrapper\">\n                                            <iframe src={videoEmbedURL + id}\n                                                    frameBorder='0'\n                                                    allow='autoplay; encrypted-media'\n                                                    allowFullScreen\n                                                    title='video'\n                                                    srcDoc={`<style>*{padding:0;margin:0;overflow:hidden}html,body{height:100%}img,span{position:absolute;width:100%;top:0;bottom:0;margin:auto}span{height:1.5em;text-align:center;font:48px/1.5 sans-serif;color:white;text-shadow:0 0 0.5em black}</style><a href=https://www.youtube.com/embed/${id}?autoplay=1><img src=https://img.youtube.com/vi/${id}/hqdefault.jpg alt=${video.snippet.title}><span>▶</span></a>`}\n                                            />\n                            \n                                        </div>\n                                        {/* <h3 style={{marginTop:'10px'}} aria-hidden={true} >{video.snippet.title}</h3> */}\n                                        <div className=\"video-title-div\" dangerouslySetInnerHTML={{__html: video.snippet.title}} />\n                                        <Row className=\"comment-wrapper\" >\n                                            <div className=\"col-1\" style={{margin:0,padding:0}} >\n                                            {props.influencerObj.profilePic ? <img src={props.influencerObj.profilePic} \n                                            \n                                            className=\"creator-profile-pic\" alt={props.influencerObj.username}/> :\n                                            <Avatar color={Avatar.getRandomColor('sitebase', ['red', 'green', 'teal'])} className=\"creator-profile-pic\" name={video.snippet.channelTitle\n} />\n                                            }\n                                            \n                                            </div>\n                                            <div className=\"col-11\" style={{paddingRight:0, margin: 'auto'}} >\n                                            <div className=\"creator-name\"><strong>{video.snippet.channelTitle}</strong><br /> <span style={{color:'gray', fontSize: '13px'}}>{' '} {props.formattedFans} fans</span></div>\n                                           \n                                            </div>\n                                            \n                                            {/* <p className=\"btn-show-more\" onClick={()=>expandDiv(index)}>{showMore && divId === index ? 'Show less' : 'Show more'}</p>  */}\n                                            <input className=\"acd-input\" type=\"checkbox\" id={`title${index}`} />\n                                    \n                                            <label htmlFor={`title${index}`} className=\"acd-label\">Show </label>\n                                            <div className=\"desc-box\">\n                                                {video.snippet.description}\n                                            </div> \n                                            <div className=\"content\">\n                                            <small>{video.snippet.description}</small>\n                                            </div>\n\n                                        </Row>\n                                        <div className=\"spacer-4rem\"></div>\n                                         {/* <Suspense fallback={<div class=\"loader\">Loading...</div>}> */}\n                                            <Comments videoId={id} />\n                                        {/* </Suspense>  */}\n                                        \n                                    </Col>\n                                    <Col sm={4} className=\"spec-col\"  >\n                                        <div className=\"spec-wrapper\">\n                                        <img alt={video.snippet.channelTitle} src={require(`../../assets/maker_logos/${titleCase}_Logo.png`).default} className=\"icon-s\" />\n                                        {' '}\n                                        <span className=\"spec-text\" ><strong >{video.carData.year}{' '}{titleCase}{' '}{model}</strong></span><br/>\n                                        <img alt=\"price\" src={priceIcon} className=\"icon-s\" /><span className=\"spec-text\" >{' '}${price && price}</span><br />\n                                        <img alt=\"power \" src={powerIcon} className=\"icon-s\" /><span  className=\"spec-text\">{' '}{video.carData.features.Engine.Torque}</span><br />\n                                        <img alt=\"piston\" key={pistonIcon} src={pistonIcon}  className=\"icon-s\" /><span className=\"spec-text\">{' '}{video.carData.features.Engine.Horsepower}</span><br />\n                                        </div>\n                                        <div className=\"ad-container\">\n                                            <p style={{color: 'gray'}}>ads will go here</p>\n                                            <p style={{color: 'gray'}}> 160px x 600px <br/>for above 576px</p>\n                                            <p style={{color: 'gray'}}> 300px x 250px <br/> for above 1400px </p>\n                                        </div>\n                                    </Col>\n                                </Row>\n                            </Col>\n                        </Fragment>\n                    )\n                })\n            }\n        </Row>\n        <div className=\"spacer-4rem\"></div>\n       \n        </div>\n        </Layout>\n    )\n    }\n    const mapDispatchToProps = (dispatch) =>{\n        return{\n            logInAsPublic: () => dispatch(logInAsPublic()),\n            updateLogin: (credentials)=> dispatch(updateLogin(credentials)),\n            getInfluencer: (id)=> dispatch(getInfluencer(id))\n        }\n    }\n    const mapStateToProps = (state)=>{\n        return{\n            influencerObj: state.influ.influencerObj,\n            formattedFans: state.influ.formattedFans\n        }\n    }\n\n    export default connect(mapStateToProps, mapDispatchToProps )(AllVideos)\n","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/store/reducers/influencerReducer.js",["419"],"const initState = {\n    influencerObj: {},\n    formattedFans: ''\n}\n\nconst influencerReducer = (state = initState, action) =>{\n    switch(action.type){\n        case 'GET_INFLUENCER':\n            console.log('user from reducer', action.state)\n            return {\n                ...state,\n                influencerObj: action.influencer,\n                formattedFans: action.formattedFans\n            }\n        \n        // case 'BECOME_FAN': \n        //     console.log('from reducer', action.userObj)\n        //     return action.userObj\n        // default:\n        //     console.log('error', action)\n    }\n    return state\n}\n\nexport default influencerReducer","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/store/actions/influencerActions.js",["420","421","422"],"import * as Realm from \"realm-web\"\nimport jwt from 'jsonwebtoken'\n\nconst appConfig = {\n    id: process.env.REACT_APP_REALM_APP_ID,\n    // timeout: 10000, \n    // timeout in number of milliseconds\n  };\nconst app = new Realm.App(appConfig);\nconst maxAgeTest = 1 * 60 * 60\n\nexport const getInfluencer = (influencerId) =>{\n    let formattedFans\n    return(dispatch, getState)=>{\n        const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n        const collectionInfluencer = mongo.db(\"smoke-show\").collection(\"influencers\")\n        const filter = {userId: influencerId}\n        collectionInfluencer.findOne(filter).then(influencer =>{\n            const collectionFans = mongo.db(\"smoke-show\").collection(`fans-${influencer.username}`)\n            collectionFans.count().then(num =>{\n                if(num > 999){\n                    return formattedFans = Math.sign(num)*((Math.abs(num)/1000).toFixed(1)) + 'k'\n                }else{\n                    return formattedFans = Math.sign(num)*Math.abs(num)\n                }\n            }).then(formattedFans =>{\n                dispatch({type: 'GET_INFLUENCER', influencer, formattedFans})\n            })\n            // console.log('fans', fansCount)\n            // if(fansCount > 999){\n            //     formattedFans = Math.sign(fansCount)*((Math.abs(fansCount)/1000).toFixed(1)) + 'k'\n            // }else{\n            //     formattedFans = Math.sign(fansCount)*Math.abs(fansCount)\n            // }\n            \n        }).catch(err =>{\n            console.log(err)\n            dispatch({type: 'NO_INFLUENCER'})\n        })\n    }\n}\n","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/SpecDiv.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Layout/Head.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/GiveawayCount.js",["423","424","425"],{"ruleId":"426","replacedBy":"427"},{"ruleId":"428","replacedBy":"429"},{"ruleId":"430","severity":1,"message":"431","line":70,"column":10,"nodeType":"432","endLine":70,"endColumn":12,"suggestions":"433"},{"ruleId":"434","severity":1,"message":"435","line":126,"column":33,"nodeType":"436","endLine":126,"endColumn":75},{"ruleId":"437","severity":1,"message":"438","line":70,"column":15,"nodeType":"439","messageId":"440","endLine":70,"endColumn":19},{"ruleId":"437","severity":1,"message":"441","line":95,"column":27,"nodeType":"439","messageId":"440","endLine":95,"endColumn":33},{"ruleId":"430","severity":1,"message":"442","line":176,"column":10,"nodeType":"432","endLine":176,"endColumn":12,"suggestions":"443"},{"ruleId":"444","severity":1,"message":"445","line":204,"column":25,"nodeType":"446","messageId":"447","endLine":204,"endColumn":54},{"ruleId":"444","severity":1,"message":"445","line":205,"column":25,"nodeType":"446","messageId":"447","endLine":210,"endColumn":30},{"ruleId":"448","severity":1,"message":"449","line":250,"column":101,"nodeType":"450","endLine":250,"endColumn":122},{"ruleId":"437","severity":1,"message":"451","line":3,"column":20,"nodeType":"439","messageId":"440","endLine":3,"endColumn":26},{"ruleId":"437","severity":1,"message":"452","line":6,"column":13,"nodeType":"439","messageId":"440","endLine":6,"endColumn":18},{"ruleId":"437","severity":1,"message":"453","line":23,"column":23,"nodeType":"439","messageId":"440","endLine":23,"endColumn":35},{"ruleId":"430","severity":1,"message":"454","line":158,"column":8,"nodeType":"432","endLine":158,"endColumn":10,"suggestions":"455"},{"ruleId":"437","severity":1,"message":"456","line":16,"column":22,"nodeType":"439","messageId":"440","endLine":16,"endColumn":33},{"ruleId":"437","severity":1,"message":"457","line":18,"column":17,"nodeType":"439","messageId":"440","endLine":18,"endColumn":23},{"ruleId":"437","severity":1,"message":"458","line":31,"column":11,"nodeType":"439","messageId":"440","endLine":31,"endColumn":22},{"ruleId":"430","severity":1,"message":"459","line":75,"column":8,"nodeType":"432","endLine":75,"endColumn":10,"suggestions":"460"},{"ruleId":"437","severity":1,"message":"461","line":1,"column":37,"nodeType":"439","messageId":"440","endLine":1,"endColumn":46},{"ruleId":"437","severity":1,"message":"462","line":7,"column":8,"nodeType":"439","messageId":"440","endLine":7,"endColumn":13},{"ruleId":"437","severity":1,"message":"463","line":25,"column":23,"nodeType":"439","messageId":"440","endLine":25,"endColumn":35},{"ruleId":"464","severity":1,"message":"465","line":67,"column":52,"nodeType":"466","messageId":"467","endLine":67,"endColumn":54},{"ruleId":"444","severity":1,"message":"445","line":285,"column":21,"nodeType":"446","messageId":"447","endLine":285,"endColumn":60},{"ruleId":"430","severity":1,"message":"468","line":68,"column":4,"nodeType":"432","endLine":68,"endColumn":6,"suggestions":"469"},{"ruleId":"437","severity":1,"message":"470","line":9,"column":10,"nodeType":"439","messageId":"440","endLine":9,"endColumn":20},{"ruleId":"437","severity":1,"message":"471","line":10,"column":10,"nodeType":"439","messageId":"440","endLine":10,"endColumn":21},{"ruleId":"437","severity":1,"message":"472","line":11,"column":10,"nodeType":"439","messageId":"440","endLine":11,"endColumn":26},{"ruleId":"437","severity":1,"message":"473","line":13,"column":10,"nodeType":"439","messageId":"440","endLine":13,"endColumn":13},{"ruleId":"437","severity":1,"message":"474","line":31,"column":12,"nodeType":"439","messageId":"440","endLine":31,"endColumn":25},{"ruleId":"437","severity":1,"message":"475","line":31,"column":27,"nodeType":"439","messageId":"440","endLine":31,"endColumn":43},{"ruleId":"437","severity":1,"message":"476","line":32,"column":12,"nodeType":"439","messageId":"440","endLine":32,"endColumn":20},{"ruleId":"437","severity":1,"message":"477","line":32,"column":22,"nodeType":"439","messageId":"440","endLine":32,"endColumn":33},{"ruleId":"437","severity":1,"message":"478","line":33,"column":12,"nodeType":"439","messageId":"440","endLine":33,"endColumn":27},{"ruleId":"437","severity":1,"message":"479","line":33,"column":29,"nodeType":"439","messageId":"440","endLine":33,"endColumn":47},{"ruleId":"480","severity":1,"message":"481","line":121,"column":34,"nodeType":"482","messageId":"483","endLine":121,"endColumn":36},{"ruleId":"480","severity":1,"message":"484","line":122,"column":36,"nodeType":"482","messageId":"485","endLine":122,"endColumn":38},{"ruleId":"480","severity":1,"message":"481","line":125,"column":29,"nodeType":"486","messageId":"487","endLine":125,"endColumn":35},{"ruleId":"430","severity":1,"message":"488","line":194,"column":10,"nodeType":"432","endLine":194,"endColumn":12,"suggestions":"489"},{"ruleId":"437","severity":1,"message":"490","line":232,"column":31,"nodeType":"439","messageId":"440","endLine":232,"endColumn":36},{"ruleId":"430","severity":1,"message":"491","line":247,"column":8,"nodeType":"432","endLine":247,"endColumn":26,"suggestions":"492"},{"ruleId":"430","severity":1,"message":"493","line":270,"column":8,"nodeType":"432","endLine":270,"endColumn":10,"suggestions":"494"},{"ruleId":"495","severity":1,"message":"496","line":287,"column":21,"nodeType":"436","endLine":298,"endColumn":24},{"ruleId":"495","severity":1,"message":"496","line":303,"column":29,"nodeType":"436","endLine":303,"endColumn":130},{"ruleId":"480","severity":1,"message":"481","line":85,"column":22,"nodeType":"482","messageId":"483","endLine":85,"endColumn":24},{"ruleId":"480","severity":1,"message":"497","line":94,"column":43,"nodeType":"498","messageId":"485","endLine":94,"endColumn":52},{"ruleId":"480","severity":1,"message":"484","line":107,"column":43,"nodeType":"482","messageId":"485","endLine":107,"endColumn":45},{"ruleId":"480","severity":1,"message":"499","line":121,"column":48,"nodeType":"482","messageId":"485","endLine":121,"endColumn":50},{"ruleId":"464","severity":1,"message":"465","line":122,"column":25,"nodeType":"466","messageId":"467","endLine":122,"endColumn":27},{"ruleId":"430","severity":1,"message":"488","line":190,"column":7,"nodeType":"432","endLine":190,"endColumn":9,"suggestions":"500"},{"ruleId":"437","severity":1,"message":"501","line":24,"column":13,"nodeType":"439","messageId":"440","endLine":24,"endColumn":27},{"ruleId":"437","severity":1,"message":"502","line":24,"column":29,"nodeType":"439","messageId":"440","endLine":24,"endColumn":38},{"ruleId":"437","severity":1,"message":"503","line":24,"column":40,"nodeType":"439","messageId":"440","endLine":24,"endColumn":52},{"ruleId":"437","severity":1,"message":"504","line":24,"column":54,"nodeType":"439","messageId":"440","endLine":24,"endColumn":64},{"ruleId":"505","severity":1,"message":"506","line":17,"column":5,"nodeType":"507","messageId":"508","endLine":90,"endColumn":6},{"ruleId":"464","severity":1,"message":"465","line":164,"column":49,"nodeType":"466","messageId":"467","endLine":164,"endColumn":51},{"ruleId":"464","severity":1,"message":"465","line":166,"column":55,"nodeType":"466","messageId":"467","endLine":166,"endColumn":57},{"ruleId":"464","severity":1,"message":"465","line":176,"column":44,"nodeType":"466","messageId":"467","endLine":176,"endColumn":46},{"ruleId":"430","severity":1,"message":"509","line":210,"column":8,"nodeType":"432","endLine":210,"endColumn":10,"suggestions":"510"},{"ruleId":"444","severity":1,"message":"445","line":217,"column":13,"nodeType":"446","messageId":"447","endLine":217,"endColumn":93},{"ruleId":"437","severity":1,"message":"511","line":11,"column":12,"nodeType":"439","messageId":"440","endLine":11,"endColumn":21},{"ruleId":"437","severity":1,"message":"512","line":11,"column":23,"nodeType":"439","messageId":"440","endLine":11,"endColumn":35},{"ruleId":"437","severity":1,"message":"513","line":14,"column":20,"nodeType":"439","messageId":"440","endLine":14,"endColumn":29},{"ruleId":"430","severity":1,"message":"514","line":42,"column":8,"nodeType":"432","endLine":42,"endColumn":10,"suggestions":"515"},{"ruleId":"437","severity":1,"message":"516","line":19,"column":11,"nodeType":"439","messageId":"440","endLine":19,"endColumn":21},{"ruleId":"437","severity":1,"message":"517","line":118,"column":19,"nodeType":"439","messageId":"440","endLine":118,"endColumn":26},{"ruleId":"437","severity":1,"message":"517","line":132,"column":15,"nodeType":"439","messageId":"440","endLine":132,"endColumn":22},{"ruleId":"518","severity":1,"message":"519","line":328,"column":21,"nodeType":"439","messageId":"520","endLine":328,"endColumn":35},{"ruleId":"464","severity":1,"message":"465","line":382,"column":98,"nodeType":"466","messageId":"467","endLine":382,"endColumn":100},{"ruleId":"464","severity":1,"message":"465","line":389,"column":43,"nodeType":"466","messageId":"467","endLine":389,"endColumn":45},{"ruleId":"430","severity":1,"message":"521","line":396,"column":8,"nodeType":"432","endLine":396,"endColumn":10,"suggestions":"522"},{"ruleId":"495","severity":1,"message":"496","line":480,"column":37,"nodeType":"436","endLine":480,"endColumn":144},{"ruleId":"437","severity":1,"message":"523","line":23,"column":11,"nodeType":"439","messageId":"440","endLine":23,"endColumn":21},{"ruleId":"437","severity":1,"message":"516","line":37,"column":11,"nodeType":"439","messageId":"440","endLine":37,"endColumn":21},{"ruleId":"430","severity":1,"message":"524","line":128,"column":8,"nodeType":"432","endLine":128,"endColumn":27,"suggestions":"525"},{"ruleId":"430","severity":1,"message":"514","line":147,"column":8,"nodeType":"432","endLine":147,"endColumn":26,"suggestions":"526"},{"ruleId":"437","severity":1,"message":"527","line":4,"column":7,"nodeType":"439","messageId":"440","endLine":4,"endColumn":13},{"ruleId":"437","severity":1,"message":"528","line":3,"column":15,"nodeType":"439","messageId":"440","endLine":3,"endColumn":24},{"ruleId":"434","severity":1,"message":"435","line":79,"column":11,"nodeType":"436","endLine":82,"endColumn":13},{"ruleId":"430","severity":1,"message":"529","line":275,"column":8,"nodeType":"432","endLine":275,"endColumn":26,"suggestions":"530"},{"ruleId":"430","severity":1,"message":"531","line":281,"column":8,"nodeType":"432","endLine":281,"endColumn":10,"suggestions":"532"},{"ruleId":"437","severity":1,"message":"458","line":61,"column":11,"nodeType":"439","messageId":"440","endLine":61,"endColumn":22},{"ruleId":"434","severity":1,"message":"435","line":79,"column":11,"nodeType":"436","endLine":82,"endColumn":13},{"ruleId":"464","severity":1,"message":"465","line":374,"column":98,"nodeType":"466","messageId":"467","endLine":374,"endColumn":100},{"ruleId":"464","severity":1,"message":"465","line":381,"column":43,"nodeType":"466","messageId":"467","endLine":381,"endColumn":45},{"ruleId":"430","severity":1,"message":"521","line":388,"column":8,"nodeType":"432","endLine":388,"endColumn":10,"suggestions":"533"},{"ruleId":"495","severity":1,"message":"496","line":471,"column":37,"nodeType":"436","endLine":471,"endColumn":144},{"ruleId":"480","severity":1,"message":"484","line":77,"column":45,"nodeType":"482","messageId":"485","endLine":77,"endColumn":47},{"ruleId":"480","severity":1,"message":"481","line":81,"column":21,"nodeType":"486","messageId":"487","endLine":81,"endColumn":27},{"ruleId":"430","severity":1,"message":"534","line":91,"column":8,"nodeType":"432","endLine":91,"endColumn":33,"suggestions":"535"},{"ruleId":"430","severity":1,"message":"534","line":95,"column":8,"nodeType":"432","endLine":95,"endColumn":27,"suggestions":"536"},{"ruleId":"495","severity":1,"message":"496","line":104,"column":17,"nodeType":"436","endLine":104,"endColumn":126},{"ruleId":"430","severity":1,"message":"531","line":75,"column":8,"nodeType":"432","endLine":75,"endColumn":10,"suggestions":"537"},{"ruleId":"437","severity":1,"message":"538","line":18,"column":12,"nodeType":"439","messageId":"440","endLine":18,"endColumn":25},{"ruleId":"437","severity":1,"message":"539","line":27,"column":11,"nodeType":"439","messageId":"440","endLine":27,"endColumn":18},{"ruleId":"430","severity":1,"message":"531","line":82,"column":8,"nodeType":"432","endLine":82,"endColumn":10,"suggestions":"540"},{"ruleId":"437","severity":1,"message":"452","line":1,"column":13,"nodeType":"439","messageId":"440","endLine":1,"endColumn":18},{"ruleId":"505","severity":1,"message":"506","line":7,"column":5,"nodeType":"507","messageId":"508","endLine":11,"endColumn":6},{"ruleId":"437","severity":1,"message":"541","line":24,"column":11,"nodeType":"439","messageId":"440","endLine":24,"endColumn":28},{"ruleId":"437","severity":1,"message":"542","line":54,"column":11,"nodeType":"439","messageId":"440","endLine":54,"endColumn":23},{"ruleId":"543","severity":1,"message":"544","line":66,"column":31,"nodeType":"545","messageId":"546","endLine":66,"endColumn":42},{"ruleId":"437","severity":1,"message":"547","line":105,"column":11,"nodeType":"439","messageId":"440","endLine":105,"endColumn":27},{"ruleId":"543","severity":1,"message":"544","line":116,"column":31,"nodeType":"545","messageId":"546","endLine":116,"endColumn":42},{"ruleId":"437","severity":1,"message":"548","line":117,"column":25,"nodeType":"439","messageId":"440","endLine":117,"endColumn":26},{"ruleId":"543","severity":1,"message":"544","line":117,"column":29,"nodeType":"545","messageId":"546","endLine":117,"endColumn":40},{"ruleId":"437","severity":1,"message":"549","line":156,"column":11,"nodeType":"439","messageId":"440","endLine":156,"endColumn":29},{"ruleId":"480","severity":1,"message":"481","line":165,"column":38,"nodeType":"482","messageId":"483","endLine":165,"endColumn":40},{"ruleId":"437","severity":1,"message":"550","line":181,"column":11,"nodeType":"439","messageId":"440","endLine":181,"endColumn":25},{"ruleId":"480","severity":1,"message":"481","line":192,"column":45,"nodeType":"482","messageId":"483","endLine":192,"endColumn":47},{"ruleId":"437","severity":1,"message":"551","line":216,"column":11,"nodeType":"439","messageId":"440","endLine":216,"endColumn":23},{"ruleId":"437","severity":1,"message":"552","line":219,"column":13,"nodeType":"439","messageId":"440","endLine":219,"endColumn":20},{"ruleId":"437","severity":1,"message":"553","line":13,"column":12,"nodeType":"439","messageId":"440","endLine":13,"endColumn":19},{"ruleId":"437","severity":1,"message":"554","line":16,"column":12,"nodeType":"439","messageId":"440","endLine":16,"endColumn":20},{"ruleId":"430","severity":1,"message":"555","line":178,"column":8,"nodeType":"432","endLine":178,"endColumn":10,"suggestions":"556"},{"ruleId":"437","severity":1,"message":"557","line":71,"column":20,"nodeType":"439","messageId":"440","endLine":71,"endColumn":29},{"ruleId":"437","severity":1,"message":"558","line":7,"column":20,"nodeType":"439","messageId":"440","endLine":7,"endColumn":29},{"ruleId":"480","severity":1,"message":"481","line":27,"column":34,"nodeType":"482","messageId":"483","endLine":27,"endColumn":36},{"ruleId":"480","severity":1,"message":"481","line":31,"column":58,"nodeType":"482","messageId":"483","endLine":31,"endColumn":60},{"ruleId":"437","severity":1,"message":"559","line":47,"column":27,"nodeType":"439","messageId":"440","endLine":47,"endColumn":37},{"ruleId":"437","severity":1,"message":"553","line":14,"column":12,"nodeType":"439","messageId":"440","endLine":14,"endColumn":19},{"ruleId":"437","severity":1,"message":"554","line":17,"column":12,"nodeType":"439","messageId":"440","endLine":17,"endColumn":20},{"ruleId":"430","severity":1,"message":"555","line":178,"column":8,"nodeType":"432","endLine":178,"endColumn":10,"suggestions":"560"},{"ruleId":"437","severity":1,"message":"561","line":26,"column":12,"nodeType":"439","messageId":"440","endLine":26,"endColumn":24},{"ruleId":"430","severity":1,"message":"562","line":207,"column":8,"nodeType":"432","endLine":207,"endColumn":10,"suggestions":"563"},{"ruleId":"505","severity":1,"message":"506","line":7,"column":5,"nodeType":"507","messageId":"508","endLine":21,"endColumn":6},{"ruleId":"437","severity":1,"message":"564","line":2,"column":8,"nodeType":"439","messageId":"440","endLine":2,"endColumn":11},{"ruleId":"437","severity":1,"message":"516","line":10,"column":7,"nodeType":"439","messageId":"440","endLine":10,"endColumn":17},{"ruleId":"437","severity":1,"message":"538","line":24,"column":28,"nodeType":"439","messageId":"440","endLine":24,"endColumn":41},{"ruleId":"437","severity":1,"message":"565","line":3,"column":29,"nodeType":"439","messageId":"440","endLine":3,"endColumn":40},{"ruleId":"430","severity":1,"message":"442","line":67,"column":8,"nodeType":"432","endLine":67,"endColumn":10,"suggestions":"566"},{"ruleId":"448","severity":1,"message":"449","line":150,"column":65,"nodeType":"450","endLine":150,"endColumn":86},"no-native-reassign",["567"],"no-negated-in-lhs",["568"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getInfluencers'. Either include it or remove the dependency array.","ArrayExpression",["569"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'days' is assigned a value but never used.","Identifier","unusedVar","'result' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'loginCheck'. Either include it or remove the dependency array.",["570"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'Button' is defined but never used.","'Realm' is defined but never used.","'setResendMsg' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'confirmUser'. Either include it or remove the dependency array.",["571"],"'setHasError' is assigned a value but never used.","'setMsg' is assigned a value but never used.","'createToken' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'handeleRestPw'. Either include it or remove the dependency array.",["572"],"'useEffect' is defined but never used.","'axios' is defined but never used.","'setCarImages' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.",["573"],"'youtubeAPI' is defined but never used.","'carTempData' is defined but never used.","'commentsTempData' is defined but never used.","'uid' is defined but never used.","'searchKeyword' is assigned a value but never used.","'setSearchKeyword' is assigned a value but never used.","'titleStr' is assigned a value but never used.","'setTitleStr' is assigned a value but never used.","'searchedCarData' is assigned a value but never used.","'setSearchedCarData' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","ReturnStatement","expectedReturnValue","React Hook useEffect has a missing dependency: 'checkToken'. Either include it or remove the dependency array.",["574"],"'model' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'profileUser.userId' and 'props.customData.userId'. Either include them or remove the dependency array.",["575"],"React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.",["576"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","Array.prototype.filter() expects a value to be returned at the end of function.","FunctionExpression","Array.prototype.filter() expects a value to be returned at the end of arrow function.",["577"],"'openLoginModal' is assigned a value but never used.","'attachMsg' is assigned a value but never used.","'swapToSignup' is assigned a value but never used.","'isLoggedIn' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","React Hook useEffect has a missing dependency: 'getComments'. Either include it or remove the dependency array.",["578"],"'modalShow' is assigned a value but never used.","'setModalShow' is assigned a value but never used.","'setUserId' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["579"],"'maxAgeTest' is assigned a value but never used.","'decoded' is assigned a value but never used.","no-const-assign","'collectionUser' is constant.","const","React Hook useEffect has missing dependencies: 'props.profileUser.profileCover', 'props.profileUser.profilePic', and 'userObj'. Either include them or remove the dependency array. If 'setCurrentBioPic' needs the current value of 'props.profileUser.profilePic', you can also switch to useReducer instead of useState and read 'props.profileUser.profilePic' in the reducer.",["580"],"'handleShow' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.errMsg'. Either include it or remove the dependency array. If 'setLoginMsg' needs the current value of 'props.errMsg', you can also switch to useReducer instead of useState and read 'props.errMsg' in the reducer.",["581"],["582"],"'getApp' is assigned a value but never used.","'Container' is defined but never used.","React Hook useEffect has a missing dependency: 'userIdParam'. Either include it or remove the dependency array.",["583"],"React Hook useEffect has missing dependencies: 'loginCheck', 'props', and 'userIdParam'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["584"],["585"],"React Hook useEffect has a missing dependency: 'checkFanOf'. Either include it or remove the dependency array.",["586"],["587"],["588"],"'formattedFans' is assigned a value but never used.","'getData' is assigned a value but never used.",["589"],"'handleVideoSearch' is assigned a value but never used.","'updateLatest' is assigned a value but never used.","no-array-constructor","The array literal notation [] is preferable.","NewExpression","preferLiteral","'handleUpdateDesc' is assigned a value but never used.","'v' is assigned a value but never used.","'handleCheckVideoId' is assigned a value but never used.","'checkYoutubeId' is assigned a value but never used.","'checkMissing' is assigned a value but never used.","'tempArr' is assigned a value but never used.","'message' is assigned a value but never used.","'editMode' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'queryData'. Either include it or remove the dependency array.",["590"],"'setCarObj' is assigned a value but never used.","'setSafety' is assigned a value but never used.","'insertData' is assigned a value but never used.",["591"],"'allVideoData' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'influencerId', 'loginCheck', and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["592"],"'jwt' is defined but never used.","'ProgressBar' is defined but never used.",["593"],"no-global-assign","no-unsafe-negation",{"desc":"594","fix":"595"},{"desc":"596","fix":"597"},{"desc":"598","fix":"599"},{"desc":"600","fix":"601"},{"desc":"602","fix":"603"},{"desc":"604","fix":"605"},{"desc":"606","fix":"607"},{"desc":"608","fix":"609"},{"desc":"604","fix":"610"},{"desc":"611","fix":"612"},{"desc":"613","fix":"614"},{"desc":"615","fix":"616"},{"desc":"617","fix":"618"},{"desc":"619","fix":"620"},{"desc":"621","fix":"622"},{"desc":"623","fix":"624"},{"desc":"615","fix":"625"},{"desc":"626","fix":"627"},{"desc":"628","fix":"629"},{"desc":"623","fix":"630"},{"desc":"623","fix":"631"},{"desc":"632","fix":"633"},{"desc":"632","fix":"634"},{"desc":"635","fix":"636"},{"desc":"596","fix":"637"},"Update the dependencies array to be: [getInfluencers]",{"range":"638","text":"639"},"Update the dependencies array to be: [loginCheck]",{"range":"640","text":"641"},"Update the dependencies array to be: [confirmUser]",{"range":"642","text":"643"},"Update the dependencies array to be: [handeleRestPw]",{"range":"644","text":"645"},"Update the dependencies array to be: [fetchData]",{"range":"646","text":"647"},"Update the dependencies array to be: [checkToken]",{"range":"648","text":"649"},"Update the dependencies array to be: [profileUser.userId, props.customData.userId, props.isLoggedIn]",{"range":"650","text":"651"},"Update the dependencies array to be: [getData]",{"range":"652","text":"653"},{"range":"654","text":"649"},"Update the dependencies array to be: [getComments]",{"range":"655","text":"656"},"Update the dependencies array to be: [props]",{"range":"657","text":"658"},"Update the dependencies array to be: [props.profileUser.profileCover, props.profileUser.profilePic, userObj]",{"range":"659","text":"660"},"Update the dependencies array to be: [props.errMsg, props.hasLoginErr]",{"range":"661","text":"662"},"Update the dependencies array to be: [props, props.swapSignup]",{"range":"663","text":"664"},"Update the dependencies array to be: [props.customData, userIdParam]",{"range":"665","text":"666"},"Update the dependencies array to be: [loginCheck, props, userIdParam]",{"range":"667","text":"668"},{"range":"669","text":"660"},"Update the dependencies array to be: [checkFanOf, props.customData.fansOf]",{"range":"670","text":"671"},"Update the dependencies array to be: [checkFanOf, influencer.userId]",{"range":"672","text":"673"},{"range":"674","text":"668"},{"range":"675","text":"668"},"Update the dependencies array to be: [queryData]",{"range":"676","text":"677"},{"range":"678","text":"677"},"Update the dependencies array to be: [influencerId, loginCheck, props]",{"range":"679","text":"680"},{"range":"681","text":"641"},[2498,2500],"[getInfluencers]",[7784,7786],"[loginCheck]",[7995,7997],"[confirmUser]",[2952,2954],"[handeleRestPw]",[1999,2001],"[fetchData]",[8117,8119],"[checkToken]",[9141,9159],"[profileUser.userId, props.customData.userId, props.isLoggedIn]",[10125,10127],"[getData]",[6980,6982],[8534,8536],"[getComments]",[1285,1287],"[props]",[16864,16866],"[props.profileUser.profileCover, props.profileUser.profilePic, userObj]",[5333,5352],"[props.errMsg, props.hasLoginErr]",[5741,5759],"[props, props.swapSignup]",[10565,10583],"[props.customData, userIdParam]",[10707,10709],"[loginCheck, props, userIdParam]",[16459,16461],[3899,3924],"[checkFanOf, props.customData.fansOf]",[3977,3996],"[checkFanOf, influencer.userId]",[2875,2877],[3123,3125],[6893,6895],"[queryData]",[6828,6830],[7890,7892],"[influencerId, loginCheck, props]",[2476,2478]]