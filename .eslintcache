[{"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/index.js":"1","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/reportWebVitals.js":"2","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/App.js":"3","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/aws-exports.js":"4","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/store/reducers/rootReducer.js":"5","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/InfluencerIndexPage.js":"6","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/HomePage.js":"7","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/AboutPage.js":"8","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/EmailConfirmation.js":"9","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/NotFoundPage.js":"10","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/ResetPassword.js":"11","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/CarStats.js":"12","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Swagg.js":"13","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Influencer/BioPage.js":"14","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Fan/BioPage.js":"15","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/CarSearch.js":"16","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Giveaways.js":"17","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/store/reducers/authReducer.js":"18","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/store/reducers/userReducer.js":"19","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/commentsTempData.js":"20","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/carTempData.js":"21","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Comments.js":"22","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Layout/Layout.js":"23","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/giveAwayData.js":"24","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/utils/youtubeAPI.js":"25","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Fan/vehicleCard.js":"26","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Fan/CreateNewCar.js":"27","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Layout/Header.js":"28","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Layout/Footer.js":"29","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Fan/SettingModal.js":"30","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Layout/SignUpModal.js":"31","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Layout/LoginModal.js":"32","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/store/actions/userActions.js":"33","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/store/actions/authActions.js":"34","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Shopify/Cart.js":"35","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Shopify/Products.js":"36","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Shopify/Product.js":"37","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Shopify/LineItem.js":"38","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Shopify/VariantSelector.js":"39","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Fan/ImageUpload.js":"40","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Influencer/Garage.js":"41","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Influencer/CreateNewCar.js":"42","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Influencer/ImageUpload.js":"43","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Influencer/SettingModal.js":"44","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Influencer/vehicleCard.js":"45","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Influencer/SubNav.js":"46","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Influencer/Social.js":"47","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Influencer/Swagg.js":"48","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/store/actions/bioActions.js":"49","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/store/reducers/bioReducer.js":"50","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Admin/QueryVideoData.js":"51","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Admin/EditVideoData.js":"52","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Admin/AddCarData.js":"53","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Admin/LoginDiv.js":"54","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Admin/colorDiv.js":"55","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Admin/colorInterior.js":"56","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Admin/FormText.js":"57","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Admin/FormCheckbox.js":"58","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Admin/CheckCarData.js":"59","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Admin/EditVideoDataKirk.js":"60","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Influencer/AllVideos.js":"61","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/store/reducers/influencerReducer.js":"62","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/store/actions/influencerActions.js":"63","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/SpecDiv.js":"64","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Layout/Head.js":"65","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/GiveawayCount.js":"66","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/VideoDiv.js":"67","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Terms.js":"68","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Admin/AdminLoginDiv.js":"69","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Privacy.js":"70","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Admin/CarImgUpload.js":"71","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Admin/UpdateDB.js":"72","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/CarStatsVideo.js":"73","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Influencer/SpecDiv.js":"74","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/CarStatsCard.js":"75","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/CarStatsListsMake.js":"76"},{"size":1122,"mtime":1612536438995,"results":"77","hashOfConfig":"78"},{"size":362,"mtime":1604942454463,"results":"79","hashOfConfig":"78"},{"size":3755,"mtime":1615918622092,"results":"80","hashOfConfig":"78"},{"size":1074,"mtime":1611365886225,"results":"81","hashOfConfig":"78"},{"size":375,"mtime":1613527744386,"results":"82","hashOfConfig":"78"},{"size":7609,"mtime":1615306194120,"results":"83","hashOfConfig":"78"},{"size":17570,"mtime":1615928452834,"results":"84","hashOfConfig":"78"},{"size":3726,"mtime":1615471481330,"results":"85","hashOfConfig":"78"},{"size":11017,"mtime":1615681515527,"results":"86","hashOfConfig":"78"},{"size":876,"mtime":1614561327028,"results":"87","hashOfConfig":"78"},{"size":6398,"mtime":1614561501168,"results":"88","hashOfConfig":"78"},{"size":16192,"mtime":1615553190935,"results":"89","hashOfConfig":"78"},{"size":3543,"mtime":1614630735352,"results":"90","hashOfConfig":"78"},{"size":13311,"mtime":1615928669280,"results":"91","hashOfConfig":"78"},{"size":20776,"mtime":1615681483311,"results":"92","hashOfConfig":"78"},{"size":9725,"mtime":1615556819112,"results":"93","hashOfConfig":"78"},{"size":7989,"mtime":1615251019793,"results":"94","hashOfConfig":"78"},{"size":2324,"mtime":1614794233068,"results":"95","hashOfConfig":"78"},{"size":426,"mtime":1614804295193,"results":"96","hashOfConfig":"78"},{"size":1018,"mtime":1605734313167,"results":"97","hashOfConfig":"78"},{"size":30355,"mtime":1608082226445,"results":"98","hashOfConfig":"78"},{"size":13959,"mtime":1615680631919,"results":"99","hashOfConfig":"78"},{"size":2057,"mtime":1614444685865,"results":"100","hashOfConfig":"78"},{"size":1524,"mtime":1614532545589,"results":"101","hashOfConfig":"78"},{"size":357,"mtime":1613936341740,"results":"102","hashOfConfig":"78"},{"size":13653,"mtime":1615651205029,"results":"103","hashOfConfig":"78"},{"size":13186,"mtime":1615651158732,"results":"104","hashOfConfig":"78"},{"size":5292,"mtime":1615386889608,"results":"105","hashOfConfig":"78"},{"size":3312,"mtime":1615318248965,"results":"106","hashOfConfig":"78"},{"size":28078,"mtime":1615651734434,"results":"107","hashOfConfig":"78"},{"size":6154,"mtime":1615650022683,"results":"108","hashOfConfig":"78"},{"size":8202,"mtime":1614797487297,"results":"109","hashOfConfig":"78"},{"size":342,"mtime":1614804322243,"results":"110","hashOfConfig":"78"},{"size":4889,"mtime":1614558633202,"results":"111","hashOfConfig":"78"},{"size":2130,"mtime":1610065399614,"results":"112","hashOfConfig":"78"},{"size":613,"mtime":1610055684017,"results":"113","hashOfConfig":"78"},{"size":4052,"mtime":1610152774195,"results":"114","hashOfConfig":"78"},{"size":2086,"mtime":1596835430000,"results":"115","hashOfConfig":"78"},{"size":546,"mtime":1596835430000,"results":"116","hashOfConfig":"78"},{"size":3909,"mtime":1614110796875,"results":"117","hashOfConfig":"78"},{"size":20674,"mtime":1614976576805,"results":"118","hashOfConfig":"78"},{"size":12238,"mtime":1615651217267,"results":"119","hashOfConfig":"78"},{"size":3876,"mtime":1614110641730,"results":"120","hashOfConfig":"78"},{"size":24940,"mtime":1615651227266,"results":"121","hashOfConfig":"78"},{"size":13097,"mtime":1615651241749,"results":"122","hashOfConfig":"78"},{"size":7157,"mtime":1615563756247,"results":"123","hashOfConfig":"78"},{"size":7045,"mtime":1614741625182,"results":"124","hashOfConfig":"78"},{"size":5570,"mtime":1614095751027,"results":"125","hashOfConfig":"78"},{"size":126,"mtime":1613149275145,"results":"126","hashOfConfig":"78"},{"size":297,"mtime":1613151744775,"results":"127","hashOfConfig":"78"},{"size":17531,"mtime":1614725493202,"results":"128","hashOfConfig":"78"},{"size":9421,"mtime":1614960594704,"results":"129","hashOfConfig":"78"},{"size":29077,"mtime":1614099893826,"results":"130","hashOfConfig":"78"},{"size":1103,"mtime":1613271940405,"results":"131","hashOfConfig":"78"},{"size":956,"mtime":1613342848860,"results":"132","hashOfConfig":"78"},{"size":966,"mtime":1613343118738,"results":"133","hashOfConfig":"78"},{"size":447,"mtime":1613764194210,"results":"134","hashOfConfig":"78"},{"size":693,"mtime":1613757464952,"results":"135","hashOfConfig":"78"},{"size":2993,"mtime":1614097617655,"results":"136","hashOfConfig":"78"},{"size":8919,"mtime":1614960498324,"results":"137","hashOfConfig":"78"},{"size":19334,"mtime":1615926411616,"results":"138","hashOfConfig":"78"},{"size":662,"mtime":1614642691133,"results":"139","hashOfConfig":"78"},{"size":1669,"mtime":1614642661134,"results":"140","hashOfConfig":"78"},{"size":2423,"mtime":1615648266519,"results":"141","hashOfConfig":"78"},{"size":753,"mtime":1614630766516,"results":"142","hashOfConfig":"78"},{"size":8460,"mtime":1614532590134,"results":"143","hashOfConfig":"78"},{"size":1336,"mtime":1615225956176,"results":"144","hashOfConfig":"78"},{"size":51251,"mtime":1615245623342,"results":"145","hashOfConfig":"78"},{"size":1267,"mtime":1614721759428,"results":"146","hashOfConfig":"78"},{"size":26965,"mtime":1615913835049,"results":"147","hashOfConfig":"78"},{"size":6429,"mtime":1615413038900,"results":"148","hashOfConfig":"78"},{"size":8430,"mtime":1615475840503,"results":"149","hashOfConfig":"78"},{"size":21673,"mtime":1615914259241,"results":"150","hashOfConfig":"78"},{"size":2682,"mtime":1615749936004,"results":"151","hashOfConfig":"78"},{"size":2176,"mtime":1615599884763,"results":"152","hashOfConfig":"78"},{"size":3403,"mtime":1615918609286,"results":"153","hashOfConfig":"78"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},"1fkg0if",{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"156"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"170","messages":"171","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"156"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"156"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"156"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"156"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"156"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"189","messages":"190","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"156"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"156"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"156"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"156"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"205"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"156"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"156"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"156"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229","usedDeprecatedRules":"156"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232","usedDeprecatedRules":"156"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"156"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244","usedDeprecatedRules":"156"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253","usedDeprecatedRules":"156"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"156"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"156"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"156"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"265","usedDeprecatedRules":"156"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270","usedDeprecatedRules":"156"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"273","usedDeprecatedRules":"156"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"276","usedDeprecatedRules":"156"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"281","usedDeprecatedRules":"156"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"284","usedDeprecatedRules":"156"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"287","usedDeprecatedRules":"156"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"290","usedDeprecatedRules":"156"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"303","usedDeprecatedRules":"156"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"306","usedDeprecatedRules":"156"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"309","messages":"310","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"311","usedDeprecatedRules":"156"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"314","usedDeprecatedRules":"156"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"317","usedDeprecatedRules":"156"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"322","usedDeprecatedRules":"156"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"325","messages":"326","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"331","usedDeprecatedRules":"156"},{"filePath":"332","messages":"333","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"334","usedDeprecatedRules":"156"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"337","usedDeprecatedRules":"156"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"340","messages":"341","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"342","usedDeprecatedRules":"156"},{"filePath":"343","messages":"344","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/index.js",[],["347","348"],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/reportWebVitals.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/App.js",["349"],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/aws-exports.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/store/reducers/rootReducer.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/InfluencerIndexPage.js",["350","351"],"import React, { useEffect, useState } from 'react'\nimport {Helmet} from \"react-helmet\"\nimport { Row, Col, Card, Button } from 'react-bootstrap'\nimport { connect } from 'react-redux'\nimport * as Realm from \"realm-web\"\nimport { Link } from 'react-router-dom'\nimport Layout from './Layout/Layout'\nimport './influencerIndexPage.scss'\nimport jwt from 'jsonwebtoken'\nimport noImg from '../assets/global/no_image.jpg'\nimport short from 'short-uuid'\nimport Logo from '../assets/global/Logo-smoke-show.png'\nimport Head from '../components/Layout/Head'\n\nconst InfluencerIndexPage = () =>{\n\n    const videoEmbedURL = 'https://www.youtube.com/embed/'\n\n    const [influencers, setInfluencers] = useState([])\n    const appConfig = {\n        id: process.env.REACT_APP_REALM_APP_ID,\n        // timeout: 10000, \n        // timeout in number of milliseconds\n      };\n    const app = new Realm.App(appConfig);\n   \n\n    const getInfluencers = async (credentials) =>{\n\n        try{\n            await app.logIn(credentials).then(async user =>{\n                const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n                const mongoCollection = mongo.db(\"smoke-show\").collection(\"influencers\")\n                try {\n            \n                    const filter = {isActive: true} \n                    await mongoCollection.find(filter).then(resAll =>{\n                        setInfluencers(resAll)\n                    })\n                   \n                 }catch(error){console.log(error)}\n            })\n        }catch(err){\n            console.log(err)\n        }\n    }\n\n    useEffect(() => {\n        let token = sessionStorage.getItem('session_token')\n        if(token){\n            jwt.verify(token, process.env.REACT_APP_JWT_SECRET, (err, decoded)=>{\n                if(err){\n                    console.log(err)\n                    const credentials = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTH_PUBLIC_VIEW);\n                    getInfluencers(credentials)\n                }else{\n                    const tokenUser = sessionStorage.getItem('session_user')\n             \n                    const credentials = jwt.verify(tokenUser, process.env.REACT_APP_JWT_SECRET)\n                    getInfluencers(credentials.cre)\n                }\n            });\n            \n         }else{\n            const credentials = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTH_PUBLIC_VIEW);\n            getInfluencers(credentials)\n         }\n        \n\n      }, [])\n\n    return(\n        <Layout>\n        <Helmet>\n          <meta charSet=\"utf-8\" />\n          <title>All influencers | The Smoke Show</title>\n          <meta name=\"description\" content=\"Check out our influencers / authors\" />\n          <Head />\n          {/* <link rel=\"canonical\" href=\"http://mysite.com/example\" /> */}\n        </Helmet>\n            <div className=\"main-wrapper footer-pos\">\n                <div className=\"spacer-4rem\"></div>\n                <div className=\"title title-adj\">\n                    <h2 >All Influencers</h2>\n                </div>\n                <Row style={{paddingLeft:'-7px', paddingRight:'-7px'}}>\n                {influencers && influencers.map(influencer =>{\n                    const unique = short.generate()\n                    return(\n                        <Col sm={6} md={4} key={unique} className=\"bottom-space\">\n                            <Card className=\"card-influencer\" >\n                                <div className=\"videoWrapper\">\n                                        <iframe src={videoEmbedURL + influencer.featuredVideo.id}\n                                                frameBorder='0'\n                                                allow='autoplay; encrypted-media'\n                                                allowFullScreen\n                                                title='video'\n                                        />\n                                </div>\n                                <Card.Body>\n                                    <Card.Title>{influencer.username}</Card.Title>\n                                    <Card.Text className=\"influencer-desc\">{influencer.desc}</Card.Text>\n                                    <Link \n                                    to={{\n                                        pathname: `/influencer/${influencer.userId}`,\n                                        state: { influencer: influencer }\n                                        // influencer: influencer\n                                    }}\n                                    // activeStyle={{\n                                    //     color: \"gray\"\n                                    // }}\n                                    >\n                                        <Button className=\"login-btn\">See {influencer.username}'s Bio</Button>\n                                    </Link>\n                                    \n                                </Card.Body>\n                            </Card>\n                        </Col>\n                    )\n                    \n                })}\n                <Col sm={6} md={4} >\n                            <Card className=\"card-influencer\" >\n                                <div className=\"videoWrapper\">\n                                <img src={noImg} alt=\"coming soon\" style={{width: '100%'}}/>\n                                <img src={Logo} className=\"overlay-logo\"/>\n                                        {/* <iframe src={videoEmbedURL + influencer.featuredVideo.id}\n                                                frameBorder='0'\n                                                allow='autoplay; encrypted-media'\n                                                allowFullScreen\n                                                title='video'\n                                        /> */}\n                                </div>\n                                <Card.Body>\n                                    <Card.Title>More Coming Soon!</Card.Title>\n                                    <Card.Text className=\"influencer-desc\">Check back here as we grow Influencers on The Smoke Show!<br/><br/>\n                                    <Link to=\"/about\"><span>Want your content featured too? </span></Link>\n                                    </Card.Text>\n                                    {/* <NavLink \n                                    to={{\n                                        pathname: `/influencer/${influencer.userId}`,\n                                        state: { influencer: influencer }\n                                        // influencer: influencer\n                                    }}\n                                    activeStyle={{\n                                        color: \"gray\"\n                                    }}\n                                    > */}\n                                    <Link to=\"/about\">\n                                    <Button className=\"login-btn\" >More details here</Button>\n                                    </Link>\n                                        \n                                    {/* </NavLink> */}\n                                    \n                                </Card.Body>\n                            </Card>\n                        </Col>\n                </Row>\n                <div className=\"spacer-4rem\"></div>\n            </div>\n        </Layout>\n        \n    )\n}\nconst mapStateToProps = (state) => {\n    //syntax is propName: state.key of combineReducer.key\n    return{\n      username: state.user.username,\n    }\n  }\n\nexport default connect(mapStateToProps)(InfluencerIndexPage)\n\n","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/HomePage.js",["352","353"],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/AboutPage.js",["354"],"import React from 'react'\nimport {Helmet} from \"react-helmet\"\nimport { Row, Col, Button } from 'react-bootstrap'\nimport Layout from './Layout/Layout'\nimport './about.scss'\n\nconst AboutPage = () =>{\n\n\n return(\n     <Layout>\n     <Helmet>\n        <meta charSet=\"utf-8\" />\n        <title>About Us | The Smoke Show</title>\n        <meta name=\"description\" content=\"Who we are and how we started The Smoke Show. Stay in touch.\" />\n\n        {/* <link rel=\"canonical\" href=\"http://mysite.com/example\" /> */}\n    </Helmet>\n        <div className=\"spacer-4rem\"></div>\n        <div className=\"main-wrapper\">\n            <div className=\"mission-wrapper\">\n                <h4 className=\"theme-text-color\">The Smoke Show Mission Statement</h4>\n                <div className=\"spacer-2rem\"></div>\n                <p className=\"about-p\">\n                Tired of BigTech and Old School Auto Magazines?<br />\n                 Welcome to The Smoke Show, aka the world’s best auto social platform. <br /><br />\n                 What are we trying to achieve? That’s simple, compiling everything we like to see, all in one place, and cutting out everything we don’t. <br /><br />\n                 The Smoke Show lets users have more fun, gives more control to creators, and further analytics to relevant advertisers. The Smoke Show is a home for auto fans, built by auto fans.\n                </p>\n            </div>\n            <div className=\"spacer-4rem\"></div>\n            <Row className=\"p-lr-4\">\n                <Col sm={6} className=\"mb-2rem\">\n                <div className=\"contact-div\">\n                    <h3 className=\"theme-text-color\">Become an influencer</h3>\n                    <p className=\"contact-p\">\n                    Want your video to be featured on the site?\n                    <br /><br />\n                    Chat with us at:\n                    <br /><br />\n                    hello@thehoongroup.com\n                    </p>\n                </div>\n                </Col>\n                <Col sm={6} className=\"mb-2rem\" >\n                <div className=\"contact-div\">\n                    <h3 className=\"theme-text-color\">Advertising with us</h3>\n                    <p className=\"contact-p\">Want to have a direct channel for advertising next to sponsored content and reaching the automotive community?\n                    <br /><br />\n                    Reach out to us at:\n                    <br /><br />\n                    sales@thehoongroup.com\n                    </p>\n                </div>\n                </Col>\n                <Col sm={6} className=\"mb-2rem\">\n                <div className=\"contact-div\">\n                    <h3 className=\"theme-text-color\">Support</h3>\n                    <p className=\"contact-p\">\n                    Having technical trouble?\n                    <br /><br />\n                    Send us an email at:\n                    <br /><br />\n                    support@thehoongroup.com\n                    </p>\n                </div>\n                </Col>\n                <Col sm={6} className=\"mb-2rem\">\n                <div className=\"contact-div\">\n                    <h3 className=\"theme-text-color\">Feedback</h3>\n                    <p className=\"contact-p\">We thrive on feedback, do you have some suggestion to improve The Smoke Show?\n\n                    <br /><br />\n                    Send it our way at:\n                    <br /><br />\n                    feedback@thehoongroup.com\n                    </p>\n                </div>\n                </Col>\n            </Row>\n        </div>\n        <div className=\"spacer-4rem\"></div>\n        {/* <center><Button onClick={checkRes}>click me</Button></center> */}\n     </Layout>\n )\n}\n\nexport default AboutPage","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/EmailConfirmation.js",["355","356"],"import React, { useState, useEffect } from 'react'\nimport { Button, Form } from 'react-bootstrap'\n// import Logo from '../assets/global/Logo-smoke-show.png'\nimport * as Realm from \"realm-web\"\nimport { connect } from 'react-redux'\nimport jwt from 'jsonwebtoken'\nimport Layout from './Layout/Layout'\n// import { openLoginModal } from '../store/actions/authActions'\nimport axios from 'axios'\n\nconst EmailConfirmation = (props) =>{\n    let token = new URLSearchParams(props.location.search).get(\"token\")\n    let tokenId = new URLSearchParams(props.location.search).get(\"tokenId\")\n    const [userObj, setUserObj] = useState({fname: '', lname: '', token: token, tokenId: tokenId, username: '', email: '', password: ''})\n    const [hasError, setHasError] = useState(false)\n    const [hasRegistered, setHasRegistered] = useState(false)\n    const [msg, setMsg] = useState(\"\")\n    const maxAgeTest = 1 * 60 * 60\n    const id = process.env.REACT_APP_REALM_APP_ID\n    const config = { id };\n    const app = new Realm.App(config);\n    const [clicked, setClicked] = useState(false)\n    const [resendMsg, setResendMsg] = useState('')\n    \n    const vipNames = [\"EddieX\", \"Lexurious Fleet\", \"Stradman\", \"Burlacher\", \"SummitLife\", \"HeavyD\", \"Hoovies Garage\", \"Streetspeed717\", \"RFRacing\", \"Bertrand850\", \"InShane Designs\", \"Savage Garage\", \"effSpot\", \"Goonzquad\", \"Tavarish\", \"VinWiki\", \"TJ Hunt\", \"DDE\", \"Emelia Hartford\", \"Doug Demuro\", \"StraightPipes\", \"Savage Geese\", \"SaabKyle04\", \"ThatDudeInBlue\", \"JR Garage\", \"Alex Rebuilds\", \"vTuned\", \"Cleetus McFarland\", \"Chevy Dude\", \"Seen Through Glass\", \"Shmee150\", \"SOL\", \"Mr JWW\", \"itsjusta6\", \"WhistlinDiesel\", \"Samcrac\", \"Car Wizard\", \"The Smoking Tire\", \"Manny Khoshbin\", \"Donut Media\", \"Scotty Kilmer\", \"Jay Leno's Garage\", \"WatchJRGo\", \"Rich Rebuilds\", \"Speed Phenom\", \"RDB LA\", \"Salomondrin\", \"Buddy Wyrick\", \"Ken Block\", \"B is for Build\", \"SuperSpeeders\", \"Royalty Exotic Cars\", \"Adam LZ\", \"Rob Dahm\", \"ThrottleHouse\", \"LegitStreetCars\", \"Supercar Blondie\", \"Wrench Everyday\", \"Lambo Jesus\", \"Lambo Fan\", \"Motor Tube\", \"Redline Reviews\"]\n\n    const handleChange =(e) =>{\n        setUserObj({\n            ...userObj,\n            [e.target.name]: e.target.value\n        })\n    }\n    const createToken = (userData) =>{\n        return jwt.sign({ userData: userData }, process.env.REACT_APP_JWT_SECRET, {expiresIn: maxAgeTest});\n    }\n\n    const handleSubmit = async (e) =>{\n        let isUnique = (vipNames.indexOf(userObj.username) > -1)\n        console.log(isUnique)\n        e.preventDefault()\n        if(!clicked){\n            setHasError(false)\n            if(!isUnique){\n                const email = userObj.email.toLowerCase()\n                const credentials = Realm.Credentials.emailPassword(email, userObj.password)\n                try {\n                    await app.logIn(credentials).then(async user =>{\n                        const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME);\n                        const mongoCollection = mongo.db(\"smoke-show\").collection(\"users\")\n                        const filterUsername = {username: userObj.username}\n                        try {\n                            await mongoCollection.findOne(filterUsername).then(async res =>{\n                                console.log('res', res)\n                                if(res){\n                                    setMsg('The username is already taken. Please try again.')\n                                    setHasError(true)\n                                }else{\n                                    const joined = new Date().getTime()\n                                    const userData = {\n                                        userId: user.id,\n                                        fname: userObj.fname,\n                                        lname: userObj.lname,\n                                        username: userObj.username,\n                                        joined: joined\n                                    }\n                                    try {\n                                        await mongoCollection.insertOne(userData).then(insertOneResult =>{\n                                            let token = createToken(userData)\n                                            const tokenCredentials = jwt.sign({ cre: credentials }, process.env.REACT_APP_JWT_SECRET, {expiresIn: maxAgeTest})\n                                            const oldToken = sessionStorage.getItem('session_token')\n                                            if(oldToken){\n                                                sessionStorage.removeItem('session_token')\n                                                sessionStorage.removeItem('session_user')\n                                                sessionStorage.setItem('session_token', token)\n                                                sessionStorage.setItem('session_user', tokenCredentials)\n                                            }else{\n                                                sessionStorage.setItem('session_token', token)\n                                                sessionStorage.setItem('session_user', tokenCredentials)\n                                            }\n                                            setClicked(true)\n                                 \n                                        }).then(()=>{props.history.push(\"/\")})\n                                    } catch (error) { console.log(error)}\n                                }\n                            })\n                        } catch (error) { console.log(error)}\n                    })\n                   } catch (error) {\n            \n                   }\n            }else{\n                setMsg('The username is already taken. Please try again.')\n                setHasError(true)\n                return\n            }\n    }\n}\n\n    const handleResendToken = async (e) =>{\n        e.preventDefault()\n        const email = userObj.email\n        \n        try{\n            axios.post(`https://stitch.mongodb.com/api/client/v2.0/app/${process.env.REACT_APP_REALM_APP_ID}/auth/providers/local-userpass/confirm/call`, { email }).then(res => {\n                console.log(res);\n                setMsg('We have sent you a confirmation email. Please check your inbox.')\n                setHasError(true)\n            })\n         \n        }catch(err){\n            console.log(err)\n            setMsg('The email address you typed is not in our record. Please check your email address.')\n            setHasError(true)\n        }\n   \n    }\n\n    const resendToken = ()=>{\n        return(\n            <div className=\"min-height-all\">\n                <center>\n                    <h3>{msg}</h3>\n                </center>\n                \n                <div className=\"spacer-4rem\"></div>\n                <Form className=\"login-form\" onSubmit={handleResendToken}>\n                    <Form.Group >\n                        <Form.Label>Email address</Form.Label>\n                        <Form.Control type=\"email\" placeholder=\"e.g. example@example.com\" name=\"email\" onChange={handleChange} required />\n                    </Form.Group>\n                    <div className=\"spacer-2rem\"></div>\n                    <div className=\"login-btn-wrapper\">\n                    { resendMsg && resendMsg }\n                        <Button className=\"login-btn\" type=\"submit\">\n                            Resend Confirmation Email\n                        </Button><br /><br />\n                        {/* <Button onClick={test}>check child ref</Button> */}\n                    </div>\n                </Form>\n            </div>\n        )\n    }\n\n    const confirmUser = async () =>{\n        if(token){\n            try{\n                await app.emailPasswordAuth.confirmUser(token, tokenId).then(user =>{\n                    setHasRegistered(true)\n                    \n                })\n            }catch(error){\n                console.log('error', error)\n                setMsg('Oops, the link was expired. Please resend confirmation email.')\n                setHasError(true)\n                setHasRegistered(false)\n            }\n        }\n    }\n \n    useEffect(() => {\n        confirmUser()\n        \n    }, [])\n\n    return (\n        <Layout >\n            <div className=\"custom-modal-body\" style={{padding:'1rem'}}>\n                <div className=\"spacer-4rem\"></div>\n                {hasRegistered ? \n                <React.Fragment>\n                    <div className=\"login-logo-wrapper\">\n                        <h3>You are registered to The Smoke Show.</h3>\n                        <p>Please fill in your info and login.</p>\n                    </div>\n                    <Form className=\"login-form\" onSubmit={handleSubmit}>\n                        <Form.Group >\n                            <Form.Label>First name</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"e.g. John\" name=\"fname\" onChange={handleChange} required/>\n                        </Form.Group>\n                        <Form.Group >\n                            <Form.Label>Last name</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"e.g. Due\" name=\"lname\" onChange={handleChange} required />\n                        </Form.Group>\n                        <Form.Group controlId=\"formBasicEmail\">\n                            <Form.Label>Username</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"Ex: SmokeShowFan\" name=\"username\" onChange={handleChange} required/>\n                        </Form.Group>\n                        <Form.Group controlId=\"formBasicEmail\">\n                            <Form.Label>Email address</Form.Label>\n                            <Form.Control type=\"email\" placeholder=\"e.g. example@example.com\" name=\"email\" onChange={handleChange} />\n                        </Form.Group>\n                        <Form.Group controlId=\"formBasicPassword\">\n                            <Form.Label>Password</Form.Label>\n                            <Form.Control type=\"password\" placeholder=\"Between 6 and 128 characters long\" name=\"password\" onChange={handleChange} />\n                        </Form.Group>\n                        \n                        {hasError && <div className=\"error-msg\">{msg}</div>}\n                        <br/>\n                        <div className=\"login-btn-wrapper\">\n                            <Button className=\"login-btn\" type=\"submit\">\n                                Login\n                            </Button>\n                          \n                        </div>\n                        <div className=\"spacer-4rem\"></div>\n                    </Form>\n                </React.Fragment>\n                : resendToken()\n                }\n            \n            </div>\n        </Layout>\n    )\n }\n\n\nconst mapDispatchToProps = (dispatch)=>{\n    return{\n        // openLoginModal: (state) => dispatch(openLoginModal(state)),\n    }\n}\n\nexport default connect(null, mapDispatchToProps)(EmailConfirmation)","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/NotFoundPage.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/ResetPassword.js",["357","358","359","360"],"import React, { useState, useEffect } from 'react'\nimport { Button, Form } from 'react-bootstrap'\n// import Logo from '../assets/global/Logo-smoke-show.png'\nimport * as Realm from \"realm-web\"\nimport { connect } from 'react-redux'\nimport jwt from 'jsonwebtoken'\nimport Layout from './Layout/Layout'\nimport Head from '../components/Layout/Head'\nimport { Helmet } from 'react-helmet'\n\nconst ResetPassword = (props) =>{\n\n    const token = new URLSearchParams(props.location.search).get(\"token\")\n    const tokenId = new URLSearchParams(props.location.search).get(\"tokenId\")\n    console.log(token)\n    console.log(tokenId)\n    const [userObj, setUserObj] = useState({token: token, tokenId: tokenId, email: '', password: '', password2: ''})\n    const [hasError, setHasError] = useState(false)\n    const [hasReset, setHasReset] = useState(false)\n    const [msg, setMsg] = useState(\"\")\n    const maxAgeTest = 1 * 60 * 60\n    const id = process.env.REACT_APP_REALM_APP_ID\n    const config = { id };\n    const app = new Realm.App(config);\n\n\n    const handleChange =(e) =>{\n        setUserObj({\n            ...userObj,\n            [e.target.name]: e.target.value\n        })\n    }\n    const createToken = (userData) =>{\n        return jwt.sign({ userData: userData }, process.env.REACT_APP_JWT_SECRET, {expiresIn: maxAgeTest});\n    }\n    const handeleRestPw = async (e) =>{\n        // console.log('pw', token, tokenId, userObj.password)\n        e.preventDefault()\n        try{\n            // await app.emailPasswordAuth.resetPassword(\"newPassw0rd\", token, tokenId);\n            // await app.emailPasswordAuth.resetPassword(token, tokenId, \"newPassw0rd\");\n            await app.emailPasswordAuth.resetPassword( token, tokenId, userObj.password).then(res =>{\n                console.log('res', res)\n                setHasReset(true)\n            })\n        }catch(error){\n            console.log(error)\n        }\n        \n    }\n    const handleLogin = async (e) =>{\n        e.preventDefault()\n        const emailLowerCase = userObj.email.toLocaleLowerCase()\n        const credentials = Realm.Credentials.emailPassword(emailLowerCase, userObj.password)\n\n        try{\n            // Authenticate the user\n            await app.logIn(credentials).then( user=>{\n                    console.log('working?', user)\n                    // const key = await user.apiKeys.create(uid)\n                    const customData = user.customData\n                    const token = jwt.sign({ userData: customData }, process.env.REACT_APP_JWT_SECRET, {expiresIn: maxAgeTest})\n                    sessionStorage.setItem('session_token', token)\n                    const tokenUser = jwt.sign({ cre: credentials }, process.env.REACT_APP_JWT_SECRET, {expiresIn: maxAgeTest})\n                    sessionStorage.setItem('session_user', tokenUser)\n                    \n                }).then(()=>{props.history.push(\"/\")})\n            \n      \n        }catch(error){\n            console.log('error', error)\n\n        }\n    }\n    useEffect(() => {\n        handeleRestPw()\n    }, [])\n\n    return (\n        <Layout>\n        <Helmet>\n            <title>Reset your password | The Smoke Show</title>\n            <Head />\n        </Helmet>\n        \n            <div className=\"custom-modal-body theme-text-p height-adj-main\">\n                <div style={{marginTop:'4rem'}}></div>\n                {hasReset ? \n                <React.Fragment>\n                    <div style={{textAlign:\"center\"}}>\n                        <h4>Your password has been reset</h4><br/>\n                        <p> Login with your new password.</p>\n                    </div>\n                    <div className=\"spacer-4rem\"></div>\n                    <Form className=\"login-form\" onSubmit={handleLogin}>\n                        <Form.Group controlId=\"formBasicEmail\">\n                            <Form.Label>Email address</Form.Label>\n                            <Form.Control type=\"email\" placeholder=\"e.g. example@example.com\" name=\"email\" onChange={handleChange} />\n                        </Form.Group>\n\n                        <Form.Group controlId=\"formBasicPassword\">\n                            <Form.Label>Password</Form.Label>\n                            <Form.Control type=\"password\" placeholder=\"\" name=\"password\" onChange={handleChange} />\n                        </Form.Group>\n                        <div className=\"spacer-2rem\"></div>\n                        <div className=\"login-btn-wrapper\">\n                            <Button className=\"login-btn\" type=\"submit\">\n                                Login\n                            </Button><br /><br />\n                            \n                        </div>\n                    \n                    </Form>\n                </React.Fragment>\n                :\n                <React.Fragment>\n                    <div className=\"login-logo-wrapper theme-text-p\">\n                        <h4 className=\"h4-style\">Reset Your Password</h4>\n                        <div className=\"spacer-4rem\"></div>\n                        <p>Please enter your new password below</p>\n                    </div>\n                    <Form className=\"login-form\" onSubmit={handeleRestPw}>\n         \n                        <Form.Group >\n                            <Form.Label>New password</Form.Label>\n                            <Form.Control type=\"password\" placeholder=\"Between 6 and 128 characters long\" name=\"password\" onChange={handleChange} />\n                        </Form.Group>\n                        <br/>\n                        {/* <Form.Group >\n                            <Form.Label>Confirm new password</Form.Label>\n                            <Form.Control type=\"password\" placeholder=\"type your new password again\" name=\"password2\" onChange={handleChange} />\n                        </Form.Group> */}\n                        {hasError && <div className=\"error-msg\">{msg}</div>}\n                        <br/>\n                        <div className=\"login-btn-wrapper\">\n                            <Button className=\"login-btn\" type=\"submit\">\n                                Set New Password\n                            </Button>\n                        </div>\n                        <div className=\"spacer-4rem\"></div>\n                    </Form>\n                </React.Fragment>\n                }\n            </div>\n        </Layout>\n        \n    )\n}\n\nexport default connect()(ResetPassword)\n\n\n","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/CarStats.js",["361","362","363","364"],"import React, { useState, Fragment, useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport Layout from './Layout/Layout'\nimport { Row, Col, Button} from 'react-bootstrap'\nimport './carStats.scss'\nimport { v4 as uuidv4 } from 'uuid'\n\nimport priceIcon from '../assets/global/Price-Tag-icon.svg'\nimport powerIcon from '../assets/global/Horsepower.svg'\nimport weightIcon from '../assets/global/weight.svg'\nimport pistonIcon from '../assets/global/piston.png'\n// import cylinderIcon from '../assets/global/cylinder.svg'\nimport transmissionIcon from '../assets/global/transmission.svg'\nimport mileageIcon from '../assets/global/mileage.svg'\nimport torqueIcon from '../assets/global/torque.png'\nimport frontWheels from '../assets/global/front-wheels.png'\nimport rearWheels from '../assets/global/rear-wheels.png'\nimport allWheels from '../assets/global/all-wheels.png'\nimport { Helmet } from 'react-helmet'\nimport Head from '../components/Layout/Head'\n\nconst CarStats = (props) =>{\n    const statsArr = ['Main Stats', 'Engine', 'Measurements', 'Comfort & Convenience', 'Drive Train', 'Suspension', 'Color', 'Warranty']\n    const [carImages, setCarImages] = useState([])\n    const [carData, setCarData] = useState()\n    let searchedCars = []\n\n    const handleTabClick = (tab, index) =>{\n        let tempCarArr = [...carData]\n       \n       tempCarArr[index].activeTab = tab\n       setCarData(tempCarArr)\n    }\n    \n    const switchTabs = (car, tab) =>{\n        let engine, warranty, measurements, comfort, drivetrain, suspension, mileage, weight, totalSeating, colors, baseMSRP, rearseats, driveIcon, driveType\n\n        if(car.features['Engine'] !== undefined) engine = car.features['Engine']\n        if(car.features['Warranty'] !== undefined) warranty = car.features['Warranty']\n        if(car.features['Measurements'] !== undefined) measurements = car.features['Measurements']\n        if(car.features['Measurements'] !== undefined) weight = car.features['Measurements']['Curb weight']\n        if(car.features['Comfort & Convenience'] !== undefined) comfort = car.features['Comfort & Convenience']\n        if(car.features['Drive Train'] !== undefined){\n            drivetrain = car.features['Drive Train']\n            driveType = drivetrain['Drive type']\n        } \n        if(driveType === undefined){\n            driveType = null\n        }else if(driveType === 'all wheel drive' || drivetrain['Drive type'] === 'four wheel drive'){\n            driveIcon = allWheels\n        }else if(driveType === 'front wheel drive'){\n            driveIcon = frontWheels\n        }else if(driveType === 'rear wheel drive'){\n            driveIcon = rearWheels\n        }else{driveIcon = allWheels}\n\n        if(car.features['Suspension'] !== undefined) suspension = car.features['Suspension']\n        if(car.features['Rearseats'] !== undefined) rearseats = car.features['Rearseats'] \n        if(car.features['Fuel']['EPA mileage est'] == undefined) {\n            console.log('no mileage')\n        }else{mileage = car.features['Fuel']['EPA mileage est'][' (cty/hwy)']}\n        if(car.totalSeating !== undefined) totalSeating = car.totalSeating\n        if(car.color !== undefined) colors = car.color\n     \n        if(car.price === undefined){\n            baseMSRP = null\n        }else if(car.price.baseMSRP === undefined){\n            baseMSRP = null\n        }else{\n            baseMSRP = car.price.baseMSRP.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n        }\n\n        \n        switch(tab) {\n            case 'Main Stats':\n              return <Fragment>\n                        {baseMSRP &&\n                        <div className=\"stats-box\">\n                        <div  className=\"xs-txt\">\n                            <img src={priceIcon} alt=\"price\" className=\"icon-stats\" />\n                            <div>MSRP</div>\n                        </div>\n                        <div className=\"stats-label\">\n                            ${' '} {baseMSRP}\n                        </div>\n                        \n                        </div>}\n\n                        {weight &&\n                        <div className=\"stats-box\">\n                            <div className=\"xs-txt\">\n                                <img src={weightIcon} alt=\"weight\" className=\"icon-stats\" />\n                                <div>Curb weight</div>\n                            </div>\n                            <div className=\"stats-label\">\n                                {weight.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}\n                            </div>\n                        </div>\n                        }\n                        {mileage &&\n                        <div className=\"stats-box\">\n                            <div className=\"xs-txt\">\n                                <img src={mileageIcon} alt=\"mileage\" className=\"icon-stats\" />\n                                <div>Mileage</div>\n                            </div>\n                            <div className=\"stats-label\">\n                                {mileage}\n                            </div>\n                        </div>\n                        }\n                        \n                        {drivetrain &&\n                        <div className=\"stats-box\">\n                            <div className=\"xs-txt\">\n                                <img src={transmissionIcon} alt=\"transmission\" className=\"icon-stats\" />\n                                <div>Transmission</div>\n                            </div>\n                            <div className=\"stats-label\">\n                                {drivetrain['Transmission']}\n                            </div>\n                        </div>\n                        }\n                        {driveType &&\n                        <div className=\"stats-box\">\n                            <div className=\"xs-txt\">\n                                <img src={driveIcon} alt=\"drive\" className=\"icon-stats\" />\n                                <div>Drive type</div>\n                            </div>\n                            <div className=\"stats-label\">\n                                {driveType}\n                            </div>\n                        </div>\n                        }\n                        {car.features.Engine.Torque && \n                        <div className=\"stats-box\">\n                            <div className=\"xs-txt\">\n                                <img src={torqueIcon} alt=\"torque\" className=\"icon-stats\" />\n                                Torque\n                            </div>\n                            <div className=\"stats-label\">\n                                { car.features.Engine.Torque }\n                            </div>\n                        </div>\n                        }\n                        {car.features.Engine.Horsepower &&\n                        <div className=\"stats-box\">\n                            <div className=\"xs-txt\">\n                                <img src={powerIcon} alt=\"hoursepower\" className=\"icon-stats\" />\n                                Horsepower\n                            </div>\n                            <div className=\"stats-label\">\n                                { car.features.Engine.Horsepower}\n                            </div>\n                        </div>\n                        }\n                        {car.features.Engine.Cylinders &&\n                        <div className=\"stats-box\">\n                            <div className=\"xs-txt\">\n                                <img src={pistonIcon} alt=\"Cylinders\" className=\"icon-stats\" />\n                                Cylinders\n                            </div>\n                            <div className=\"stats-label\">\n                                { car.features.Engine.Cylinders}\n                            </div>\n                            \n                        </div>\n                        }\n                    </Fragment>\n            case 'Engine':\n                return <Fragment>\n                        { engine && Object.entries(engine).map(([key, value]) =>{\n                            return <div className=\"stats-box\"><strong>{key}</strong>:  {value}</div>\n                        })}\n                      </Fragment>\n            case 'Warranty':\n                return <Fragment>\n                        {warranty && Object.entries(warranty).map(([key, value]) =>{\n                            return <div className=\"stats-box\" key={key}><strong>{key}</strong>:  {value}</div>\n                        })}\n                      </Fragment>\n            case 'Measurements':\n                return <Fragment>\n                        {totalSeating && \n                            <div className=\"stats-box\">Total Seating: {totalSeating}</div>\n                        }\n                        {rearseats && Object.entries(rearseats).map(([key, value]) =>{\n                            return <div className=\"stats-box\" key={key}><strong>{key}</strong>:  {value}</div>\n                        })\n                        }\n                        { measurements && Object.entries(measurements).map(([key, value]) =>{\n                            return <div className=\"stats-box\" key={key}><strong>{key}</strong>:  {value}</div>\n                        })}\n                          \n                     \n                      </Fragment>  \n            case 'Comfort & Convenience':\n                return <Fragment>\n                        { comfort && Object.keys(comfort).map((key, index)=>{\n                            return <div className=\"stats-box\" key={key}>{key}</div>\n                        })}\n                          \n                       \n                      </Fragment> \n            case 'Drive Train':\n                return <Fragment>\n                        { drivetrain && Object.entries(drivetrain).map(([key, value]) =>{\n                            if(value === true){\n                                return <div className=\"stats-box\" key={key}>{key}<strong></strong></div>\n                            }else{\n                                return <div className=\"stats-box\" key={key}><strong>{key}</strong>:  {value}</div>\n                            }\n                            \n                        })}\n                      </Fragment>\n            case 'Suspension':\n                return <Fragment>\n                        { suspension && Object.keys(suspension).map((key, index)=>{\n                            return <div className=\"stats-box\" key={key}>{key}</div>\n                        })}\n                          \n                       \n                      </Fragment>    \n            case 'Color':\n                return <Fragment>\n                        <p><strong>Exterior</strong></p>\n                        { colors && colors['EXTERIOR'].map((color, index)=>{\n                            const uuid = uuidv4()\n                            return <Fragment key={uuid}>\n                                    <div className=\"stats-box-outline\" >\n                                    <div className=\"color-thumbnail\" style={{backgroundColor: `rgb(${color.rgb})`}}></div>\n                                    <div className=\"color-name\">{color.name}</div>\n                                    </div>\n                                   </Fragment>\n                        })}\n                          <hr />\n                       <p><strong>Interior</strong></p>\n                       { colors && colors['INTERIOR'].map((color, index)=>{\n                            return <div className=\"stats-box-outline\" key={color.name}>\n                                    <div className=\"color-thumbnail\" style={{backgroundColor: `rgb(${color.rgb})`}}></div>\n                                    <div className=\"color-name\">{color.name}</div>\n                                    </div>\n                        })}\n                      </Fragment>  \n            default:\n              return <Fragment>\n                        <div className=\"stats-box\">Error</div>\n                    </Fragment>\n          }\n    }\n\n    useEffect(() => {\n        if(props.history.location.cars){\n            searchedCars = props.history.location.cars.map(item => ({...item, tabs: statsArr, activeTab: 'Main Stats'}))\n            setCarData(searchedCars)\n        }else{props.history.push('/car-search')}\n    }, [])\n    return(\n        <Layout>\n            <Helmet>\n            {console.log(carData)}\n                {/* <title>{carData && carData[0].make}, {carData && carData[0].year}, {carData && carData[0].model} Specs, Reviews, and Pricing | The Smoke Show</title> */}\n                <title>{typeof(carData) !== 'undefined' && `${carData[0].make}, ${carData[0].year}, ${carData[0].model}, Statistics, Specs`}</title>\n                <Head />\n            </Helmet>\n            <div className=\"main-wrapper stats-container\">\n                <div className=\"spacer-4rem\"></div>\n                {carData && carData.map((car, index) =>{\n                    car.tabs = statsArr\n                    const maker = car.make.toUpperCase()\n                    const model = car.model.toUpperCase()\n                    {/* console.log('check', carImages) */}\n                    let carImg;\n                    if(carImages[0]){\n                        carImg = carImages[0].link\n                    }else{\n                        carImg = 'https://smoke-show.s3.amazonaws.com/car-photos/Ferrari-F8_Spider-2020-1280-01.jpg'\n                        }\n                    return(\n                        <Fragment key={car.name +index}>\n                            <h2 className=\"title\">{car.year} {' '} {maker} {' '} {model}</h2>\n                            <p className=\"theme-text-p\">{car.name}</p>\n                            <Row style={{paddingRight: '3px'}}>\n                                <Col sm={4}>\n                                    {/* <img src=\"https://smoke-show.s3.amazonaws.com/car-photos/Ferrari-F8_Spider-2020-1280-01.jpg\" alt=\"Ferrari F8 spider\" style={{width: '100%'}}/> */}\n                                     <img src={typeof(car.imgUrl) === 'undefined' ?carImg : car.imgUrl} alt={car.name} style={{width: '100%'}}/> \n                                    {/* <img src={carImg} alt={car.name} style={{width: '100%'}}/> */}\n                                </Col>\n                                <Col sm={8} style={{paddingLeft: 0}} >\n                                    <div className=\"box-shadow-white car-stats-wrapper\" >\n                                        <table className=\"stats-tab-ul\">\n                                        <tbody>\n                                            <tr>\n                                            {car.tabs.map(tab =>{\n                                                const uuid = uuidv4()\n                                                return(\n                                                        <td key={uuid} id={uuid} name={tab} custom={tab} onClick={()=>handleTabClick(tab, index)} className={ tab === car.activeTab ? 'tab-link tab-active' : 'tab-link' }>{tab}</td>                                       \n                                                )\n                                                \n                                            })}\n                                         \n                                            </tr>\n                                            </tbody>\n                                        </table>\n                                        <div className=\"stats-div\">\n                                            {switchTabs(car, car.activeTab)}\n                                        </div>\n                                    </div>\n                                </Col>\n                            </Row>\n                            <div className=\"spacer-4rem\"></div>\n                        </Fragment>\n                    )\n                })\n                }\n                <div className=\"spacer-4rem\"></div>\n                <Link to=\"/car-search\">\n                    <Button className=\"login-btn\">Start New Search</Button>\n                </Link>\n                \n            </div>\n            \n        </Layout>\n    )\n}\n\nexport default CarStats","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Swagg.js",["365"],"import React, { useEffect, useState } from 'react'\nimport {Helmet} from \"react-helmet\"\nimport Layout from './Layout/Layout'\nimport Client from 'shopify-buy';\nimport Products from './Shopify/Products'\nimport Cart from './Shopify/Cart'\nimport './Shopify/shopify.scss'\nimport Logo from '../assets/global/Logo-smoke-show.png'\n\nconst Swagg = () =>{\nconst [isCartOpen, setIsCartOpen] = useState(false)\nconst [checkout, setCheckout] = useState({ lineItems: [] })\nconst [products, setProducts] =useState([])\nconst [shop, setShop] = useState({})\n\nconst client = Client.buildClient({\n    storefrontAccessToken: process.env.REACT_APP_SHOPIFY_TOKEN,\n        domain: 'thehoongroup.myshopify.com',\n    });\n\nconst fetchData = () =>{\n    client.checkout.create().then((res) => {\n        console.log('cart', res)\n        setCheckout(res)\n      })\n\n      client.product.fetchAll().then((res) => {\n        console.log('product', res)\n        setProducts(res)\n      })\n  \n      client.shop.fetchInfo().then((res) => {\n        console.log('shop', res)\n        setShop(res)\n      });\n}\nconst addVariantToCart = async (variantId, quantity)=>{\n    setIsCartOpen(true)\n\n    const lineItemsToAdd = [{variantId, quantity: parseInt(quantity, 10)}]\n    // const checkoutId = checkout.id\n\n    return await client.checkout.addLineItems(checkout.id, lineItemsToAdd).then(res => {\n      console.log('res', res)\n      setCheckout(res)\n    });\n}\nconst updateQuantityInCart = async (lineItemId, quantity) =>{\n    // const checkoutId = checkout.id\n    const lineItemsToUpdate = [{id: lineItemId, quantity: parseInt(quantity, 10)}]\n\n    return await client.checkout.updateLineItems(checkout.id, lineItemsToUpdate).then(res => {\n        setCheckout(res)\n    });\n}\nconst removeLineItemInCart = async (lineItemId) =>{\n    return await client.checkout.removeLineItems(checkout.id, [lineItemId]).then(res => {\n        setCheckout(res)\n    });\n}\n\nconst handleCartClose = () =>{\n    setIsCartOpen(false)\n}\n\nuseEffect(() => {\n    fetchData()\n}, [])\n    return(\n        <Layout>\n        <Helmet>\n            <meta charSet=\"utf-8\" />\n            <title>Swagg | The Smoke Show</title>\n            <meta name=\"description\" content=\"Check out our swaggs here!\" />\n            {/* <link rel=\"canonical\" href=\"http://mysite.com/example\" /> */}\n        </Helmet>\n            <div className=\"main-wrapper\">\n                <div className=\"spacer-4rem\"></div>\n                <h2 className=\"title\">Swagg</h2>\n                {/* <div className=\"swagg-wrapper\">\n                </div> */}\n                <div className=\"App\">\n        <div className=\"App__header\">\n          {!isCartOpen &&\n            <div className=\"App__view-cart-wrapper\">\n              <button className=\"App__view-cart\" onClick={()=> setIsCartOpen(true)}>Cart</button>\n            </div>\n          }\n          <div className=\"App__title\">\n            {/* <h1>{shop.name}</h1> */}\n            <img className=\"logo-header\" src={Logo} alt=\"The Smoke Show logo\"/>\n            <h2>{shop.description}</h2>\n          </div>\n        </div>\n        <div className=\"spacer-4rem\"></div>\n        <Products\n          products={products}\n          client={client}\n          addVariantToCart={addVariantToCart}\n        />\n        <Cart\n          checkout={checkout}\n          isCartOpen={isCartOpen}\n          handleCartClose={handleCartClose}\n          updateQuantityInCart={updateQuantityInCart}\n          removeLineItemInCart={removeLineItemInCart}\n        />\n      </div>\n            </div>\n        </Layout>\n    )\n}\n\nexport default Swagg","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Influencer/BioPage.js",["366","367","368"],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Fan/BioPage.js",["369","370","371","372","373"],"import React, { useState, useEffect } from 'react'\nimport {Helmet} from \"react-helmet\"\nimport * as Realm from \"realm-web\"\nimport Layout from '../Layout/Layout'\n\nimport noImg from '../../assets/global/no_image.jpg'\nimport bioPic from '../../assets/temp-photos/bio/avator-male.jpg'\nimport editIcon from '../../assets/global/edit-icon.svg'\nimport settingsIcon from '../../assets/global/Settings-icon-white.svg'\nimport SettingModal from './SettingModal'\nimport { Button, Row, Col, Form } from 'react-bootstrap'\nimport './biopage.scss'\nimport { connect } from 'react-redux'\nimport VehicleCard from './vehicleCard'\nimport CreateNewCar from './CreateNewCar'\nimport jwt from 'jsonwebtoken'\nimport moment from 'moment'\n// import axios from 'axios'\n\nconst BioPage = (props) =>{\n\n    // let userIdParam = props.match.params.id\n    const [userIdParam, setUserIdParam] = useState(props.match.params.id)\n    const [profileUser, setProfileUser] = useState({fname: '', lname: '', profilePic: '', profileCover: '', username: '', profileDesc: '', favSong: '', favArtist: ''})\n    const [allowEdit, setAllowEdit] = useState(false)\n    const [editMode, setEditMode] = useState({about: false, song: false, artist: false})\n    const [showSetting, setShowSetting] = useState(false);\n    const [userCars, setUserCars] = useState([])\n    const [showAddCar, setShowAddCar] = useState(false)\n    const [numOfComments, setNumComments] = useState(null)\n    const altData = {uername: 'No username yet', userId: '', profileDesc: 'No description yet.', myCars: [] }\n    const [formattedTime, setFormattedTime] = useState(null)\n    const altCarData = {name: 'No data yet', upgrades: 'No data yet', color: 'No data yet', wheels: 'No data yet', performance: 'No data yet', category: 'Dream car', imgUlr: noImg, favSong: 'Nodata yet', favArtist: 'No data yet'}\n    const appConfig = {\n        id: process.env.REACT_APP_REALM_APP_ID,\n        // timeout: 10000, \n        // timeout in number of milliseconds\n      };\n    const app = new Realm.App(appConfig);\n    \n    const handleCloseAddCarModal = () => setShowAddCar(false)\n    const handleShowAddCarModal = () => setShowAddCar(true)\n\n    const handleChangeProfile = (e) =>{\n        setProfileUser({\n            ...profileUser,\n            [e.target.name]: e.target.value\n        })\n    }\n    const handleShowSetting = () =>{\n        const token = sessionStorage.getItem('session_token')\n        jwt.verify(token, process.env.REACT_APP_JWT_SECRET, function(err, decoded) {\n            if (err) {\n                console.log('err', err)\n                \n            }else{\n                setProfileUser({\n                    ...profileUser,\n                    email: decoded.userData.email\n                })\n                setShowSetting(true)\n            }\n          });\n        \n    }\n    \n    const handleCloseSetting = () =>{\n        setShowSetting(false)\n    }\n    const userLoggedIn = (id) =>{\n        \n        if(id === profileUser.userId){\n            console.log('working?', id)\n            setAllowEdit(true)\n            // regainData()\n        }\n    }\n    const userLoggedOut = (id) =>{\n        if(id === userIdParam){\n            setAllowEdit(false)\n        }\n    }\n    const updateProfileData = (data, key)=>{\n\n        setProfileUser({\n            ...profileUser,\n            [key]: data\n        })\n    }\n    const updateUserDetails = (fname, lname, username) =>{\n        setProfileUser({\n            ...profileUser,\n            fname: fname,\n            lname: lname,\n            username: username\n        })\n    }\n    const updateCarData = (data) =>{\n        setUserCars(prevArray => [...prevArray, data])\n    }\n   \n    const handleDataUpdate = async (e) =>{\n        e.preventDefault()\n  \n        if(app.currentUser.id === profileUser.userId){\n            const mongodb = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n            const mongoCollection = mongodb.db(process.env.REACT_APP_REALM_DB_NAME).collection(\"users\")\n    \n            try{\n                await mongoCollection.updateOne(\n                    { \"userId\": app.currentUser.id},\n                    {\n                        \"$set\": {\n                            \"profileDesc\": profileUser.profileDesc,\n                            \"favSong\": profileUser.favSong,\n                            \"favArtist\": profileUser.favArtist\n                          }\n                    }\n                ).then(res =>{\n                    console.log('res', res)\n                })\n            }catch(err){\n                console.log(err)\n            }\n            setEditMode({...editMode, about: false, song: false, artist: false})\n        }\n        \n    }\n    const editAbout = ()=>{\n        return(\n            <Form>\n                <Form.Group >\n                    <Form.Label>Edit</Form.Label>\n                    <Form.Control as=\"textarea\" rows={3} name=\"profileDesc\" value={profileUser.profileDesc && profileUser.profileDesc } onChange={handleChangeProfile} />\n                </Form.Group>\n                <div className=\"bio-edit-btn-wrapper\">\n                    <Button variant=\"primary\" type=\"submit\" onClick={handleDataUpdate} className=\"bio-edit-btn\">\n                        Submit\n                    </Button>\n                </div>\n                \n            </Form>\n        )\n    }\n    const editSong = ()=>{\n        return(\n            <Form>\n                <Form.Group >\n                    <Form.Label>Edit</Form.Label>\n                    <Form.Control as=\"textarea\" rows={3} name=\"favSong\" value={profileUser.favSong && profileUser.favSong } onChange={handleChangeProfile} />\n                </Form.Group>\n                <div className=\"bio-edit-btn-wrapper\">\n                    <Button variant=\"primary\" type=\"submit\" onClick={handleDataUpdate} className=\"bio-edit-btn\">\n                        Submit\n                    </Button>\n                </div>\n                \n            </Form>\n        )\n    }\n    const editArtist = ()=>{\n        return(\n            <Form>\n                <Form.Group >\n                    <Form.Label>Edit</Form.Label>\n                    <Form.Control as=\"textarea\" rows={3} name=\"favArtist\" value={profileUser.favArtist && profileUser.favArtist } onChange={handleChangeProfile} />\n                </Form.Group>\n                <div className=\"bio-edit-btn-wrapper\">\n                    <Button variant=\"primary\" type=\"submit\" onClick={handleDataUpdate} className=\"bio-edit-btn\">\n                        Submit\n                    </Button>\n                </div>\n                \n            </Form>\n        )\n    }\n\n    const getData = async (credentials) =>{\n        try{\n            await app.logIn(credentials).then(async logInUser =>{\n                const mongo = logInUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n                const mongoCollectionUser = mongo.db(\"smoke-show\").collection(\"users\")\n                const filter = {userId: userIdParam}\n                try{\n                    await mongoCollectionUser.findOne(filter).then(user =>{\n                            setProfileUser(user)\n                            console.log(profileUser.joined)\n                            if(user.joined){\n                                const formatted = moment(user.joined).local().format('MMMM Do YYYY')\n                                setFormattedTime(formatted)\n                            }else{\n                                setFormattedTime('No data')\n                            }\n                            \n                            getTotalComments(mongo)\n                            getMyCars(mongo)\n                            return user\n                    }).then(user =>{\n                        if( userIdParam === logInUser.id){\n                            setAllowEdit(true)\n                        }else{\n                            setAllowEdit(false)\n                        }\n                    })\n                }catch(err){\n                    console.log(err)\n                }\n            })\n        }catch(err){\n            console.log(err)\n        }\n    }\n    \n    const getTotalComments = async (mongo) =>{\n        \n        const mongoCollectionComments = mongo.db(\"smoke-show\").collection(\"comments\")\n        \n        const filter = {userId: userIdParam}\n        await mongoCollectionComments.find(filter).then(res =>{\n            // setProfileUser({...profileUser, totalComments: res.length})\n            setNumComments(res.length)\n        })\n    }\n    const getMyCars = async (mongo) =>{\n        const mongoCollection = mongo.db(\"smoke-show\").collection(\"my-cars\")\n        // console.log('param', userIdParam)\n        const filter = {userId: props.match.params.id}\n        try {\n            await mongoCollection.find(filter).then( cars =>{\n                    setUserCars(cars)\n            \n            })\n        } catch (error) {\n            console.log(error)\n        }\n        \n    }\n    const loginCheck = () =>{\n        const tokenUser = sessionStorage.getItem('session_user')\n        let cre;\n        if(tokenUser){\n            jwt.verify(tokenUser, process.env.REACT_APP_JWT_SECRET, function(err, decoded) {\n                if (err) {\n                    // timeout\n\n                    const credentials = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTH_PUBLIC_VIEW)\n                    cre = credentials\n                }else{\n                    cre = decoded.cre\n                }\n              });\n            \n        }else{\n            const credentials = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTH_PUBLIC_VIEW)\n            cre = credentials\n        }\n        return cre\n    }\n    useEffect(() => {\n        if(props.isLoggedIn){\n       \n            if(props.customData.userId === props.match.params.id){\n                setAllowEdit(true)\n            }else{\n                setAllowEdit(false)\n            }\n        }else{\n            setAllowEdit(false)\n\n        }\n    }, [props.isLoggedIn])\n\n    useEffect(() => {\n        const id = props.profilepageid\n        setUserIdParam(id)\n        \n    }, [props.profilepageid])\n    useEffect(() => {\n        if(props.profilepageid){\n            const credentials = loginCheck()\n            getData(credentials)\n        }\n    }, [userIdParam])\n    useEffect(() => {\n        const credentials = loginCheck()\n        getData(credentials)\n    }, [])\n\n    return(\n        <Layout userLoggedIn={userLoggedIn} userLoggedOut={userLoggedOut} >\n        <Helmet>\n            <meta charSet=\"utf-8\" />\n            <title>User profile page | The Smoke Show</title>\n            <meta name=\"description\" content=\"Place the meta description text here.\" />\n            {/* <link rel=\"canonical\" href=\"http://mysite.com/example\" /> */}\n        </Helmet>\n        {showAddCar && <CreateNewCar show={showAddCar} handleClose={handleCloseAddCarModal} profileUser={profileUser} updateProfileData={updateProfileData} updateCarData={updateCarData} getMyCars={getMyCars} />}\n            {showSetting && <SettingModal show={showSetting} handleShowSetting={handleShowSetting} handleCloseSetting={handleCloseSetting} profileUser={profileUser}  updateProfileData={updateProfileData} updateUserDetails={updateUserDetails}/>}\n            <div className=\"main-wrapper\">\n                <div className=\"spacer-4rem\"></div>\n                <h2 className=\"title\">User Profile</h2>\n                <div className=\"bio-fleet-img\">\n                    <img\n                    // sizes=\"(max-width: 1500px) 100vw, 1500px\"\n                    // srcset={`\n                    // ${bioImgXs} 375w,\n                    // ${bioImgS} 752w,\n                    // ${bioImgM} 1040w,\n                    // ${bioImgL} 1280w,\n                    // ${bioImgXL} 1500w\n                    // `}\n                    src={ typeof(profileUser.profileCover) == 'undefined' || profileUser.profileCover == null ?  noImg : profileUser.profileCover }\n                    alt=\"user selected profile image\"\n                     />\n                </div>\n                <div className=\"bio-content-wrapper\">\n                    <div className=\"bio-main-wrapper\">\n                        <div className=\"bio-pic\">\n                            <img src={profileUser.profilePic ? profileUser.profilePic : bioPic} alt=\"the user profile picture\" />\n                          \n                        </div>\n                        \n                        <div className=\"bio-title-text\">\n                            <h3 className=\"bio-name-title\">{profileUser.fname && profileUser.fname} {profileUser.lname && profileUser.lname}</h3>\n                            <p>{profileUser.title}</p>\n                        </div>\n                        {allowEdit && \n                            <Button className=\"bio-setting-btn\" onClick={handleShowSetting}>\n                                <img src={settingsIcon} alt=\"setting\" className=\"setting-icon\"/>\n                                Settings\n                            </Button>\n                        }\n                        \n                    </div>\n           \n                    <Row className=\"bio-height-adj\">\n                        <Col sm={4}>\n                            <div className=\"bio-container box-shadow-white\">\n                                <p className=\"bio-about no-m-b\"><strong>About: {` ${profileUser.fname} ${profileUser.lname}`}</strong></p>\n                                <div className=\"\">\n                                    <p className=\"bio-content bio-border\">\n                                        {editMode.about ? editAbout()\n                                        : [\n                                            (profileUser.profileDesc \n                                                ? <p >{profileUser.profileDesc}</p>\n                                                : <p>{altData.profileDesc}</p>\n                                            )\n                                            ]\n                                        }\n                                    { !editMode.about && <br/> }\n                                    <div className=\"edit-icon-wrapper\" onClick={()=>{setEditMode({...editMode, about: true})}}>\n                                        {editMode.about ? '' : [\n                                            (allowEdit && <img className=\"edit-icon\" src={editIcon} alt=\"Edit about you\"/>)\n                                        ]}\n                                    </div>\n                                    </p>\n                                </div>\n                                \n                                <Row className=\"bio-border pt-pb-15 bio-row-adj\">\n                                    <Col sm={4}>\n                                        <p className=\"no-m-b\">Joined:</p>\n                                    </Col>\n                                    <Col sm={8}>\n                                        <p>{formattedTime ? formattedTime : 'No data'}</p>\n                                    </Col>\n                                </Row>\n                                <Row className=\"bio-border pt-pb-15 bio-row-adj\">\n                                    <Col sm={4}>\n                                        <p className=\"no-m-b\">Total Comments:</p>\n                                    </Col>\n                                    <Col sm={8}>\n                                        <p className=\"no-m-b\">{numOfComments && numOfComments} comments</p>\n                                    </Col>\n                                </Row>\n                                <Row className=\"bio-border pt-pb-15 bio-row-adj\">\n                                    <Col sm={4}>\n                                        <p className=\"no-m-b\">Fans of:</p>\n                                    </Col>\n                                    <Col sm={8}>\n                                        <p className=\"no-m-b\">\n                                            { profileUser.fansOf &&\n                                                profileUser.fansOf.map((name, i) =>{\n                                                    return <span>{i > 0 && ', '}{name.username}</span>\n                                                })\n                                            }\n                                        </p>\n                                    </Col>\n                                </Row>\n                                <Row className=\"pt-pb-15 bio-row-adj\"> \n                                    <Col sm={4}>\n                                        <p className=\"no-m-b\">Favorite Driving Song:</p>\n                                    </Col>\n                                    <Col sm={8}>\n                                        {editMode.song ? editSong()\n                                        : [\n                                            (profileUser.favSong \n                                                ? <p className=\"no-m-b\">{profileUser.favSong}</p>\n                                                : <p className=\"no-m-b\">{altData.favSong}</p>\n                                            )\n                                            ]\n                                        }\n                                        <div className=\"edit-icon-wrapper\" onClick={()=>{setEditMode({...editMode, song: true})}}>\n                                        {editMode.song ? '' : [\n                                            (allowEdit && <img className=\"edit-icon\" src={editIcon} alt=\"Edit your favourite songs\"/>)\n                                        ]}\n                                    </div>\n                                    </Col>\n                                </Row>\n                                <Row className=\"pt-pb-15 bio-row-adj\"> \n                                    <Col sm={4}>\n                                        <p className=\"no-m-b\">Favorite Artist:</p>\n                                    </Col>\n                                    <Col sm={8}>\n                                    {editMode.artist ? editArtist()\n                                        : [\n                                            (profileUser.favArtist \n                                                ? <p className=\"no-m-b\">{profileUser.favArtist}</p>\n                                                : <p className=\"no-m-b\">{altData.favArtist}</p>\n                                            )\n                                            ]\n                                        }\n                                        <div className=\"edit-icon-wrapper\" onClick={()=>{setEditMode({...editMode, artist: true})}}>\n                                        {editMode.artist ? '' : [\n                                            (allowEdit && <img className=\"edit-icon\" src={editIcon} alt=\"Edit your favourite artists\"/>)\n                                        ]}\n                                    </div>\n                                    </Col>\n                                </Row>\n                            </div>\n                        </Col>\n                        <Col sm={8} className=\"pl-0-pc\">\n                        { userCars !== undefined ?\n                            userCars.map( car =>{\n                               return (\n                                <React.Fragment>\n                                    <VehicleCard car={car} allowEdit={allowEdit} profileUser={profileUser} getMyCars={getMyCars} />\n                                    <div className=\"spacer-2rem\"></div>\n                                </React.Fragment>\n                               )\n                            }) :\n                            <React.Fragment>\n                                <VehicleCard car={altCarData} allowEdit={allowEdit} />\n                                <div className=\"spacer-2rem\"></div>\n                            </React.Fragment>\n                        }\n\n                            <div className=\"spacer-2rem\"></div>\n                            { allowEdit && \n                                <div style={{padding: '0 6px'}}>\n                                    <Button className=\"btn-add-car\" onClick={handleShowAddCarModal}>Add my car</Button>\n                                </div>\n                            }\n                            <div className=\"spacer-2rem\"></div>\n                       \n                        </Col>\n                        \n                    </Row>\n                    \n                </div>\n                \n            </div>\n        </Layout>\n    )\n}\nconst mapStateToProps = (state) =>{\n    return{\n        isLoggedIn: state.auth.isLoggedIn,\n        customData: state.auth.customData,\n        profilepageid: state.user.profilepageid\n    }\n}\nexport default connect(mapStateToProps)(BioPage)","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/CarSearch.js",["374","375","376","377","378","379"],"import React, { Fragment, useState, useEffect  } from 'react'\nimport { Dropdown, DropdownButton, Button } from 'react-bootstrap'\nimport Layout from './Layout/Layout'\nimport * as Realm from \"realm-web\"\nimport { carsAllYear } from './carTempData'\nimport './carStats.scss'\nimport { v4 as uuidv4 } from 'uuid'\nimport jwt from 'jsonwebtoken'\n// import MediaNet from '../components/MediaNet'\n\nconst CarSearch = (props) =>{\n    const [modelName, setModelName] = useState([])\n    const [selectedCar, setSelectedCar] = useState({make: \"Select a maker\", model: \"Select a model\", type: \"Select a type\", year: \"Select a year\"})\n    const [carTypeArr, setCarTypeArr] = useState([])\n    const [carYearArr, setCarYearArr] = useState([])\n    const [mongo, setMongo] = useState()\n    const [cars, setCars] = useState([])\n    const [carsByModel, setCarsByModel] = useState([])\n    const [carsByYear, setCarsByYear] = useState([])\n    const [carResults, setCarResults] = useState([])\n    const appConfig = {\n        id: process.env.REACT_APP_REALM_APP_ID,\n        // timeout: 10000, \n      };\n    const app = new Realm.App(appConfig)\n    // const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n    // const [carMakers, setCarMakers] = useState([])\n    const searchId = uuidv4()\n\n\n    const getModel = async (e) =>{\n        setModelName([])\n        setSelectedCar({ make: e, model: \"Select a model\", type: \"Select a type\", year: \"Select a year\"})\n        // let carModelArr = []\n        const mongoCollection = mongo.db(\"smoke-show\").collection(\"cars\")\n        const makeLowerCase = e.toLowerCase()\n        const filter = {make: makeLowerCase} \n        try{\n            await mongoCollection.find(filter).then(cars =>{\n                // const carModelArr = [...new Set(availableTypes)]\n                let carModelArr = cars.map(car =>{\n                             return car.model\n                          })\n                const unique = [...new Set(carModelArr)]\n                  setModelName(unique.sort())\n                  setCars(cars)\n                  setCarResults(cars)\n              })\n        }catch(err){console.log(err)}\n        \n    }\n    const getCarYear = (data) =>{\n        let yearArr = []\n        data.map(car =>{\n            if(yearArr.includes(car.year) === false){\n                yearArr.push(car.year)\n            }\n        })\n        setCarYearArr(yearArr.sort())\n    }\n    const filterByModel = (e) =>{\n        \n        setSelectedCar({...selectedCar, model: e, type: \"Select a type\", year: \"Select a year\"})\n        let filteredByModel = cars.filter(function (car) {\n            if(car.model === e){\n                return car\n            }\n        });\n        // setCars(filteredByModel)\n        setCarsByModel(filteredByModel)\n        setCarResults(filteredByModel)\n        getCarYear(filteredByModel)\n        \n    }\n    const getModelNames = (data) =>{\n        \n        const regCarTypes = /Sedan|Coupe|SUV|Minivan|Wagon|Sport|Station Wagon|Hatchback|Truck/i\n        let availableTypes = data.map(car =>{\n          const result = car.name.match(regCarTypes) \n          if(result){\n              return result[0]\n              \n          }\n          \n        })\n        const finalResult = [...new Set(availableTypes)]\n        setCarTypeArr(finalResult.sort())\n\n    }\n    const filterByYear = (e) =>{\n        setSelectedCar({...selectedCar, year: e, type: \"Select a type\"})\n        let filteredByYear = carsByModel.filter((car) =>{\n            if(car.year == e){\n                return car\n            }\n        })\n        setCarsByYear(filteredByYear)\n        setCarResults(filteredByYear)\n        getModelNames(filteredByYear)\n    }\n\n    const filterByType = (e) =>{\n       \n        setSelectedCar({...selectedCar, type: e})\n        let filtered =  carsByYear.filter(car => car.name.includes(e))\n        setCarResults(filtered)\n    }\n   const goStatsPage = () =>{\n      \n       sessionStorage.setItem(searchId, carResults)\n       props.history.push({\n        pathname: `/car-stats/${searchId}`,\n        cars: carResults,\n        selected: selectedCar\n      })\n   }\n   const checkToken = async () =>{\n    // let token = sessionStorage.getItem('session_token')\n    const tokenUser = sessionStorage.getItem('session_user')\n    if(tokenUser){\n        jwt.verify(tokenUser, process.env.REACT_APP_JWT_SECRET, async (err, decoded)=>{\n            if(err){\n                console.log(err)\n                const credentials = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTH_PUBLIC_VIEW)\n                try{\n                    await app.logIn(credentials).then(  user =>{\n                        const mongoClient = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n                        setMongo(mongoClient)\n                    })\n                }catch(err){\n                    console.log(err)\n                }\n            }else{\n                // const credentials = jwt.verify(tokenUser, process.env.REACT_APP_JWT_SECRET)\n             \n                try{\n                    await app.logIn(decoded.cre).then( user =>{\n                        const mongoClient = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n                        setMongo(mongoClient)\n                    })\n                }catch(err){\n                    console.log(err)\n                }\n            }\n        });\n        \n     }else{\n        const credentials = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTH_PUBLIC_VIEW);\n        try{\n            await app.logIn(credentials).then(  user =>{\n                const mongoClient = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n                setMongo(mongoClient)\n            })\n        }catch(err){\n            console.log(err)\n        }\n     }\n   }\n   useEffect(() => {\n    checkToken()\n   }, [])\n    return(\n        <Layout>\n            <div className=\"spacer-4rem\"></div>\n            <div className=\"main-wrapper main-height\" style={{minHeight: 'calc(100vh - 21rem)'}}>\n            \n                <div className=\"search-wrapper\" >\n                    <div className=\"center-box\">\n                    {/* maker */}\n                    <DropdownButton id=\"dropdown-brand\" title={selectedCar.make} onSelect={getModel} className=\"custom-dropdown\">\n                        { carsAllYear && carsAllYear.map((maker, index) =>{\n                            const titleCase = maker.replace(/\\w\\S*/g, function(txt){return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();});\n                            return(\n                                <Fragment key={maker +index}>\n                                    <Dropdown.Item  eventKey={titleCase} >\n                                    <img src={require(`../assets/maker_logos/${titleCase}_Logo.png`).default} alt={titleCase} className=\"maker-img\"/>\n                                    {titleCase}\n                                    </Dropdown.Item>\n                                </Fragment>\n                            )\n                        })}\n                    </DropdownButton>\n                    </div>\n                    \n                    <div className=\"center-box\">\n                    {/* model */}\n                        <DropdownButton id=\"dropdown-year\" title={selectedCar.model} onSelect={filterByModel} className=\"dropdown-middle\">\n                            {modelName.map((model, index) =>{\n                                const titleCase = model.replace(/\\w\\S*/g, function(txt){return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();})\n                                return(\n                                    <Fragment key={model +index}>\n                                        <Dropdown.Item eventKey={model} >{titleCase}</Dropdown.Item>\n                                    </Fragment>\n                                )\n                            })}\n                        </DropdownButton>\n                    </div>\n                    <div className=\"center-box\">\n                    {/* year */}\n                        <DropdownButton id=\"dropdown-model\" title={selectedCar.year} onSelect={filterByYear}>\n                            {carYearArr.map(year =>{\n                                const uuid = uuidv4()\n                                return(\n                                    <Fragment key={uuid} >\n                                        <Dropdown.Item eventKey={year} >{year}</Dropdown.Item>\n                                    </Fragment>\n                                )\n                            })}\n                        </DropdownButton>\n                    </div>\n                    <div className=\"center-box\">\n                        <DropdownButton id=\"dropdown-type\" title={selectedCar.type} onSelect={filterByType} >\n                            { carTypeArr && carTypeArr.map((type, index) =>{\n                                return(\n                                    <Fragment key={type +index}>\n                                        <Dropdown.Item eventKey={type} >{type}</Dropdown.Item>\n                                    </Fragment>\n                                )\n                                \n                                \n                            })}\n                        </DropdownButton>\n                    </div>\n                    \n                    <div className=\"center-box\">\n                        <Button className=\"search-btn\" onClick={goStatsPage}>Search</Button>\n                    </div>\n                    \n                </div>\n\n                {/* <div className=\"ad-on-search\">\n            \n                </div> */}\n            </div>\n            \n        </Layout>\n    )\n}\n\nexport default CarSearch","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Giveaways.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/store/reducers/authReducer.js",["380"],"const initState = {\n    credentials: {},\n    loginUserData: {},\n    isLoggedIn: false,\n    customData: {},\n    hasLoginErr: false,\n    mongo: null,\n    isPublicView: false,\n    openmodal: false,\n    modalMsg: '',\n    errMsg: '',\n    swapSignup: ''\n}\n\nconst authReducer = (state = initState, action) =>{\n    \n    switch(action.type){\n        case 'AUTH_USER':\n            return {\n                ...state,\n                credentials: action.userData.credentials,\n                loginUserData: action.userData.loginUserData\n            }\n        \n        case 'LOGIN_SUCCESS':\n            return{\n                ...state,\n                customData: action.customData,\n                isLoggedIn: true,\n                openmodal: false\n            }\n        case 'LOGIN_FAIL':\n            return{\n                ...state,\n                isLoggedIn: false,\n                hasLoginErr: true,\n                errMsg: action.msg\n            }\n        case 'LOGOUT':\n            return{\n                ...state,\n                isLoggedIn: false,\n                customData: {}\n            }\n        case 'LOGIN_CHECK':\n            return{\n                ...state,\n                mongo: action.mongo\n            }\n        case 'LOGIN_PUBLIC':\n            return{\n                ...state,\n                isLoggedIn: false,\n                isPublicView: true\n            }\n        case 'LOGIN_CURRENT':\n            return{\n                // isLoggedIn: false,\n                ...state,\n                mongo: action.mongo\n            }\n        case 'LOGIN_UPDATE':\n            return{\n                ...state,\n                customData: action.customData,\n                isLoggedIn: true\n            }\n        case 'OPEN_LOGIN_MODAL':\n            return {\n                ...state,\n                openmodal: action.state\n            }\n        case 'SWAP_SIGNUP':\n            return{\n                ...state,\n                openmodal: true,\n                swapSignup: 'signup'\n            }\n        case 'SWAP_LOGIN':\n            return{\n                ...state,\n                swapSignup: ''\n            }\n        case 'ATTACH_MSG':\n            return{\n                ...state,\n                modalMsg: action.msg\n            }\n        // default: return state\n    }\nreturn state\n}\n\nexport default authReducer","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/store/reducers/userReducer.js",["381"],"const initState = {\n  profilepageid: '',\n}\n\nconst userReducer = (state = initState, action) =>{\n    switch(action.type){\n\n        case 'UPDATE_PROFILEPAGE': \n        console.log('reducer', action.userId)\n            return {\n                ...state,\n                profilepageid: action.userId\n            }\n        // default:\n        //     console.log('error', action)\n    }\n    return state\n}\n\nexport default userReducer","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/commentsTempData.js",[],["382","383"],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/carTempData.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Comments.js",["384","385","386","387","388"],"import React, { useState, useEffect } from 'react'\nimport { Row, Button, Form, Accordion, Card } from 'react-bootstrap'\nimport Avatar from 'react-avatar'\nimport { connect } from 'react-redux'\nimport * as Realm from \"realm-web\"\nimport { Link } from 'react-router-dom'\n// import { authUser } from '../store/actions/authActions'\nimport moment from 'moment'\nimport jwt from 'jsonwebtoken'\nimport { openLoginModal, attachMsg } from '../store/actions/authActions'\nimport './comments.scss'\n// import VisibilitySensor from 'react-visibility-sensor'\nimport short from 'short-uuid'\n\nconst Comments = (props) =>{\n    const [commentsDB, setCommentsDB] = useState([])\n    const [moreComments, setMoreComments] = useState([])\n    const [isComment, setIsComment] = useState(false)\n    // const [visibleOn, setVisibleOn] = useState(false)\n    const [userComment, setUserComment] = useState(\"\")\n    const app = new Realm.App({ id: process.env.REACT_APP_REALM_APP_ID })\n    // const getApp = Realm.App.getApp(process.env.REACT_APP_REALM_APP_ID);\n    // const onChange = (isVisible)=>{\n    //     if(isVisible){\n    //         setVisibleOn(true)\n    //     }\n    // }\n    const handleChange = (e) =>{\n        setUserComment(e.target.value)\n    }\n    const handleSubmitComment = async (e) =>{\n        e.preventDefault()\n        let tokenSessionStorage= sessionStorage.getItem('session_token')\n        const tokenUser = sessionStorage.getItem('session_user')\n        let newComment ={}\n        let credentials = null\n        \n        if(tokenSessionStorage){\n            jwt.verify(tokenSessionStorage, process.env.REACT_APP_JWT_SECRET, (err, decoded)=>{\n                if(err){\n                    console.log('please log in. session time out')\n                }else{\n                    let profileThumb;\n                    if(typeof(decoded.userData.profileThumb) !== 'undefined'){\n                        profileThumb = decoded.userData.profileThumb\n                    }else{\n                        profileThumb = null\n                    }\n                    newComment={\n                        userId: decoded.userData.userId,\n                        comment: userComment,\n                        date_posted: new Date().getTime(),\n                        videoId: props.videoId,\n                        username: decoded.userData.fname,\n                        profileThumb: profileThumb\n                    }\n                    credentials = jwt.verify(tokenUser, process.env.REACT_APP_JWT_SECRET)\n                }\n            })\n        }\n        try{\n            // Authenticate the user\n            await app.logIn(credentials.cre).then(async user=>{\n                \n                    const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME);\n                    const mongoCollection = mongo.db(\"smoke-show\").collection(\"comments\");\n\n                    await mongoCollection.insertOne(newComment).then(res =>{\n                            e.target.reset();\n                            getComments(credentials.cre)\n                    })\n                });\n\n        }catch(error){\n            console.log('error', error)\n\n        }\n   \n    }\n    const writeComment = () =>{\n        return (\n        <Row className=\"comment-wrapper\">\n            <div className=\"col-1\" style={{margin:0,padding:0}}>\n\n                <Avatar color={Avatar.getRandomColor('sitebase', ['red', 'green', 'teal'])} className=\"profile-pic\" name=\"saki\" />\n            </div>\n            <div className=\"col-11\" style={{margin: 0, paddingRight:0}}>\n                <Form onSubmit={handleSubmitComment} >\n                    <Form.Group >\n                    <Form.Control className=\"comment-input\" type=\"text\" placeholder=\"Add a comment here\" name=\"comment\" onChange={handleChange} required/>\n                        <div className=\"comment-login-wrapper\">\n                            <Button className=\"comment-btn\" type=\"submit\"> Comment</Button>\n                        </div>\n                    </Form.Group>\n                </Form>\n            </div>\n        </Row>\n        )\n        \n    }\n        \n    const askLogin = () =>{\n        props.openLoginModal(true)\n        props.attachMsg('Please login to comment.')\n    }\n    const loginToComment = () => {\n        return (\n            <Row className=\"comment-wrapper\">\n                <div className=\"col-1\" style={{margin:0,padding:0}}>\n\n                <Avatar color={Avatar.getRandomColor('sitebase', ['red', 'green', 'teal'])} className=\"profile-pic\" name=\"\" />\n                </div>\n                 <div className=\"col-11\" style={{margin: 0, paddingRight:0}}>\n                    <Form onSubmit={handleSubmitComment} >\n                        <Form.Group >\n                        <Form.Control className=\"comment-input\" type=\"text\" placeholder=\"Write a comment\" name=\"comment\" onChange={askLogin} />\n                            <div className=\"comment-login-wrapper\">\n                                <Button \n                                disabled\n                                className=\"comment-btn\" type=\"submit\">Comment</Button>\n                            </div>\n                        </Form.Group>\n                    </Form>\n                </div>\n            </Row>\n           \n        )\n       \n    }\n    const chunkArray = (allComments) =>{\n        let all = allComments.slice(2)\n        let chunk_size = 10\n        let index = 0;\n        let arrayLength = all.length;\n        let tempArray = [];\n        let myChunk\n        \n        for (index = 0; index < arrayLength; index += chunk_size) {\n            myChunk = all.slice(index, index+chunk_size);\n            // Do something if you want with the group\n            tempArray.push(myChunk);\n        }\n\n        return tempArray;\n    }\n\n    const getComments = async (credentials) =>{\n        const filter = {videoId: props.videoId} \n        const options = {sort: {date_posted: -1}, limit: 12}\n        setCommentsDB([])\n\n        try{\n            await app.logIn(credentials).then(async user =>{\n                if(user.id === app.currentUser.id){\n                }else{\n                    console.log('current user and logged in user do not match')\n                }\n                const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n                const collectionComments = mongo.db(\"smoke-show\").collection(\"comments\")\n                // const collectionUsers = mongo.db(\"smoke-show\").collection(\"users\")\n                await collectionComments.find(filter, options).then(async resAll =>{\n                    if( resAll.length !== 0){\n                        // let picAttached = resAll.map(async res =>{\n                        //     const filterUser = {userId: res.userId}\n                        //     try {\n                        //         await collectionUsers.findOne(filterUser).then(user =>{\n                        //             res.profilePic = user.profilePic\n                        //         })\n                        //     } catch (error) {\n                        //         console.log(error)\n                        //     }\n                        //     return res\n                        // })\n                        \n                        // const finalResults = await Promise.all(picAttached);\n                        setIsComment(true)\n                         if(resAll.length == 1){\n                            setCommentsDB(resAll)\n                         }else if(resAll.length == 2){\n                            for(let i=0;i<2; i++){\n                                setCommentsDB(commentsDB=>[...commentsDB, resAll[i]])\n                            }\n                        }else if(resAll.length >= 3){\n                            const chunked = chunkArray(resAll)\n                            setMoreComments(chunked)\n                        }\n                    }else if(resAll.length == 0){\n                        setIsComment(false)\n                        setCommentsDB([])\n                    }\n                    \n                })\n            })\n                \n            }catch(err){console.log(err)}\n    }\n\n\n    useEffect( () => {\n        \n        const tokenUser = sessionStorage.getItem('session_user')\n         if(tokenUser){\n            jwt.verify(tokenUser, process.env.REACT_APP_JWT_SECRET, (err, decoded)=>{\n                if(err){\n                    // setIsLoggedIn(false)\n                    const credentials = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTH_PUBLIC_VIEW);\n                    getComments(credentials)\n                }else{\n\n                    getComments(decoded.cre)\n                }\n            });\n            \n         }else{\n            // setIsLoggedIn(false)\n            const credentials = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTH_PUBLIC_VIEW);\n                    getComments(credentials)\n         }\n    }, [])\n    return(\n        <React.Fragment>\n    \n        {props.isLoggedIn ? writeComment() : loginToComment() }\n        { isComment === true && commentsDB.length !== 0 ? commentsDB.map((comment, index) =>{\n            const unique = short.generate()\n            {/* var localtime = moment(comment.date_posted).local().format('MM-DD-YYYY') */}\n            let localtime = moment(comment.date_posted).fromNow()\n            let isPicSet;\n            if(comment.profileThumb === 'https://s3.amazonaws.com/smokeshow.users/default/avator-thumb.jpg'){\n                isPicSet = false\n            }else{\n                isPicSet = true\n            }\n            return(\n                <Row className=\"comment-wrapper\" key={unique}>\n                    {/* <VisibilitySensor onChange={onChange}> */}\n                    <div style={{margin:0,padding:0}} className=\"col-1\">\n                        <Link to={{\n                            pathname: `/user/${comment.userId}`\n                        }}>\n\n                            {isPicSet ? \n                                 <img src={`https://s3.amazonaws.com/smokeshow.users/${comment.userId}/profile/thumbnail`} className=\"profile-pic \" alt={comment.username} loading=\"lazy\" /> \n                               \n                             :\n                                <Avatar className=\"profile-pic\" name={comment.username} color=\"#6E4DD5\"/> \n                            }\n                        \n                        </Link>\n                    </div>\n                    {/* </VisibilitySensor> */}\n                    <div  style={{margin: 0, paddingRight:0}} className=\"col-11\">\n                    <div className=\"comment-username \">\n                        <Link to={{\n                            pathname: `/user/${comment.userId}`\n                        }}>\n                            <strong>{comment.username}</strong>\n                        </Link>\n                     {\" \"} | <span style={{color:'gray'}}>{localtime}</span></div>\n                    <div className=\"comment-txt\" >{comment.comment}</div>\n                    </div>\n                </Row>\n            )\n        }) : ''\n        }\n        <Accordion defaultActiveKey=\"0\">\n         \n            <Card className=\"card-comments\">\n                <Card.Header className=\"card-comments-h\">\n                { moreComments[0] && \n                    <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"1\" className=\"btn-load\">\n                    Load more\n                    </Accordion.Toggle>\n                }\n                \n                </Card.Header>\n                <Accordion.Collapse eventKey=\"1\">\n                <Card.Body className=\"collapsed-body\">\n                { moreComments[0] == null && <p>No more comment</p>}\n                {moreComments[0] && moreComments[0].map((comment, index) =>{\n                    const unique = short.generate()\n                    let localtime = moment(comment.date_posted).fromNow()\n                    return(\n                        <Row className=\"comment-wrapper\" key={unique}>\n\n                            <div style={{margin:0,padding:0}} className=\"col-1\">\n                                <Link to={{\n                                    pathname: `/user/${comment.userId}`\n                                }}>\n                                    {comment.profile_pic ? <img src={comment.profile_pic} className=\"profile-pic \" alt={comment.username} loading=\"lazy\" /> :\n                                    <Avatar className=\"profile-pic\" name={comment.username} color=\"#6E4DD5\"/>\n                                    }\n                                </Link>\n                            </div>\n                            \n                            <div  style={{margin: 0, paddingRight:0}} className=\"col-11\">\n                            <div className=\"comment-username \">\n                                <Link to={{\n                                    pathname: `/user/${comment.userId}`\n                                }}>\n                                    <strong>{comment.username}</strong>\n                                </Link>\n                            {\" \"} | <span style={{color:'gray'}}>{localtime}</span></div>\n                            <div className=\"comment-txt\" >{comment.comment}</div>\n                            </div>\n                        </Row>\n                    )\n                })}\n                </Card.Body>\n                </Accordion.Collapse>\n            </Card>\n        </Accordion>\n        </React.Fragment>\n        \n        \n    )\n}\nconst mapDispatchToProps = (dispatch)=>{\n    return{\n        openLoginModal: (state) => dispatch(openLoginModal(state)),\n        attachMsg: (msg)=> dispatch(attachMsg(msg))\n    }\n}\nconst mapStateToProps = (state) => {\n    //syntax is propName: state.key of combineReducer.key\n    return{\n        loginUserData: state.auth.loginUserData,\n        isLoggedIn: state.auth.isLoggedIn,\n        customData: state.auth.customData\n    }\n  }\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Comments)","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Layout/Layout.js",["389","390","391","392"],"import React, { useState, useEffect  } from 'react'\nimport Header from './Header'\nimport Footer from './Footer'\nimport { withRouter } from \"react-router\"\nimport { connect } from 'react-redux'\nimport jwt from 'jsonwebtoken'\nimport { updateLogin, logInAsPublic } from '../../store/actions/authActions'\nconst HeaderWithRouter = withRouter(Header);\n\nconst Layout = (props) =>{\n    const [modalShow, setModalShow] = useState(false)\n    const [user, setUser] = useState(false)\n    const [username, setUsername] = useState('')\n    const [userId, setUserId] = useState('')\n    \n\n    // const handleModal = () =>{\n    //     console.log('modal state', props.openmodal)\n    //     setModalShow(props.openmodal)\n    // }\n    const changeUserState = (id) =>{\n        setUser(false)\n        if(props.userLoggedOut){\n            props.userLoggedOut(id)\n        }\n        \n    }\n    const funcSetUsername = (name) =>{\n        setUsername(name)\n    }\n\n    useEffect(() => {\n        const tokenUser = sessionStorage.getItem('session_user')\n        jwt.verify(tokenUser, process.env.REACT_APP_JWT_SECRET, async (err, decoded)=>{\n            if(err){\n                \n                props.logInAsPublic()\n            }else{\n                props.updateLogin(decoded.cre)\n            }\n        })\n    }, [])\n\n    \n   \n\n    return(\n        <div>\n            <HeaderWithRouter  user={user} username={username} changeUserState={changeUserState} funcSetUsername={funcSetUsername}  userLoggedOut={props.userLoggedOut} userId={userId} />\n    \n                { props.children }\n            <Footer />\n        </div>\n\n    )\n}\n\nconst mapStateToProps = (state) =>{\n    // console.log('redux', state)\n    return{\n        // openmodal: state.user.openmodal\n    }\n}\nconst mapDispatchToProps = (dispatch) =>{\n    return{\n        logInAsPublic: ()=>dispatch(logInAsPublic()),\n        updateLogin: (credentials)=>dispatch(updateLogin(credentials))\n        // modalShowHide: (state) =>dispatch(modalShowHide(state))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Layout)","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/giveAwayData.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/utils/youtubeAPI.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Fan/vehicleCard.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Fan/CreateNewCar.js",["393"],"import React, { useState, Fragment } from 'react'\nimport { Row, Col, Modal, Button, Form } from 'react-bootstrap'\nimport * as Realm from \"realm-web\"\nimport ImageUpload from './ImageUpload'\nimport jwt from 'jsonwebtoken'\nimport short from 'short-uuid'\nimport { createMyCar } from '../../store/actions/bioActions'\nimport { connect } from 'react-redux'\n\nconst CreateNewCar = (props) =>{\n    const bucketName = process.env.REACT_APP_AWS_BUCKET_NAME;\n    const [imgFile, setImgFile] = useState('')\n    const [imgData64, setImgData64] = useState('')\n    const appConfig = {\n        id: process.env.REACT_APP_REALM_APP_ID,\n        timeout: 10000, // timeout in number of milliseconds\n        };\n    const app = new Realm.App(appConfig)\n    const maxAgeTest = 1 * 60 * 60\n\n    const setImgData = (obj) =>{\n        setImgFile(obj)\n        var file = obj\n        const reader = new FileReader();\n        reader.onload = (event) => {\n        const base64 = event.target.result.split(\",\").pop()\n          setImgData64(base64)\n        //   console.log(base64);\n        };\n        reader.readAsDataURL(file);\n      }\n    const closeModal = () =>{\n        setNewCarObj({name: '', category: '', color: '', wheels: '', upgrades: ''})\n        props.handleClose()\n    }\n\n    \n    const carColors = ['White', 'Black', 'Grey', 'Blue', 'Silver', 'Red', 'Orange', 'Bronze', 'Yellow', 'Green', 'Navy']\n    const carCategories = ['Dream Car', 'Daily Driver', 'Vehicle #2']\n    const [newCarObj, setNewCarObj] = useState({name: '', category: 'Dream Car', color: 'White', wheels: '', upgrade: ''})\n\n    const handleChange = (e) =>{\n        setNewCarObj({\n            ...newCarObj,\n            [e.target.name]: e.target.value\n        })\n    }\n\n    const handleSubmit = async (e) =>{\n        e.preventDefault()\n        let baseImgUrl = `https://s3.amazonaws.com/${process.env.REACT_APP_AWS_BUCKET_NAME}/`\n        let imgId = short.generate()\n        let filekey = props.profileUser.userId + '/my-cars/' + imgId\n        let imgUrlWithKey;\n        if(imgData64){\n            filekey = props.profileUser.userId + '/my-cars/' + imgId\n            imgUrlWithKey = baseImgUrl + filekey\n        }else{\n            imgUrlWithKey = \"\"\n        }\n        const newCarData = {\n            name: newCarObj.name,\n            upgrades: newCarObj.upgrades,\n            wheels: newCarObj.wheels,\n            imgUrl: imgUrlWithKey,\n            category: newCarObj.category,\n            color: newCarObj.color,\n            userId: props.profileUser.userId,\n            performance: newCarObj.performance\n        }\n        if(app.currentUser.id === props.profileUser.userId){\n            const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME);\n            const collectionUsers = mongo.db(process.env.REACT_APP_REALM_DB_NAME).collection(\"users\")\n            const collectionMyCars = mongo.db(process.env.REACT_APP_REALM_DB_NAME).collection(\"my-cars\")\n            if(imgData64){\n                const result = await app.currentUser.functions.putImageObjToS3(imgData64, bucketName, filekey, imgFile.type)\n                console.log('res', result)\n            }\n            // try{\n                // await app.currentUser.functions.putImageObjToS3(imgData64, bucketName, filekey, imgFile.type).then( async res =>{\n                    \n                    try{\n                        await collectionMyCars.insertOne(newCarData).then(async res =>{\n                            console.log('res', res)\n                            console.log('inserted', res.insertedId)\n                            await collectionUsers.updateOne(\n                                { \"userId\": app.currentUser.id },\n                                {$push: { myCars:  res.insertedId}},\n                                { upsert: true }\n                                ).then(res =>{\n                                    console.log('res', res)\n                                    props.getMyCars(mongo)\n                                    // let oldArr = []\n                                    // if(props.profileUser.myCars){\n                                    //     oldArr.push(props.profileUser.myCars)\n                                    // }\n                                    \n                                    // const cars = {myCars: oldArr.push(newCarData)}\n                                    // props.updateProfileData(cars, 'myCars')\n                                    // props.updateCarData(newCarData)\n                                    closeModal()\n                                })\n                        })\n                    //     await mongoCollection.updateOne(\n                    //         { \"userId\": app.currentUser.id},\n                    //         {\n                    //          $push: { myCars: newCarData }\n                    //         }\n                    //         ).then(res =>{\n                    //             console.log('res', res)\n                    //             const oldArr = props.profileUser.myCars\n                    //             const cars = {myCars: oldArr.push(newCarData)}\n                    //             props.updateProfileData(cars, 'myCars')\n                    //             closeModal()\n                    //         })\n                    }catch(err){\n                        console.log(err)\n                    }\n                // })\n            // }catch(err){\n            //     console.log(err)\n            // }\n        }else{\n            console.log('warning current user and the login user do not match')\n            // const token = sessionStorage.getItem('session_token')\n            const tokenUser = sessionStorage.getItem('session_user')\n            // const decoded = jwt.verify(token, process.env.REACT_APP_JWT_SECRET)\n            const credentials = jwt.verify(tokenUser, process.env.REACT_APP_JWT_SECRET)\n            \n            try{\n                await app.logIn(credentials.cre).then(async user =>{\n                    const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME);\n                    const collectionUsers = mongo.db(process.env.REACT_APP_REALM_DB_NAME).collection(\"users\")\n                    const collectionMyCars = mongo.db(process.env.REACT_APP_REALM_DB_NAME).collection(\"my-cars\")\n                    if(user.id === app.currentUser.id){\n                        console.log('user updated')\n                    }else{\n                        console.log('user not updated')\n                    }\n                    if(imgData64){\n                        const result = await user.functions.putImageObjToS3(imgData64, bucketName, filekey, imgFile.type)\n                        console.log('res', result)\n                    }\n               \n                        try{\n                            await collectionMyCars.insertOne(newCarData).then(async res =>{\n                                console.log('res', res)\n                                await collectionUsers.updateOne(\n                                    { \"userId\": app.currentUser.id },\n                                    {$push: { myCars:  res.insertedId}},\n                                    { upsert: true }\n                                    ).then(res =>{\n                                        console.log('res', res)\n                                        props.getMyCars(mongo)\n                                        // const oldArr = props.profileUser.myCars\n                                        // const cars = {myCars: oldArr.push(newCarData)}\n                                        // props.updateProfileData(cars, 'myCars')\n                                        closeModal()\n                                    })\n                            })\n                        }catch(err){\n                            console.log(err)\n                        }\n                //     })\n                    \n                })\n            }catch(err){\n                console.log(err)\n            }\n    }\n        \n}\n\n    return(\n    <Fragment>\n        <Modal show={props.show} onHide={props.handleClose} className=\"modal-wrapper-bio\">\n            <Modal.Header closeButton>\n            </Modal.Header>\n            <Modal.Body>\n                <Row className=\"bio-modal-inner-wrapper\">\n                    <Col sm={6} className=\"\">\n                    <ImageUpload fileObj={setImgData} />\n\n                    {/* <div {...getRootProps()} className=\"dropzone-wrapper\">\n                        <input {...getInputProps()} />\n                        {\n                            isDragActive ?\n                            <p>Drop the files here ...</p> :\n                            <div className=\"drag-dropzone\">\n                                <div className=\"bio-modal-container\">\n                                    <img src={uploadIcon} alt=\"upload files here\" />\n                                    <p>Drag and drop or click to upload an image</p>\n                                    <p>*3MB max image file size<br/>\n                                    *accepted file formats: jpg, png, gif</p>\n                                </div>\n\n                            </div>\n                        }\n                    </div> */}\n                    \n                    </Col>\n                    <Col sm={6}>\n                    <Form>\n                        <Form.Group >\n                            <Form.Label>Category</Form.Label>\n                            <Form.Control as=\"select\"  onChange={handleChange} name=\"category\">\n                            {carCategories.map((category, index) =>{\n                                return(\n                                    <option key={category + index}>{category}</option>\n                                )\n                            })}\n\n                            </Form.Control>\n                        </Form.Group>\n                        <br/>\n                        <Form.Group >\n                            <Form.Label>Car name</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"Enter car name e.g. maker, model, year\" onChange={handleChange} name=\"name\" required/>\n                        </Form.Group>\n                        <br/>\n                        <Form.Group >\n                            <Form.Label>Color</Form.Label>\n                            {/* <Form.Control type=\"text\" placeholder=\"Select your color\" onChange={handleChange} name=\"color\" /> */}\n                            <Form.Control as=\"select\" onChange={handleChange} name=\"color\">\n                            {carColors.map((color, index) =>{\n                                return(\n                                    <option key={color + index}>{color}</option>\n                                )\n                            })}\n                                \n                            </Form.Control>\n                        </Form.Group>\n                        <br/>\n                        <Form.Group >\n                            <Form.Label>Wheels</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"Enter your wheel\" onChange={handleChange} name=\"wheels\" required/>\n                        </Form.Group>\n                        <br/>\n                        <Form.Group >\n                            <Form.Label>Performance</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"Enter your performance\" onChange={handleChange} name=\"performance\" required/>\n                        </Form.Group>\n                        <br/>\n                        <Form.Group >\n                            <Form.Label>Upgrades</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"Enter your update\" onChange={handleChange} name=\"upgrades\" required />\n                        </Form.Group>\n                        <br/><br/>\n                        <Row>\n                            <Col sm={6}>\n                                <Button variant=\"secondary\" onClick={closeModal} className=\"cancel-btn\" > \n                                    Cancel\n                                </Button>\n                            </Col>\n                            <Col sm={6}>\n                                <Button variant=\"primary\" type=\"submit\" onClick={handleSubmit} className=\"save-changes-btn\">\n                                Add my new car\n                                </Button>\n                                {/* <Button onClick={testSubmit}>\n                                    test Submit\n                                </Button> */}\n                                {/* <br></br><br/>\n                                <button onClick={testImgUpload}>test upload</button> */}\n                            </Col>                          \n                        </Row>\n                    </Form>\n                    </Col>\n                </Row>\n            </Modal.Body>\n            <Modal.Footer>\n  \n            </Modal.Footer>\n        </Modal>\n    </Fragment>\n    )\n}\n\nconst mapDispatchToProps = (dispatch) =>{\n    return{\n        createMyCar: (car) => dispatch(createMyCar(car))\n    }\n}\n\nexport default connect(null, mapDispatchToProps)(CreateNewCar)","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Layout/Header.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Layout/Footer.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Fan/SettingModal.js",["394","395","396","397","398"],"import React, { useState, Fragment, useEffect} from 'react'\nimport { Row, Col, Modal, Button, Form, Alert } from 'react-bootstrap'\nimport bioPic from '../../assets/temp-photos/bio/avator-male.jpg'\nimport noImg from '../../assets/global/no_image.jpg'\nimport jwt from 'jsonwebtoken'\nimport * as Realm from \"realm-web\"\nimport short from 'short-uuid'\nimport Compressor from 'compressorjs'\nconst appConfig = {\n    id: process.env.REACT_APP_REALM_APP_ID,\n    timeout: 10000, // timeout in number of milliseconds\n  };\nconst app = new Realm.App(appConfig);\n\nconst SettingModal = (props) =>{\n    const bucketName = process.env.REACT_APP_AWS_BUCKET_NAME\n    console.log(bucketName)\n    const [imgData64Profile, setImgData64Profile] = useState('')\n    const [imgData64Cover, setImgData64Cover] = useState('')\n    const [userObj, setUserObj] = useState({fname: props.profileUser.fname, lname: props.profileUser.lname, email: props.profileUser.email, username: props.profileUser.username})\n    const [uploadMsg, setUploadMsg] = useState({profile: '', cover: ''})\n    const [currentUserId] = useState(app.currentUser.id)\n    const [userPw, setUserPw] = useState({newPw: '', conNewPw: '', currentPw: ''})\n    const [tooBig, setTooBig] = useState({profile: false, cover: false})\n    const [profilePic, setProfilePic] = useState({})\n    const [coverPic, setCoverPic] = useState({})\n    const [imgThumb, setImgThumb] = useState()\n    const [coverImgThumb, setCoverImgThumb] = useState()\n    const msg = {profilePic: 'Your profile picture is successfully updated', coverPic: 'Your cover picture is successfully updated', userDetails: 'Your account information successfully updated', password: 'Your password is successfully updated'}\n    const [isSuccess, setIsSuccess] = useState({profilePic: false, coverPic: false, userDetails: false, password: false })\n    const [currentBioPic, setCurrentBioPic] = useState()\n    const [currentCover, setCurrentCover] = useState()\n    const [disableBtnStates, setDisableBtnStates] = useState({profilePic: true, coverPic: true, userDetails: true, password: true})\n    const baseImgUrl = 'https://s3.amazonaws.com/smokeshow.users/'\n    const [thumb64, setThumb64] = useState()\n    const handleClose = props.handleCloseSetting\n    // const handleShow = props.handleShowSetting\n\n    const handleChange = (e) =>{\n        setUserObj({...userObj,\n            [e.target.name]: e.target.value\n        })\n        if(disableBtnStates){\n            setDisableBtnStates({\n                ...disableBtnStates,\n                userDetails: false\n            })\n        }\n    }\n    const handleChangePw = (e) =>{\n        setUserPw({\n            ...userPw,\n            [e.target.name]: e.target.value\n        })\n        setDisableBtnStates({\n            ...disableBtnStates,\n            password: false\n        })\n    }\n\n    const profilePicUpload = (e) =>{\n        if (e.target.files[0].size / (1024 * 1024) > 3){\n            setTooBig({...tooBig, profile: true})\n            setUploadMsg({...uploadMsg, profile: 'The file size is too big. Please choose different file.'})\n            return\n        }else{\n            const file = e.target.files[0] \n            console.log('file', file)\n            new Compressor(file, {\n                // quality: 0.6,\n                minWidth: 300,\n                height: 300,\n                success(result) {\n                    let reader = new FileReader();\n                    reader.readAsDataURL(result); \n                    reader.onloadend = function() {\n                        const base64 = reader.result.split(\",\").pop();                \n                        setImgData64Profile(base64)\n                    }\n                }\n\n              });\n              new Compressor(file, {\n                // quality: 0.6,\n                minWidth: 100,\n                height: 100,\n                success(result) {\n                    let reader = new FileReader();\n                    reader.readAsDataURL(result); \n                    reader.onloadend = function() {\n                        const base64 = reader.result.split(\",\").pop();                \n                        setThumb64(base64)\n                    }\n                    \n                }\n\n              });\n        setProfilePic(e.target.files[0])\n        setImgThumb(URL.createObjectURL(e.target.files[0]))\n        setDisableBtnStates({\n            ...disableBtnStates,\n            profilePic: false\n        })\n    }\n    }\n    const saveProfilePic = async () =>{\n        const filekey = props.profileUser.userId + '/profile/pic300'\n        const keyThumb = props.profileUser.userId + '/profile/thumbnail'\n        const imgUrlWithKey = baseImgUrl + filekey\n        const imgUrlWithKeyThumb = baseImgUrl + keyThumb\n        // const oldProfilePic = props.profileUser.profilePic\n\n        if( currentUserId === props.profileUser.userId){\n            \n            try{\n                await app.currentUser.functions.putImageObjToS3(imgData64Profile, bucketName, filekey, profilePic.type).then( async res =>{\n                    console.log(res)\n                    try {\n                        await app.currentUser.functions.putImageObjToS3(thumb64, bucketName, keyThumb, profilePic.type).then(async res =>{\n                            console.log(res)\n                            const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n                            const collectionUser = mongo.db(\"smoke-show\").collection(\"users\")\n                            try{\n                                await collectionUser.updateOne(\n                                    { \"userId\": app.currentUser.id},\n                                    { \"$set\": {\"profileThumb\": imgUrlWithKeyThumb} },\n                                    { upsert: true }\n                                ).then(async res =>{\n                                    console.log(res)\n                                    const result = await collectionUser.updateOne(\n                                        { \"userId\": app.currentUser.id},\n                                        { \"$set\": {\"profilePic\": imgUrlWithKey} },\n                                        { upsert: true }\n                                    )\n                                    return result\n                                })\n                                .then(res =>{\n                                    console.log('res', res)\n                                    setIsSuccess({\n                                        ...isSuccess,\n                                        profilePic: true\n                                    })\n                                    setDisableBtnStates({\n                                        ...disableBtnStates,\n                                        profilePic: true\n                                    })\n                                    props.updateProfileData(imgUrlWithKey, \"profilePic\")\n                                    return\n                                })\n                            }catch(err){\n                                console.log(err)\n                            }\n                        })\n                    } catch (error) {\n                        console.log(error)\n                    }\n                    \n                    // console.log('res', res)\n                    // if(typeof(oldProfilePic) !== \"undefined\"){\n                  \n                    //         const currentUrl = props.profileUser.profilePic\n                    //         const splitted = currentUrl.split('/');\n                    //         const key = splitted.splice(4, 7).join(\"/\")\n                    //         deleteImgObj(key)\n                        \n                    // }\n                    \n              \n                })\n            }catch(err){\n            console.log(err)\n            }\n        }else{\n        const tokenUser = sessionStorage.getItem('session_user')\n        // const decoded = jwt.verify(token, process.env.REACT_APP_JWT_SECRET)\n        const credentials = jwt.verify(tokenUser, process.env.REACT_APP_JWT_SECRET)\n        try{\n            await app.logIn(credentials.cre).then(async user =>{\n                const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n                const collectionUser = mongo.db(\"smoke-show\").collection(\"users\")\n                await user.functions.putImageObjToS3(imgData64Profile, bucketName, filekey, profilePic.type).then(async res =>{\n                    console.log(res)\n                    const result = await user.functions.putImageObjToS3(thumb64, bucketName, keyThumb, profilePic.type)\n                    console.log(result)\n                    // if(typeof(oldProfilePic) !== \"undefined\"){\n                  \n                    //     const currentUrl = props.profileUser.profilePic\n                    //     const splitted = currentUrl.split('/');\n                    //     const key = splitted.splice(4, 7).join(\"/\")\n                    //     deleteImgObj(key)\n                    \n                    // }\n                })\n                try{\n                    await collectionUser.updateOne(\n                        { \"userId\": user.userId},\n                        { \"$set\": { \"profilePic\": imgUrlWithKey} },\n                        { upsert: true}\n                    ).then(async res =>{\n                    console.log(res)\n                       const result =  await collectionUser.updateOne(\n                            { \"userId\": user.userId},\n                            { \"$set\": { \"profileThumb\": imgUrlWithKeyThumb} },\n                            { upsert: true}\n                        )\n                        return result\n                    }).then(res =>{\n                        console.log('res', res)\n                        setIsSuccess({\n                            ...isSuccess,\n                            profilePic: true\n                        })\n                        setDisableBtnStates({\n                            ...disableBtnStates,\n                            profilePic: true\n                        })\n                        props.updateProfileData(imgUrlWithKey, \"profilePic\")\n\n                        return\n                    })\n                }catch(err){\n                    console.log(err)\n                }\n            })\n        }catch(err){\n            console.log(err)\n        }\n        }\n    }\n    const coverPicUpload = (e) =>{\n        \n        if (e.target.files[0].size / (1024 * 1024) > 3){\n            setTooBig({...tooBig, cover: true})\n            setUploadMsg({...uploadMsg, cover: 'The file size is too big. Please choose different file.'})\n            return\n        }else{\n            setTooBig({...tooBig, cover: false})\n            setUploadMsg({...uploadMsg, cover: ''})\n            console.log(e.target.files[0])\n            setCoverPic(e.target.files[0])\n            setCoverImgThumb(URL.createObjectURL(e.target.files[0]))\n            setDisableBtnStates({\n                ...disableBtnStates,\n                coverPic: false\n            })\n            const file = e.target.files[0] \n            const reader = new FileReader()\n            reader.onload = (event) => {\n            const base64 = event.target.result.split(\",\").pop()\n              setImgData64Cover(base64)\n            };\n            reader.readAsDataURL(file)\n        }\n        \n    }\n    const saveProfileCover = async  (e) =>{\n        const imgId = short.generate()\n        const filekey = props.profileUser.userId + '/profile/' + imgId\n        const imgUrlWithKey = baseImgUrl + filekey\n        \n        if(currentUserId === props.profileUser.userId){\n            const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n            try{\n                await app.currentUser.functions.putImageObjToS3(imgData64Cover, bucketName, filekey, coverPic.type).then( async res =>{\n                    console.log('res', res)\n                    if( typeof(props.profileUser.profileCover) !== \"undefined\"){\n                        const currentUrl = props.profileUser.profileCover\n                        const splitted = currentUrl.split('/');\n                        const key = splitted.splice(4, 7).join(\"/\")\n                        deleteImgObj(key)\n                    }\n                    \n                    const collectionUser = mongo.db(\"smoke-show\").collection(\"users\")\n                    try{\n                        await collectionUser.updateOne(\n                            { \"userId\": props.profileUser.userId},\n                            { \"$set\": { \"profileCover\": imgUrlWithKey } },\n                            { upsert: true}\n                        ).then( res =>{\n                            console.log('res', res)\n                            setIsSuccess({\n                                ...isSuccess,\n                                profilePic: true\n                            })\n                            setDisableBtnStates({\n                                ...disableBtnStates,\n                                profilePic: true\n                            })\n                            props.updateProfileData(imgUrlWithKey, \"profileCover\")\n                        })\n                    }catch(err){ console.log(err) }\n                })\n            }catch(err){\n            console.log(err)\n            }\n        }else{\n            const tokenUser = sessionStorage.getItem('session_user')\n            // const decoded = jwt.verify(token, process.env.REACT_APP_JWT_SECRET)\n            const credentials = jwt.verify(tokenUser, process.env.REACT_APP_JWT_SECRET)\n            try{\n                await app.logIn(credentials.cre).then(async  user =>{\n                    const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n                    const collectionUser = mongo.db(\"smoke-show\").collection(\"users\")\n                    await user.functions.putImageObjToS3(imgData64Cover, bucketName, filekey, coverPic.type).then( async res =>{\n                        if( typeof(props.profileUser.profileCover) !== \"undefined\"){\n                            const currentUrl = props.profileUser.profileCover\n                            const splitted = currentUrl.split('/');\n                            const key = splitted.splice(4, 7).join(\"/\")\n                            deleteImgObj(key)\n                        }\n\n                    })\n                try{\n                    await collectionUser.updateOne(\n                        { \"userId\": user.userId},\n                        { \"$set\": { \"profileCover\": imgUrlWithKey } },\n                        { upsert: true}\n                    ).then(res =>{\n                        console.log('res', res)\n                        setIsSuccess({\n                            ...isSuccess,\n                            coverPic: true\n                        })\n                        setDisableBtnStates({\n                            ...disableBtnStates,\n                            coverPic: true\n                        })\n                        props.updateProfileData(imgUrlWithKey, 'profileCover')\n                    })\n                }catch(err){\n                    console.log(err)\n                }\n                })\n            }catch(err){\n                console.log(err)\n            }\n            \n        }\n    }\n\n\n    const handleUpdateProfile = async (e) =>{\n        e.preventDefault()\n        const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n        const collectionUser = mongo.db(\"smoke-show\").collection(\"users\")\n       \n        if(app.currentUser.id === props.profileUser.userId){\n            try{\n                await collectionUser.updateOne(\n                    { \"userId\": app.currentUser.id},\n                    {\n                        \"$set\": {\n                            \"fname\": userObj.fname,\n                            \"lname\": userObj.lname,\n                            \"username\": userObj.username\n                          }\n                    },\n                    { upsert: true}\n                ).then( res =>{\n                    console.log(res)\n                    setIsSuccess({\n                        ...isSuccess,\n                        userDetails: true\n                    })\n                    setDisableBtnStates({\n                        ...disableBtnStates,\n                        userDetails: true\n                    })\n                    props.updateUserDetails(userObj.fname, userObj.lname, userObj.username)\n                })\n            }catch(err){ console.log(err) }\n            \n        }else{\n            console.log('write login function')\n            const token = sessionStorage.getItem('session_user')\n            const decoded = jwt.verify(token, process.env.REACT_APP_JWT_SECRET)\n            \n            try{\n                await app.logIn(decoded.cre).then( async user =>{\n                    const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n                    collectionUser = mongo.db(\"smoke-show\").collection(\"users\")\n                    try{\n                        await collectionUser.updateOne(\n                            { \"userId\": user.userId },\n                            {\n                                \"$set\": {\n                                    \"fname\": userObj.fname,\n                                    \"lname\": userObj.lname,\n                                    \"username\": userObj.username\n                                  }\n                            },\n                            { upsert: true }\n                        ).then( res =>{\n                            console.log(res)\n                            setIsSuccess({\n                                ...isSuccess,\n                                userDetails: true\n                            })\n                            setDisableBtnStates({\n                                ...disableBtnStates,\n                                userDetails: true\n                            })\n                            props.updateUserDetails(userObj.fname, userObj.lname, userObj.username)\n                        })\n                    }catch(err){ console.log(err) }\n                })\n            }catch(err){ console.log(err) }\n        }\n        \n    }\n\nconst deleteImgObj = async (key) =>{\n\n    if(app.currentUser.id === props.profileUser.userId){\n        try{\n            await app.currentUser.functions.deleteImageObjToS3(bucketName, key).then(res =>{\n                console.log('res', res)\n            })\n        }catch(err){console.log(err)}\n    }else{\n        const token = sessionStorage.getItem('session_user')\n        const decoded = jwt.verify(token, process.env.REACT_APP_JWT_SECRET)\n        try{\n            await app.logIn(decoded.cre).then(async user =>{\n                await user.functions.deleteImageObjToS3(bucketName, key).then(res =>{\n                    console.log('res', res)\n                })\n            })\n        }catch(err){console.log(err)}\n    }\n}\n\n    useEffect(() => {\n\n        if( typeof(props.profileUser.profilePic) == 'undefined' || props.profileUser.profilePic  == ''){\n            setCurrentBioPic(bioPic)\n        \n        }else{\n            setCurrentBioPic(props.profileUser.profilePic)\n        }\n        setUserObj({...userObj, profilePic: bioPic})\n        if(props.profileUser.profileCover == '' || typeof(props.profileUser.profileCover) == \"undefined\"){\n            setCurrentCover(noImg)\n        }else{\n            setCurrentCover(props.profileUser.profileCover)\n        }\n      \n        \n    }, [])\n\n    return(\n    <Fragment>\n        <Modal className=\"modal-wrapper-bio\" show={props.show} onHide={handleClose}>\n            <Modal.Header closeButton>\n            </Modal.Header>\n            <Modal.Body>\n                <Row className=\"bio-modal-inner-wrapper\">\n                    <Col sm={6} className=\"\">\n                    <p className=\"heading-modal\">Your profile picture</p>\n                    <Row>\n                    \n                        <Col sm={4}>\n                            <div className=\"change-bio-pic-wrapper\">\n                                <img src={imgThumb ? imgThumb : currentBioPic} alt=\"user avator\" className=\"change-pic\" />\n                            </div>\n                            \n                        </Col>\n                        <Col sm={8} className=\"setting-file-btn\" >\n                        \n                            <Form>\n                                <Form.Group>\n                                    <Form.File \n                                    id=\"bio-pic\"\n                                    label={profilePic.name ? profilePic.name : '' }\n                                    onChange={profilePicUpload}\n                                    custom\n                                     />\n                                </Form.Group>\n                                <small >Maximum file size is 3MB.</small>\n                                {isSuccess.profilePic ? <Alert variant=\"success\" style={{padding: '5px', marginTop: '1rem', textAlign:'center'}}><small>{msg.profilePic}</small></Alert> :\n                                <div style={{marginTop: '1rem'}}></div>\n                                }\n                                {tooBig.profile && <Alert variant=\"danger\">{uploadMsg.profile}</Alert>}\n                                <Button variant=\"primary\" onClick={saveProfilePic} className=\"save-changes-btn\" disabled={disableBtnStates.profilePic}>\n                                Upload\n                                </Button>\n                                \n                            </Form>\n                        </Col>\n                    </Row>\n                    <hr />\n                    <div className=\"spacer-2rem\"></div>\n                    <p className=\"heading-modal\">Your account information</p>\n                              \n                    <Form>\n                        <Row>\n                            <Col sm={6}>\n                                <Form.Group >\n                                    <Form.Label>First Name</Form.Label>\n                                    <Form.Control name=\"fname\" type=\"text\" placeholder={props.profileUser.fname ? props.profileUser.fname : \"Enter your first name\"} onChange={handleChange} />\n                                </Form.Group>\n                            </Col>\n                            <Col sm={6}>\n                                <Form.Group >\n                                    <Form.Label>Last Name</Form.Label>\n                                    <Form.Control name=\"lname\" type=\"text\" placeholder={props.profileUser.lname ? props.profileUser.lname : \"Enter your first name\"} onChange={handleChange} />\n                                </Form.Group>\n                            </Col>\n                        </Row>\n                        \n                        <br/>\n                        <Form.Group >\n                            <Form.Label>Email</Form.Label>\n                            <Form.Control type=\"email\" name=\"email\" placeholder={props.profileUser.email ? props.profileUser.email: \"Please add your email\"} disabled />\n                        </Form.Group>\n                        <br/>\n                        <Form.Group >\n                            <Form.Label>Username</Form.Label>\n                            <Form.Control type=\"text\" name=\"username\" placeholder={props.profileUser.username ? props.profileUser.username : \"Please add your username\"} disabled/>\n                        </Form.Group>\n                        <br/>\n                        {isSuccess.userDetails ? <Alert variant=\"success\" style={{padding: '5px', marginTop: '1rem', textAlign:'center'}}><small>{msg.userDetails}</small></Alert> : \"\"}\n                        <Button variant=\"primary\" onClick={handleUpdateProfile} className=\"save-changes-btn\" disabled={disableBtnStates.userDetails}>\n                                Save Changes\n                        </Button>\n                    </Form>\n                    </Col>\n                    <Col sm={6}>\n                        <p className=\"heading-modal\">Your cover image</p>\n                        <Row>\n                            <Col sm={4}>\n                                <div className=\"change-bio-pic-wrapper\">\n                                    <img src={coverImgThumb ? coverImgThumb : currentCover} alt=\"user uploaded photo\" className=\"change-pic\" />\n                                </div>\n                                \n                            </Col>\n                            <Col sm={8} className=\"setting-file-btn\" >\n                                <Form>\n                                    <Form.Group>\n                                        <Form.File \n                                        // id=\"exampleFormControlFile2\" className=\"upload-file-btn\"\n                                        id=\"bio-pic\"\n                                        label={coverPic.name ? coverPic.name : ''}\n                                        onChange={coverPicUpload}\n                                        custom\n                                        />\n                                    </Form.Group>\n                                    <small >Maximum file size 3MB.</small>\n                                    {isSuccess.coverPic ? <Alert variant=\"success\" style={{padding: '5px', marginTop: '1rem', textAlign:'center'}}><small>{msg.coverPic}</small></Alert> :\n                                    <div style={{marginTop: '1rem'}}></div>\n                                    }\n                                    {tooBig.cover && <Alert variant=\"danger\">{uploadMsg.cover}</Alert>}\n                                    <Button variant=\"primary\" onClick={saveProfileCover} className=\"save-changes-btn \" disabled={disableBtnStates.coverPic}>\n                                    Upload\n                                    </Button>\n                                </Form>\n                            </Col>\n                        </Row>\n                        \n                        <hr />\n                        <div className=\"spacer-2rem\"></div>\n                        \n                        <p className=\"heading-modal\">Change password</p>\n                        <Form>\n                            <Form.Group >\n                                <Form.Label>Current password</Form.Label>\n                                <Form.Control type=\"password\" placeholder=\"Enter your current password\" name=\"currentPw\" onChange={handleChangePw} />\n                            </Form.Group>\n                            <br/>\n                            <Form.Group >\n                                <Form.Label>New password</Form.Label>\n                                <Form.Control type=\"password\" placeholder=\"Enter your new password\" name=\"newPw\" onChange={handleChangePw} />\n                            </Form.Group>\n                            <br/>\n                            <Form.Group >\n                                <Form.Label>Confirm new password</Form.Label>\n                                <Form.Control type=\"password\" placeholder=\"Confirm your new password\" name=\"conNewPw\" onChange={handleChangePw} />\n                            </Form.Group>\n                            <br/>\n                            { isSuccess.password && <Alert variant=\"success\">{msg.password}</Alert> }\n\n                            <Button variant=\"primary\" onClick={handleClose} className=\"save-changes-btn\" disabled={disableBtnStates.password}>\n                                    Save new password\n                            </Button>\n                        </Form>\n                    </Col>\n                </Row>\n                \n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"primary\" onClick={handleClose} className=\"save-changes-btn btn-close-settings\">\n                        Close\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    </Fragment>\n    )\n}\n\nexport default SettingModal","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Layout/SignUpModal.js",["399"],"import React, { useState, useEffect } from 'react'\nimport { Modal, Button, Form } from 'react-bootstrap'\nimport * as Realm from \"realm-web\"\nimport { connect } from 'react-redux'\nimport Logo from '../../assets/global/Logo-smoke-show.png'\nimport { openLoginModal, clearSinupStr } from '../../store/actions/authActions'\nimport axios from 'axios'\n\nconst SignUpModal = (props) =>{\n    const [userObj, setUserObj] = useState({fname: '', lname: '', email: '', password: '', password2: '', username: ''})\n    const [msg, setMsg] = useState(\"\")\n    const [emailSent, setEmailSent] = useState(false)\n    const [hasError, setHasError] = useState(false)\n    //this is different from props.app -getApp\n    const appId = process.env.REACT_APP_REALM_APP_ID\n    const getApp = Realm.App.getApp(appId);\n    const [show, setShow] = useState(false);\n\n    const handleClose = () => {\n        setShow(false);\n        props.openLoginModal(false)\n    }\n    const handleShow = () =>{\n        setShow(true)\n    }\n    // console.log('check from signin', props)\n    const handleChange =(e) =>{\n        setUserObj({\n            ...userObj,\n            [e.target.name]: e.target.value\n        })\n    }\n    const handleSubmit = async (e) =>{\n        e.preventDefault()\n        setHasError(false)\n        const email = userObj.email.toLowerCase()\n        if(userObj.password === userObj.password2){\n            try{\n                await getApp.emailPasswordAuth.registerUser(email, userObj.password).then(async res =>{\n                  \n                    setEmailSent(true)\n                    e.target.reset()\n                })\n       \n                \n            }catch(error){\n                console.log('error', error)\n                setMsg(\"This email address is already registered.\")\n                setHasError(true)\n            }\n        }else{\n            setMsg(\"Your Email or Password do not match our records. Try again.\")\n            setHasError(true)\n        }\n        \n    }\n    const switchLogin = () =>{\n        props.clearSinupStr()\n        props.switchToLogin()\n    }\n    const resendConfirmationEmail = async (email)=>{\n        \n        try{\n            axios.post(`https://stitch.mongodb.com/api/client/v2.0/app/${process.env.REACT_APP_REALM_APP_ID}/auth/providers/local-userpass/confirm/call`, { email }).then(res => {\n                setMsg('We have sent you a confirmation email. Please check your inbox.')\n            })\n         \n        }catch(err){\n            console.log(err)\n            setMsg('The email address you typed is not in our record. Please check your email address.')\n        }\n    }\n   \n    useEffect(() => {\n        setShow(props.openmodal)\n    }, [props.openmodal])\n    \n    return (\n        <Modal\n          {...props}\n          show={show}\n          onHide={handleClose}\n          size=\"lg\"\n          aria-labelledby=\"contained-modal-title-vcenter\"\n          centered\n        >\n          <Modal.Header closeButton>\n            {/* <Modal.Title id=\"contained-modal-title-vcenter\">\n              Modal heading\n            </Modal.Title> */}\n            \n          </Modal.Header>\n          {emailSent ? \n          <center>\n              <h3>Thank you for your registration. <br /><br />\n              Please check your email and click to confirm. <br /><br />\n              Please check your spam box if you do not find the confirmation email.\n              </h3>\n              <div className=\"spacer-4rem\"></div>\n          </center>\n          :\n          <Modal.Body className=\"custom-modal-body\">\n            <div className=\"login-logo-wrapper\">\n                <img src={Logo} alt=\"The Smoke Show\" className=\"logo-header\" />\n            </div>\n          \n            <Form className=\"login-form\" onSubmit={handleSubmit}>\n             \n                <Form.Group controlId=\"formBasicEmail\">\n                    <Form.Label>Email address</Form.Label>\n                    <Form.Control type=\"email\" placeholder=\"e.g. example@example.com\" name=\"email\" onChange={handleChange} />\n                </Form.Group>\n                <div className=\"spacer-1rem\"></div>\n                {/* <Form.Group controlId=\"formBasicEmail\">\n                    <Form.Label>Username</Form.Label>\n                    <Form.Control type=\"text\" placeholder=\"e.g. Smoke Show love\" name=\"username\" onChange={handleChange} />\n                </Form.Group> */}\n                <Form.Group controlId=\"formBasicPassword\">\n                    <Form.Label>Password</Form.Label>\n                    <Form.Control \n                    type=\"password\" \n                    placeholder=\"Between 6 and 128 characters long\" name=\"password\" \n                    onChange={handleChange} />\n                </Form.Group>\n                <div className=\"spacer-1rem\"></div>\n                <Form.Group controlId=\"formBasicPassword\">\n                    <Form.Label>Confirm Password</Form.Label>\n                    <Form.Control \n                    type=\"password\" \n                    placeholder=\"\"  \n                    onChange={handleChange} name=\"password2\" />\n                </Form.Group>\n                {hasError && \n                <div>\n                    <div className=\"error-msg\">{msg}</div>\n                    <p onClick={resendConfirmationEmail}>Click here to resend the confirmation email</p>\n                </div>}\n                <div className=\"spacer-2rem\"></div>\n                <div className=\"login-btn-wrapper\">\n                    <Button className=\"login-btn\" type=\"submit\">\n                        Signup\n                    </Button><br /><br />\n                    <p className=\"click-div\" onClick={switchLogin}>Or Login here</p>\n                </div>\n                \n            </Form>\n          </Modal.Body>\n\n        }\n        </Modal>\n      );\n}\nconst mapDispatchToProps = (dispatch) =>{\n    return {\n        openLoginModal: (state) => dispatch(openLoginModal(state)),\n        clearSinupStr: () => dispatch(clearSinupStr())\n    }\n}\nconst mapStateToProps = (state) =>{\n    return{\n        openmodal: state.auth.openmodal\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(SignUpModal)\n\n// export default SignUpModal","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Layout/LoginModal.js",["400","401","402"],"import React, { useState, useEffect } from 'react'\nimport { Modal, Button, Form, Alert } from 'react-bootstrap'\nimport * as Realm from \"realm-web\"\n// import { authUser } from '../../store/actions/authActions'\nimport { logInUser } from '../../store/actions/authActions'\nimport { connect } from 'react-redux'\nimport Logo from '../../assets/global/Logo-smoke-show.png'\nimport { openLoginModal } from '../../store/actions/authActions'\n\n// import jwt from 'jsonwebtoken'\n// import { useUID } from 'react-uid'\n\nconst LoginModal = (props) =>{\n    const [userObj, setUserObj] = useState({fname: '', lname: '', email: '', password: '', confirmPw: ''})\n    const [hasError, setHasError] = useState(false)\n    const [forgotPw, setForgotPw] = useState(false)\n    const [resetPwSent, setResetPwSent] = useState(false)\n    const [loginMsg, setLoginMsg] = useState('')\n    const [errMsg, setErrMsg] = useState('')\n    const [msgModal, setMsgModal] = useState('')\n    const appId = process.env.REACT_APP_REALM_APP_ID\n    // const appConfig = {\n    //     id: appId,\n    //     timeout: 10000, // timeout in number of milliseconds\n    //   };\n    const getApp = Realm.App.getApp(appId)\n    // const app = new Realm.App({ id: process.env.REACT_APP_REALM_APP_ID })\n    const [show, setShow] = useState(false);\n\n    const handleClose = () => {\n        setShow(false);\n        props.openLoginModal(false)\n    }\n \n    //max age one day number of day, hours, min and sec\n    // const maxAge = 1 * 24 * 60 * 60\n    const maxAgeTest = 1 * 60 * 60\n  \n    const handleResetPw = async (e) =>{\n        e.preventDefault()\n        setErrMsg('')\n        const lowerCase = userObj.email.toLowerCase()\n        // const newPW = uuidv4()\n        // Additional arguments for the reset function\n        if(userObj.password === userObj.confirmPw){\n            const args = [];\n            try{\n                await getApp.emailPasswordAuth.callResetPasswordFunction(lowerCase, userObj.password, args).then(res =>{\n                    console.log('res', res)\n                    setUserObj({fname: '', lname: '', email: '', password: '', confirmPw: ''})\n                    setResetPwSent(true)\n                })\n            }catch(err){\n                console.log(err)\n                setErrMsg('This email address is not in our system. Please signup.')\n            }\n            \n        }else{\n            setErrMsg('Your passwords do not match. Please try again.')\n        }\n    }\n \n    const handleChange =(e) =>{\n        setUserObj({\n            ...userObj,\n            [e.target.name]: e.target.value \n        })\n    }\n    let resetPassword\n    if(resetPwSent){\n        resetPassword =\n        <div>\n            <p className=\"login-form\" style={{textAlign: 'center', marginBottom: '2rem'}}>We've sent you an email link to reset your password.<br/><br /> Please check your email inbox.</p>\n            <div className=\"text-center\" ><Button className=\"comment-btn\" onClick={handleClose} style={{minWidth: '200px'}}>Close</Button></div>\n            <div style={{marginBottom: '2rem'}}></div>\n            \n        </div>\n        \n    }else if(!resetPwSent){\n        resetPassword =\n        <Form className=\"login-form\" onSubmit={handleResetPw}>\n            <Form.Group >\n                <Form.Label>Type your email address below.</Form.Label>\n                <Form.Control type=\"email\" placeholder=\"e.g. example@example.com\" name=\"email\" onChange={handleChange} required />\n            </Form.Group>\n            <div className=\"spacer-1rem\"></div>\n            <Form.Group >\n                <Form.Label>Type your new password below.</Form.Label>\n                <Form.Control type=\"password\" placeholder=\"more than six characters\" name=\"password\" onChange={handleChange} required />\n            </Form.Group>\n            <div className=\"spacer-1rem\"></div>\n            <Form.Group >\n                <Form.Label>Confirm your new password below.</Form.Label>\n                <Form.Control type=\"password\" placeholder=\"\" name=\"confirmPw\" onChange={handleChange} required />\n            </Form.Group>\n            <div className=\"spacer-1rem\"></div>\n            {errMsg && <Alert variant=\"danger\" style={{padding: '5px', marginTop: '1rem', textAlign:'center'}}><small>{errMsg}</small></Alert>}\n            <Button className=\"login-btn\" type=\"submit\">Reset Password</Button>\n            <div className=\"forgot-pw-memo\">\n                <p className=\"click-div\" style={{marginTop: '1rem'}} onClick={()=>setForgotPw(false)}>Go back to login</p>\n                <p className=\"click-div\" style={{marginTop: '1rem'}} onClick={props.toggleAuthModal}>Signup</p>\n            </div>\n            \n            <div style={{marginTop:\"4rem\"}}></div>\n        </Form>\n    }else{\n        resetPassword = ''\n    }\n    const handleSubmit =(e)=>{\n        setErrMsg('')\n        e.preventDefault()\n        const emailLowerCase = userObj.email.toLowerCase()\n        const credentials = Realm.Credentials.emailPassword(emailLowerCase, userObj.password)\n        props.logInUser(credentials, emailLowerCase)\n        \n    }\n    const handleModalSwap = () =>{\n        props.toggleAuthModal()\n    }\n    useEffect(() => {\n        if(props.hasLoginErr){\n            setHasError(true)\n            setLoginMsg(props.errMsg)\n        }else{\n            setHasError(false)\n        }\n    }, [props.hasLoginErr])\n\n    useEffect(() => {\n        setShow(props.openmodal)\n\n    }, [props.openmodal])\n\n    useEffect(() => {\n        setMsgModal(props.modalMsg)\n    }, [props.modalMsg])\n\n    useEffect(() => {\n        if(props.swapSignup === 'signup'){\n            props.toggleAuthModal()\n        }\n        \n    }, [props.swapSignup])\n    return (\n        <Modal\n          {...props}\n          show={show}\n          onHide={handleClose}\n          size=\"lg\"\n          aria-labelledby=\"contained-modal-title-vcenter\"\n          centered\n        >\n          <Modal.Header closeButton>\n     \n          </Modal.Header>\n          <div className=\"login-logo-wrapper\">\n            <img src={Logo} alt=\"The Smoke Show\" className=\"logo-header\" />\n          </div>\n          <Modal.Body className=\"custom-modal-body\">\n            {<p style={{color: 'red', textAlign: 'center'}}>{msgModal && msgModal}</p>}\n          \n            <div style={{marginBottom: '15px'}}></div>\n            {forgotPw ? resetPassword :\n            <Form className=\"login-form\" onSubmit={handleSubmit}>\n                <Form.Group controlId=\"formBasicEmail\">\n                    <Form.Label>Email address</Form.Label>\n                    <Form.Control type=\"email\" placeholder=\"e.g. example@example.com\" name=\"email\" onChange={handleChange} required/>\n                </Form.Group>\n\n                <Form.Group controlId=\"formBasicPassword\">\n                    <Form.Label>Password</Form.Label>\n                    <Form.Control type=\"password\" placeholder=\"\" name=\"password\" onChange={handleChange} required />\n                </Form.Group>\n                <p className=\"click-div\" onClick={()=>{setForgotPw(true)}}>Forgot password?</p>\n                {hasError && <Alert variant=\"danger\" style={{padding: '5px', marginTop: '1rem', textAlign:'center'}}><small>{loginMsg}</small></Alert> }\n                <div className=\"login-btn-wrapper\">\n                    <Button className=\"login-btn\" type=\"submit\">\n                        Login\n                    </Button><br /><br />\n                    <p className=\"click-div\" onClick={handleModalSwap}>Or Signup here</p>\n                </div>\n                \n            </Form>\n        }\n          </Modal.Body>\n        </Modal>\n      )\n}\n\nconst mapStateToProps = (state) => {\n    //syntax is propName: state.key of combineReducer.key\n    return{\n      userData: state.auth.userData,\n      hasLoginErr: state.auth.hasLoginErr,\n      openmodal: state.auth.openmodal,\n      modalMsg: state.auth.modalMsg,\n      errMsg: state.auth.errMsg,\n      swapSignup: state.auth.swapSignup\n    }\n  }\nconst mapDispatchToProps = (dispatch) =>{\n    return {\n        logInUser: (credentials, email) => dispatch(logInUser(credentials, email)),\n        openLoginModal: (state)=> dispatch(openLoginModal(state))\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginModal)","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/store/actions/userActions.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/store/actions/authActions.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Shopify/Cart.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Shopify/Products.js",["403"],"import React, { Component } from 'react';\nimport Product from './Product';\nimport { Row, Container } from 'react-bootstrap'\n\nclass Products extends Component {\n  render() {\n    let products = this.props.products.map((product) => {\n      return (\n        <Product\n          addVariantToCart={this.props.addVariantToCart}\n          client={this.props.client}\n          key={product.id.toString()}\n          product={product}\n        />\n      );\n    });\n\n    return (\n      <div className=\"width-adj-shop\">\n        <Row>\n          {products}\n        </Row>\n      </div>\n      \n    );\n  }\n}\n\nexport default Products;\n","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Shopify/Product.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Shopify/LineItem.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Shopify/VariantSelector.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Fan/ImageUpload.js",["404"],"import React from 'react'\nimport { useState, useEffect } from 'react'\nimport uploadIcon from '../../assets/global/upload.svg'\nimport { Alert } from 'react-bootstrap'\nimport { useDropzone } from 'react-dropzone'\n\n  const thumbsContainer = {\n    display: 'flex',\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    marginTop: 16\n  };\n  \n  const thumb = {\n    display: 'inline-flex',\n    borderRadius: 2,\n    border: '1px solid #eaeaea',\n    marginBottom: 8,\n    marginRight: 8,\n    width: 100,\n    height: 100,\n    padding: 4,\n    boxSizing: 'border-box'\n  };\n  \n  const thumbInner = {\n    display: 'flex',\n    minWidth: 0,\n    overflow: 'hidden'\n  };\n  \n  const img = {\n    display: 'block',\n    width: 'auto',\n    height: '100%'\n  };\n\n\nconst ImageUpload = (props ) => {\n    \n    const [files, setFiles] = useState([])\n    const [msg, setMsg] = useState('')\n    const [uploaded, setUploaded] = useState(false)\n\n    const getFileData = (obj) => {\n        // Create a root reference\n        console.log('file obj', obj)\n        // const newValue = files[0]\n        props.fileObj(obj)\n    }\n\n    const {getRootProps, getInputProps, isDragActive} = useDropzone({\n            accept: 'image/*',\n            onDrop: acceptedFiles => {\n              \n              if(acceptedFiles.length > 1){\n                  setMsg('You can upload only one image.')\n              }else if(acceptedFiles[0].size / (1024 * 1024) > 3){\n                  setMsg('The file size is too big. Please choose different file.')\n              }else{\n                    getFileData(acceptedFiles[0])\n                    setUploaded(true)\n                    if(props.imgChange){\n                      props.imgChange(true)\n                    }\n                    \n                    setFiles(acceptedFiles.map( file => Object.assign(file, {\n                              preview: URL.createObjectURL(file)\n                          \n                        })\n                        ))\n              }\n            }\n          })\n\n    const thumbs = files.map(file => (\n      <div style={thumb} key={file.name}>\n        <div style={thumbInner}>\n          <img\n            src={file.preview}\n            style={img}\n          />\n        </div>\n      </div>\n    ));\n  \n    useEffect(() => {\n      // Make sure to revoke the data uris to avoid memory leaks\n        files.forEach(file => URL.revokeObjectURL(file.preview));\n    }, [files]);\n\n    return ( \n        <React.Fragment>\n            {/* {msg ? <p>{msg}</p> : ''} */}\n                <div {...getRootProps({className: 'dropzone'})} className=\"dropzone dropzone-wrapper\" >\n                    <input {...getInputProps()} required/>\n                    {\n                            isDragActive ?\n                            <p>Drop the files here ...</p> :\n                            <div className=\"drag-dropzone\">\n                                <div className=\"bio-modal-container\">\n                                    <img src={uploadIcon} alt=\"upload files here\" />\n                                    <p style={{padding: '5px'}}>\n                                      { uploaded ? 'Change Image' : 'Drop an image file here or click to upload an image'}\n                                    </p>\n                                    {msg ? <Alert variant=\"danger\">{msg}</Alert> : ''}\n                                    <p>*3MB max image file size<br/>\n                                    *accepted file formats: jpg, png, gif</p>\n                                    <aside style={thumbsContainer}>\n                                        {uploaded ? thumbs : ''}\n                                    </aside>\n                                </div>\n                                \n                            </div>\n                        }\n                    \n                </div>\n                \n         \n        </React.Fragment>\n\n     );\n}\n \nexport default ImageUpload;","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Influencer/Garage.js",["405","406","407","408"],"import React, { useState, useEffect } from 'react'\nimport { Helmet } from \"react-helmet\"\nimport * as Realm from \"realm-web\"\nimport Layout from '../Layout/Layout'\nimport SubNav from './SubNav'\nimport { connect } from 'react-redux'\nimport noImg from '../../assets/global/no_image.jpg'\n// import bioPic from '../../assets/temp-photos/bio/avator-male.jpg'\nimport editIcon from '../../assets/global/edit-icon.svg'\nimport SettingModal from './SettingModal'\nimport { Button, Row, Col, Form } from 'react-bootstrap'\nimport { attachMsg, logOutUser, openLoginModal } from '../../store/actions/authActions'\nimport './garage.scss'\nimport VehicleCard from './vehicleCard'\nimport CreateNewCar from './CreateNewCar'\nimport jwt from 'jsonwebtoken'\nimport moment from 'moment'\nimport { getInfluencer }from '../../store/actions/influencerActions'\n\nconst Garage = (props) =>{\n  \n    const userIdParam = props.match.params.id\n    const [profileUser, setProfileUser] = useState({fname: '', lname: '', profilePic: '', profileCover: '', username: '', profileDesc: '', favSong: '', favArtist: ''})\n    const [allowEdit, setAllowEdit] = useState(false)\n    const [editMode, setEditMode] = useState({about: false, song: false, artist: false})\n    // const [formattedFans, setFormattedFans] = useState('')\n    const [showSetting, setShowSetting] = useState(false);\n    const [userCars, setUserCars] = useState([])\n    const [showAddCar, setShowAddCar] = useState(false)\n    const [numOfComments, setNumComments] = useState(null)\n    const altData = {uername: 'No username yet', userId: '', profileDesc: 'No description yet.', myCars: [] }\n    const [formattedTime, setFormattedTime] = useState(null)\n    const altCarData = {name: 'No data yet', upgrades: 'No data yet', color: 'No data yet', wheels: 'No data yet', performance: 'No data yet', category: 'Dream car', imgUlr: noImg, favSong: 'Nodata yet', favArtist: 'No data yet'}\n    const appConfig = {\n        id: process.env.REACT_APP_REALM_APP_ID,\n        // timeout: 10000, \n        // timeout in number of milliseconds\n      };\n    const app = new Realm.App(appConfig);\n    \n    const handleCloseAddCarModal = () => setShowAddCar(false)\n    const handleShowAddCarModal = () => setShowAddCar(true)\n\n    const handleChangeProfile = (e) =>{\n        setProfileUser({\n            ...profileUser,\n            [e.target.name]: e.target.value\n        })\n    }\n    const handleShowSetting = () =>{\n        \n        const token = sessionStorage.getItem('session_token')\n        jwt.verify(token, process.env.REACT_APP_JWT_SECRET, function(err, decoded) {\n            if (err) {\n                console.log('err', err)\n                \n            }else{\n                setProfileUser({\n                    ...profileUser,\n                    email: decoded.userData.email\n                })\n                setShowSetting(true)\n            }\n          });\n        \n    }\n    const handleCloseSetting = () =>{\n        setShowSetting(false)\n    }\n    const userLoggedIn = (id) =>{\n        \n        if(id === profileUser.userId){\n            console.log('loggedin?', id)\n            setAllowEdit(true)\n            \n        }else{\n            getInfluencerData()\n        }\n    }\n    const userLoggedOut = (id) =>{\n        console.log('logged out?', id)\n        if(id === userIdParam){\n            setAllowEdit(false)\n        }\n    }\n    const updateProfileData = (data, key)=>{\n\n        setProfileUser({\n            ...profileUser,\n            [key]: data\n        })\n    }\n    const updateUserDetails = (fname, lname, username) =>{\n        setProfileUser({\n            ...profileUser,\n            fname: fname,\n            lname: lname,\n            username: username\n        })\n    }\n    const updateCarData = (data) =>{\n        setUserCars(prevArray => [...prevArray, data])\n    }\n   \n    const handleDataUpdate = async (e) =>{\n        e.preventDefault()\n  \n        if(app.currentUser.id === profileUser.userId){\n            const mongodb = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME);\n            const mongoCollection = mongodb.db(process.env.REACT_APP_REALM_DB_NAME).collection(\"influencers\")\n    \n            try{\n                await mongoCollection.updateOne(\n                    { \"userId\": app.currentUser.id},\n                    {\n                        \"$set\": {\n                            \"profileDesc\": profileUser.profileDesc,\n                            \"favSong\": profileUser.favSong,\n                            \"favArtist\": profileUser.favArtist\n                          }\n                    }\n                ).then(res =>{\n                    console.log('res', res)\n                })\n            }catch(err){\n                console.log(err)\n            }\n            setEditMode({...editMode, about: false, song: false, artist: false})\n        }\n        \n    }\n    const editAbout = ()=>{\n        return(\n            <Form>\n                <Form.Group >\n                    <Form.Label>Edit</Form.Label>\n                    <Form.Control as=\"textarea\" rows={3} name=\"profileDesc\" value={profileUser.profileDesc && profileUser.profileDesc } onChange={handleChangeProfile} />\n                </Form.Group>\n                <div className=\"bio-edit-btn-wrapper\">\n                    <Button variant=\"primary\" type=\"submit\" onClick={handleDataUpdate} className=\"bio-edit-btn\">\n                        Submit\n                    </Button>\n                </div>\n                \n            </Form>\n        )\n    }\n    const editSong = ()=>{\n        return(\n            <Form>\n                <Form.Group >\n                    <Form.Label>Edit</Form.Label>\n                    <Form.Control as=\"textarea\" rows={3} name=\"favSong\" value={profileUser.favSong && profileUser.favSong } onChange={handleChangeProfile} />\n                </Form.Group>\n                <div className=\"bio-edit-btn-wrapper\">\n                    <Button variant=\"primary\" type=\"submit\" onClick={handleDataUpdate} className=\"bio-edit-btn\">\n                        Submit\n                    </Button>\n                </div>\n                \n            </Form>\n        )\n    }\n    const editArtist = ()=>{\n        return(\n            <Form>\n                <Form.Group >\n                    <Form.Label>Edit</Form.Label>\n                    <Form.Control as=\"textarea\" rows={3} name=\"favArtist\" value={profileUser.favArtist && profileUser.favArtist } onChange={handleChangeProfile} />\n                </Form.Group>\n                <div className=\"bio-edit-btn-wrapper\">\n                    <Button variant=\"primary\" type=\"submit\" onClick={handleDataUpdate} className=\"bio-edit-btn\">\n                        Submit\n                    </Button>\n                </div>\n                \n            </Form>\n        )\n    }\n\n    const getInfluencerData = async (credentials) =>{\n        try{\n            await app.logIn(credentials).then(async user =>{\n                if(userIdParam === user.id){\n                    console.log('param matched')\n                    setAllowEdit(true)\n                }else{\n                    console.log('param not matched', user.id)\n                    setAllowEdit(false)\n                }\n                const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n                const collectionInfluencer = mongo.db(\"smoke-show\").collection(\"influencers\")\n                const filter = {userId: userIdParam}\n                try{\n                    await collectionInfluencer.findOne(filter).then( user =>{\n                        setProfileUser(user)\n                        if(typeof(user.joined) == 'undefined'){\n                            setFormattedTime('No data')\n                        }else{\n                            const formatted = moment(user.joined).local().format('MMMM Do YYYY')\n                            setFormattedTime(formatted)\n                        }\n                        \n                        // if(user.fans > 999){\n                        //     setFormattedFans(Math.sign(user.fans)*((Math.abs(user.fans)/1000).toFixed(1)) + 'k')\n                        // }else{\n                        //     setFormattedFans(Math.sign(user.fans)*Math.abs(user.fans))\n                        // }\n                        getTotalComments(mongo)\n                        getMyCars(mongo)\n                        return user\n                    })\n                }catch(err){\n                    console.log(err)\n                }\n\n            })\n        }catch(err){\n            console.log(err)\n        }\n        \n    }\n    \n    const getTotalComments = async (mongo) =>{\n        \n        const mongoCollectionComments = mongo.db(\"smoke-show\").collection(\"comments\")\n        \n        const filter = {userId: userIdParam}\n        await mongoCollectionComments.find(filter).then(res =>{\n            setNumComments(res.length)\n        })\n    }\n    const getMyCars = async (mongo) =>{\n        const mongoCollection = mongo.db(\"smoke-show\").collection(\"my-cars\")\n        \n        const filter = {userId: userIdParam}\n        await mongoCollection.find(filter).then( cars =>{\n            setUserCars(cars)\n        })\n    }\n    const loginCheck = async () =>{\n        const token = sessionStorage.getItem('session_token')\n        const tokenUser = sessionStorage.getItem('session_user')\n        if(token){\n            jwt.verify(token, process.env.REACT_APP_JWT_SECRET, function(err, decoded) {\n                if (err) {\n                    console.log('time out')\n                    // timeout\n                    const credentials = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTH_PUBLIC_VIEW);\n                    props.logOutUser()\n                    props.openLoginModal(true)\n                    getInfluencerData(credentials)\n                }else{\n                    console.log('logged in')\n                    const credentials = jwt.verify(tokenUser, process.env.REACT_APP_JWT_SECRET)\n                    getInfluencerData(credentials.cre)\n                    if(decoded.userData.userId === userIdParam){\n                        setAllowEdit(true)\n                    }else{setAllowEdit(false)}\n                }\n              });\n            \n        }else{\n            console.log('no token')\n            const credentials = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTH_PUBLIC_VIEW);\n            getInfluencerData(credentials)\n        }\n    }\n    useEffect(() => {\n        if(props.customData.userId === userIdParam){\n            setAllowEdit(true)\n        }else{\n            setAllowEdit(false)\n        }\n    }, [props.customData])\n\n    useEffect(() => {\n        // getDataAsCurrent()\n        loginCheck()\n        props.getInfluencer(userIdParam)\n    }, [])\n\n    return(\n        <Layout   >\n        <Helmet>\n            <meta charSet=\"utf-8\" />\n            <title>Influencer Garage page | The Smoke Show</title>\n            <meta name=\"description\" content=\"Place the meta description text here.\" />\n        </Helmet>\n        {showAddCar && <CreateNewCar show={showAddCar} handleClose={handleCloseAddCarModal} profileUser={profileUser} updateProfileData={updateProfileData} updateCarData={updateCarData} />}\n            {showSetting && <SettingModal show={showSetting} handleShowSetting={handleShowSetting} handleCloseSetting={handleCloseSetting} profileUser={profileUser}  updateProfileData={updateProfileData} updateUserDetails={updateUserDetails}/>}\n            <div className=\"main-wrapper\">\n                <div className=\"spacer-4rem\"></div>\n                <SubNav influencer={profileUser} formattedFans={props.formattedFans} allowEdit={allowEdit} handleShowSetting={handleShowSetting} />\n                {/* <div className=\"garage-setting-wrapper\">\n                    {allowEdit && \n                        <Button className=\"garage-setting-btn\" onClick={handleShowSetting} >\n                            <img src={settingsIcon} alt=\"setting\" className=\"setting-icon\"/>\n                            Settings\n                        </Button>\n                    }\n                </div> */}\n                    \n                <div className=\"spacer-4rem\"></div>\n                <h2 className=\"title\">Influencer Garage</h2>\n                {/* <div className=\"bio-fleet-img\">\n                    <img\n                    src={ typeof(profileUser.profileCover) == 'undefined' || !profileUser.hasOwnProperty(\"profileCover\") ?  noImg : profileUser.profileCover }\n                    alt=\"user selected profile image\"\n                     />\n                </div> */}\n                <div className=\"spacer-2rem\"></div>\n                <div className=\"bio-content-wrapper\">\n           \n                    <Row className=\"bio-height-adj\">\n                        <Col sm={4}>\n                            <div className=\"bio-container box-shadow-white\">\n                                <p className=\"bio-about no-m-b\"><strong>About: {` ${profileUser.fname} ${profileUser.lname}`}</strong></p>\n                                <div className=\"\">\n                                    <p className=\"bio-content bio-border\">\n                                        {editMode.about ? editAbout()\n                                        : [\n                                            (profileUser.profileDesc \n                                                ? <p >{profileUser.profileDesc}</p>\n                                                : <p>{altData.profileDesc}</p>\n                                            )\n                                            ]\n                                        }\n                                    { !editMode.about && <br/> }\n                                    <div className=\"edit-icon-wrapper\" onClick={()=>{setEditMode({...editMode, about: true})}}>\n                                        {editMode.about ? '' : [\n                                            (allowEdit && <img className=\"edit-icon\" src={editIcon} alt=\"Edit about you\"/>)\n                                        ]}\n                                    </div>\n                                    </p>\n                                </div>\n                                \n                                <Row className=\"bio-border pt-pb-15 bio-row-adj\">\n                                    <Col sm={4}>\n                                        <p className=\"no-m-b\">Joined:</p>\n                                    </Col>\n                                    <Col sm={8}>\n                                        <p>{formattedTime ? formattedTime : 'No data'}</p>\n                                    </Col>\n                                </Row>\n                                <Row className=\"bio-border pt-pb-15 bio-row-adj\">\n                                    <Col sm={4}>\n                                        <p className=\"no-m-b\">Total Comments:</p>\n                                    </Col>\n                                    <Col sm={8}>\n                                        <p className=\"no-m-b\">{numOfComments && numOfComments} comments</p>\n                                    </Col>\n                                </Row>\n                                <Row className=\"bio-border pt-pb-15 bio-row-adj\">\n                                    <Col sm={4}>\n                                        <p className=\"no-m-b\">Fans of:</p>\n                                    </Col>\n                                    <Col sm={8}>\n                                        <p className=\"no-m-b\">\n                                            { profileUser.fansOf &&\n                                                profileUser.fansOf.map((name, i) =>{\n                                                    return <span>{i > 0 && ', '}{name}</span>\n                                                })\n                                            }\n                                        </p>\n                                    </Col>\n                                </Row>\n                                <Row className=\"pt-pb-15 bio-row-adj\"> \n                                    <Col sm={4}>\n                                        <p className=\"no-m-b\">Favorite Driving Song:</p>\n                                    </Col>\n                                    <Col sm={8}>\n                                        {editMode.song ? editSong()\n                                        : [\n                                            (profileUser.favSong \n                                                ? <p className=\"no-m-b\">{profileUser.favSong}</p>\n                                                : <p className=\"no-m-b\">{altData.favSong}</p>\n                                            )\n                                            ]\n                                        }\n                                        <div className=\"edit-icon-wrapper\" onClick={()=>{setEditMode({...editMode, song: true})}}>\n                                        {editMode.song ? '' : [\n                                            (allowEdit && <img className=\"edit-icon\" src={editIcon} alt=\"Edit your favourite songs\"/>)\n                                        ]}\n                                    </div>\n                                    </Col>\n                                </Row>\n                                <Row className=\"pt-pb-15 bio-row-adj\"> \n                                    <Col sm={4}>\n                                        <p className=\"no-m-b\">Favorite Artist:</p>\n                                    </Col>\n                                    <Col sm={8}>\n                                    {editMode.artist ? editArtist()\n                                        : [\n                                            (profileUser.favArtist \n                                                ? <p className=\"no-m-b\">{profileUser.favArtist}</p>\n                                                : <p className=\"no-m-b\">{altData.favArtist}</p>\n                                            )\n                                            ]\n                                        }\n                                        <div className=\"edit-icon-wrapper\" onClick={()=>{setEditMode({...editMode, artist: true})}}>\n                                        {editMode.artist ? '' : [\n                                            (allowEdit && <img className=\"edit-icon\" src={editIcon} alt=\"Edit your favourite artists\"/>)\n                                        ]}\n                                    </div>\n                                    </Col>\n                                </Row>\n                            </div>\n                        </Col>\n                        <Col sm={8} className=\"pl-0-pc\">\n                        { userCars !== undefined ?\n                            userCars.map( car =>{\n                               return (\n                                <React.Fragment>\n                                    <VehicleCard car={car} allowEdit={allowEdit} profileUser={profileUser} getMyCars={getMyCars} />\n                                    <div className=\"spacer-2rem\"></div>\n                                </React.Fragment>\n                               )\n                            }) :\n                            <React.Fragment>\n                                <VehicleCard car={altCarData} allowEdit={allowEdit} />\n                                <div className=\"spacer-2rem\"></div>\n                            </React.Fragment>\n                        }\n\n                            <div className=\"spacer-2rem\"></div>\n                            { allowEdit && \n                                <div style={{padding: '0 6px'}}>\n                                    <Button className=\"btn-add-car\" onClick={handleShowAddCarModal}>Add my car</Button>\n                                </div>\n                            }\n                            <div className=\"spacer-2rem\"></div>\n                        </Col>\n                        \n                    </Row>\n                    \n                </div>\n                \n            </div>\n        </Layout>\n    )\n}\nconst mapDispatchToProps = (dispatch) =>{\n    return{\n        openLoginModal: (state) => dispatch(openLoginModal(state)),\n        attachMsg: (msg)=> dispatch(attachMsg(msg)),\n        logOutUser: ()=>dispatch(logOutUser()),\n        getInfluencer: (id)=> dispatch(getInfluencer(id))\n    }\n}\nconst mapStateToProps = (state) =>{\n    console.log('props state from garage', state)\n    return{\n        customData: state.auth.customData,\n        influencerObj: state.influ.influencerObj,\n        formattedFans: state.influ.formattedFans\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Garage)","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Influencer/CreateNewCar.js",["409"],"import React, { useState, Fragment } from 'react'\nimport { Row, Col, Modal, Button, Form } from 'react-bootstrap'\nimport * as Realm from \"realm-web\"\nimport ImageUpload from './ImageUpload'\nimport jwt from 'jsonwebtoken'\nimport short from 'short-uuid'\n\nconst CreateNewCar = (props) =>{\n    const bucketName = process.env.REACT_APP_AWS_BUCKET_NAME;\n    const [imgFile, setImgFile] = useState('')\n    const [imgData64, setImgData64] = useState('')\n    const appConfig = {\n        id: process.env.REACT_APP_REALM_APP_ID,\n        timeout: 10000, // timeout in number of milliseconds\n        };\n    const app = new Realm.App(appConfig)\n    const maxAgeTest = 1 * 60 * 60\n\n    const setImgData = (obj) =>{\n        setImgFile(obj)\n        var file = obj\n        const reader = new FileReader();\n        reader.onload = (event) => {\n        const base64 = event.target.result.split(\",\").pop()\n          setImgData64(base64)\n        //   console.log(base64);\n        };\n        reader.readAsDataURL(file);\n      }\n    const closeModal = () =>{\n        setNewCarObj({name: '', category: '', color: '', wheels: '', upgrades: ''})\n        props.handleClose()\n    }\n\n\n    // const onDrop = useCallback(acceptedFiles => {\n        \n        // var file = acceptedFiles[0]\n        // const reader = new FileReader();\n        // reader.onload = (event) => {\n        // setImgFile(acceptedFiles[0])\n        // const base64 = event.target.result.split(\",\").pop()\n        //   setImgData64(base64)\n        // //   console.log(event.target.result);\n        // };\n        // reader.readAsDataURL(file);\n    //     // Do something with the files\n    //   }, [])\n    // const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\n    \n    const carColors = ['White', 'Black', 'Grey', 'Blue', 'Silver', 'Red', 'Orange', 'Bronze', 'Yellow', 'Green', 'Navy']\n    const carCategories = ['Dream Car', 'Daily Driver', 'Vehicle #2']\n    const [newCarObj, setNewCarObj] = useState({name: '', category: 'Dream Car', color: 'White', wheels: '', upgrade: ''})\n\n    const handleChange = (e) =>{\n        setNewCarObj({\n            ...newCarObj,\n            [e.target.name]: e.target.value\n        })\n    }\n    const createToken = (userData) =>{\n        return jwt.sign({ userData: userData }, process.env.REACT_APP_JWT_SECRET, {expiresIn: maxAgeTest});\n    }\n\n \n\n    const handleSubmit = async (e) =>{\n        e.preventDefault()\n        const baseImgUrl = `https://s3.amazonaws.com/${process.env.REACT_APP_AWS_BUCKET_NAME}/`\n        const imgId = short.generate()\n        const filekey = props.profileUser.userId + '/my-cars/' + imgId\n        const imgUrlWithKey = baseImgUrl + filekey\n        const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME);\n        const collectionInfluencer = mongo.db(process.env.REACT_APP_REALM_DB_NAME).collection(\"influencers\")\n        const collectionMyCars = mongo.db(process.env.REACT_APP_REALM_DB_NAME).collection(\"my-cars\")\n\n        const newCarData = {\n            name: newCarObj.name,\n            upgrades: newCarObj.upgrades,\n            wheels: newCarObj.wheels,\n            imgUrl: imgUrlWithKey,\n            category: newCarObj.category,\n            color: newCarObj.color,\n            userId: props.profileUser.userId,\n            performance: newCarObj.performance\n        }\n        if(app.currentUser.id === props.profileUser.userId){\n            \n            try{\n                await app.currentUser.functions.putImageObjToS3(imgData64, bucketName, filekey, imgFile.type).then( async res =>{\n                    console.log(res)\n                    try{\n                        await collectionMyCars.insertOne(newCarData).then(async res =>{\n                            console.log('res', res)\n                            console.log('inserted', res.insertedId)\n                            await collectionInfluencer.updateOne(\n                                { \"userId\": app.currentUser.id },\n                                { $push: { myCars:  res.insertedId }},\n                                { upsert: true }\n                                ).then(res =>{\n                                    console.log('res', res)\n                                    let oldArr = []\n                                    if(props.profileUser.myCars){\n                                        oldArr = props.profileUser.myCars\n                                    }else{\n                                        oldArr = []\n                                    }\n                                    \n                                    let cars = {myCars: oldArr.push(newCarData)}\n                                    props.updateProfileData(cars, 'myCars')\n                                    props.updateCarData(newCarData)\n                                    closeModal()\n                                })\n                        })\n                    //     await mongoCollection.updateOne(\n                    //         { \"userId\": app.currentUser.id},\n                    //         {\n                    //          $push: { myCars: newCarData }\n                    //         }\n                    //         ).then(res =>{\n                    //             console.log('res', res)\n                    //             const oldArr = props.profileUser.myCars\n                    //             const cars = {myCars: oldArr.push(newCarData)}\n                    //             props.updateProfileData(cars, 'myCars')\n                    //             closeModal()\n                    //         })\n                    }catch(err){\n                        console.log(err)\n                    }\n                })\n            }catch(err){\n                console.log(err)\n            }\n        }else{\n            console.log('warning current user and the login user do not match')\n            const token = sessionStorage.getItem('session_user')\n            const decoded = jwt.verify(token, process.env.REACT_APP_JWT_SECRET)\n        \n            \n            try{\n                await app.logIn(decoded.cre).then(user =>{\n                    user.functions.putImageObjToS3(imgData64, bucketName, filekey, imgFile.type).then( async res =>{\n             \n                        try{\n                            await collectionMyCars.insertOne(newCarData).then(async res =>{\n                                console.log('res', res)\n                                await collectionInfluencer.updateOne(\n                                    { \"userId\": app.currentUser.id },\n                                    {$push: { myCars:  res.insertedId}},\n                                    { upsert: true }\n                                    ).then(res =>{\n                                        console.log('res', res)\n                                        const oldArr = props.profileUser.myCars\n                                        const cars = {myCars: oldArr.push(newCarData)}\n                                        props.updateProfileData(cars, 'myCars')\n                                        closeModal()\n                                    })\n                            })\n                        }catch(err){\n                            console.log(err)\n                        }\n                    })\n                    \n                })\n            }catch(err){\n                console.log(err)\n            }\n        }\n    }\n        \n\n\n    return(\n    <Fragment>\n        <Modal show={props.show} onHide={props.handleClose} className=\"modal-wrapper-bio\">\n            <Modal.Header closeButton>\n            </Modal.Header>\n            <Modal.Body>\n                <Row className=\"bio-modal-inner-wrapper\">\n                    <Col sm={6} className=\"\">\n                    <ImageUpload fileObj={setImgData} />\n\n                    {/* <div {...getRootProps()} className=\"dropzone-wrapper\">\n                        <input {...getInputProps()} />\n                        {\n                            isDragActive ?\n                            <p>Drop the files here ...</p> :\n                            <div className=\"drag-dropzone\">\n                                <div className=\"bio-modal-container\">\n                                    <img src={uploadIcon} alt=\"upload files here\" />\n                                    <p>Drag and drop or click to upload an image</p>\n                                    <p>*3MB max image file size<br/>\n                                    *accepted file formats: jpg, png, gif</p>\n                                </div>\n\n                            </div>\n                        }\n                    </div> */}\n                    \n                    </Col>\n                    <Col sm={6}>\n                    <Form>\n                        <Form.Group >\n                            <Form.Label>Category</Form.Label>\n                            <Form.Control as=\"select\"  onChange={handleChange} name=\"category\">\n                            {carCategories.map((category, index) =>{\n                                return(\n                                    <option key={category + index}>{category}</option>\n                                )\n                            })}\n\n                            </Form.Control>\n                        </Form.Group>\n                        <br/>\n                        <Form.Group >\n                            <Form.Label>Car name</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"Enter car name e.g. maker, model, year\" onChange={handleChange} name=\"name\"/>\n                        </Form.Group>\n                        <br/>\n                        <Form.Group >\n                            <Form.Label>Color</Form.Label>\n                            {/* <Form.Control type=\"text\" placeholder=\"Select your color\" onChange={handleChange} name=\"color\" /> */}\n                            <Form.Control as=\"select\" onChange={handleChange} name=\"color\">\n                            {carColors.map((color, index) =>{\n                                return(\n                                    <option key={color + index}>{color}</option>\n                                )\n                            })}\n                                \n                            </Form.Control>\n                        </Form.Group>\n                        <br/>\n                        <Form.Group >\n                            <Form.Label>Wheels</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"Enter your wheel\" onChange={handleChange} name=\"wheels\"/>\n                        </Form.Group>\n                        <br/>\n                        <Form.Group >\n                            <Form.Label>Performance</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"Enter your performance\" onChange={handleChange} name=\"performance\" />\n                        </Form.Group>\n                        <br/>\n                        <Form.Group >\n                            <Form.Label>Upgrades</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"Enter your update\" onChange={handleChange} name=\"upgrades\" />\n                        </Form.Group>\n                        <br/><br/>\n                        <Row>\n                            <Col sm={6}>\n                                <Button variant=\"secondary\" onClick={closeModal} className=\"cancel-btn\" > \n                                    Cancel\n                                </Button>\n                            </Col>\n                            <Col sm={6}>\n                                <Button variant=\"primary\" type=\"submit\" onClick={handleSubmit} className=\"save-changes-btn\">\n                                Add my new car\n                                </Button>\n                                {/* <br></br><br/>\n                                <button onClick={testImgUpload}>test upload</button> */}\n                            </Col>                          \n                        </Row>\n                    </Form>\n                    </Col>\n                </Row>\n            </Modal.Body>\n            <Modal.Footer>\n  \n            </Modal.Footer>\n        </Modal>\n    </Fragment>\n    )\n}\n\nexport default CreateNewCar","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Influencer/ImageUpload.js",["410"],"import React from 'react'\nimport { useState, useEffect } from 'react'\nimport uploadIcon from '../../assets/global/upload.svg'\nimport { Alert } from 'react-bootstrap'\nimport { useDropzone } from 'react-dropzone'\n\n  const thumbsContainer = {\n    display: 'flex',\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    marginTop: 16\n  };\n  \n  const thumb = {\n    display: 'inline-flex',\n    borderRadius: 2,\n    border: '1px solid #eaeaea',\n    marginBottom: 8,\n    marginRight: 8,\n    width: 100,\n    height: 100,\n    padding: 4,\n    boxSizing: 'border-box'\n  };\n  \n  const thumbInner = {\n    display: 'flex',\n    minWidth: 0,\n    overflow: 'hidden'\n  };\n  \n  const img = {\n    display: 'block',\n    width: 'auto',\n    height: '100%'\n  };\n\n\nconst ImageUpload = (props ) => {\n    \n    const [files, setFiles] = useState([])\n    const [msg, setMsg] = useState('')\n    const [uploaded, setUploaded] = useState(false)\n\n    const getFileData = (obj) => {\n        // Create a root reference\n        console.log('file obj', obj)\n        // const newValue = files[0]\n        props.fileObj(obj)\n    }\n\n    const {getRootProps, getInputProps, isDragActive} = useDropzone({\n            accept: 'image/*',\n            onDrop: acceptedFiles => {\n              \n              if(acceptedFiles.length > 1){\n                  setMsg('You can upload only one image.')\n              }else if(acceptedFiles[0].size / (1024 * 1024) > 3){\n                  setMsg('The file size is too big. Please choose different file.')\n              }else{\n                    getFileData(acceptedFiles[0])\n                    setUploaded(true)\n                    if(props.imgChange){\n                      props.imgChange(true)\n                    }\n                    \n                    setFiles(acceptedFiles.map( file => Object.assign(file, {\n                              preview: URL.createObjectURL(file)\n                          \n                        })\n                        ))\n              }\n            }\n          })\n\n    const thumbs = files.map(file => (\n      <div style={thumb} key={file.name}>\n        <div style={thumbInner}>\n          <img\n            src={file.preview}\n            style={img}\n          />\n        </div>\n      </div>\n    ));\n  \n    useEffect(() => {\n      // Make sure to revoke the data uris to avoid memory leaks\n        files.forEach(file => URL.revokeObjectURL(file.preview));\n    }, [files]);\n\n    return ( \n        <React.Fragment>\n            \n                <div {...getRootProps({className: 'dropzone'})} className=\"dropzone dropzone-wrapper\" >\n                    <input {...getInputProps()} required/>\n                    {\n                            isDragActive ?\n                            <p>Drop the files here ...</p> :\n                            <div className=\"drag-dropzone\">\n                                <div className=\"bio-modal-container\">\n                                    <img src={uploadIcon} alt=\"upload files here\" />\n                                    <p style={{padding: '5px'}}>\n                                      { uploaded ? 'Change Image' : 'Drop an image file here or click to upload an image'}\n                                    </p>\n                                    {msg ? <Alert variant=\"danger\">{msg}</Alert> : ''}\n                                    <p>*3MB max image file size<br/>\n                                    *accepted file formats: jpg, png, gif</p>\n                                    <aside style={thumbsContainer}>\n                                        {uploaded ? thumbs : ''}\n                                    </aside>\n                                </div>\n                                \n                            </div>\n                        }\n                    \n                </div>\n                \n         \n        </React.Fragment>\n\n     );\n}\n \nexport default ImageUpload;","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Influencer/SettingModal.js",["411","412","413","414"],"import React, { useState, Fragment, useEffect} from 'react'\nimport { Row, Col, Modal, Button, Form, Alert } from 'react-bootstrap'\nimport bioPic from '../../assets/temp-photos/bio/avator-male.jpg'\nimport noImg from '../../assets/global/no_image.jpg'\nimport jwt from 'jsonwebtoken'\nimport * as Realm from \"realm-web\"\nimport short from 'short-uuid'\n\nconst appConfig = {\n    id: process.env.REACT_APP_REALM_APP_ID,\n    timeout: 10000, // timeout in number of milliseconds\n  };\nconst app = new Realm.App(appConfig);\n\nconst SettingModal = (props) =>{\n    const bucketName = process.env.REACT_APP_AWS_BUCKET_NAME\n    const [imgData64Profile, setImgData64Profile] = useState('')\n    const [imgData64Cover, setImgData64Cover] = useState('')\n    const [userObj, setUserObj] = useState({fname: props.profileUser.fname, lname: props.profileUser.lname, email: props.profileUser.email, username: props.profileUser.username})\n    const [currentUserId] = useState(app.currentUser.id)\n    const [userPw, setUserPw] = useState({newPw: '', conNewPw: '', currentPw: ''})\n    const [uploadMsg, setUploadMsg] = useState({profile: '', cover: ''})\n    const [tooBig, setTooBig] = useState({profile: false, cover: false})\n    const [profilePic, setProfilePic] = useState({})\n    const [coverPic, setCoverPic] = useState({})\n    const [imgThumb, setImgThumb] = useState()\n    const [coverImgThumb, setCoverImgThumb] = useState()\n    const msg = {profilePic: 'Your profile picture is successfully updated', coverPic: 'Your cover picture is successfully updated', userDetails: 'Your account information successfully updated', password: 'Your password is successfully updated'}\n    const [isSuccess, setIsSuccess] = useState({profilePic: false, coverPic: false, userDetails: false, password: false })\n    const [currentBioPic, setCurrentBioPic] = useState()\n    const [currentCover, setCurrentCover] = useState()\n    const [disableBtnStates, setDisableBtnStates] = useState({profilePic: true, coverPic: true, userDetails: true, password: true})\n    const baseImgUrl = `https://s3.amazonaws.com/${process.env.REACT_APP_AWS_BUCKET_NAME}/`\n\n    const handleClose = props.handleCloseSetting\n    // const handleShow = props.handleShowSetting\n\n    const handleChange = (e) =>{\n        \n        setUserObj({...userObj,\n            [e.target.name]: e.target.value\n        })\n        if(disableBtnStates){\n            setDisableBtnStates({\n                ...disableBtnStates,\n                userDetails: false\n            })\n        }\n\n    }\n    const handleChangePw = (e) =>{\n        setUserPw({\n            ...userPw,\n            [e.target.name]: e.target.value\n        })\n        setDisableBtnStates({\n            ...disableBtnStates,\n            password: false\n        })\n    }\n\n    const profilePicUpload = (e) =>{\n        if (e.target.files[0].size / (1024 * 1024) > 3){\n            setTooBig({...tooBig, profile: true})\n            setUploadMsg({...uploadMsg, profile: 'The file size is too big. Please choose different file.'})\n            return\n        }else{\n        setProfilePic(e.target.files[0])\n        setImgThumb(URL.createObjectURL(e.target.files[0]))\n        setDisableBtnStates({\n            ...disableBtnStates,\n            profilePic: false\n        })\n        const file = e.target.files[0] \n        const reader = new FileReader()\n        reader.onload = (event) => {\n        const base64 = event.target.result.split(\",\").pop()\n          setImgData64Profile(base64)\n        };\n        reader.readAsDataURL(file)\n        }\n    }\n    const saveProfilePic = async () =>{\n        \n        const imgId = short.generate()\n        const filekey = props.profileUser.userId + '/profile/' + imgId\n        const imgUrlWithKey = baseImgUrl + filekey\n        const oldProfilePic = props.profileUser.profilePic\n        if( currentUserId === props.profileUser.userId){\n            try{\n                await app.currentUser.functions.putImageObjToS3(imgData64Profile, bucketName, filekey, profilePic.type).then( async res =>{\n                    console.log('res', res)\n                    if(typeof(oldProfilePic) !== \"undefined\"){\n                  \n                            const currentUrl = props.profileUser.profilePic\n                            const splitted = currentUrl.split('/');\n                            const key = splitted.splice(4, 7).join(\"/\")\n                            deleteImgObj(key)\n                        \n                    }\n                    const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n                    const collectionInfluencer = mongo.db(\"smoke-show\").collection(\"influencers\")\n                    try{\n                        await collectionInfluencer.updateOne(\n                            { \"userId\": app.currentUser.id},\n                            { \"$set\": { \"profilePic\": imgUrlWithKey } },\n                            { upsert: true}\n                        ).then(res =>{\n                            console.log('res', res)\n                            setIsSuccess({\n                                ...isSuccess,\n                                profilePic: true\n                            })\n                            setDisableBtnStates({\n                                ...disableBtnStates,\n                                profilePic: true\n                            })\n                            props.updateProfileData(imgUrlWithKey, \"profilePic\")\n                        })\n                    }catch(err){\n                        console.log(err)\n                    }\n                })\n            }catch(err){\n            console.log(err)\n            }\n        }else{\n        console.log('I have to debug', app.currentUser.id)\n        const token = sessionStorage.getItem('session_user')\n        const decoded = jwt.verify(token, process.env.REACT_APP_JWT_SECRET)\n\n        try{\n            await app.logIn(decoded.cre).then(async user =>{\n                const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n                const collectionInfluencer = mongo.db(\"smoke-show\").collection(\"influencers\")\n                await user.functions.putImageObjToS3(imgData64Profile, bucketName, filekey, profilePic.type).then( res =>{\n                    if(typeof(oldProfilePic) !== \"undefined\"){\n                  \n                        const currentUrl = props.profileUser.profilePic\n                        const splitted = currentUrl.split('/');\n                        const key = splitted.splice(4, 7).join(\"/\")\n                        deleteImgObj(key)\n                    \n                    }\n                })\n                try{\n                    await collectionInfluencer.updateOne(\n                        { \"userId\": user.userId},\n                        { \"$set\": { \"profilePic\": imgUrlWithKey } },\n                        { upsert: true}\n                    ).then(res =>{\n                        console.log('res', res)\n                        setIsSuccess({\n                            ...isSuccess,\n                            profilePic: true\n                        })\n                        setDisableBtnStates({\n                            ...disableBtnStates,\n                            profilePic: true\n                        })\n                        props.updateProfileData(imgUrlWithKey, \"profilePic\")\n                    })\n                }catch(err){\n                    console.log(err)\n                }\n            })\n        }catch(err){\n            console.log(err)\n        }\n        }\n    }\n    const coverPicUpload = (e) =>{\n        if (e.target.files[0].size / (1024 * 1024) > 3){\n            setTooBig({...tooBig, cover: true})\n            setUploadMsg({...uploadMsg, cover: 'The file size is too big. Please choose different file.'})\n            return\n        }else{\n        setCoverPic(e.target.files[0])\n        setCoverImgThumb(URL.createObjectURL(e.target.files[0]))\n        setDisableBtnStates({\n            ...disableBtnStates,\n            coverPic: false\n        })\n        const file = e.target.files[0] \n        const reader = new FileReader()\n        reader.onload = (event) => {\n        const base64 = event.target.result.split(\",\").pop()\n          setImgData64Cover(base64)\n        };\n        reader.readAsDataURL(file)\n        }\n    }\n    const saveProfileCover = async  (e) =>{\n        const imgId = short.generate()\n        const filekey = props.profileUser.userId + '/profile/' + imgId\n        const imgUrlWithKey = baseImgUrl + filekey\n        const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n        if(currentUserId === props.profileUser.userId){\n            try{\n                await app.currentUser.functions.putImageObjToS3(imgData64Cover, bucketName, filekey, coverPic.type).then( async res =>{\n                    console.log('res', res)\n                    if( typeof(props.profileUser.profileCover) !== \"undefined\"){\n                        const currentUrl = props.profileUser.profileCover\n                        const splitted = currentUrl.split('/');\n                        const key = splitted.splice(4, 7).join(\"/\")\n                        deleteImgObj(key)\n                    }\n                    \n                    const collectionInfluencer = mongo.db(\"smoke-show\").collection(\"influencers\")\n                    try{\n                        await collectionInfluencer.updateOne(\n                            { \"userId\": props.profileUser.userId},\n                            { \"$set\": { \"profileCover\": imgUrlWithKey } },\n                            { upsert: true}\n                        ).then(res =>{\n                            console.log('res', res)\n                            setIsSuccess({\n                                ...isSuccess,\n                                coverPic: true\n                            })\n                            setDisableBtnStates({\n                                ...disableBtnStates,\n                                coverPic: true\n                            })\n                            props.updateProfileData(imgUrlWithKey, \"profileCover\")\n                        })\n                    }catch(err){\n                        console.log(err)\n                    }\n                    \n                })\n            }catch(err){\n            console.log(err)\n            }\n        }else{\n            const token = sessionStorage.getItem('session_user')\n            const decoded = jwt.verify(token, process.env.REACT_APP_JWT_SECRET)\n      \n            try{\n                await app.logIn(decoded.cre).then(async  user =>{\n                    const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n                    const collectionInfluencer = mongo.db(\"smoke-show\").collection(\"influencers\")\n                    await user.functions.putImageObjToS3(imgData64Cover, bucketName, filekey, coverPic.type).then( async res =>{\n                        if( typeof(props.profileUser.profileCover) !== \"undefined\"){\n                            const currentUrl = props.profileUser.profileCover\n                            const splitted = currentUrl.split('/');\n                            const key = splitted.splice(4, 7).join(\"/\")\n                            deleteImgObj(key)\n                        }\n\n                    })\n                try{\n                    await collectionInfluencer.updateOne(\n                        { \"userId\": user.userId},\n                        { \"$set\": { \"profileCover\": imgUrlWithKey } },\n                        { upsert: true}\n                    ).then(res =>{\n                        console.log('res', res)\n                        setIsSuccess({\n                            ...isSuccess,\n                            coverPic: true\n                        })\n                        setDisableBtnStates({\n                            ...disableBtnStates,\n                            coverPic: true\n                        })\n                        props.updateProfileData(imgUrlWithKey, 'profileCover')\n                    })\n                }catch(err){\n                    console.log(err)\n                }\n                })\n            }catch(err){\n                console.log(err)\n            }\n            \n        }\n    }\n\n\n    const handleUpdateProfile = async (e) =>{\n        e.preventDefault()\n        const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n        const collectionInfluencer = mongo.db(\"smoke-show\").collection(\"influencers\")\n       \n        if(app.currentUser.id === props.profileUser.userId){\n            try{\n                await collectionInfluencer.updateOne(\n                    { \"userId\": app.currentUser.id},\n                    {\n                        \"$set\": {\n                            \"fname\": userObj.fname,\n                            \"lname\": userObj.lname,\n                            \"username\": userObj.username\n                          }\n                    },\n                    { upsert: true}\n                ).then( res =>{\n                    console.log(res)\n                    setIsSuccess({\n                        ...isSuccess,\n                        userDetails: true\n                    })\n                    setDisableBtnStates({\n                        ...disableBtnStates,\n                        userDetails: true\n                    })\n                    props.updateUserDetails(userObj.fname, userObj.lname, userObj.username)\n                })\n            }catch(err){ console.log(err) }\n            \n        }else{\n            const token = sessionStorage.getItem('session_user')\n            const decoded = jwt.verify(token, process.env.REACT_APP_JWT_SECRET)\n    \n            try{\n                await app.logIn(decoded.cre).then( async user =>{\n                    const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n                    const collectionInfluencer = mongo.db(\"smoke-show\").collection(\"influencers\")\n                    try{\n                        await collectionInfluencer.updateOne(\n                            { \"userId\": user.userId},\n                            {\n                                \"$set\": {\n                                    \"fname\": userObj.fname,\n                                    \"lname\": userObj.lname,\n                                    \"username\": userObj.username\n                                  }\n                            },\n                            { upsert: true}\n                        ).then( res =>{\n                            console.log(res)\n                            setIsSuccess({\n                                ...isSuccess,\n                                userDetails: true\n                            })\n                            setDisableBtnStates({\n                                ...disableBtnStates,\n                                userDetails: true\n                            })\n                            props.updateUserDetails(userObj.fname, userObj.lname, userObj.username)\n                        })\n                    }catch(err){ console.log(err) }\n                })\n            }catch(err){ console.log(err) }\n        }\n        \n    }\n\nconst deleteImgObj = async (key) =>{\n\n    if(app.currentUser.id === props.profileUser.userId){\n        try{\n            await app.currentUser.functions.deleteImageObjToS3(bucketName, key).then(res =>{\n                console.log('res', res)\n            })\n        }catch(err){console.log(err)}\n    }else{\n        const token = sessionStorage.getItem('session_user')\n        const decoded = jwt.verify(token, process.env.REACT_APP_JWT_SECRET)\n\n        try{\n            await app.logIn(decoded.cre).then(async user =>{\n                await user.functions.deleteImageObjToS3(bucketName, key).then(res =>{\n                    console.log('res', res)\n                })\n            })\n        }catch(err){console.log(err)}\n    }\n}\n\n    useEffect(() => {\n\n        if( typeof(props.profileUser.profilePic) == 'undefined' || props.profileUser.profilePic  == ''){\n            setCurrentBioPic(bioPic)\n        \n        }else{\n            setCurrentBioPic(props.profileUser.profilePic)\n        }\n        setUserObj({...userObj, profilePic: bioPic})\n        if(props.profileUser.profileCover == '' || typeof(props.profileUser.profileCover) == \"undefined\"){\n            setCurrentCover(noImg)\n        }else{\n            setCurrentCover(props.profileUser.profileCover)\n        }\n      \n        \n    }, [])\n\n    return(\n    <Fragment>\n        <Modal className=\"modal-wrapper-bio\" show={props.show} onHide={handleClose}>\n            <Modal.Header closeButton>\n            </Modal.Header>\n            <Modal.Body>\n                <Row className=\"bio-modal-inner-wrapper\">\n                    <Col sm={6} className=\"\">\n                    <p className=\"heading-modal\">Your profile picture</p>\n                    <Row>\n                    \n                        <Col sm={4}>\n                            <div className=\"change-bio-pic-wrapper\">\n                                <img src={imgThumb ? imgThumb : currentBioPic} alt=\"user avator\" className=\"change-pic\" />\n                            </div>\n                            \n                        </Col>\n                        <Col sm={8} className=\"setting-file-btn\" >\n                        \n                            <Form>\n                                <Form.Group>\n                                    <Form.File \n                                    id=\"bio-pic\"\n                                    label={profilePic.name ? profilePic.name : '' }\n                                    onChange={profilePicUpload}\n                                    custom\n                                     />\n                                </Form.Group>\n                                <small >Maximum file size is 3MB.</small>\n                                {isSuccess.profilePic ? <Alert variant=\"success\" style={{padding: '5px', marginTop: '1rem', textAlign:'center'}}><small>{msg.profilePic}</small></Alert> :\n                                <div style={{marginTop: '1rem'}}></div>\n                                }\n                                <Button variant=\"primary\" onClick={saveProfilePic} className=\"save-changes-btn\" disabled={disableBtnStates.profilePic}>\n                                Upload\n                                </Button>\n                                \n                            </Form>\n                        </Col>\n                    </Row>\n                    <hr />\n                    <div className=\"spacer-2rem\"></div>\n                    <p className=\"heading-modal\">Your account information</p>\n                              \n                    <Form>\n                        <Row>\n                            <Col sm={6}>\n                                <Form.Group >\n                                    <Form.Label>First Name</Form.Label>\n                                    <Form.Control name=\"fname\" type=\"text\" placeholder={props.profileUser.fname ? props.profileUser.fname : \"Enter your first name\"} onChange={handleChange} />\n                                </Form.Group>\n                            </Col>\n                            <Col sm={6}>\n                                <Form.Group >\n                                    <Form.Label>Last Name</Form.Label>\n                                    <Form.Control name=\"lname\" type=\"text\" placeholder={props.profileUser.lname ? props.profileUser.lname : \"Enter your first name\"} onChange={handleChange} />\n                                </Form.Group>\n                            </Col>\n                        </Row>\n                        \n                        <br/>\n                        <Form.Group >\n                            <Form.Label>Email</Form.Label>\n                            <Form.Control type=\"email\" name=\"email\" placeholder={props.profileUser.email ? props.profileUser.email: \"Please add your email\"} disabled />\n                        </Form.Group>\n                        <br/>\n                        <Form.Group >\n                            <Form.Label>Username</Form.Label>\n                            <Form.Control type=\"text\" name=\"username\" placeholder={props.profileUser.username ? props.profileUser.username : \"Please add your username\"} disabled />\n                        </Form.Group>\n                        <br/>\n                        {isSuccess.userDetails ? <Alert variant=\"success\" style={{padding: '5px', marginTop: '1rem', textAlign:'center'}}><small>{msg.userDetails}</small></Alert> : \"\"}\n                        <Button variant=\"primary\" onClick={handleUpdateProfile} className=\"save-changes-btn\" disabled={disableBtnStates.userDetails}>\n                                Save Changes\n                        </Button>\n                    </Form>\n                    </Col>\n                    <Col sm={6}>\n                        <p className=\"heading-modal\">Your cover image</p>\n                        <Row>\n                            <Col sm={4}>\n                                <div className=\"change-bio-pic-wrapper\">\n                                    <img src={coverImgThumb ? coverImgThumb : currentCover} alt=\"user uploaded photo\" className=\"change-pic\" />\n                                </div>\n                                \n                            </Col>\n                            <Col sm={8} className=\"setting-file-btn\" >\n                                <Form>\n                                    <Form.Group>\n                                        <Form.File \n                                        // id=\"exampleFormControlFile2\" className=\"upload-file-btn\"\n                                        id=\"bio-pic\"\n                                        label={coverPic.name ? coverPic.name : ''}\n                                        onChange={coverPicUpload}\n                                        custom\n                                        />\n                                    </Form.Group>\n                                    <small >Maximum file size 3MB.</small>\n                                    {isSuccess.coverPic ? <Alert variant=\"success\" style={{padding: '5px', marginTop: '1rem', textAlign:'center'}}><small>{msg.coverPic}</small></Alert> :\n                                    <div style={{marginTop: '1rem'}}></div>\n                                    }\n                                    <Button variant=\"primary\" onClick={saveProfileCover} className=\"save-changes-btn \" disabled={disableBtnStates.coverPic}>\n                                    Upload\n                                    </Button>\n                                </Form>\n                            </Col>\n                        </Row>\n                        \n                        <hr />\n                        <div className=\"spacer-2rem\"></div>\n                        \n                        <p className=\"heading-modal\">Change password</p>\n                        <Form>\n                            <Form.Group >\n                                <Form.Label>Current password</Form.Label>\n                                <Form.Control type=\"password\" placeholder=\"Enter your current password\" name=\"currentPw\" onChange={handleChangePw} />\n                            </Form.Group>\n                            <br/>\n                            <Form.Group >\n                                <Form.Label>New password</Form.Label>\n                                <Form.Control type=\"password\" placeholder=\"Enter your new password\" name=\"newPw\" onChange={handleChangePw} />\n                            </Form.Group>\n                            <br/>\n                            <Form.Group >\n                                <Form.Label>Confirm new password</Form.Label>\n                                <Form.Control type=\"password\" placeholder=\"Confirm your new password\" name=\"conNewPw\" onChange={handleChangePw} />\n                            </Form.Group>\n                            <br/>\n                            { isSuccess.password && <Alert variant=\"success\">{msg.password}</Alert> }\n\n                            <Button variant=\"primary\" onClick={handleClose} className=\"save-changes-btn\" disabled={disableBtnStates.password}>\n                                    Save new password\n                            </Button>\n                        </Form>\n                    </Col>\n                </Row>\n                \n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"primary\" onClick={handleClose} className=\"save-changes-btn btn-close-settings\">\n                        Close\n                </Button>\n                {/* <Button variant=\"primary\" onClick={testDelete} className=\"save-changes-btn btn-close-settings\">\n                        test delete\n                </Button> */}\n            </Modal.Footer>\n        </Modal>\n    </Fragment>\n    )\n}\n\nexport default SettingModal","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Influencer/vehicleCard.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Influencer/SubNav.js",["415","416","417","418","419"],"import React, { Fragment, useState, useEffect } from 'react'\nimport { Row, Col,  Button, Tooltip, OverlayTrigger } from 'react-bootstrap'\nimport { NavLink } from 'react-router-dom'\nimport settingsIcon from '../../assets/global/Settings-icon-white.svg'\nimport './subnav.scss'\nimport * as Realm from \"realm-web\"\nimport jwt from 'jsonwebtoken'\nimport { becomeAFan } from '../../store/actions/userActions'\nimport { openLoginModal } from '../../store/actions/authActions'\nimport { connect } from 'react-redux'\nimport doneIcon from '../../assets/global/done-white.svg'\n\nconst SubNav = (props) =>{\n    const [isFanOf, setIsFanOf] = useState(false)\n    const appConfig = {\n        id: process.env.REACT_APP_REALM_APP_ID,\n        // timeout: 10000, \n        // timeout in number of milliseconds\n      };\n    const app = new Realm.App(appConfig);\n    const influencer = props.influencer\n\n    const renderTooltip = (props) => (\n        <Tooltip  id=\"button-tooltip\" {...props} key=\"button-tooltip-key\">\n          <p style={{marginBottom: 0}}>You will receive notifications when the influencer publishes a video or updates their bio.</p>\n        </Tooltip>\n      );\n\n    const handleBecomeAFan = async ()=>{\n        const token = sessionStorage.getItem('session_user')\n        if(token){\n            jwt.verify(token, process.env.REACT_APP_JWT_SECRET, async (err, decoded)=>{\n                if(err){\n                    console.log('open login modal', err)\n                    props.openLoginModal(true)\n                    // open login modal \n                }else{\n                    try{\n                        await app.logIn(decoded.cre).then( async user =>{\n                            const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n                            const collectionUsers = mongo.db(process.env.REACT_APP_REALM_DB_NAME).collection(\"users\")\n                            const collectionFans = mongo.db(process.env.REACT_APP_REALM_DB_NAME).collection(`fans-${influencer.username}`)\n                \n                            try{\n                                await collectionUsers.updateOne(\n                                    { \"userId\": user.id },\n                                    { $push: { fansOf: {id: influencer.userId, username: influencer.username} } },\n                                    { upsert: true }\n                                ).then(async res =>{\n                                    const fanData = {userId: user.id, date: new Date().getTime(), username: props.customData.username}\n                                    try{\n                                        await collectionFans.insertOne(fanData).then(res =>{\n                                            console.log(res)\n\n                                        })\n                                    }catch(err){\n                                        console.log(err)\n                                    }\n                                    console.log('become a fan of ', influencer.username)\n                                    setIsFanOf(true)\n                                    \n                                })\n                            }catch(err){console.log(err)}\n                        })\n                    }catch(err){\n                        console.log(err)\n                    }\n                }\n            });\n        }else{\n            console.log('this working')\n            props.openLoginModal(true)\n        }\n    }\n    const checkFanOf = () =>{\n        if(props.customData.fansOf){\n            props.customData.fansOf.map(fan =>{\n                if(fan.id === influencer.userId){\n                    setIsFanOf(true)\n                    return\n                }\n            })\n        }else{\n            setIsFanOf(false)\n        }\n    }\n    useEffect(() => {\n        console.log('fired?')\n        checkFanOf()\n    }, [props.customData.fansOf])\n\n    useEffect(() => {\n        checkFanOf()\n    }, [influencer.userId])\n\n    return(\n        <Fragment>\n            <div className=\"banner-wrapper\">\n                <img src={influencer.profileCover} alt={props.influencer.username} className=\"influencer-banner\"/>\n            </div>\n            <Row>\n                <Col style={{paddingRight:0}}>\n                <img src={influencer.profilePic} className=\"bio-profile-pic\" alt={`${influencer.username} profile picture`}/>\n                </Col>\n                <Col className=\"bio-text-wrapper\" style={{paddingLeft: 0}}>\n                {/* <img src={influencer.profile_pic} className=\"bio-profile-pic\" /> */}\n                    <div className=\"bio-creator-name\">{influencer.username}</div>\n                    <div className=\"bio-creator-data\">{props.formattedFans} Fans</div>\n                </Col>\n                <Col sm={7} className=\"bio-sub-menu\">\n                    <nav className=\"bio-sub-nav\">\n                    <NavLink key={`${influencer.userId}-nav-1`} to={`/influencer/${influencer.userId}`}>Featured</NavLink>\n                    <NavLink key={`${influencer.userId}-nav-2`} to={`/all-videos/${influencer.userId}`}>All Videos</NavLink>\n                    <NavLink key={`${influencer.userId}-nav-3`} to={`/garage/${influencer.userId}`}>Garage</NavLink>\n                    <NavLink key={`${influencer.userId}-nav-4`} to={`/social/${influencer.userId}`}>Social</NavLink>\n                    <NavLink key={`${influencer.userId}-nav-5`} to={`/swagg-influencer/${influencer.userId}`}>swagg</NavLink>\n                    </nav>\n                </Col>\n                <Col className=\"center-btn\" sm={2}>\n                \n                {props.allowEdit ?\n                        <Button className=\"garage-setting-btn\" onClick={props.handleShowSetting} >\n                            <img src={settingsIcon} alt=\"setting\" className=\"setting-icon\"/>\n                            Settings\n                        </Button>\n                :\n                    [isFanOf ? <Button className=\"btn-fan\" disabled>\n                    <img src={doneIcon} style={{width: '1rem'}} alt=\"you are already done this\" />{' '}Fan of {influencer.username}</Button> :\n                    <Fragment>\n                        <Button className=\"btn-fan\" onClick={handleBecomeAFan}>Become a fan</Button><br/>\n                        <OverlayTrigger\n                            placement=\"left\"\n                            delay={{ show: 250, hide: 200 }}\n                            overlay={renderTooltip}\n                        >\n                            <small className=\"tooltip-btn\">What this means?</small>\n                        </OverlayTrigger>\n                        \n                    </Fragment>\n                    ]\n                }\n                </Col>\n            </Row>\n        </Fragment>\n    )\n}\n\nconst mapDispatchToProps = (dispatch) =>{\n    return{\n        becomeAFan: (data) => dispatch(becomeAFan(data)),\n        openLoginModal: (state) =>dispatch(openLoginModal(state))\n    }\n}\nconst mapStateToProps = (state) =>{\n    return{\n        openmodal: state.auth.openmodal,\n        customData: state.auth.customData\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SubNav)","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Influencer/Social.js",["420"],"import React, { Fragment, useEffect, useState} from 'react'\nimport { Link } from 'react-router-dom'\nimport { Row, Col } from 'react-bootstrap'\nimport Layout from '../Layout/Layout'\nimport { Helmet } from \"react-helmet\"\nimport SubNav from './SubNav'\nimport * as Realm from \"realm-web\"\nimport './social.scss'\nimport { getInfluencer }from '../../store/actions/influencerActions'\nimport instaIcon from '../../assets/social/instagram.svg'\nimport fbIcon from '../../assets/social/facebook.svg'\nimport twitterIcon from '../../assets/social/twitter.svg'\nimport tiktokIcon from '../../assets/social/TikTok.svg'\nimport amazonIcon from '../../assets/social/Amazon-Affiliate-program.jpg'\nimport { connect } from 'react-redux'\nimport jwt from 'jsonwebtoken'\n\nconst Social = (props) =>{\n    const appConfig = {\n        id: process.env.REACT_APP_REALM_APP_ID,\n        // timeout: 10000, \n        // timeout in number of milliseconds\n      };\n    const app = new Realm.App(appConfig);\n    const userIdParam = props.match.params.id\n    const [influencer, setInfluencer] = useState({profileCover: '', profilePic: '', username: '', userId: '', social: {instagram: '', facebook: '', twitter: ''}})\n    // const generateCode = () =>{\n    //     const shortID = short.generate()\n    //     console.log('id', shortID)\n    // }\n    // const getData = async () =>{\n    //     const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n    //     const collectionInfluencer = mongo.db(\"smoke-show\").collection(\"influencers\")\n    //     const filter = {userId: userIdParam}\n    //     try{\n    //         await collectionInfluencer.findOne(filter).then(user =>{\n    //             setInfluencer(user)\n\n    //         })\n    //     }catch(err){ console.log(err) }\n    // }\n    const userLogin =async (cre) =>{\n         try{\n             await app.logIn(cre).then(user =>{\n                 console.log('user logged in', user.id)\n             })\n         }catch(err){console.log(err)}\n    }\n    const loginCheck = () =>{\n        const tokenUser = sessionStorage.getItem('session_user')\n        if(tokenUser){\n            jwt.verify(tokenUser, process.env.REACT_APP_JWT_SECRET, function(err, decoded) {\n                if (err) {\n                    // timeout\n                    const cre = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTH_PUBLIC_VIEW);\n                    userLogin(cre)\n                    \n                }else{\n                    userLogin(decoded.cre)\n                }\n              });\n            \n        }else{\n            const cre = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTH_PUBLIC_VIEW);\n            userLogin(cre)\n        }\n    }\n    useEffect(() => {\n        if(props.influencerObj.username){\n            setInfluencer(props.influencerObj)\n        }\n        \n    }, [props.influencerObj])\n\n    useEffect(() => {\n        loginCheck()\n        props.getInfluencer(userIdParam)\n    }, [])\n    return(\n        <Fragment>\n            <Helmet>\n                <title>Influencer Social Media Links | The Smoke Show</title>\n                <meta name=\"description\" content=\"Place the meta description text here.\" />\n            </Helmet>\n            <Layout>\n                <div className=\"main-wrapper\">\n                    <div className=\"spacer-4rem\"></div>\n                    <SubNav influencer={influencer} formattedFans={props.formattedFans}/>\n                    <div className=\"spacer-4rem\"></div>\n                    <h2 className=\"title\">{influencer.username} Social Media</h2>\n                    <div className=\"spacer-4rem\"></div>\n                    <Row>\n                        <Col sm={6}>\n                            <ul style={{listStyle: 'none'}}>\n                            {influencer.social.instagram  && \n                                <li className=\"social-media-container\">\n                                    <Link to={influencer.social.instagram}>\n                                        <img className=\"social-img\" src={instaIcon} alt=\"Instagram\" />\n                                        <p className=\"social-text\">{influencer.social.instagram}</p>\n                                    </Link>\n                                </li>\n                            }\n                            \n                            {influencer.social.facebook && \n                                <li className=\"social-media-container\">\n                                    <Link to={influencer.social.facebook}>\n                                        <img className=\"social-img\" src={fbIcon} alt=\"Instagram\" />\n                                        <p className=\"social-text\">{influencer.social.facebook}</p>\n                                    </Link>\n                                </li>\n                            }\n                            {influencer.social.twitter && \n                                <li className=\"social-media-container\">\n                                    <Link to={influencer.social.twitter}>\n                                        <img className=\"social-img\" src={twitterIcon} alt=\"Instagram\" />\n                                        <p className=\"social-text\">{influencer.social.twitter}</p>\n                                    </Link>\n                                </li>\n                            }\n                            {influencer.social.tiktok && \n                                <li className=\"social-media-container\">\n                                    <Link to={influencer.social.tiktok}>\n                                        <img className=\"social-img\" src={tiktokIcon} alt=\"Instagram\" />\n                                        <p className=\"social-text\">{influencer.social.tiktok}</p>\n                                    </Link>\n                                </li>\n                            }\n                            </ul>\n                        </Col>\n                        <Col sm={6}>\n                            <ul style={{listStyle: 'none'}}>\n                            {influencer.social.amazon && \n                                <li className=\"social-media-container\">\n                                    <Link to={influencer.social.amazon}>\n                                        <img className=\"social-img\" src={amazonIcon} alt=\"Instagram\" />\n                                        <p className=\"social-text\">{influencer.social.amazon}</p>\n                                    </Link>\n                                </li>\n                            }\n                            </ul>\n                        </Col>\n                    </Row>\n                    \n                </div>\n            </Layout>\n        </Fragment>\n        \n    )\n}\nconst mapDispatchToProps = (dispatch) =>{\n    return{\n        getInfluencer: (id)=> dispatch(getInfluencer(id))\n    }\n}\nconst mapStateToProps = (state)=>{\n    return{\n        influencerObj: state.influ.influencerObj,\n        formattedFans: state.influ.formattedFans\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Social)","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Influencer/Swagg.js",["421","422","423"],"import React, { Fragment, useState, useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport Layout from '../Layout/Layout'\nimport { Helmet } from \"react-helmet\"\nimport * as Realm from \"realm-web\"\nimport SubNav from './SubNav'\nimport { Row, Col } from 'react-bootstrap'\nimport './social.scss'\nimport teeSpringIcon from '../../assets/swagg/teespring-logo.jpg'\nimport printfulIcon from '../../assets/swagg/printful.jpg'\nimport { getInfluencer }from '../../store/actions/influencerActions'\nimport jwt from 'jsonwebtoken'\nimport { connect } from 'react-redux'\n\n\nconst SwaggInfluencer = (props) =>{\n    const [influencer, setInfluencer] = useState({profileCover: '', profilePic: '', username: '', userId: '', swagg: {teeSpring: '', printful: ''}})\n    const [formattedFans, setFormattedFans] = useState('')\n    const [noData, setNodata] = useState(false)\n    const appConfig = {\n        id: process.env.REACT_APP_REALM_APP_ID,\n        // timeout: 10000, \n        // timeout in number of milliseconds\n      };\n    const app = new Realm.App(appConfig)\n    const userIdParam = props.match.params.id\n    const getData = async () =>{\n        const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n        const collectionInfluencer = mongo.db(\"smoke-show\").collection(\"influencers\")\n        const filter = {userId: userIdParam}\n        try{\n            await collectionInfluencer.findOne(filter).then(user =>{\n                setInfluencer(user)\n                if(!user.swagg.teeSpring && !user.swagg.printful) setNodata(true)\n                if(user.fans > 999){\n                    setFormattedFans(Math.sign(user.fans)*((Math.abs(user.fans)/1000).toFixed(1)) + 'k')\n                }else{\n                    setFormattedFans(Math.sign(user.fans)*Math.abs(user.fans))\n                }\n\n            })\n        }catch(err){ console.log(err) }\n    }\n    const userLogin =async (cre) =>{\n        try{\n            await app.logIn(cre).then(user =>{\n                console.log('user logged in', user.id)\n            })\n        }catch(err){console.log(err)}\n   }\n   const loginCheck = () =>{\n    const tokenUser = sessionStorage.getItem('session_user')\n    if(tokenUser){\n        jwt.verify(tokenUser, process.env.REACT_APP_JWT_SECRET, function(err, decoded) {\n            if (err) {\n                // timeout\n                const cre = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTH_PUBLIC_VIEW);\n                userLogin(cre)\n                \n            }else{\n                userLogin(decoded.cre)\n            }\n          });\n        \n    }else{\n        const cre = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTH_PUBLIC_VIEW);\n        userLogin(cre)\n    }\n}\n    useEffect(() => {\n        if(typeof(props.influencerObj.swagg) !== 'undefined'){\n            setInfluencer(props.influencerObj)\n            if(!props.influencerObj.swagg.teeSpring && !props.influencerObj.swagg.printful) setNodata(true)\n        }\n        \n    }, [props.influencerObj])\n\n    useEffect(() => {\n        // getData()\n        loginCheck()\n        props.getInfluencer(userIdParam)\n    }, [])\n    return(\n        <Fragment>\n            <Helmet>\n                <title>Swagg Influencer | The Smoke Show</title>\n            </Helmet>\n            <Layout>\n                <div className=\"main-wrapper\" style={{minHeight: 'calc(100vh - 21rem)'}}>\n                    <div className=\"spacer-4rem\"></div>\n                    <SubNav influencer={influencer} formattedFans={props.formattedFans}/>\n                    <div className=\"spacer-4rem\"></div>\n                    <h2 className=\"title\">{influencer.username} Swagg</h2>\n                    <div className=\"spacer-4rem\"></div>\n                    <Row>\n                        <Col sm={6}>\n                            <ul style={{listStyle: 'none'}}>\n                                { noData && <p>No Swagg</p>}\n                                { influencer.swagg.teeSpring &&\n                                <li className=\"social-media-container\">\n                                    <Link to={influencer.swagg.teeSpring}>\n                                        <img src={teeSpringIcon} alt=\"Teespring\" className=\"social-img\"/>\n                                        <p className=\"social-text\">{influencer.swagg.teeSpring}</p>\n                                    </Link>\n                                </li>\n                                }\n                                {influencer.swagg.printful && \n                                <li className=\"social-media-container\">\n                                    <Link to={influencer.swagg.teeSpring}>\n                                        <img src={printfulIcon} alt=\"Printful\" className=\"social-img\"/>\n                                        <p className=\"social-text\">{influencer.swagg.printful}</p>\n                                    </Link>\n                                </li>\n                                }\n                            </ul>\n                        </Col>\n                        <Col sm={6}>\n                            \n                        </Col>\n                    </Row>\n                </div>\n            </Layout>\n        </Fragment>\n    )\n}\nconst mapDispatchToProps = (dispatch) =>{\n    return{\n        getInfluencer: (id)=> dispatch(getInfluencer(id))\n    }\n}\nconst mapStateToProps = (state)=>{\n    return{\n        influencerObj: state.influ.influencerObj,\n        formattedFans: state.influ.formattedFans\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SwaggInfluencer)","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/store/actions/bioActions.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/store/reducers/bioReducer.js",["424","425"],"import * as Realm from \"realm-web\"\n\nconst initState = {}\n\nconst bioReducer = (state = initState, action) =>{\n    \n    switch(action.type){\n        case 'CREATE_CAR':\n            console.log('car created', action.car)\n        // default: return state\n    }\nreturn state\n}\n\nexport default bioReducer","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Admin/QueryVideoData.js",["426","427","428"],"import React, { useState, useEffect } from 'react'\nimport { Button, Form, Alert } from 'react-bootstrap'\nimport * as Realm from \"realm-web\"\nimport { youtubeAPI } from '../../utils/youtubeAPI'\nimport {Helmet} from \"react-helmet\"\nimport jwt from 'jsonwebtoken'\nimport {logOutUser} from '../../store/actions/authActions'\nimport { connect } from 'react-redux'\n\nimport AdminLoginDiv from './AdminLoginDiv'\n\nconst QueryVideoData = (props) =>{\n    const [carObj, setCarObj] = useState({id: '', name: ''})\n    const [userObj, setUserObj] = useState({email: '', password: ''})\n    const [isLoggedIn, setIsLoggedIn] = useState(false)\n    const [msg, setMsg] = useState('')\n    //last query data Feb 20 2021 for both Kirk and Eddie\n\n    // const [videoData, setVideoData] = useState([])\n    const EddieXChannelId = 'UCdOXRB936PKSwx0J7SgF6SQ'\n    const EddiXuserId = '60230361f63ff517d4fdad14'\n    const KirkUserId = '602303890ff2832f7d19a2af'\n    const KirkChannelId = 'UCXPVB7s1TJTE0WjDpakGp5Q'\n\n    const maxAgeTest = 1 * 60 * 60\n    const appConfig = {\n        id: process.env.REACT_APP_REALM_APP_ID,\n        // timeout: 10000, \n        // timeout in number of milliseconds\n        };\n    const app = new Realm.App(appConfig)\n    const changeUserObj = (e) =>{\n        setUserObj({\n            ...userObj,\n            [e.target.name]: e.target.value\n        })\n    }\n    const handleSubmitLogin = async (e) =>{\n        setMsg('')\n        e.preventDefault()\n        const emailLowerCase = userObj.email.toLowerCase()\n        const credentials = Realm.Credentials.emailPassword(emailLowerCase, userObj.password)\n        try{\n            app.logIn(credentials).then(async user =>{\n                if(app.currentUser.id === user.id){\n                    console.log('user updated')\n                }else{\n                    console.log('user is not updated')\n                }\n                setIsLoggedIn(true)\n                const customData = user.customData\n                const token = jwt.sign({ userData: customData }, process.env.REACT_APP_JWT_SECRET, {expiresIn: maxAgeTest})\n                const tokenCredentials = jwt.sign({ cre: credentials }, process.env.REACT_APP_JWT_SECRET, {expiresIn: maxAgeTest})\n                sessionStorage.setItem('session_token', token)\n                sessionStorage.setItem('session_user', tokenCredentials)\n      \n            })\n        }catch(err){\n            console.log(err)\n            setMsg('login fail')\n        }\n        \n    }\n\n    // const handleVideoSearch = async e =>{\n    //     e.preventDefault()\n\n    //     await youtubeAPI.get('/search', {\n    //         params: {\n    //             // q: searchKeyword,\n    //             channelId: KirkChannelId,\n    //             publishedAfter: '2021-02-21T00:00:00Z',\n    //             publishedBefore: '2021-02-23T23:59:59Z',\n    //             order: 'date'\n    //         }\n    //     }).then(async youtubeObj =>{\n    //         console.log('res from youtube', youtubeObj)\n    //         // setTitleStr(\"EddieX \" + searchKeyword)\n    //         const formatted = youtubeObj.data.items.map(video =>{\n\n    //             video.videoId = video.id.videoId\n    //             video.userId = KirkUserId\n    //             video.channelId = KirkChannelId\n    //             delete video.kind\n    //             delete video.etag\n    //             delete video.id\n    //             return video\n    //         })\n    //         const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n    //         const collection = mongo.db(\"smoke-show\").collection(\"youtube-videos\")\n    //         const result = await collection.insertMany(formatted)\n    //         console.log(result)\n    //     })\n    // }\n\n    // const updateLatest =async ()=>{\n    //     const credentials = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTH_PUBLIC_VIEW);\n        \n    //     try{\n    //         await app.logIn(credentials).then( async user =>{\n    //             const filter = {userId: KirkUserId}\n    //             const numberOfVideos = 5\n    //             const options = {sort: {\"snippet.publishedAt\": -1}, limit: numberOfVideos}\n    //             const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n    //             const collection = mongo.db(\"smoke-show\").collection(\"youtube-videos\")\n    //             await collection.find(filter, options).then(videos=>{\n    //                 console.log('video', videos)\n    //                 var tmp = new Array();\n    //                 for (let i = 0; i < numberOfVideos; i++) {\n    //                     tmp[i] = setInterval(async ()=> {\n    //                         try{\n    //                             await youtubeAPI.get('/videos', {\n    //                                 params: {\n    //                                     id: videos[i].videoId,\n    //                                 }\n    //                             }).then(async videoObj =>{\n    //                                 console.log('obj', videoObj)\n    //                                 console.log('desc', videoObj.data.items[0].snippet.description)\n    //                                 try{\n    //                                     await collection.updateOne(\n    //                                         { videoId: videos[i].videoId },\n    //                                         { $set: { 'snippet.description': videoObj.data.items[0].snippet.description }},\n    //                                         { upsert: false}\n    //                                     )\n    //                                 }catch(err){\n    //                                     console.log(err)\n    //                                     clearInterval(tmp[i])\n    //                                 }\n                                    \n    //                                 clearInterval(tmp[i])\n    //                             })\n    //                         }catch(err){\n    //                             console.log(err)\n    //                             clearInterval(tmp[i])\n    //                         }\n                     \n    //                     }, 3000);\n    //                 }\n    //             })\n    //         })\n    //     }catch(err){\n    //         console.log(err)\n    //     }\n        \n    // }\n\n    // const handleUpdateDesc = async (e) =>{\n    //     const credentials = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTH_PUBLIC_VIEW);\n    //     try{\n    //         await app.logIn(credentials).then(async user =>{\n    //             const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n    //             const collection = mongo.db(\"smoke-show\").collection(\"youtube-videos\")\n\n    //             const filter = {userId: EddiXuserId}\n    //             // {\"snippet.publishedAt\": -1}\n    //             await collection.find(filter).then(videos =>{\n    //                 console.log('videos', videos)\n    //                 var tmp = new Array();\n    //                 var v = new Array();\n    //                 for (let i = 144; i < 146; i++) {\n    //                     // var j = 0;\n    //                     tmp[i] = setInterval(async ()=> {\n    //                         try{\n    //                             await youtubeAPI.get('/videos', {\n    //                                 params: {\n    //                                     id: videos[i].videoId,\n    //                                 }\n    //                             }).then(async videoObj =>{\n    //                                 console.log('obj', videoObj)\n    //                                 console.log('desc', videoObj.data.items[0].snippet.description)\n    //                                 try{\n    //                                     await collection.updateOne(\n    //                                         { videoId: videos[i].videoId },\n    //                                         { $set: { 'snippet.description': videoObj.data.items[0].snippet.description }},\n    //                                         { upsert: false}\n    //                                     )\n    //                                 }catch(err){\n    //                                     console.log(err)\n    //                                     clearInterval(tmp[i])\n    //                                 }\n                                    \n    //                                 clearInterval(tmp[i])\n    //                             })\n    //                         }catch(err){\n    //                             console.log(err)\n    //                             clearInterval(tmp[i])\n    //                         }\n                     \n    //                     }, 3000);\n    //                 }\n    //             })\n    //         })\n    //     }catch(err){\n    //         console.log(err)\n    //     }\n      \n    // }\n\n    // const handleCheckVideoId =async ()=>{\n    //     const credentials = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTH_PUBLIC_VIEW);\n    //     try{\n    //         await app.logIn(credentials).then(user=>{\n    //             const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n    //             const collection = mongo.db(\"smoke-show\").collection(\"youtube-videos\")\n    //             let tempArr = []\n    //             const filter = {userId: KirkUserId}\n    //             collection.find(filter).then(videos =>{\n    //                 videos.map(video =>{\n    //                     tempArr.push(video.videoId)\n    //                 })\n    //                 return tempArr\n    //             }).then(async arr =>{\n    //                 console.log('all videos: ', arr)\n    //                 const collectionTemp = mongo.db(\"smoke-show\").collection(\"cars-data-analysis\")\n    //                 const allIds =  {allVideoIds: arr}\n    //                 const res = await collectionTemp.insertOne(allIds)\n    //                 console.log(res)\n    //             })\n    //         })\n    //     }catch(err){\n    //         console.log(err)\n    //     }\n    // }\n    const checkYoutubeId = async() =>{\n        let tempArr = []\n        await youtubeAPI.get('/search', {\n            params: {\n                channelId: KirkChannelId,\n                publishedAfter: '2021-01-01T00:00:00Z',\n                publishedBefore: '2021-02-20T23:59:59Z',\n                order: 'date'\n            }\n        }).then(async youtubeObj =>{\n            console.log('res from youtube', youtubeObj)\n            youtubeObj.data.items.map(video =>{\n                tempArr.push(video.id.videoId)\n            })  \n            return tempArr\n            \n        }).then( async arr =>{\n            const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n            const collection = mongo.db(\"smoke-show\").collection(\"cars-data-analysis\")\n            const youtubeIds = {allVideoIds: arr, source: 'youtube'}\n            const result = await collection.insertOne(youtubeIds)\n            // const result = await collection.updateOne(\n            //     {source: 'youtube'},\n            //     { $push: {allVideoIds: { $each: arr }}}\n            // )\n            console.log(result)\n        })\n    }\n    const filterArray = (arr1, arr2) => {\n        const filtered = arr1.filter(el => {\n            console.log('doing?', arr2.indexOf(el) === -1)\n           return arr2.indexOf(el) === -1;\n        });\n        return filtered;\n     };\n    // const checkMissing = async () =>{\n    //     const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n    //     const collection = mongo.db(\"smoke-show\").collection(\"cars-data-analysis\")\n    //     let tempArr = []\n    //     const filterSmoke = {source: 'smokeShow'}\n    //     const filterYoutube = {source: 'youtube'}\n    //     const smokeShow = await collection.findOne(filterSmoke)\n    //     const youtube = await collection.findOne(filterYoutube)\n       \n    //      const result = filterArray(youtube.allVideoIds, smokeShow.allVideoIds)\n    //      console.log(result);\n    // }\n    const addMissing = async () =>{\n        setMsg('')\n        const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n        const collectionVideos = mongo.db(\"smoke-show\").collection(\"youtube-videos\")\n        const filter = {videoId: carObj.id}\n        try {\n            await collectionVideos.findOne(filter).then( res =>{\n                console.log('res', res)\n                if(res){\n                    setMsg('This videoId is in DB already.')\n                    return\n                }else{\n                    console.log('running?')\n                    let influencer = {userId: '', channelId: ''}\n                    if(carObj.name === 'EddieX'){\n                        influencer.userId = EddiXuserId\n                        influencer.channelId = EddieXChannelId\n                        return influencer\n                    }else if(carObj.name === 'Kirk'){\n                        influencer.userId = KirkUserId\n                        influencer.channelId = KirkChannelId\n                        return influencer\n                    }\n                }\n                \n            }).then(async influencer =>{\n                await youtubeAPI.get('/videos', {\n                    params: {\n                        id: carObj.id\n                    }\n                }).then(async res =>{\n                    const youtubeData = res.data.items[0]\n                    const formatted = {\n                        videoId: carObj.id,\n                        userId: influencer.userId,\n                        channelId: influencer.channelId,\n                        snippet: {\n                            publishedAt: youtubeData.snippet.publishedAt,\n                            title:  youtubeData.snippet.title,\n                            description: youtubeData.snippet.description,\n                            thumbnails: youtubeData.snippet.thumbnails,\n                            channelTitle: youtubeData.snippet.channelTitle,\n                            liveBroadcastContent: youtubeData.snippet.liveBroadcastContent\n                        }            \n                    }\n                    // const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n                    // const collection = mongo.db(\"smoke-show\").collection(\"youtube-videos\")\n                    const result = await collectionVideos.insertOne(formatted)\n                    console.log(result)\n                    setMsg('Success!')\n                })\n            })\n        } catch (error) {\n            console.log(error)\n            // setMsg('error!')\n        }\n        \n        \n    }\n    const handleChange = (e) =>{\n        setCarObj({\n            ...carObj,\n            [e.target.name]: e.target.value\n        })\n        console.log(carObj)\n    }\n    const handleLogout = () =>{\n        props.logOutUser()\n        setIsLoggedIn(false)\n    }\n    useEffect(() => {\n        const tokenUser = sessionStorage.getItem('session_user')\n        if(tokenUser){\n            setIsLoggedIn(true)\n        }else{\n            setIsLoggedIn(false)\n        }\n\n    }, [])\n\n    return(\n        <div>\n        <Helmet>\n            <meta name=\"robots\" content=\"noindex, nofollow\" />\n        </Helmet>\n        <div style={{marginTop: '4rem'}}></div>\n        <center><h1>query youtube data</h1></center>\n\n        <center style={{maxWidth: '600px', margin: '0 auto'}}>\n            { isLoggedIn ?\n            \n            <Form>\n                <Form.Group controlId=\"formBasicEmail\">\n                    <Form.Label>Video ID</Form.Label>\n                    <Form.Control type=\"text\" name=\"id\" placeholder=\"Enter youtube video ID\" onChange={handleChange}/>\n                    <Form.Text className=\"text-muted\">\n                    We'll never share your email with anyone else.\n                    </Form.Text>\n                </Form.Group>\n                <br/><br/>\n                <Form.Control as=\"select\" name=\"name\" onChange={handleChange}>\n                    <option>Select an influencer</option>\n                    <option>EddieX</option>\n                    <option>Kirk</option>\n                </Form.Control>\n                {/* <Button variant=\"primary\" type=\"submit\">\n                    Submit\n                </Button> */}<br/><br/>\n                {msg && <Alert variant=\"danger\">{msg}</Alert>}\n                \n                <Button onClick={addMissing}>Add data</Button>\n                <br/><br/><br/><br/>\n                <Button onClick={handleLogout}>Logout</Button>\n            </Form>\n            :\n            <AdminLoginDiv handleSubmitLogin={handleSubmitLogin} handleChange={changeUserObj} msg={msg} />\n            }\n                {/* <Button onClick={handleVideoSearch}>Query data</Button> */}\n                {/* <Button onClick={handleUpdateDesc}>Click me to update description</Button> */}\n                {/* <Button onClick={updateLatest}>updateLatest</Button> */}\n                {/* <Button onClick={checkYoutubeId}>Check all videoId in youtube</Button> */}\n                {/* <Button onClick={handleCheckVideoId}>Check video ids in DB</Button> */}\n                {/* <Button onClick={checkMissing}>filter arrays</Button> */}\n                \n            </center>\n            \n        </div>\n    )\n}\nconst mapDispatchToProps = (dispatch) =>{\n    return{\n        logOutUser: () => dispatch(logOutUser())\n    }\n}\nexport default connect(null, mapDispatchToProps)(QueryVideoData)\n\n","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Admin/EditVideoData.js",["429","430","431"],"import React, { useState, Fragment, useEffect } from 'react'\nimport * as Realm from \"realm-web\"\nimport Helmet from 'react-helmet'\nimport { Container, Row, Col, Form, Pagination, Button } from 'react-bootstrap'\nimport jwt from 'jsonwebtoken'\n\nconst EditVideoData = () =>{\n    const [activePag, setActivePag] = useState(0)\n    const [isLoggedIn, setIsLoggedIn] = useState(false)\n    const [userObj, setUserObj] = useState({email: '', password: ''})\n    const app = new Realm.App({ id: process.env.REACT_APP_REALM_APP_ID })\n    const [allVideos, setAllVideos] = useState([])\n    const [message, setMessage] = useState('')\n    const [carDataId, setCarDataId] = useState('')\n    const [editVideoId, setEditVideoId] = useState('')\n    const [editMode, setEditMode] = useState(false)\n    const maxAgeTest = 1 * 60 * 60\n\n    const handlePagNum = (num) =>{\n        console.log('num', num)\n        setActivePag(num)\n        setAllVideos({...allVideos})\n    }\n    let items = [];\n    for (let number = 0; number <= 10; number++) {\n    items.push(\n        <Pagination.Item key={number} active={number === activePag} onClick={()=>{handlePagNum(number)}}>\n        {number}\n        </Pagination.Item>,\n    );\n    }\n    \n    const handleChange = (e) =>{\n        setUserObj({\n            ...userObj,\n            [e.target.name]: e.target.value\n        })\n    }\n\n    const videoEmbedURL = 'https://www.youtube.com/embed/'\n\n    const chunkArray = (allVideos) =>{\n        let chunk_size = 15\n        let index = 0;\n        let arrayLength = allVideos.length;\n        let tempArray = [];\n        let myChunk\n        \n        for (index = 0; index < arrayLength; index += chunk_size) {\n            myChunk = allVideos.slice(index, index+chunk_size);\n            // Do something if you want with the group\n            tempArray.push(myChunk);\n        }\n\n        return tempArray;\n    }\n    \n    const handleSubmitLogin = async (e) =>{\n        e.preventDefault()\n        const emailLowerCase = userObj.email.toLowerCase()\n        const credentials = Realm.Credentials.emailPassword(emailLowerCase, userObj.password)\n        try{\n            app.logIn(credentials).then(async user =>{\n                setIsLoggedIn(true)\n                const customData = user.customData\n                const token = jwt.sign({ userData: customData }, process.env.REACT_APP_JWT_SECRET, {expiresIn: maxAgeTest})\n                const tokenCredentials = jwt.sign({ cre: credentials }, process.env.REACT_APP_JWT_SECRET, {expiresIn: maxAgeTest})\n                sessionStorage.setItem('session_token', token)\n                sessionStorage.setItem('session_user', tokenCredentials)\n                const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME);\n                const mongoCollection = mongo.db(\"smoke-show\").collection(\"youtube-videos\")\n                const filter = {channelId: 'UCdOXRB936PKSwx0J7SgF6SQ'}\n                await mongoCollection.find(filter).then( videos =>{\n                    console.log(videos)\n                    const chunkedVideos = chunkArray(videos)\n                    setAllVideos(chunkedVideos)\n                    \n                })\n            })\n        }catch(err){\n            console.log(err)\n            setMessage('login fail')\n        }\n        \n    }\n\n    const loginDiv =\n    <Container style={{alignItems: 'center', justifyContent: 'center', marginTop: '5rem'}}>\n        <Form onSubmit={handleSubmitLogin}>\n            <Form.Group controlId=\"formBasicEmail\">\n                <Form.Label>Email address</Form.Label>\n                <Form.Control type=\"email\" placeholder=\"Enter email\" name=\"email\" onChange={handleChange}/>\n                <Form.Text className=\"text-muted\">\n                </Form.Text>\n            </Form.Group>\n\n            <Form.Group controlId=\"formBasicPassword\">\n                <Form.Label>Password</Form.Label>\n                <Form.Control type=\"password\" placeholder=\"Password\" onChange={handleChange} name=\"password\" />\n            </Form.Group>\n            <br />\n            <Button variant=\"primary\" type=\"submit\">\n                Log in\n            </Button>\n        </Form>\n    </Container>\n    \n    const handleChangeCarData = (e) =>{\n        console.log('change', e.target.value)\n        console.log('name', e.target.name)\n        setCarDataId(e.target.value)\n        setEditVideoId(e.target.name)\n    }\n    const handleDataUpdate = async (e) =>{\n        e.preventDefault()\n        const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME);\n        const collectionYoutube = mongo.db(process.env.REACT_APP_REALM_DB_NAME).collection(\"youtube-videos\")\n        let str = carDataId\n        str = str.replace(/\\s/g, '')\n        setCarDataId(str)\n        try{\n            await collectionYoutube.updateOne(\n                { \"videoId\": editVideoId},\n                { \"$set\": { \"carDataId\": carDataId } },\n                { upsert: true}\n            ).then( async res =>{\n                console.log(res)\n                // e.target.reset()\n                setEditVideoId('')\n                setCarDataId('')\n                setEditMode(false)\n                const filter = {channelId: 'UCdOXRB936PKSwx0J7SgF6SQ'}\n                await collectionYoutube.find(filter).then( videos =>{\n                    const chunkedVideos = chunkArray(videos)\n                    setAllVideos(chunkedVideos)\n                })\n            })\n        }catch(err){\n            console.log(err)\n        }\n        \n    }\n    const editCarData = (video)=>{\n        // setEditVideoId(video.videoId)\n        return(\n            <Form>\n                <Form.Group >\n                    <Form.Label>Edit car data ID</Form.Label>\n                    <Form.Control as=\"textarea\" rows={2} name={video.videoId} value={allVideos[activePag].carDataId && allVideos[activePag].carDataId } onChange={handleChangeCarData} />\n                </Form.Group>\n                \n                <div className=\"bio-edit-btn-wrapper\">\n                    <Button variant=\"primary\" type=\"submit\" onClick={handleDataUpdate} className=\"bio-edit-btn\">\n                        Submit\n                    </Button>\n                </div>\n                \n            </Form>\n        )\n    }\n    const queryData = async () =>{\n        const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME);\n        const collectionYoutube = mongo.db(process.env.REACT_APP_REALM_DB_NAME).collection(\"youtube-videos\")\n        const filter = {channelId: 'UCdOXRB936PKSwx0J7SgF6SQ'}\n        await collectionYoutube.find(filter).then( videos =>{\n            const chunkedVideos = chunkArray(videos)\n            setAllVideos(chunkedVideos)\n        })\n    }\n    useEffect(() => {\n        const tokenUser = sessionStorage.getItem('session_user')\n        if(tokenUser){\n            setIsLoggedIn(true)\n            queryData()\n        }else{\n            setIsLoggedIn(false)\n        }\n\n    }, [])\n    return(\n        <Fragment>\n            <Helmet>\n                <meta name=\"robots\" content=\"noindex, nofollow\" />\n            </Helmet>\n            {isLoggedIn ? \n            <Container>\n                <h1>Edit video data</h1>\n                <center><Pagination>{items}</Pagination></center>\n                <hr />\n                <Row>\n                {console.log('array 0', allVideos[0])}\n                { allVideos[activePag] && \n                    allVideos[activePag].map(video =>{\n                        return(\n                            <Col style={{marginBottom: '2rem'}}>\n                                <iframe src={videoEmbedURL + video.videoId}\n                                    frameBorder='0'\n                                    allow='autoplay; encrypted-media'\n                                    allowFullScreen\n                                    title='video'\n                                />\n                                <h3>{video.snippet.title}</h3>\n                                <p>Date: {video.snippet.publishedAt}</p>\n                                <p>Youtube videoId: {video.videoId}</p>\n                                {video.carDataId ? \n                                <div>\n                                <p>Car data ID: {video.carDataId ? video.carDataId : 'No data'}</p>\n                                 {/* <Button onClick={()=>setEditMode(true)}>Edit</Button> */}\n                                \n                                </div>\n                                \n                                 :\n                                editCarData(video)\n                                }\n                                {/* {editMode && editCarData(video)} */}\n                            </Col>\n                        )\n                        \n                        \n                    })\n                }\n                \n                    {/* <div className=\"videoWrapper\">\n                        <iframe src={videoEmbedURL + car.videoId}\n                                frameBorder='0'\n                                allow='autoplay; encrypted-media'\n                                allowFullScreen\n                                title='video'\n                        />\n                    <h3 style={{marginTop:'10px'}} >{car.youtube.snippet.title}</h3>\n                    </div> */}\n                </Row>\n            </Container>\n            : loginDiv}\n        </Fragment>\n    )\n}\n\nexport default EditVideoData","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Admin/AddCarData.js",["432"],"import React, { Fragment, useEffect, useState } from 'react'\nimport * as Realm from \"realm-web\"\n\nimport LoginDiv from './LoginDiv'\nimport { Container, Button, Form, Col, Row, Alert } from 'react-bootstrap'\nimport ColorDiv from './colorDiv'\nimport ColorInterior from './colorInterior'\nimport FormText from './FormText'\nimport FormCheckbox from './FormCheckbox'\nimport { logInUser } from '../../store/actions/authActions'\nimport { connect } from 'react-redux'\nimport short from 'short-uuid'\n\nconst AddCarData = (props) =>{\n    const [userObj, setUserObj] = useState({email: '', password: ''})\n    const [isLoggedIn, setIsLoggedIn] = useState(false)\n    // const maxAgeTest = 1 * 60 * 60\n    const app = new Realm.App({ id: process.env.REACT_APP_REALM_APP_ID })\n    const [price, setPrice] = useState({baseMSRP: null, baseInvoice: null})\n    const [powerFeatures, setPowerFeatures] = useState({})\n    const [colorExterior, setColorExterior] = useState([{name: '', rgb: null}])\n    const [colorInterior, setColorInterior] = useState([{name: '', rgb: null}])\n    const [basicData, setBasicData] = useState({make: '', model: '', year: null, id: null, name: '', totalSeating: null })\n    const [warranty, setWarranty] = useState({Basic: \"\", Drivetrain: \"\", Rust: \"\", Roadside: \"\"})\n    const [isSaved, setIsSaved] = useState(false)\n    const [measurements, setMeasurements] = useState({\n        \"Maximum cargo capacity\": \"\",\n        \"Curb weight\": \"\",\n        \"Cargo capacity, all seats in place\": \"\",\n        \"Angle of approach\": \"\",\n        \"Angle of departure\": \"\",\n        Length: \"\",\n        \"Ground clearance\": \"\",\n        Height: \"\",\n        \"Wheel base\": \"\",\n        Width: \"\"\n    })\n    const [fuel, setFuel] = useState({\n        \"Range in miles (cty/hwy)\": \"\",\n        \"Fuel tank capacity\": \"\",\n        \"Combined MPG\": \"\",\n        \"Fuel type\": \"\"\n    })\n    const [fuelMileage, setFuelMileage] = useState({\n        \"EPA mileage est\": {\n            \"(cty/hwy)\": \"\"\n        }\n    })\n    const [engine, setEngine] = useState({\n        Torque: \"\",\n        \"Base engine size\": \"\",\n        Horsepower: \"\",\n        \"Turning circle\": \"\",\n        Valves: \"\",\n        \"Base engine type\": \"\",\n        \"Valve timing\": \"\",\n        \"Cam type\": \"\",\n        Cylinders: \"\"\n    })\n    const [rearseats, setRearseats] = useState({})\n    const [comfort, setComfort] = useState({})\n    const [exteriorOptions, setExteriorOptions] = useState({})\n    const [driveTrain, setDriveTrain] = useState({})\n    const [suspension, setSuspension] = useState({})\n    const [instrumentation, setInstrumentation] = useState({})\n    const [entertainment, setEntertainment] = useState({})\n    const [frontseats, setFrontseats] = useState({})\n    const [safety, setSafety] = useState({})\n    const [tires, setTires] = useState({})\n    const [interiorOptions, setInteriorOptions] = useState({})\n    const [carObj, setCarObj] = useState({\n        id: null,\n        name: '',\n        make: '',\n        model: '',\n        year: null,\n        totalSeating: null,\n        typeCategories: {},\n        price: {\n            baseMSRP: null,\n            baseInvoice: null\n        },\n        color: {\n            EXTERIOR: [],\n            INTERIOR: []\n        },\n        features: {\n            \"Power Feature\": {\n                \"1 one-touch power windows\": false,\n                \"remote keyless power door locks\": false,\n                \"Heated mirrors\": false\n            },\n            Rearseats: {\n                \"Rear head room\": \"\",\n                \"Rear hip Room\": \"\",\n                \"Rear leg room\": \"\",\n                \"Rear shoulder room\": \"\",\n                \"reclining rear seats\": false,\n                \"Split-folding rear seatback\": false,\n                \"folding center armrest\": false\n            },\n            Warranty: {\n                Basic: \"\",\n                Drivetrain: \"\",\n                Rust: \"\",\n                Roadside: \"\"\n            },\n            Measurements: {\n                \"Maximum cargo capacity\": \"\",\n                \"Curb weight\": \"\",\n                \"Cargo capacity, all seats in place\": \"\",\n                \"Angle of approach\": \"\",\n                \"Angle of departure\": \"\",\n                Length: \"\",\n                \"Ground clearance\": \"\",\n                Height: \"\",\n                \"Wheel base\": \"\",\n                Width: \"\"\n            },\n            \"Comfort & Convenience\": {\n                \"Audio and cruise controls on steering wheel\": false,\n                \"cruise control\": false,\n                \"front and rear door pockets\": false,\n                \"rear view camera\": false,\n                \"tilt and telescopic steering wheel\": false\n            },\n            \"Exterior Options\": {\n                \"Wheel Locks\": false\n            },\n            \"Drive Train\": {\n                \"Drive type\": \"\",\n                Transmission: \"\"\n            },\n            Suspension: {\n                \"four-wheel independent suspension\": false\n            },\n            Instrumentation: {\n                clock: false,\n                \"trip computer\": false,\n                \"tachometer\": false\n            },\n            \"In Car Entertainment\": {\n                \"auxiliary audio input and USB with external media control\": false,\n                \"USB connection\": false,\n                \"AM/FM stereo\": false,\n                \"6 total speakers\": false\n            },\n            Frontseats: {\n                \"Front head room\": \"\",\n                \"bucket front seats\": false,\n                \"height adjustable driver seat\": false,\n                \"Front shoulder room\": \"\",\n                \"Front leg room\": \"\",\n                \"4 -way manual passenger seat adjustment\": false,\n                \"Front hip room\": \"\",\n                cloth: false\n            },\n            Fuel: {\n                \"EPA mileage est\": {\n                    \"(cty/hwy)\": \"\"\n                },\n                \"Range in miles (cty/hwy)\": \"\",\n                \"Fuel tank capacity\": \"\",\n                \"Combined MPG\": \"\",\n                \"Fuel type\": \"\"\n            },\n            Safety: {\n                \"4-wheel ABS\": false,\n                \"Rear door child safety locks\": false,\n                \"Rear center 3-point belt\": false,\n                \"child seat anchors\": false,\n                \"dual front side-mounted airbags\": false,\n                \"stability control\": false,\n                \"Passenger airbag occupant sensing deactivation\": false,\n                \"remote anti-theft alarm system\": false,\n                \"2 front headrests\": false,\n                \"3 rear headrests\": false,\n                \"dusk sensing headlamps\": false,\n                \"tire pressure monitoring\": false,\n                \"traction control\": false,\n                \"Ventilated front disc / solid rear disc brakes\": false\n//                 0: \"Rear door child safety locks\"\n// 1: \"daytime running lights\"\n// 2: \"stability control\"\n// 3: \"Passenger airbag occupant sensing deactivation\"\n// 4: \"remote anti-theft alarm system\"\n// 5: \"2 front headrests\"\n// 6: \"tire pressure monitoring\"\n// 7: \"traction control\"\n// 8: \"4-wheel ABS\"\n// 9: \"Rear center 3-point belt\"\n// 10: \"child seat anchors\"\n// 11: \"front and rear head airbags\"\n// 12: \"dusk sensing headlamps\"\n// 13: \"3 rear headrests\"\n// 14: \"dual front side-mounted airbags\"\n// 15: \"Ventilated front disc / solid rear disc brakes\"\n            },\n            \"Tires and Wheels\": {\n                \"temporary spare tire\": false,\n                \"All season tires\": false,\n            },\n            Engine: {\n                Torque: \"\",\n                \"Base engine size\": \"\",\n                Horsepower: \"\",\n                \"Turning circle\": \"\",\n                Valves: \"\",\n                \"Base engine type\": \"\",\n                \"Valve timing\": \"\",\n                \"Cam type\": \"\",\n                Cylinders: \"\"\n            },\n            \"Interior Options\": {\n                \"Carpet Floor Mats\": false,\n                \"Interior Light Kit\": false,\n                \"Cargo Mat\": false\n            }\n        }\n    })\n    // console.log('obj', carObj.features['Comfort & Convenience'])\n    const addDiv = () =>{\n        setColorExterior(colorExterior=>[...colorExterior, {name: '', rgb: null}])\n    }\n    const addDivInterior = () =>{\n        setColorInterior(colorInterior => [...colorInterior, {name: '', rgb: null}])\n        console.log(colorInterior)\n    }\n        \n    const changeColorExterior = (e, index) =>{\n        let newArr = [...colorExterior]; // copying the old datas array\n        newArr[index] = {...newArr[index], [e.target.name]: e.target.value} // \n        setColorExterior(newArr)\n    }\n    const changeColorInterior = (e, index) =>{\n        let newArr = [...colorInterior]; // copying the old datas array\n        newArr[index] = {...newArr[index], [e.target.name]: e.target.value} // \n        setColorInterior(newArr)\n        console.log(colorInterior)\n    }\n    const handleChange = (e) =>[\n        setUserObj({\n            ...userObj,\n            [e.target.name]: e.target.value\n        })\n    ]\n    const changeBasicData = (e) =>{\n        setBasicData({\n            ...basicData,\n            [e.target.name]: e.target.value\n        })\n    }\n    const changePrice =(e)=>{\n        setPrice({\n            ...price,\n            [e.target.name]: Number(e.target.value)\n        })\n    }\n    const changeWarranty = (e)=>{\n        setWarranty({\n            ...warranty,\n            [e.target.name]: e.target.value\n        })\n    }\n    const changeMeasurements = (e) =>{\n        setMeasurements({\n            ...measurements,\n            [e.target.name]: e.target.value\n        })\n    }\n    const changeFuel = (e)=>{\n        setFuel({\n            ...fuel,\n            [e.target.name]: e.target.value\n        })\n    }\n    const changeFuelMileage = (e)=>{\n        setFuelMileage({ \n            \"(cty/hwy)\": e.target.value\n        })\n    }\n    const changeEngine = (e)=>{\n        setEngine({\n            ...engine,\n            [e.target.name]: e.target.value\n        })\n    }\n    const changePowerFeatures = (e) =>{\n        if(e.target.checked === true){\n            setPowerFeatures({\n                ...powerFeatures,\n                [e.target.name]: e.target.checked\n            })\n        }\n    }\n    const changeRearseats = (e) =>{\n        if(e.target.checked){\n            if(e.target.checked === true){\n                setRearseats({\n                    ...rearseats,\n                    [e.target.name]: e.target.checked\n                })\n            }\n        }else{\n            setRearseats({\n                ...rearseats,\n                [e.target.name]: e.target.value\n            })\n        }\n    }\n    const changeComfort = (e) =>{\n        if(e.target.checked === true){\n            setComfort({\n                ...comfort,\n                [e.target.name]: e.target.checked\n            })\n        }\n    }\n    const changeExteriorOptions = (e) =>{\n        if(e.target.checked === true){\n            setExteriorOptions({\n                ...exteriorOptions,\n                [e.target.name]: e.target.checked\n            })\n        }\n    }\n    const changeDriveTrain = (e) =>{\n        setDriveTrain({\n            ...driveTrain,\n            [e.target.name]: e.target.value\n        })\n    }\n    const changeSuspension = (e) =>{\n        if(e.target.checked === true){\n            setSuspension({\n                ...suspension,\n                [e.target.name]: e.target.checked\n            })\n        }\n    }\n    const changeInstrumentation = (e) =>{\n        if(e.target.checked === true){\n            setInstrumentation({\n                ...instrumentation,\n                [e.target.name]: e.target.checked\n            })\n        }\n    }\n    const changeFrontseats = (e)=>{\n        if(e.target.checked){\n            if(e.target.checked === true){\n                setFrontseats({\n                    ...frontseats,\n                    [e.target.name]: e.target.checked\n                })\n            }\n        }else{\n            setFrontseats({\n                ...frontseats,\n                [e.target.name]: e.target.value\n            })\n        }\n    }\n    const changeSafety = (e) =>{\n        if(e.target.checked === true){\n            setSafety({\n                ...safety,\n                [e.target.name]: e.target.checked\n            })\n        }\n    }\n    const changeTires = (e) =>{\n        if(e.target.checked === true){\n            setTires({\n                ...tires,\n                [e.target.name]: e.target.checked\n            })\n        }\n    }\n    const changeInteriorOptions = (e) =>{\n        if(e.target.checked === true){\n            setInteriorOptions({\n                ...interiorOptions,\n                [e.target.name]: e.target.checked\n            })\n        }\n    }\n    const changeEntertainment = (e) =>{\n        if(e.target.checked === true){\n            setEntertainment({\n                ...entertainment,\n                [e.target.name]: e.target.checked\n            })\n        }\n    }\n    const handleSubmitLogin = async (e) =>{\n        e.preventDefault()\n        e.preventDefault()\n        const emailLowerCase = userObj.email.toLowerCase()\n        const credentials = Realm.Credentials.emailPassword(emailLowerCase, userObj.password)\n        props.logInUser(credentials, emailLowerCase)\n        \n    }\n    const handleSubmitData = async (e) =>{\n        // e.preventDefault()\n        setFuel({\n            ...fuel,\n            \"EPA mileage est\": fuelMileage\n        })\n        const carData = {\n            isManual: true,\n            id: basicData.id,\n            name: basicData.name,\n            make: basicData.make,\n            model: basicData.model,\n            year: Number(basicData.year),\n            totalSeating: Number(basicData.totalSeating),\n            price: price,\n            color: {\n                EXTERIOR: colorExterior,\n                INTERIOR: colorInterior\n            },\n            features: {\n                \"Power Feature\": powerFeatures,\n                Rearseats: rearseats,\n                Warranty: warranty,\n                Measurements: measurements,\n                \"Comfort & Convenience\": comfort,\n                \"Exterior Options\": exteriorOptions,\n                \"Drive Train\": driveTrain,\n                Suspension: suspension,\n                Instrumentation: instrumentation,\n                \"In Car Entertainment\": entertainment,\n                Frontseats: frontseats,\n                Fuel: fuel,\n                Safety: safety,\n                \"Tires and Wheels\": tires,\n                Engine: engine,\n                \"Interior Options\": interiorOptions\n            }\n        }\n        const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n        const collection = mongo.db(\"smoke-show\").collection(\"cars-manual\")\n        try{\n            await collection.insertOne(carData).then(res =>{\n                console.log('success!')\n                setIsSaved(true)\n            })\n        }catch(err){\n            console.log(err)\n        }\n    }\n    useEffect(() => {\n        if(props.isLoggedIn){\n            setIsLoggedIn(true)\n        }else{\n            setIsLoggedIn(false)\n        }\n    }, [props.isLoggedIn])\n    useEffect(() => {\n        const token = sessionStorage.getItem('session_token')\n        if(token){\n            setIsLoggedIn(true)\n        }else{\n            setIsLoggedIn(false)\n        }\n    }, [])\n    return(\n        <Fragment>\n            {isLoggedIn ?\n            <Container>\n            <div className=\"spacer-4rem\"></div>\n                <h1>Add New Car Data</h1>\n                <div className=\"spacer-2rem\"></div>\n                <Form>\n                    <Form.Group as={Row} >\n                        <Form.Label column sm=\"4\">\n                        ID\n                        </Form.Label>\n                        <Col sm=\"8\">\n                        <Form.Control type=\"number\" pattern=\"\\d*\" placeholder=\"type number | leave blank if no data found\" name=\"id\" onChange={changeBasicData}/>\n                        </Col>\n                    </Form.Group>\n\n                    <Form.Group as={Row} >\n                        <Form.Label column sm=\"4\">\n                        Name\n                        </Form.Label>\n                        <Col sm=\"8\">\n                        <Form.Control type=\"text\" placeholder=\"Name\" name=\"name\" onChange={changeBasicData}/>\n                        </Col>\n                    </Form.Group>\n                    <Form.Group as={Row} >\n                        <Form.Label column sm=\"4\">\n                        Make\n                        </Form.Label>\n                        <Col sm=\"8\">\n                        <Form.Control type=\"text\" placeholder=\"Maker\" onChange={changeBasicData} name=\"make\" />\n                        </Col>\n                    </Form.Group>\n                    <Form.Group as={Row} >\n                        <Form.Label column sm=\"4\">\n                        Model\n                        </Form.Label>\n                        <Col sm=\"8\">\n                        <Form.Control type=\"text\" placeholder=\"Model\" onChange={changeBasicData} name=\"model\"/>\n                        </Col>\n                    </Form.Group>\n                    <Form.Group as={Row} >\n                        <Form.Label column sm=\"4\">\n                        year\n                        </Form.Label>\n                        <Col sm=\"8\">\n                        <Form.Control type=\"number\" pattern=\"\\d*\" placeholder=\"Type number\" onChange={changeBasicData} name=\"year\" />\n                        </Col>\n                    </Form.Group>\n                    <Form.Group as={Row} >\n                        <Form.Label column sm=\"4\">\n                        Price | base MSRP\n                        </Form.Label>\n                        <Col sm=\"8\">\n                        <Form.Control type=\"number\" pattern=\"\\d*\" placeholder=\"Type number\" name=\"baseMSRP\" onChange={changePrice}/>\n                        </Col>\n                    </Form.Group>\n                    <Form.Group as={Row} >\n                        <Form.Label column sm=\"4\">\n                        Price | base Invoice\n                        </Form.Label>\n                        <Col sm=\"8\">\n                        <Form.Control type=\"number\" pattern=\"\\d*\" placeholder=\"Type number\" onChange={changePrice} name=\"baseInvoice\" />\n                        </Col>\n                    </Form.Group>\n                    <Form.Group as={Row} >\n                        <Form.Label column sm=\"4\">\n                        totalSeating\n                        </Form.Label>\n                        <Col sm=\"8\">\n                        <Form.Control type=\"number\" placeholder=\"Type number\" onChange={changeBasicData} name=\"totalSeating\"/>\n                        </Col>\n                    </Form.Group>\n                    <Form.Group as={Row} >\n                        <Form.Label column sm=\"4\">\n                        Color | EXTERIOR <Button size=\"sm\" onClick={addDiv}>add color</Button>\n                        </Form.Label>\n                        <Col sm=\"8\">\n                        <Form.Control onChange={(e)=>changeColorExterior(e, 0)} name=\"name\" type=\"text\" placeholder=\"Name\" />\n                        </Col>\n                    </Form.Group>\n                    <Form.Group as={Row} >\n                        <Form.Label column sm=\"4\">\n                        Color EXTERIOR : RGB\n                        </Form.Label>\n                        <Col sm=\"8\">\n                        <Form.Control type=\"text\" pattern=\"\\d*\" placeholder=\"111,111,111\" name=\"rgb\" onChange={(e)=>changeColorExterior(e, 0)}  />\n                        </Col>\n                    </Form.Group>\n                    {\n                        colorExterior.map((exterior, index) =>{\n                            const unique = short.generate()\n                            return(\n                                <ColorDiv num={index + 1} changeColorExterior={changeColorExterior} key={unique}/>\n                            )\n                            \n                        })\n                    }\n                    <hr />\n                    <Form.Group as={Row} >\n                        <Form.Label column sm=\"4\">\n                        Color | Interior <Button size=\"sm\" onClick={addDivInterior}>add color</Button>\n                        </Form.Label>\n                        <Col sm=\"8\">\n                        <Form.Control onChange={(e)=>changeColorInterior(e, 0)} name=\"name\" type=\"text\" placeholder=\"Name\" />\n                        </Col>\n                    </Form.Group>\n                    <Form.Group as={Row} >\n                        <Form.Label column sm=\"4\">\n                        Color Interior : RGB\n                        </Form.Label>\n                        <Col sm=\"8\">\n                        <Form.Control type=\"text\" pattern=\"\\d*\" placeholder=\"111,111,111\" name=\"rgb\" onChange={(e)=>changeColorInterior(e, 0)}  />\n                        </Col>\n                    </Form.Group>\n                    {\n                        colorInterior.map((interior, index) =>{\n                            const unique = short.generate()\n                            return(\n                                <ColorInterior changeColorInterior={changeColorInterior} num={index +1} key={unique}/>\n                            )\n                            \n                        })\n                    }\n                    <hr/>\n                    <h3>Features</h3>\n                    <h3>Power Feature</h3>\n                    {  \n                        Object.keys(carObj.features['Power Feature']).map(key =>{\n                            const unique = short.generate()\n                        return <FormCheckbox key={unique} objKey={key} handleChange={changePowerFeatures}/>\n                    })}\n                    <hr/>\n                    <h3>Rearseats</h3>\n                    { Object.keys(carObj.features.Rearseats).map(key=>{\n                        const unique = short.generate()\n                        if(carObj.features.Rearseats[key]=== false || carObj.features.Rearseats[key]=== true){\n                            return <FormCheckbox key={unique} objKey={key} handleChange={changeRearseats} />\n                        }else{\n                            return (<Fragment key={unique}>\n                                    <FormText objKey={key} handleChange={changeRearseats} />\n                                    <hr/>\n                                    </Fragment>)\n                        }\n                    })}\n                    <h3>Warranty</h3>\n                    {Object.keys(carObj.features.Warranty).map(key =>{\n                        const unique = short.generate()\n                        return <FormText key={unique} objKey={key} handleChange={changeWarranty}/>\n                    })}\n                    <hr />\n                    <h3>Measurements</h3>\n                    {Object.keys(carObj.features.Measurements).map(key =>{\n                        const unique = short.generate()\n                        return <FormText key={unique} objKey={key} handleChange={changeMeasurements} />\n                    })}\n                    <hr />\n                    <h3>Comfort & Convenience</h3>\n                    {  \n                        Object.keys(carObj.features['Comfort & Convenience']).map(key =>{\n                            const unique = short.generate()\n                        return <FormCheckbox key={unique} objKey={key} handleChange={changeComfort}/>\n                    })}\n                    <h3>Exterior Options</h3>\n                    {  \n                        Object.keys(carObj.features['Exterior Options']).map(key =>{\n                            const unique = short.generate()\n                        return <FormCheckbox key={unique} objKey={key} handleChange={changeExteriorOptions}/>\n                    })}\n                    <hr />\n                    <h3>Drive Train</h3>\n                    { Object.keys(carObj.features['Drive Train']).map(key =>{\n                        const unique = short.generate()\n                        return <FormText key={unique} objKey={key} handleChange={changeDriveTrain} />\n                    })\n                    }\n                    <hr />\n                    <h3>Suspension</h3>\n                    {  \n                        Object.keys(carObj.features.Suspension).map(key =>{\n                            const unique = short.generate()\n                        return <FormCheckbox key={unique} objKey={key} handleChange={changeSuspension}/>\n                    })}\n                    <hr />\n                    <h3>Instrumentation</h3>\n                    {  \n                        Object.keys(carObj.features.Instrumentation).map(key =>{\n                            const unique = short.generate()\n                        return <FormCheckbox key={unique} objKey={key} handleChange={changeInstrumentation}/>\n                    })}\n                    <h3>In Car Entertainment</h3>\n                    {  \n                        Object.keys(carObj.features['In Car Entertainment']).map(key =>{\n                            const unique = short.generate()\n                        return <FormCheckbox key={unique} objKey={key} handleChange={changeEntertainment}/>\n                    })}\n                    <h3>Frontseats</h3>\n                    { Object.keys(carObj.features.Frontseats).map(key=>{\n                        const unique = short.generate()\n                        if(carObj.features.Frontseats[key]=== false || carObj.features.Frontseats[key]=== true){\n                            return <FormCheckbox key={unique} objKey={key} handleChange={changeFrontseats} />\n                        }else{\n                            return <Fragment>\n                                    <FormText key={unique} objKey={key} handleChange={changeFrontseats}/>\n                                    <hr/>\n                                    </Fragment>\n                        }\n                    })}\n                    <h3>Fuel</h3>\n                    <Form.Group as={Row} >\n                        <Form.Label column sm=\"4\">\n                        EPA mileage est | (cty/hwy)\n                        </Form.Label>\n                        <Col sm=\"8\">\n                        <Form.Control type=\"text\" placeholder=\"Type text\" onChange={changeFuelMileage}/>\n                        </Col>\n                    </Form.Group>\n                    { Object.keys(carObj.features.Fuel).map(key =>{\n                        const unique = short.generate()\n                        if(key === carObj.features.Fuel['EPA mileage est'] ){\n                            return ''\n                        }else{\n                            return <FormText key={unique} objKey={key} handleChange={changeFuel} />\n                        }\n                        \n                    })\n                    }\n                    <hr/>\n                    <h3>Safety</h3>\n                    {  \n                        Object.keys(carObj.features.Safety).map(key =>{\n                            const unique = short.generate()\n                        return <FormCheckbox key={unique} objKey={key} handleChange={changeSafety}/>\n                    })}\n                    <hr />\n                    <h3>Tires and Wheels</h3>\n                    {  \n                        Object.keys(carObj.features['Tires and Wheels']).map(key =>{\n                            const unique = short.generate()\n                        return <FormCheckbox key={unique} objKey={key} handleChange={changeTires} />\n                    })}\n                    <h3>Engine</h3>\n                    { Object.keys(carObj.features.Engine).map(key =>{\n                        const unique = short.generate()\n                        return <FormText key={unique} objKey={key} handleChange={changeEngine} />\n                    })\n                    }\n                    <hr />\n                    <h3>Interior Options</h3>\n                    {  \n                        Object.keys(carObj.features['Interior Options']).map(key =>{\n                            const unique = short.generate()\n                        return <FormCheckbox key={unique} objKey={key} handleChange={changeInteriorOptions}/>\n                    })}\n                    {isSaved && <Alert variant=\"success\">Successfully saved!</Alert>}\n                    <Button style={{margin:'4rem auto', width: '100%'}} onClick={handleSubmitData}>Save data</Button>\n                </Form>\n            </Container>\n             : <LoginDiv handleSubmitLogin={handleSubmitLogin} handleChange={handleChange} />}\n        </Fragment>\n    )\n}\nconst mapDispatchToProps = (dispatch) =>{\n    return {\n        logInUser: (credentials, email) => dispatch(logInUser(credentials, email))\n    }\n}\nconst mapStateToProps = (state) => {\n    //syntax is propName: state.key of combineReducer.key\n    return{\n        isLoggedIn: state.auth.isLoggedIn\n    }\n  }\nexport default connect(mapStateToProps, mapDispatchToProps)(AddCarData)","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Admin/LoginDiv.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Admin/colorDiv.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Admin/colorInterior.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Admin/FormText.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Admin/FormCheckbox.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Admin/CheckCarData.js",["433","434","435","436"],"import React, { useState } from 'react'\nimport * as Realm from \"realm-web\"\nimport { Button } from 'react-bootstrap'\n\nconst CheckCarData = () =>{\n    // const [cars, setCars] = useState([])\n    const [safety, setSafety] = useState([])\n    // const field = features['Safety']\n    const appConfig = {\n        id: process.env.REACT_APP_REALM_APP_ID,\n        // timeout: 10000, \n        // timeout in number of milliseconds\n      };\n    const app = new Realm.App(appConfig);\n    // const maxAgeTest = 1 * 60 * 60\n    const credentials = Realm.Credentials.emailPassword('saki@thehoongroup.com', 'aaaaaa')\n    const queryData = async () =>{\n        try{\n            await app.logIn(credentials).then( async user =>{\n                const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME);\n                const mongoCollection = mongo.db(\"smoke-show\").collection(\"cars\");\n                const filter = {make: 'bentley'}\n                let tempArr = []\n                await mongoCollection.find(filter).then(cars =>{\n                    // console.log('cars', cars)\n                    \n                    cars.map(car =>{\n                        const category = car.features['Comfort & Convenience']\n                        console.log('log', category)\n                        if(typeof(category) !== 'undefined'){\n                            Object.keys(category).map(key=>{\n                                tempArr.push(key)\n                            })\n                            \n                            // return Object.keys(car.features['Safety'])\n                            // console.log('checking', Object.keys(car.features['Safety']))\n                        }\n                        \n                 \n                        \n                    })\n                    console.log('temp', tempArr)\n                   \n                    return tempArr\n                }).then( async arr =>{\n                    let unique = [...new Set(arr)]\n                    const insertData = {\n                        // make: 'kia',\n                        powerFeatureArr: unique\n                    }\n                    console.log('log', unique); \n                    const collectionDataAnalysis = mongo.db(\"smoke-show\").collection(\"cars-data-analysis\");\n                    collectionDataAnalysis.updateOne(\n                        { make: \"bentley\" },\n                        { $set: { comfortArr: unique } },\n                        { upsert: true }\n                    ).then(res =>{\n                        console.log(res)\n                    })\n                })\n            })\n        }catch(err){\n            console.log(err)\n        }\n    }\n    return(\n        <div>\n\n            <Button onClick={queryData}>Check car data</Button>\n            {console.log(safety)}\n        {safety && \n        Object.keys(safety).map((key, index) =>{\n            return <p key={index}>{key}</p>\n        })\n        }\n        </div>\n    )\n}\n\nexport default CheckCarData","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Admin/EditVideoDataKirk.js",["437","438","439"],"import React, { useState, Fragment, useEffect } from 'react'\nimport * as Realm from \"realm-web\"\nimport Helmet from 'react-helmet'\nimport { Container, Row, Col, Form, Pagination, Button } from 'react-bootstrap'\nimport jwt from 'jsonwebtoken'\n\nconst EditVideoDataKirk = () =>{\n    const [activePag, setActivePag] = useState(0)\n    const [isLoggedIn, setIsLoggedIn] = useState(false)\n    const [userObj, setUserObj] = useState({email: '', password: ''})\n    const kirkChannelId = 'UCXPVB7s1TJTE0WjDpakGp5Q'\n    const app = new Realm.App({ id: process.env.REACT_APP_REALM_APP_ID })\n    const [allVideos, setAllVideos] = useState([])\n    const [message, setMessage] = useState('')\n    const [carDataId, setCarDataId] = useState('')\n    const [editVideoId, setEditVideoId] = useState('')\n    const [editMode, setEditMode] = useState(false)\n    const maxAgeTest = 1 * 60 * 60\n\n    const handlePagNum = (num) =>{\n        console.log('num', num)\n        setActivePag(num)\n        setAllVideos({...allVideos})\n    }\n    let items = [];\n    for (let number = 0; number <= 6; number++) {\n    items.push(\n        <Pagination.Item key={number} active={number === activePag} onClick={()=>{handlePagNum(number)}}>\n        {number}\n        </Pagination.Item>,\n    );\n    }\n    \n    const handleChange = (e) =>[\n        setUserObj({\n            ...userObj,\n            [e.target.name]: e.target.value\n        })\n    ]\n    const videoEmbedURL = 'https://www.youtube.com/embed/'\n\n    const chunkArray = (allVideos) =>{\n        let chunk_size = 15\n        let index = 0;\n        let arrayLength = allVideos.length;\n        let tempArray = [];\n        let myChunk\n        \n        for (index = 0; index < arrayLength; index += chunk_size) {\n            myChunk = allVideos.slice(index, index+chunk_size);\n            // Do something if you want with the group\n            tempArray.push(myChunk);\n        }\n\n        return tempArray;\n    }\n    \n    const handleSubmitLogin = async (e) =>{\n        e.preventDefault()\n        const emailLowerCase = userObj.email.toLowerCase()\n        const credentials = Realm.Credentials.emailPassword(emailLowerCase, userObj.password)\n        try{\n            app.logIn(credentials).then(async user =>{\n                setIsLoggedIn(true)\n                const customData = user.customData\n                const token = jwt.sign({ userData: customData }, process.env.REACT_APP_JWT_SECRET, {expiresIn: maxAgeTest})\n                const tokenCredentials = jwt.sign({ cre: credentials }, process.env.REACT_APP_JWT_SECRET, {expiresIn: maxAgeTest})\n                sessionStorage.setItem('session_token', token)\n                sessionStorage.setItem('session_user', tokenCredentials)\n                const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME);\n                const mongoCollection = mongo.db(\"smoke-show\").collection(\"youtube-videos\")\n                const filter = {channelId: kirkChannelId}\n                await mongoCollection.find(filter).then( videos =>{\n                    console.log(videos)\n                    const chunkedVideos = chunkArray(videos)\n                    setAllVideos(chunkedVideos)\n                    \n                })\n            })\n        }catch(err){\n            console.log(err)\n            setMessage('login fail')\n        }\n        \n    }\n\n    const loginDiv =\n    <Container style={{alignItems: 'center', justifyContent: 'center', marginTop: '5rem'}}>\n        <Form onSubmit={handleSubmitLogin}>\n            <Form.Group controlId=\"formBasicEmail\">\n                <Form.Label>Email address</Form.Label>\n                <Form.Control type=\"email\" placeholder=\"Enter email\" name=\"email\" onChange={handleChange}/>\n                <Form.Text className=\"text-muted\">\n                </Form.Text>\n            </Form.Group>\n\n            <Form.Group controlId=\"formBasicPassword\">\n                <Form.Label>Password</Form.Label>\n                <Form.Control type=\"password\" placeholder=\"Password\" onChange={handleChange} name=\"password\" />\n            </Form.Group>\n            <br />\n            <Button variant=\"primary\" type=\"submit\">\n                Log in\n            </Button>\n        </Form>\n    </Container>\n    \n    const handleChangeCarData = (e) =>{\n      \n        setCarDataId(e.target.value)\n        setEditVideoId(e.target.name)\n    }\n    const handleDataUpdate = async (e) =>{\n        e.preventDefault()\n        const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME);\n        const collectionYoutube = mongo.db(process.env.REACT_APP_REALM_DB_NAME).collection(\"youtube-videos\")\n        let str = carDataId\n        str = str.replace(/\\s/g, '')\n        setCarDataId(str)\n        try{\n            await collectionYoutube.updateOne(\n                { \"videoId\": editVideoId},\n                { \"$set\": { \"carDataId\": carDataId } },\n                { upsert: true}\n            ).then( async res =>{\n                console.log(res)\n                // e.target.reset()\n                setEditVideoId('')\n                setCarDataId('')\n                setEditMode(false)\n                const filter = {channelId: kirkChannelId}\n                await collectionYoutube.find(filter).then( videos =>{\n                    const chunkedVideos = chunkArray(videos)\n                    setAllVideos(chunkedVideos)\n                })\n            })\n        }catch(err){\n            console.log(err)\n        }\n        \n    }\n    const editCarData = (video)=>{\n        // setEditVideoId(video.videoId)\n        return(\n            <Form>\n                <Form.Group >\n                    <Form.Label>Edit car data ID</Form.Label>\n                    <Form.Control as=\"textarea\" rows={2} name={video.videoId} value={allVideos[activePag].carDataId && allVideos[activePag].carDataId } onChange={handleChangeCarData} />\n                </Form.Group>\n                \n                <div className=\"bio-edit-btn-wrapper\">\n                    <Button variant=\"primary\" type=\"submit\" onClick={handleDataUpdate} className=\"bio-edit-btn\">\n                        Submit\n                    </Button>\n                </div>\n                \n            </Form>\n        )\n    }\n    const queryData = async () =>{\n        const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME);\n        const collectionYoutube = mongo.db(process.env.REACT_APP_REALM_DB_NAME).collection(\"youtube-videos\")\n        const filter = {channelId: kirkChannelId}\n        await collectionYoutube.find(filter).then( videos =>{\n            const chunkedVideos = chunkArray(videos)\n            setAllVideos(chunkedVideos)\n        })\n    }\n    useEffect(() => {\n        const tokenUser = sessionStorage.getItem('session_user')\n        if(tokenUser){\n            setIsLoggedIn(true)\n            queryData()\n        }else{\n            setIsLoggedIn(false)\n        }\n\n    }, [])\n    return(\n        <Fragment>\n            <Helmet>\n                <meta name=\"robots\" content=\"noindex, nofollow\" />\n            </Helmet>\n            {isLoggedIn ? \n            <Container>\n                <h1>Edit video data</h1>\n                <center><Pagination>{items}</Pagination></center>\n                <hr />\n                <Row>\n                {console.log('array 0', allVideos[0])}\n                { allVideos[activePag] && \n                    allVideos[activePag].map(video =>{\n                        return(\n                            <Col style={{marginBottom: '2rem'}} key={video.videoId}>\n                                <iframe src={videoEmbedURL + video.videoId}\n                                    frameBorder='0'\n                                    allow='autoplay; encrypted-media'\n                                    allowFullScreen\n                                    title='video'\n                                />\n                                <h3>{video.snippet.title}</h3>\n                                <p>Date: {video.snippet.publishedAt}</p>\n                                <p>Youtube videoId: {video.videoId}</p>\n                                {video.carDataId ? \n                                <div>\n                                <p>Car data ID: {video.carDataId ? video.carDataId : 'No data'}</p>\n                                 {/* <Button onClick={()=>setEditMode(true)}>Edit</Button> */}\n                                \n                                </div>\n                                \n                                 :\n                                editCarData(video)\n                                }\n                                {/* {editMode && editCarData(video)} */}\n                            </Col>\n                        )\n                        \n                        \n                    })\n                }\n                \n           \n                </Row>\n            </Container>\n            : loginDiv}\n        </Fragment>\n    )\n}\n\nexport default EditVideoDataKirk","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Influencer/AllVideos.js",["440","441"],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/store/reducers/influencerReducer.js",["442"],"const initState = {\n    influencerObj: {},\n    formattedFans: ''\n}\n\nconst influencerReducer = (state = initState, action) =>{\n    switch(action.type){\n        case 'GET_INFLUENCER':\n            console.log('user from reducer', action.state)\n            return {\n                ...state,\n                influencerObj: action.data.user,\n                formattedFans: action.data.numOfFans\n            }\n        \n        // case 'BECOME_FAN': \n        //     console.log('from reducer', action.userObj)\n        //     return action.userObj\n        // default:\n        //     console.log('error', action)\n    }\n    return state\n}\n\nexport default influencerReducer","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/store/actions/influencerActions.js",["443","444","445"],"import * as Realm from \"realm-web\"\nimport jwt from 'jsonwebtoken'\n\nconst appConfig = {\n    id: process.env.REACT_APP_REALM_APP_ID,\n    // timeout: 10000, \n    // timeout in number of milliseconds\n  };\nconst app = new Realm.App(appConfig);\nconst maxAgeTest = 1 * 60 * 60\n\nexport const getInfluencer = (influencerId) =>{\n    let formattedFans\n    return(dispatch, getState)=>{\n        const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n        const collectionInfluencer = mongo.db(\"smoke-show\").collection(\"influencers\")\n        const filter = {userId: influencerId}\n        collectionInfluencer.findOne(filter).then(influencer =>{\n            const collectionFans = mongo.db(\"smoke-show\").collection(`fans-${influencer.username}`)\n            collectionFans.count().then(num =>{\n                if(num > 999){\n                    return formattedFans = Math.sign(num)*((Math.abs(num)/1000).toFixed(1)) + 'k'\n                }else{\n                    return formattedFans = Math.sign(num)*Math.abs(num)\n                }\n            }).then(formattedFans =>{\n                const data = {user: influencer, numOfFans: formattedFans}\n                dispatch({type: 'GET_INFLUENCER', data})\n            })\n            // console.log('fans', fansCount)\n            // if(fansCount > 999){\n            //     formattedFans = Math.sign(fansCount)*((Math.abs(fansCount)/1000).toFixed(1)) + 'k'\n            // }else{\n            //     formattedFans = Math.sign(fansCount)*Math.abs(fansCount)\n            // }\n            \n        }).catch(err =>{\n            console.log(err)\n            dispatch({type: 'NO_INFLUENCER'})\n        })\n    }\n}\n","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/SpecDiv.js",["446","447"],"import React from 'react'\nimport powerIcon from '../assets/global/Horsepower.png'\nimport pistonIcon from '../assets/global/piston.png'\nimport priceIcon from '../assets/global/Price-Tag-icon.png'\nimport weightIcon from '../assets/global/weight.svg'\nimport transmissionIcon from '../assets/global/transmission.svg'\nimport mileageIcon from '../assets/global/mileage.svg'\nimport { Link } from 'react-router-dom'\n\nconst SpecDiv = (props) =>{\n    const { video } = props\n    // const goToStatsPage = () =>{\n    //     props.history.push()\n    // }\n  \n    return(\n        <div className=\"ad-size\">\n                                        \n            <div className=\"spec-wrapper\" >\n                <img alt={video.carData.name} src={require(`../assets/maker_logos/${props.titleCase}_Logo.png`).default} className=\"icon-s\" loading=\"lazy\" />{' '}\n                <span className=\"spec-text\" >\n                    <strong >{video.carData.year}{' '}{props.titleCase}{' '}{props.model}</strong>\n                </span><br/>\n                <img alt=\"price\" src={priceIcon} className=\"icon-s\" /><span className=\"spec-text\" loading=\"lazy\" >{' '}${props.price}</span><br />\n                <img alt=\"power \" src={powerIcon} className=\"icon-s\" /><span  className=\"spec-text\" loading=\"lazy\">{' '}{video.carData.features.Engine.Torque}</span><br />\n                <img alt=\"piston\" src={pistonIcon}  className=\"icon-s\" loading=\"lazy\" /><span className=\"spec-text\">{' '}{video.carData.features.Engine.Horsepower}</span><br />\n                <img alt=\"weight\" src={weightIcon} style={{padding: '2px'}}   className=\"icon-s\" loading=\"lazy\" /><span className=\"spec-text\">{' '}{video.carData.features.Measurements[\"Curb weight\"]}</span><br />\n                {/* <img alt=\"mileage\" src={mileageIcon} style={{padding: '2px'}}  className=\"icon-s\" loading=\"lazy\" /><span className=\"spec-text\">{' '}{video.carData.features[\"Fuel\"][\"EPA mileage est\"][' (cty/hwy)']}</span><br /> */}\n                <Link \n                to={{\n                    pathname: `car-stats/${props.titleCase.toLowerCase()}/${video.carData.year}/${props.model.toLowerCase()}/${props.dataid}`\n                }}\n       \n\n                >\n                    <div className=\"btn-spec\">\n                        See more stats\n                    </div>\n                </Link>\n                \n            </div>\n            \n        </div>\n    )\n}\n\nexport default SpecDiv ","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Layout/Head.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/GiveawayCount.js",["448","449","450"],"import React, { useEffect, useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport { Col, Button, Card, ProgressBar } from 'react-bootstrap'\nimport {\n    EmailShareButton,\n    FacebookShareButton,\n    TwitterShareButton,\n  } from \"react-share\";\n  import jwt from 'jsonwebtoken'\nimport { FacebookShareCount } from \"react-share\";\nimport facebookIcon from '../assets/global/Facebook-icon.svg'\nimport twitterIcon from '../assets/global/Twitter-icon.svg'\nimport emailIcon from '../assets/global/Messages-icon.svg'\nimport carIcon from '../assets/global/car-icon-bar.svg'\nimport flagIcon from '../assets/global/chekered-flag.svg'\nimport * as Realm from \"realm-web\"\nimport { connect } from 'react-redux'\nimport { openLoginModal, attachMsg, swapToSignup } from '../store/actions/authActions'\n\nconst GiveawayCount = (props) =>{\n    // console.log('props', props)\n    // let percentBar = '60%'\n    const [percentBar, setPercentBar] = useState('0%')\n    const app = new Realm.App({ id: process.env.REACT_APP_REALM_APP_ID })\n    const [numOfUsers, setNumOfUsers] = useState(null)\n\n    const getCount = async (credentials) =>{\n\n        await app.logIn(credentials).then(async user =>{\n            const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n            const collectionUsers = mongo.db(\"smoke-show\").collection(\"users\")\n            try {\n                await collectionUsers.count().then(res =>{\n                    setNumOfUsers(res)\n                    const result = res / 100000 * 100\n                    setPercentBar(result.toFixed(1) + '%')\n                })\n            } catch (error) {\n                console.log(error)\n            }\n        })\n    }\n    const handleSignup = () =>{\n        props.swapToSignup(false)\n    }\n\n    const loginCheck = () =>{\n        const tokenUser = sessionStorage.getItem('session_user')\n        if(tokenUser){\n           jwt.verify(tokenUser, process.env.REACT_APP_JWT_SECRET, (err, decoded)=>{\n               if(err){\n                   const credentials = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTH_PUBLIC_VIEW);\n                   getCount(credentials)\n               }else{\n                getCount(decoded.cre)\n               }\n           });\n           \n        }else{\n           const credentials = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTH_PUBLIC_VIEW);\n                   getCount(credentials)\n        }\n    }\n\n    useEffect(() => {\n        loginCheck()\n    }, [])\n\n    return(\n        <Col sm={6}>\n            <Card className=\"givaways-card\">\n                <Card.Img variant=\"top\" src={props.data.imgUrl} />\n                <Card.Body>\n                    <Card.Title className=\"card-title\">\n                        <div className=\"card-title-text\">\n                            <div className=\"card-left\"></div>\n                            <strong style={{marginRight: '1rem'}}>{props.data.item}</strong>{' '} giveaway\n                        \n                        <div className=\"share-btn-wrapper\">\n                            <TwitterShareButton\n                                url={props.shareUrl}\n                                quote={props.data.item}\n                                className=\"social-share-btn\"\n                            >\n                                <img src={twitterIcon} alt=\"share via facebook\" className=\"share-icon\"/>\n                            </TwitterShareButton>\n\n                            <div className=\"link-counter\">\n                                {/* <FacebookShareCount url={shareUrl} className=\"\">\n                                {count => count}\n                                </FacebookShareCount> */}\n                            </div>\n                            <FacebookShareButton\n                                url={props.shareUrl}\n                                quote={props.data.item}\n                                className=\"social-share-btn\"\n                            >\n                                <img src={facebookIcon} alt=\"share via facebook\" className=\"share-icon\"/>\n                            </FacebookShareButton>\n\n                            <div className=\"link-counter\">\n                                <FacebookShareCount url={props.shareUrl} className=\"\">\n                                {count => count}\n                                </FacebookShareCount>\n                            </div>\n                            <EmailShareButton\n                                url={props.shareUrl}\n                                quote={props.data.item}\n                                className=\"social-share-btn\"\n                            >\n                                <img src={emailIcon} alt=\"share via email\" className=\"share-icon\"/>\n                            </EmailShareButton>\n                            <div className=\"link-counter\">\n                                {/* <FacebookShareCount url={shareUrl} className=\"\">\n                                {count => count}\n                                </FacebookShareCount> */}\n                            </div>\n                        </div>\n                        </div>\n                        \n\n                        \n                        <p>by {' '}\n                        <Link to={`/user/${props.data.userId}`}>\n                            {props.data.influencer} {' '} \n                        </Link>\n                        <span className=\"card-mute-text\">\n                        | {numOfUsers && numOfUsers} {' '} entries</span></p>\n                        \n                    </Card.Title>\n                    <Card.Text>\n                        <span>\n                            <strong>How to enter:</strong><br/> {props.data.howTo}\n                        </span><br/><br/>\n                        <span>\n                            <strong>Details:</strong> <br/>{props.data.details}\n                        </span><br/><br/>\n                        <span>\n                            <strong>Flight Measurement:</strong> <br/>{props.data.measurement}\n                        </span><br/><br/>\n                        <span>\n                            <strong>Special Rules:</strong> <br/>{props.data.rules}\n                        </span>\n                    </Card.Text>\n                    <div className=\"counter-div\">\n                        <div className=\"padding-bar\">\n                        <div className=\"start\">{percentBar && percentBar}</div>\n                        <div className=\"car-wrapper\">\n                            <img src={carIcon} alt=\"car\" className=\"car-icon\" style={{left: `calc(${percentBar} - 41px)`}}/>\n                            {/* <div className=\"dot-bar\" style={{left: `calc(${percentBar} - 14px)`}}></div> */}\n                            <div className=\"dot-bar\" style={{left: '-13px'}}></div>\n                        </div>\n                        \n                        <div className=\"progress-bar-wrapper\">\n                            \n                            <div className=\"progress-bar-smoke\" className=\"bar-smoke\" style={{width: percentBar}}></div>\n                            \n                        </div>\n                        <div className=\"flag-wrapper\">\n                            <img src={flagIcon} alt=\"check flag\" className=\"flag-icon\"/>\n                        </div>\n                        <div className=\"end\">10,000 <br />users</div>\n                \n                        </div>\n                        <div className=\"padding-btn\" style={{marginTop: '-2rem'}}>\n                        {props.isLoggedIn ? <Button className=\"login-btn\" disabled>You are already in!</Button> : <Button className=\"login-btn\" onClick={handleSignup}>Signup now to win!</Button>}\n                            {/* <Button className=\"login-btn\" onClick={handleSignup}>Signup now to win!</Button> */}\n                        </div>\n                    </div>\n                </Card.Body>\n            </Card>\n        </Col>\n    )\n}\n\nconst mapDispatchToProps = (dispatch)=>{\n    return{\n        openLoginModal: (state) => dispatch(openLoginModal(state)),\n        attachMsg: (msg)=> dispatch(attachMsg(msg)),\n        swapToSignup: (state) => dispatch(swapToSignup(state))\n    }\n}\nconst mapStateToProps = (state) => {\n    //syntax is propName: state.key of combineReducer.key\n    return{\n        isLoggedIn: state.auth.isLoggedIn\n    }\n  }\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GiveawayCount)","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/VideoDiv.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Terms.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Admin/AdminLoginDiv.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Privacy.js",["451","452"],"import React from 'react'\nimport { Helmet } from \"react-helmet\"\nimport Layout from './Layout/Layout'\nimport { Row, Col } from 'react-bootstrap'\nimport './terms.scss'\nconst Privacy = () =>{\n    return(\n        <Layout>\n            <Helmet encodeSpecialCharacters={true}>\n                <title>Privacy Policy | The Smoke Show</title>\n                <meta name=\"description\" content=\"Privacy policy for The Smoke Show \" />\n                <link rel=\"canonical\" href=\"https://thesmokeshow.com/privacy-policy\" />\n            </Helmet>\n            <div className=\"spacer-4rem\"></div>\n            <div className=\"main-wrapper\" style={{minHeight: 'calc(100vh - 21rem)'}}>\n                <center>\n                    <h1 className=\"theme-text-color theme-text-p\" >ONLINE PRIVACY POLICY AGREEMENT</h1><br />\n                    \n                </center>\n                \n                <div className=\"terms-wrapper\">\n                    <p>\n                    January 1, 2021\n                    </p>\n                    <p>\n                    The Hoon Group, LLC ( Hoon Group) values its users' privacy. This Privacy Policy (\"Policy\") will help you understand how we collect and use personal information from those who visit our website or make use of our online facilities and services, and what we will and will not do with the information we collect. Our Policy has been designed and created to ensure those affiliated with The Hoon Group, LLC of our commitment and realization of our obligation not only to meet, but to exceed, most existing privacy standards.\n                    </p>\n                    <p>\n                    We reserve the right to make changes to this Policy at any given time. If you want to make sure that you are up to date with the latest changes, we advise you to frequently visit this page. If at any point in time The Hoon Group, LLC decides to make use of any personally identifiable information on file, in a manner vastly different from that which was stated when this information was initially collected, the user or users shall be promptly notified by email. Users at that time shall have the option as to whether to permit the use of their information in this separate manner.\n                    </p>\n                    <p>\n                    This Policy applies to The Hoon Group, LLC and any subsidiary company listed below, and it governs any and all data collection and usage by us. Through the use of http://www.thehoongroup.com and any subsidiary website listed below, you are therefore consenting to the data collection procedures expressed in this Policy.\n                    </p><br />\n                    <Row >\n                    <Col sm={6} className=\"terms-col\">\n                    <center>\n                    <h2 className=\"theme-text-p\">\n                    Subsidiary Company:\n                    </h2><br />\n                    <div className=\"theme-text-p font-12\">The Smoke Show</div>\n                    </center>\n                        \n                    </Col>\n                    <Col sm={6} className=\"terms-col\">\n                    <center>\n                    <h2 className=\"theme-text-p\">\n                    Subsidiary Website:\n                    </h2><br />\n                    <div className=\"theme-text-p font-12\">http://thesmokeshow.com</div>\n                    </center>\n                        \n                    </Col>\n                </Row>\n                <br />\n                <p>\n                Please note that this Policy does not govern the collection and use of information by companies that The Hoon Group, LLCdoes not control, nor by individuals not employed or managed by us. If you visit a website that we mention or link to, be sure to review its privacy policy before providing the site with information. It is highly recommended and suggested that you review the privacy policies and statements of any website you choose to use or frequent to better understand the way in which websites garner, make use of and share the information collected.\n                </p>\n                <div className=\"spacer-2rem\"></div>\n                <div className=\"theme-text-p font-12\">\n                <b>\n                Specifically, this Policy will inform you of the following\n                </b>\n                \n                </div>\n                <div className=\"terms-list\">\n                    <ol type=\"1\" className=\"term-list-style\">\n                        <li>\n                        What personally identifiable information is collected from you through our website&#59;\n                        </li>\n                        <li>\n                        Why we collect personally identifiable information and the legal basis for such collection&#59;\n                        </li>\n                        <li>\n                        How we use the collected information and with whom it may be shared&#59;\n                        </li>\n                        <li>\n                        What choices are available to you regarding the use of your data&#59; and\n                        </li>\n                        <li>\n                        The security procedures in place to protect the misuse of your information.\n                        </li>\n                    </ol>\n                </div>\n                <div className=\"spacer-2rem\"></div>\n                <h2 className=\"theme-text-p\" style={{textDecoration: 'underline'}}>Information We Collect\n                </h2>\n                <p>\n                It is always up to you whether to disclose personally identifiable information to us, although if you elect not to do so, we reserve the right not to register you as a user or provide you with any products or services. This website collects various types of information, such as:\n                </p>\n                <ul className=\"font-12 term-list-style\">\n                    <li>\n                    Voluntarily provided information which may include your name, address, email address, billing and/or credit card information etc. which may be used when you purchase products and/or services and to deliver the services you have requested.\n                    </li>\n                    <li>\n                    Information automatically collected when visiting our website, which may include cookies, third party tracking technologies and server logs\n                    </li>\n                </ul>\n                <p>\n                In addition, The Hoon Group, LLC may have the occasion to collect non-personal anonymous demographic information, such as age, gender, household income, political affiliation, race and religion, as well as the type of browser you are using, IP address, or type of operating system, which will assist us in providing and maintaining superior quality service.\n                </p>\n                <p>\n                The Hoon Group, LLCmay also deem it necessary, from time to time, to follow websites that our users may frequent to gleam what types of services and products may be the most popular to customers or the general public.\n                </p>\n                <p>\n                Please rest assured that this site will only collect personal information that you knowingly and willingly provide to us by way of surveys, completed membership forms, and emails. It is the intent of this site to use personal information only for the purpose for which it was requested, and any additional uses specifically provided for on this Policy.\n                </p>\n                <div className=\"spacer-2rem\"></div>\n                <h2 className=\"theme-text-p\" style={{textDecoration: 'underline'}}>\n                Why We Collect Information and For How Long\n                </h2><br />\n                <p>\n                <b>We are collecting your data for several reasons:</b>\n                </p>\n                \n                <ol className=\"term-list-style\">\n                    <li>\n                    To better understand your needs and provide you with the services you have requested&#59;\n                    </li>\n                    <li>\n                    To fulfill our legitimate interest in improving our services and products&#59;\n                    </li>\n                    <li>\n                    To send you promotional emails containing information we think you may like when we have your consent to do so&#59;\n                    </li>\n                    <li>\n                    To contact you to fill out surveys or participate in other types of market research, when we have your consent to do so&#59;\n                    </li>\n                    <li>\n                    To customize our website according to your online behavior and personal preferences.&#59;\n                    </li>\n                </ol>\n                <p>\n                The data we collect from you will be stored for no longer than necessary. The length of time we retain said information will be determined based upon the following criteria: the length of time your personal information remains relevant; the length of time it is reasonable to keep records to demonstrate that we have fulfilled our duties and obligations; any limitation periods within which claims might be made; any retention periods prescribed by law or recommended by regulators, professional bodies or associations; the type of contract we have with you, the existence of your consent, and our legitimate interest in keeping such information as stated in this Policy.\n                </p>\n                <h2 className=\"theme-text-p\" style={{textDecoration: 'underline'}}>\n                Use of Information Collected\n                </h2>\n                <p>\n                The Hoon Group, LLC may collect and may make use of personal information to assist in the operation of our website and to ensure delivery of the services you need and request. At times, we may find it necessary to use personally identifiable information as a means to keep you informed of other possible products and/or services that may be available to you from http://www.thehoongroup.com and its subsidiaries.\n                </p>\n                <p>\n                The Hoon Group, LLC and its subsidiaries may also be in contact with you with regards to completing surveys and/or research questionnaires related to your opinion of current or potential future services that may be offered.\n                </p>\n                <p>\n                The Hoon Group, LLCuses various third-party social media features including but not limited to YouTube, Google, Facebook, Instagram, Twitter and other interactive programs. These may collect your IP address and require cookies to work properly. These services are governed by the privacy policies of the providers and are not within The Hoon Group, LLC's control.\n                </p>\n                <div className=\"spacer-2rem\"></div>\n                <h2 className=\"theme-text-p\" style={{textDecoration: 'underline'}}>\n                Disclosure of Information\n                </h2>\n                <p>\n                The Hoon Group, LLC may not use or disclose the information provided by you except under the following circumstances:\n                </p>\n                <ul className=\"term-list-style\">\n                    <li>\n                    as necessary to provide services or products you have ordered&#59;\n                    </li>\n                    <li>\n                    in other ways described in this Policy or to which you have otherwise consented&#59;\n                    </li>\n                    <li>\n                    in the aggregate with other information in such a way so that your identity cannot reasonably be determined&#59;\n                    </li>\n                    <li>\n                    as required by law, or in response to a subpoena or search warrant&#59;\n                    </li>\n                    <li>\n                    to outside auditors who have agreed to keep the information confidential&#59;\n                    </li>\n                    <li>\n                    as necessary to enforce the Terms of Service&#59;\n                    </li>\n                    <li>\n                    as necessary to maintain, safeguard and preserve all the rights and property of The Hoon Group, LLC.\n                    </li>\n                </ul>\n                <div className=\"spacer-2rem\"></div>\n                <h2 className=\"theme-text-p\" style={{textDecoration: 'underline'}}>\n                Non-Marketing Purposes\n                </h2>\n                <p>\n                The Hoon Group, LLC greatly respects your privacy. We do maintain and reserve the right to contact you if needed for non-marketing purposes (such as bug alerts, security breaches, account issues, and/or changes in The Hoon Group, LLC products and services). In certain circumstances, we may use our website, newspapers, or other public means to post a notice.\n                </p>\n                <div className=\"spacer-2rem\"></div>\n                <h2 className=\"theme-text-p\" style={{textDecoration: 'underline'}}>\n                Children under the age of 13\n                </h2>\n                <p>\n                The Hoon Group, LLC's website is not directed to, and does not knowingly collect personal\n                identifiable information from, children under the age of thirteen (13). If it is determined that such information has been inadvertently collected on anyone under the age of thirteen (13), we shall immediately take the necessary steps to ensure that such information is deleted from our system's database, or in the alternative, that verifiable parental consent is obtained for the use and storage of such information. Anyone under the age of thirteen (13) must seek and obtain parent or guardian permission to use this website.\n                </p>\n                <h2 className=\"theme-text-p\" style={{textDecoration: 'underline'}}>\n                Unsubscribe or Opt-Out\n                </h2>\n                <p>\n                All users and visitors to our website have the option to discontinue receiving communications from us by way of email or newsletters. To discontinue or unsubscribe from our website please send an email that you wish to unsubscribe to support@thehoongroup.com. If you wish to unsubscribe or opt-out from any third-party websites, you must go to that specific website to unsubscribe or opt-out. The Hoon Group, LLC will continue to adhere to this Policy with respect to any personal information previously collected.\n                </p>\n                <div className=\"spacer-2rem\"></div>\n                <h2 className=\"theme-text-p\" style={{textDecoration: 'underline'}}>\n                Links to Other Websites\n                </h2>\n                <p>\n                Our website does contain links to affiliate and other websites. The Hoon Group, LLC does not claim nor accept responsibility for any privacy policies, practices and/or procedures of other such websites. Therefore, we encourage all users and visitors to be aware when they leave our website and to read the privacy statements of every website that collects personally identifiable information. This Privacy Policy Agreement applies only and solely to the information collected by our website.\n                </p>\n                <div className=\"spacer-2rem\"></div>\n                <h2 className=\"theme-text-p\" style={{textDecoration: 'underline'}}>\n                Notice to European Union Users\n                </h2>\n                <p>\n                The Hoon Group, LLC's operations are located primarily in the United States. If you provide information to us, the information will be transferred out of the European Union (EU) and sent to the United States. (The adequacy decision on the EU-US Privacy became operational on August 1, 2016. This framework protects the fundamental rights of anyone in the EU whose personal data is transferred to the United States for commercial purposes. It allows the free transfer of data to companies that are certified in the US under the Privacy Shield.) By providing personal information to us, you are consenting to its storage and use as described in this Policy.\n                </p>\n                <div className=\"spacer-2rem\"></div>\n                <h2 className=\"theme-text-p\" style={{textDecoration: 'underline'}}>\n                Your Rights as a Data Subject\n                </h2>\n                <p>\n                Under the regulations of the General Data Protection Regulation (\"GDPR\") of the EU you have certain rights as a Data Subject. These rights are as follows&#58;\n                </p>\n                <ul className=\"term-list-style\">\n                    <li>\n                    <b>The right to be informed&#58;</b> this means you have the right to request access to the data we hold about you and we must respond to those requests within one month. You can do this by sending an email to legal@thehoongroup.com.\n                    </li>\n                    <li>\n                    <b>The right of access&#58;</b> this means we must inform you of how we intend to use your personal data and we do this through the terms of this Policy.\n                    </li>\n                    <li>\n                    <b>The right to rectification&#58;</b>this means that if you believe some of the date, we hold is incorrect, you have the right to have it corrected. You can do this by logging into your account with us, or by sending us an email with your request.\n                    </li>\n                    <li>\n                    <b>The right to erasure&#58;</b>this means you can request that the information we hold be deleted, and we will comply unless we have a compelling reason not to, in which case you will be informed of same. You can do this by sending an email to legal@thehoongroup.com.\n                    </li>\n                    <li>\n                    <b>The right to restrict processing&#58;</b>this means you can change your communication preferences or opt-out of certain communications. You can do this by sending an email to support@thehoongroup.com.\n                    </li>\n                    <li>\n                    <b>The right of data portability&#58;</b>this means you can obtain and use the data we hold for your own purposes without explanation. If you wish to request a copy of your information, contact us at legal@thehoongroup.com.\n                    </li>\n                    <li>\n                    <b>The right to object&#58;</b>this means you can file a formal objection with us regarding our use of your information with regard to third parties, or its processing where our legal basis is our legitimate interest in it. To do this, please send an email to legal@thehoongroup.com.\n                    </li>\n                </ul>\n                <p>\n                In addition to the rights above, please rest assured that we will always aim to encrypt and anonymize your personal information whenever possible. We also have protocols in place in the unlikely event that we suffer a data breach and we will contact you if your personal information is ever at risk. For more details regarding our security protections see the section below or visit our website at http://www.thehoongroup.com.\n                </p>\n                <div className=\"spacer-2rem\"></div>\n                <h2 className=\"theme-text-p\" style={{textDecoration: 'underline'}}>\n                Security\n                </h2>\n                <p>\n                The Hoon Group, LLC takes precautions to protect your information. When you submit sensitive information via the website, your information is protected both online and offline. Wherever we collect sensitive information (e.g. credit card information), that information is encrypted and transmitted to us in a secure way. You can verify this by looking for a lock icon in the address bar and looking for \"https\" at the beginning of the address of the webpage.\n                </p>\n                <p>\n                While we use encryption to protect sensitive information transmitted online, we also protect your information offline. Only employees who need the information to perform a specific job (for example, billing or customer service) are granted access to personally identifiable information. The computers and servers in which we store personally identifiable information are kept in a secure environment. This is all done to prevent any loss, misuse, unauthorized access, disclosure or modification of the user's personal information under our control.\n                </p>\n                <p>\n                The company also uses Secure Socket Layer (SSL) for authentication and private communications to build users' trust and confidence in the internet and website use by providing simple and secure access and communication of credit card and personal information. In addition, The Hoon Group, LLC is a licensee of TRUSTe. The website is also secured by VeriSign.\n                </p>\n                <div className=\"spacer-2rem\"></div>\n                <h2 className=\"theme-text-p\" style={{textDecoration: 'underline'}}>\n                Acceptance of Terms\n                </h2>\n                <p>\n                By using this website, you are hereby accepting the terms and conditions stipulated within the Privacy Policy Agreement. If you are not in agreement with our terms and conditions, then you should refrain from further use of our sites. In addition, your continued use of our website following the posting of any updates or changes to our terms and conditions shall mean that you agree and acceptance of such changes.\n                </p>\n                <div className=\"spacer-2rem\"></div>\n                <h2 className=\"theme-text-p\" style={{textDecoration: 'underline'}}>\n                How to Contact Us\n                </h2>\n                <p>\n                If you have any questions or concerns regarding the Privacy Policy Agreement related to our website, please feel free to contact us at the following email, telephone number or mailing address.\n                </p>\n                <p>\n                    <b>Email</b>legal@thehoongroup.com\n                </p>\n                <p>\n                    <b>Mailing Address:</b>\n                </p>\n                <p>\n                The Hoon Group, LLC<br/>\n                2389 Main St. STE. 100<br />\n                Glastonbury, Connecticut<br/>\n                06033\n                </p>\n                <div className=\"spacer-2rem\"></div>\n                <p>\n                The data controller responsible for your personal information for the purposes of GDPR compliance is:\n                </p>\n                <p>Legal Support<br />\n                legal@thehoongroup.com</p>\n                <div className=\"spacer-2rem\"></div>\n                <p>\n                <b>GDPR Disclosure:</b>\n                </p>\n                <p>\n                If you answered \"yes\" to the question Does your website comply with the General Data Protection Regulation (\"GDPR\")? then the Privacy Policy above includes language that is meant to account for such compliance. Nevertheless, in order to be fully compliant with GDPR regulations your company must fulfill other requirements such as: (i) doing an assessment of data processing activities to improve security; (ii) have a data processing agreement with any third party vendors; (iii) appoint a data protection officer for the company to monitor GDPR compliance; (iv) designate a representative based in the EU under certain circumstances; and (v) have a protocol in place to handle a potential data breach. For more details on how to make sure your company is fully compliant with GDPR, please visit the official website at \n                <a href=\"https://gdpr.eu\" target=\"_blank\">\n                https://gdpr.eu </a>\n                . FormSwift and its subsidiaries are in no way responsible for determining whether or not your company is in fact compliant with GDPR and takes no responsibility for the use you make of this Privacy Policy or for any potential liability your company may face in relation to any GDPR compliance issues.\n                </p>\n                <div className=\"spacer-2rem\"></div>\n                <p>\n                <b>COPPA Compliance Disclosure:</b>\n                </p>\n                <p>\n                This Privacy Policy presumes that your website is not directed at children under the age of 13 and does not knowingly collect personal identifiable information from them or allow others to do the same through your site. If this is not true for your website or online service and you do collect such information (or allow others to do so), please be aware that you must be compliant with all COPPA regulations and guidelines in order to avoid violations which could lead to law enforcement actions, including civil penalties.\n                </p>\n                <p>\n                In order to be fully compliant with COPPA your website or online service must fulfill other requirements such as: (i) posting a privacy policy which describes not only your practices, but also the practices of any others collecting personal information on your site or service — for example, plug-ins or ad networks; (ii) include a prominent link to your privacy policy anywhere you collect personal information from children; (iii) include a description of parental rights (e.g. that you won't require a child to disclose more information than is reasonably necessary, that they can review their child's personal information, direct you to delete it, and refuse to allow any further collection or use of the child's information, and the procedures to exercise their rights); (iv) give parents \"direct notice\" of your information practices before collecting information from their children; and (v) obtain the parents' \"verifiable consent\" before collecting, using or disclosing personal information from a child. For more information on the definition of these terms and how to make sure your website or online service is fully compliant with COPPA please visit \n                <a href=\"https://www.ftc.gov/tips-advice/business-center/guidance/childrens-online-privacy-protection-rule-six-step-compliance\" target=\"_blank\">\n                https://www.ftc.gov/tips-advice/business-center/guidance/childrens-online-privacy-protection-rule-six-step-compliance\n                </a>.\n                FormSwift and its subsidiaries are in no way responsible for determining whether or not your company is in fact compliant with COPPA and takes no responsibility for the use you make of this Privacy Policy or for any potential liability your company may face in relation to any COPPA compliance issues.\n                </p>\n                </div>\n              \n            </div>\n        </Layout>\n    )\n}\n\nexport default Privacy","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Admin/CarImgUpload.js",["453","454","455"],"import React, { useState, useEffect } from 'react'\nimport {logOutUser} from '../../store/actions/authActions'\nimport { connect } from 'react-redux'\nimport {Helmet} from \"react-helmet\"\nimport { Container, Form, Button, Alert } from 'react-bootstrap'\nimport AdminLoginDiv from './AdminLoginDiv'\nimport jwt from 'jsonwebtoken'\nimport * as Realm from \"realm-web\"\nconst appConfig = {\n    id: process.env.REACT_APP_REALM_APP_ID,\n    timeout: 10000, // timeout in number of milliseconds\n  };\nconst app = new Realm.App(appConfig);\n\nconst CarImgUpload = (props) =>{\n    const carmake = 'lamborghini'\n    const caryear = '2016'\n    const year = 2016\n    const [userObj, setUserObj] = useState({email: '', password: ''})\n    const [isLoggedIn, setIsLoggedIn] = useState(false)\n    const [msg, setMsg] = useState('')\n    const [imgThumb, setImgThumb] = useState()\n    const [pic, setPic] = useState()\n    const [imgBase64, setImgBase64] = useState()\n    const maxAgeTest = 1 * 60 * 60\n    const [imgName, setImgName] = useState()\n    const [carName, setCarName] = useState()\n    const [resMsg, setResMsg] = useState()\n    const bucketName = process.env.REACT_APP_AWS_BUCKET_NAME_CAR\n    const baseUrl = 'https://s3.amazonaws.com/thesmokeshow'\n\n    const changeUserObj = (e) =>{\n        setUserObj({\n            ...userObj,\n            [e.target.name]: e.target.value\n        })\n    }\n    const picUpload = (e) =>{\n\n        const file = e.target.files[0] \n        console.log('file', file)\n        let arr = file.name.split('_')\n        arr.shift()\n        console.log('arr', arr)\n        let str = arr.join('')\n        const index = str.lastIndexOf('.')\n        const trimmed = str.slice(0, index)\n        console.log('name?', trimmed.replaceAll(\"-\", \" \"))\n        // setCarName(trimmed.replaceAll(\"-\", \" \"))\n        setCarName(trimmed)\n        // setImgName(file.name.replaceAll(\"-\", \" \"))\n        setImgName(file.name)\n        setPic(e.target.files[0])\n        setImgThumb(URL.createObjectURL(e.target.files[0]))\n        const reader = new FileReader()\n        reader.onload = (event) => {\n        const base64 = event.target.result.split(\",\").pop()\n          setImgBase64(base64)\n        };\n        reader.readAsDataURL(file)\n    }\n    const savePic = async () =>{\n        console.log('pic', pic)\n        const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n        const collectionCars = mongo.db(\"smoke-show\").collection(\"cars\")\n\n        const filekey = `/${carmake}/${caryear}/${imgName}`\n        console.log(filekey)\n        console.log(carName)\n        try {\n            await app.currentUser.functions.putImageObjToS3(imgBase64, 'thesmokeshow', filekey, pic.type).then(async res =>{\n                console.log(res)\n                const filter = {make: carmake, year: year, name: carName}\n                await collectionCars.findOne(filter).then(async data =>{\n                    console.log('data', data)\n                    console.log('_data', data._id)\n                    const replaced = filekey.replaceAll(\" \", \"+\")\n                    if(data){\n                        await collectionCars.updateOne(\n                            { _id: data._id},\n                            { $set: {imgUrl: baseUrl + replaced}},\n                            { upsert: true}\n                        ).then(res =>{\n                            console.log(res)\n                        })\n                    }\n                })\n            })\n        } catch (error) {\n            console.log(error)\n        }\n   \n        // if(result){\n        //     console.log(result)\n        //     setResMsg(true)\n        // }else{\n        //     console.log('fail')\n        // }\n    }\n    const handleSubmitLogin = async (e) =>{\n        setMsg('')\n        e.preventDefault()\n        const emailLowerCase = userObj.email.toLowerCase()\n        const credentials = Realm.Credentials.emailPassword(emailLowerCase, userObj.password)\n        try{\n            app.logIn(credentials).then(async user =>{\n                if(app.currentUser.id === user.id){\n                    console.log('user updated')\n                }else{\n                    console.log('user is not updated')\n                }\n                setIsLoggedIn(true)\n                const tokenCredentials = jwt.sign({ cre: credentials }, process.env.REACT_APP_JWT_SECRET, {expiresIn: maxAgeTest})\n                sessionStorage.setItem('session_user', tokenCredentials)\n      \n            })\n        }catch(err){\n            console.log(err)\n            setMsg('login fail')\n        }\n    }\n\n    const handleLogout = () =>{\n        props.logOutUser()\n        setIsLoggedIn(false)\n    }\n    useEffect(() => {\n        const tokenUser = sessionStorage.getItem('session_user')\n        if(tokenUser){\n            setIsLoggedIn(true)\n        }else{\n            setIsLoggedIn(false)\n        }\n\n    }, [])\n    return(\n        <div>\n        <Helmet>\n            <meta name=\"robots\" content=\"noindex, nofollow\" />\n        </Helmet>\n            {isLoggedIn ? \n            <Container className=\"\" style={{marginTop: '4rem'}}>\n                <center>\n                <img src={imgThumb ? imgThumb : ''} \n                    style={{width: '200px', height: '200px', objectFit: 'cover'}}\n                />\n                <p>{pic && pic.name}</p>\n                <p>uploading url: {imgName && imgName}</p>\n                {resMsg && <Alert variant=\"success\">Uploaded</Alert>}\n                <Form style={{width: '500px', margin: '2rem auto', }}>\n                    <Form.Group>\n                        <Form.File \n                        id=\"exampleFormControlFile1\" \n                        // label=\"Example file input\"\n                        onChange={picUpload}\n                        />\n                    </Form.Group>\n                </Form>\n                <Button style={{minWidth: '200px'}} onClick={savePic}>Upload an image</Button>\n                <br/><br/><br/><br/>\n                <Button onClick={handleLogout} style={{minWidth: '200px'}}>Logout</Button>\n            </center>\n            \n            </Container>\n            :\n            <AdminLoginDiv handleSubmitLogin={handleSubmitLogin} handleChange={changeUserObj} msg={msg} />\n            }\n        </div>\n    )\n}\n\nconst mapDispatchToProps = (dispatch) =>{\n    return{\n        logOutUser: () => dispatch(logOutUser())\n    }\n}\nexport default connect(null, mapDispatchToProps)(CarImgUpload)","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Admin/UpdateDB.js",["456","457","458","459","460","461","462","463"],"import React, { useState, useEffect } from 'react'\nimport {logOutUser} from '../../store/actions/authActions'\nimport { connect } from 'react-redux'\nimport {Helmet} from \"react-helmet\"\nimport { Container, Form, Button, Alert } from 'react-bootstrap'\nimport AdminLoginDiv from './AdminLoginDiv'\nimport jwt from 'jsonwebtoken'\nimport * as Realm from \"realm-web\"\nconst appConfig = {\n    id: process.env.REACT_APP_REALM_APP_ID,\n    timeout: 10000, // timeout in number of milliseconds\n  };\nconst app = new Realm.App(appConfig);\n\nconst UpdateDB = (props) =>{\n    const year = 2021\n    const make = 'audi'\n\n    const [userObj, setUserObj] = useState({email: '', password: ''})\n    const [isLoggedIn, setIsLoggedIn] = useState(false)\n    const [msg, setMsg] = useState('')\n\n    const maxAgeTest = 1 * 60 * 60\n\n    const update = async () =>{\n        const id = 401875194\n        const filter = {id: id}\n        const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n        const collectionCars = mongo.db(\"smoke-show\").collection(\"cars\")\n        const collectionNewCar = mongo.db(\"smoke-show\").collection(\"cars-new\")\n        try {\n            await collectionNewCar.findOne(filter).then(async newdata =>{\n                const result = await collectionCars.updateOne(\n                    {id: id},\n                    {$set: {\n                        name: newdata.name,\n                        price: newdata.price,\n                        totalSeating: newdata.totalSeating,\n                        color: newdata.color,\n                        features: newdata.features,\n                        typeCategories: newdata.typeCategories,\n                        modelName: newdata.modelName,\n                        niceId: newdata.niceId\n                    }},\n                    { upsert: true }\n                )\n                if(result){\n                    console.log(result)\n                }else{\n                    console.log('fail')\n                }\n            })\n        } catch (error) {\n            \n        }\n    }\n\n    const checkDuplicates = async () =>{\n        const year = 2020\n        const make = 'audi'\n        const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n        const collectionCars = mongo.db(\"smoke-show\").collection(\"cars\")\n        const collectionNewCar = mongo.db(\"smoke-show\").collection(\"cars-new\")\n        const filter = {year: year, make: make}\n        \n        try {\n            await collectionCars.find(filter).then(cars =>{\n                const results = cars.map(car =>{\n                    return car.id\n                })\n                Promise.all(results).then(res =>{\n                    console.log('original', res.length)\n                    const uniq = [...new Set(res)];\n                    console.log('removed duplicates', uniq.length)\n\n                    let duplicates = [...res]\n                    uniq.forEach((item) => {\n                    const i = duplicates.indexOf(item)\n                    duplicates = duplicates\n                        .slice(0, i)\n                        .concat(duplicates.slice(i + 1, duplicates.length))\n                    })\n                    console.log(duplicates) \n                })\n            })\n        } catch (error) {\n            \n        }\n    }\n\n    const storeData = async () =>{\n        const filter = {year: 2020}\n        const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n        const collectionCars = mongo.db(\"smoke-show\").collection(\"cars\")\n        const collectionNewCar = mongo.db(\"smoke-show\").collection(\"cars-new\")\n        const collectionAnalysis = mongo.db(\"smoke-show\").collection(\"cars-data-analysis\")\n        try {\n            await collectionNewCar.find(filter).then(async newcars =>{\n                console.log(newcars)\n                newcars.map( async newcar =>{\n                    const filterCar = {id: newcar.id}\n                    const res = await collectionCars.findOne(filterCar)\n                    if(res){\n                        // console.log('found', newcar.id)\n                        const updated = await collectionCars.updateOne(\n                            {id: newcar.id},\n                            {$set: {\n                                name: newcar.name,\n                                price: newcar.price,\n                                totalSeating: newcar.totalSeating,\n                                color: newcar.color,\n                                features: newcar.features,\n                                typeCategories: newcar.typeCategories,\n                                modelName: newcar.modelName,\n                                niceId: newcar.niceId\n                            }},\n                            { upsert: true }\n                        )\n                        console.log('updated', updated)\n                  \n                    }else{\n                        console.log('not found', newcar.id)\n                        // const inserted = await collectionCars.insertOne(newcar)\n                        // console.log('inserted', inserted)\n                    }\n                })\n                \n                // const results = cars.map(car =>{\n                //     return car.id\n                // })\n                // Promise.all(results).then(res =>{\n                //     console.log('original', res.length)\n                //     const uniq = [...new Set(res)];\n                //     console.log('removed duplicates', uniq.length)\n\n                //     let duplicates = [...res]\n                //     uniq.forEach((item) => {\n                //     const i = duplicates.indexOf(item)\n                //     duplicates = duplicates\n                //         .slice(0, i)\n                //         .concat(duplicates.slice(i + 1, duplicates.length))\n                //     })\n\n                //     console.log(duplicates) \n                // })\n            })\n        } catch (error) {\n            \n        }\n    }\n\n    const changeUserObj = (e) =>{\n        setUserObj({\n            ...userObj,\n            [e.target.name]: e.target.value\n        })\n    }\n\n    const handleSubmitLogin = async (e) =>{\n        setMsg('')\n        e.preventDefault()\n        const emailLowerCase = userObj.email.toLowerCase()\n        const credentials = Realm.Credentials.emailPassword(emailLowerCase, userObj.password)\n        try{\n            app.logIn(credentials).then(async user =>{\n                if(app.currentUser.id === user.id){\n                    console.log('user updated')\n                }else{\n                    console.log('user is not updated')\n                }\n                setIsLoggedIn(true)\n                const tokenCredentials = jwt.sign({ cre: credentials }, process.env.REACT_APP_JWT_SECRET, {expiresIn: maxAgeTest})\n                sessionStorage.setItem('session_user', tokenCredentials)\n      \n            })\n        }catch(err){\n            console.log(err)\n            setMsg('login fail')\n        }\n    }\n\n    const handleLogout = () =>{\n        props.logOutUser()\n        setIsLoggedIn(false)\n    }\n    useEffect(() => {\n        const tokenUser = sessionStorage.getItem('session_user')\n        if(tokenUser){\n            setIsLoggedIn(true)\n        }else{\n            setIsLoggedIn(false)\n        }\n\n    }, [])\n    return(\n        <div>\n        <Helmet>\n            <meta name=\"robots\" content=\"noindex, nofollow\" />\n        </Helmet>\n            {isLoggedIn ? \n            <Container className=\"\" style={{marginTop: '4rem'}}>\n                <center>\n                {/* {resMsg && <Alert variant=\"success\">Uploaded</Alert>} */}\n  \n                {/* <Button onClick={checkDuplicates} style={{minWidth: '200px'}} >check duplicates</Button> */}\n                <Button onClick={storeData} style={{minWidth: '200px'}} >\n                data check\n                </Button>\n                <br/><br/><br/><br/>\n                <Button onClick={handleLogout} style={{minWidth: '200px'}}>Logout</Button>\n            </center>\n            \n            </Container>\n            :\n            <AdminLoginDiv handleSubmitLogin={handleSubmitLogin} handleChange={changeUserObj} msg={msg} />\n            }\n        </div>\n    )\n}\n\nconst mapDispatchToProps = (dispatch) =>{\n    return{\n        logOutUser: () => dispatch(logOutUser())\n    }\n}\nexport default connect(null, mapDispatchToProps)(UpdateDB)","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/CarStatsVideo.js",["464","465","466","467","468"],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Influencer/SpecDiv.js",["469","470"],"import React from 'react'\nimport powerIcon from '../../assets/global/Horsepower.png'\nimport pistonIcon from '../../assets/global/piston.png'\nimport priceIcon from '../../assets/global/Price-Tag-icon.png'\nimport weightIcon from '../../assets/global/weight.svg'\nimport transmissionIcon from '../../assets/global/transmission.svg'\nimport mileageIcon from '../../assets/global/mileage.svg'\nimport { Link } from 'react-router-dom'\n\nconst SpecDiv = (props) =>{\n    const { video } = props\n    // const goToStatsPage = () =>{\n    //     props.history.push()\n    // }\n  \n    return(\n        <div className=\"ad-size\">\n                                        \n            <div className=\"spec-wrapper\" >\n                <img alt={video.carData.name} src={require(`../../assets/maker_logos/${props.titleCase}_Logo.png`).default} className=\"icon-s\" loading=\"lazy\" />{' '}\n                <span className=\"spec-text\" >\n                    <strong >{video.carData.year}{' '}{props.titleCase}{' '}{props.model}</strong>\n                </span><br/>\n                <img alt=\"price\" src={priceIcon} className=\"icon-s\" /><span className=\"spec-text\" loading=\"lazy\" >{' '}${props.price}</span><br />\n                <img alt=\"power \" src={powerIcon} className=\"icon-s\" /><span  className=\"spec-text\" loading=\"lazy\">{' '}{video.carData.features.Engine.Torque && video.carData.features.Engine.Torque}</span><br />\n                <img alt=\"piston\" src={pistonIcon}  className=\"icon-s\" loading=\"lazy\" /><span className=\"spec-text\">{' '}{video.carData.features.Engine.Horsepower && video.carData.features.Engine.Horsepower}</span><br />\n                <img alt=\"weight\" src={weightIcon} style={{padding: '2px'}}   className=\"icon-s\" loading=\"lazy\" /><span className=\"spec-text\">{' '}{video.carData.features.Measurements[\"Curb weight\"] && video.carData.features.Measurements[\"Curb weight\"] }</span><br />\n                {/* <img alt=\"mileage\" src={mileageIcon} style={{padding: '2px'}}  className=\"icon-s\" loading=\"lazy\" /><span className=\"spec-text\">{' '}\n                {video.carData.features[\"Fuel\"][\"EPA mileage est\"][' (cty/hwy)'] !== undefined && video.carData.features[\"Fuel\"][\"EPA mileage est\"][' (cty/hwy)']}</span><br /> */}\n                <Link \n                to={{\n                    pathname: `/car-stats/${props.titleCase.toLowerCase()}/${video.carData.year}/${props.model.toLowerCase()}/${props.dataid}`\n                }}\n       \n\n                >\n                    <div className=\"btn-spec\">\n                        See more stats\n                    </div>\n                </Link>\n                \n            </div>\n            \n        </div>\n    )\n}\n\nexport default SpecDiv ","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/CarStatsCard.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/CarStatsListsMake.js",["471"],{"ruleId":"472","replacedBy":"473"},{"ruleId":"474","replacedBy":"475"},{"ruleId":"476","severity":1,"message":"477","line":35,"column":8,"nodeType":"478","messageId":"479","endLine":35,"endColumn":20},{"ruleId":"480","severity":1,"message":"481","line":70,"column":10,"nodeType":"482","endLine":70,"endColumn":12,"suggestions":"483"},{"ruleId":"484","severity":1,"message":"485","line":126,"column":33,"nodeType":"486","endLine":126,"endColumn":75},{"ruleId":"480","severity":1,"message":"487","line":171,"column":10,"nodeType":"482","endLine":171,"endColumn":12,"suggestions":"488"},{"ruleId":"489","severity":1,"message":"490","line":249,"column":101,"nodeType":"491","endLine":249,"endColumn":122},{"ruleId":"476","severity":1,"message":"492","line":3,"column":20,"nodeType":"478","messageId":"479","endLine":3,"endColumn":26},{"ruleId":"476","severity":1,"message":"493","line":23,"column":23,"nodeType":"478","messageId":"479","endLine":23,"endColumn":35},{"ruleId":"480","severity":1,"message":"494","line":163,"column":8,"nodeType":"482","endLine":163,"endColumn":10,"suggestions":"495"},{"ruleId":"476","severity":1,"message":"496","line":18,"column":22,"nodeType":"478","messageId":"479","endLine":18,"endColumn":33},{"ruleId":"476","severity":1,"message":"497","line":20,"column":17,"nodeType":"478","messageId":"479","endLine":20,"endColumn":23},{"ruleId":"476","severity":1,"message":"498","line":33,"column":11,"nodeType":"478","messageId":"479","endLine":33,"endColumn":22},{"ruleId":"480","severity":1,"message":"499","line":77,"column":8,"nodeType":"482","endLine":77,"endColumn":10,"suggestions":"500"},{"ruleId":"476","severity":1,"message":"501","line":24,"column":23,"nodeType":"478","messageId":"479","endLine":24,"endColumn":35},{"ruleId":"502","severity":1,"message":"503","line":59,"column":52,"nodeType":"504","messageId":"505","endLine":59,"endColumn":54},{"ruleId":"480","severity":1,"message":"506","line":253,"column":28,"nodeType":"507","endLine":253,"endColumn":121},{"ruleId":"508","severity":1,"message":"509","line":271,"column":21,"nodeType":"510","messageId":"511","endLine":271,"endColumn":60},{"ruleId":"480","severity":1,"message":"512","line":68,"column":4,"nodeType":"482","endLine":68,"endColumn":6,"suggestions":"513"},{"ruleId":"480","severity":1,"message":"514","line":137,"column":10,"nodeType":"482","endLine":137,"endColumn":12,"suggestions":"515"},{"ruleId":"489","severity":1,"message":"490","line":168,"column":86,"nodeType":"491","endLine":168,"endColumn":107},{"ruleId":"476","severity":1,"message":"516","line":192,"column":31,"nodeType":"478","messageId":"479","endLine":192,"endColumn":34},{"ruleId":"480","severity":1,"message":"517","line":271,"column":8,"nodeType":"482","endLine":271,"endColumn":26,"suggestions":"518"},{"ruleId":"480","severity":1,"message":"519","line":283,"column":8,"nodeType":"482","endLine":283,"endColumn":21,"suggestions":"520"},{"ruleId":"480","severity":1,"message":"521","line":287,"column":8,"nodeType":"482","endLine":287,"endColumn":10,"suggestions":"522"},{"ruleId":"523","severity":1,"message":"524","line":303,"column":21,"nodeType":"486","endLine":314,"endColumn":24},{"ruleId":"523","severity":1,"message":"524","line":319,"column":29,"nodeType":"486","endLine":319,"endColumn":130},{"ruleId":"525","severity":1,"message":"526","line":54,"column":22,"nodeType":"527","messageId":"528","endLine":54,"endColumn":24},{"ruleId":"525","severity":1,"message":"529","line":64,"column":43,"nodeType":"530","messageId":"531","endLine":64,"endColumn":52},{"ruleId":"525","severity":1,"message":"532","line":78,"column":43,"nodeType":"527","messageId":"531","endLine":78,"endColumn":45},{"ruleId":"525","severity":1,"message":"533","line":92,"column":55,"nodeType":"527","messageId":"531","endLine":92,"endColumn":57},{"ruleId":"502","severity":1,"message":"503","line":93,"column":25,"nodeType":"504","messageId":"505","endLine":93,"endColumn":27},{"ruleId":"480","severity":1,"message":"514","line":161,"column":7,"nodeType":"482","endLine":161,"endColumn":9,"suggestions":"534"},{"ruleId":"535","severity":1,"message":"536","line":17,"column":5,"nodeType":"537","messageId":"538","endLine":90,"endColumn":6},{"ruleId":"535","severity":1,"message":"536","line":6,"column":5,"nodeType":"537","messageId":"538","endLine":16,"endColumn":6},{"ruleId":"472","replacedBy":"539"},{"ruleId":"474","replacedBy":"540"},{"ruleId":"502","severity":1,"message":"503","line":177,"column":43,"nodeType":"504","messageId":"505","endLine":177,"endColumn":45},{"ruleId":"502","severity":1,"message":"503","line":179,"column":49,"nodeType":"504","messageId":"505","endLine":179,"endColumn":51},{"ruleId":"502","severity":1,"message":"503","line":187,"column":44,"nodeType":"504","messageId":"505","endLine":187,"endColumn":46},{"ruleId":"480","severity":1,"message":"541","line":219,"column":8,"nodeType":"482","endLine":219,"endColumn":10,"suggestions":"542"},{"ruleId":"508","severity":1,"message":"509","line":226,"column":13,"nodeType":"510","messageId":"511","endLine":226,"endColumn":93},{"ruleId":"476","severity":1,"message":"543","line":11,"column":12,"nodeType":"478","messageId":"479","endLine":11,"endColumn":21},{"ruleId":"476","severity":1,"message":"544","line":11,"column":23,"nodeType":"478","messageId":"479","endLine":11,"endColumn":35},{"ruleId":"476","severity":1,"message":"545","line":14,"column":20,"nodeType":"478","messageId":"479","endLine":14,"endColumn":29},{"ruleId":"480","severity":1,"message":"546","line":42,"column":8,"nodeType":"482","endLine":42,"endColumn":10,"suggestions":"547"},{"ruleId":"476","severity":1,"message":"548","line":19,"column":11,"nodeType":"478","messageId":"479","endLine":19,"endColumn":21},{"ruleId":"549","severity":1,"message":"550","line":381,"column":21,"nodeType":"478","messageId":"551","endLine":381,"endColumn":35},{"ruleId":"502","severity":1,"message":"503","line":435,"column":98,"nodeType":"504","messageId":"505","endLine":435,"endColumn":100},{"ruleId":"502","severity":1,"message":"503","line":442,"column":43,"nodeType":"504","messageId":"505","endLine":442,"endColumn":45},{"ruleId":"480","severity":1,"message":"552","line":449,"column":8,"nodeType":"482","endLine":449,"endColumn":10,"suggestions":"553"},{"ruleId":"523","severity":1,"message":"524","line":533,"column":37,"nodeType":"486","endLine":533,"endColumn":144},{"ruleId":"476","severity":1,"message":"554","line":23,"column":11,"nodeType":"478","messageId":"479","endLine":23,"endColumn":21},{"ruleId":"476","severity":1,"message":"548","line":37,"column":11,"nodeType":"478","messageId":"479","endLine":37,"endColumn":21},{"ruleId":"480","severity":1,"message":"555","line":127,"column":8,"nodeType":"482","endLine":127,"endColumn":27,"suggestions":"556"},{"ruleId":"480","severity":1,"message":"546","line":143,"column":8,"nodeType":"482","endLine":143,"endColumn":26,"suggestions":"557"},{"ruleId":"476","severity":1,"message":"558","line":3,"column":15,"nodeType":"478","messageId":"479","endLine":3,"endColumn":24},{"ruleId":"484","severity":1,"message":"485","line":79,"column":11,"nodeType":"486","endLine":82,"endColumn":13},{"ruleId":"476","severity":1,"message":"559","line":70,"column":11,"nodeType":"478","messageId":"479","endLine":70,"endColumn":23},{"ruleId":"476","severity":1,"message":"560","line":80,"column":11,"nodeType":"478","messageId":"479","endLine":80,"endColumn":24},{"ruleId":"480","severity":1,"message":"561","line":275,"column":8,"nodeType":"482","endLine":275,"endColumn":26,"suggestions":"562"},{"ruleId":"480","severity":1,"message":"563","line":281,"column":8,"nodeType":"482","endLine":281,"endColumn":10,"suggestions":"564"},{"ruleId":"476","severity":1,"message":"498","line":61,"column":11,"nodeType":"478","messageId":"479","endLine":61,"endColumn":22},{"ruleId":"484","severity":1,"message":"485","line":79,"column":11,"nodeType":"486","endLine":82,"endColumn":13},{"ruleId":"502","severity":1,"message":"503","line":374,"column":98,"nodeType":"504","messageId":"505","endLine":374,"endColumn":100},{"ruleId":"502","severity":1,"message":"503","line":381,"column":43,"nodeType":"504","messageId":"505","endLine":381,"endColumn":45},{"ruleId":"480","severity":1,"message":"552","line":388,"column":8,"nodeType":"482","endLine":388,"endColumn":10,"suggestions":"565"},{"ruleId":"523","severity":1,"message":"524","line":471,"column":37,"nodeType":"486","endLine":471,"endColumn":144},{"ruleId":"525","severity":1,"message":"532","line":77,"column":45,"nodeType":"527","messageId":"531","endLine":77,"endColumn":47},{"ruleId":"525","severity":1,"message":"526","line":80,"column":21,"nodeType":"566","messageId":"567","endLine":80,"endColumn":27},{"ruleId":"480","severity":1,"message":"568","line":90,"column":8,"nodeType":"482","endLine":90,"endColumn":33,"suggestions":"569"},{"ruleId":"480","severity":1,"message":"568","line":94,"column":8,"nodeType":"482","endLine":94,"endColumn":27,"suggestions":"570"},{"ruleId":"523","severity":1,"message":"524","line":103,"column":17,"nodeType":"486","endLine":103,"endColumn":126},{"ruleId":"480","severity":1,"message":"563","line":78,"column":8,"nodeType":"482","endLine":78,"endColumn":10,"suggestions":"571"},{"ruleId":"476","severity":1,"message":"572","line":18,"column":12,"nodeType":"478","messageId":"479","endLine":18,"endColumn":25},{"ruleId":"476","severity":1,"message":"573","line":27,"column":11,"nodeType":"478","messageId":"479","endLine":27,"endColumn":18},{"ruleId":"480","severity":1,"message":"563","line":82,"column":8,"nodeType":"482","endLine":82,"endColumn":10,"suggestions":"574"},{"ruleId":"476","severity":1,"message":"575","line":1,"column":13,"nodeType":"478","messageId":"479","endLine":1,"endColumn":18},{"ruleId":"535","severity":1,"message":"536","line":7,"column":5,"nodeType":"537","messageId":"538","endLine":11,"endColumn":6},{"ruleId":"476","severity":1,"message":"576","line":224,"column":11,"nodeType":"478","messageId":"479","endLine":224,"endColumn":25},{"ruleId":"525","severity":1,"message":"526","line":235,"column":45,"nodeType":"527","messageId":"528","endLine":235,"endColumn":47},{"ruleId":"476","severity":1,"message":"577","line":252,"column":11,"nodeType":"478","messageId":"479","endLine":252,"endColumn":22},{"ruleId":"476","severity":1,"message":"578","line":13,"column":12,"nodeType":"478","messageId":"479","endLine":13,"endColumn":19},{"ruleId":"476","severity":1,"message":"579","line":16,"column":12,"nodeType":"478","messageId":"479","endLine":16,"endColumn":20},{"ruleId":"480","severity":1,"message":"580","line":179,"column":8,"nodeType":"482","endLine":179,"endColumn":10,"suggestions":"581"},{"ruleId":"476","severity":1,"message":"582","line":71,"column":20,"nodeType":"478","messageId":"479","endLine":71,"endColumn":29},{"ruleId":"476","severity":1,"message":"583","line":7,"column":20,"nodeType":"478","messageId":"479","endLine":7,"endColumn":29},{"ruleId":"525","severity":1,"message":"526","line":27,"column":34,"nodeType":"527","messageId":"528","endLine":27,"endColumn":36},{"ruleId":"525","severity":1,"message":"526","line":31,"column":58,"nodeType":"527","messageId":"528","endLine":31,"endColumn":60},{"ruleId":"476","severity":1,"message":"584","line":47,"column":27,"nodeType":"478","messageId":"479","endLine":47,"endColumn":37},{"ruleId":"476","severity":1,"message":"578","line":14,"column":12,"nodeType":"478","messageId":"479","endLine":14,"endColumn":19},{"ruleId":"476","severity":1,"message":"579","line":17,"column":12,"nodeType":"478","messageId":"479","endLine":17,"endColumn":20},{"ruleId":"480","severity":1,"message":"580","line":178,"column":8,"nodeType":"482","endLine":178,"endColumn":10,"suggestions":"585"},{"ruleId":"480","severity":1,"message":"586","line":283,"column":8,"nodeType":"482","endLine":283,"endColumn":28,"suggestions":"587"},{"ruleId":"480","severity":1,"message":"588","line":287,"column":8,"nodeType":"482","endLine":287,"endColumn":10,"suggestions":"589"},{"ruleId":"535","severity":1,"message":"536","line":7,"column":5,"nodeType":"537","messageId":"538","endLine":21,"endColumn":6},{"ruleId":"476","severity":1,"message":"590","line":2,"column":8,"nodeType":"478","messageId":"479","endLine":2,"endColumn":11},{"ruleId":"476","severity":1,"message":"548","line":10,"column":7,"nodeType":"478","messageId":"479","endLine":10,"endColumn":17},{"ruleId":"476","severity":1,"message":"572","line":24,"column":28,"nodeType":"478","messageId":"479","endLine":24,"endColumn":41},{"ruleId":"476","severity":1,"message":"591","line":6,"column":8,"nodeType":"478","messageId":"479","endLine":6,"endColumn":24},{"ruleId":"476","severity":1,"message":"592","line":7,"column":8,"nodeType":"478","messageId":"479","endLine":7,"endColumn":19},{"ruleId":"476","severity":1,"message":"593","line":3,"column":29,"nodeType":"478","messageId":"479","endLine":3,"endColumn":40},{"ruleId":"480","severity":1,"message":"487","line":67,"column":8,"nodeType":"482","endLine":67,"endColumn":10,"suggestions":"594"},{"ruleId":"489","severity":1,"message":"490","line":156,"column":65,"nodeType":"491","endLine":156,"endColumn":86},{"ruleId":"595","severity":1,"message":"596","line":296,"column":17,"nodeType":"486","endLine":296,"endColumn":59},{"ruleId":"595","severity":1,"message":"596","line":309,"column":17,"nodeType":"486","endLine":309,"endColumn":161},{"ruleId":"476","severity":1,"message":"597","line":28,"column":20,"nodeType":"478","messageId":"479","endLine":28,"endColumn":29},{"ruleId":"476","severity":1,"message":"598","line":29,"column":11,"nodeType":"478","messageId":"479","endLine":29,"endColumn":21},{"ruleId":"484","severity":1,"message":"485","line":144,"column":17,"nodeType":"486","endLine":146,"endColumn":19},{"ruleId":"476","severity":1,"message":"599","line":5,"column":21,"nodeType":"478","messageId":"479","endLine":5,"endColumn":25},{"ruleId":"476","severity":1,"message":"600","line":5,"column":35,"nodeType":"478","messageId":"479","endLine":5,"endColumn":40},{"ruleId":"476","severity":1,"message":"601","line":16,"column":11,"nodeType":"478","messageId":"479","endLine":16,"endColumn":15},{"ruleId":"476","severity":1,"message":"602","line":17,"column":11,"nodeType":"478","messageId":"479","endLine":17,"endColumn":15},{"ruleId":"476","severity":1,"message":"603","line":25,"column":11,"nodeType":"478","messageId":"479","endLine":25,"endColumn":17},{"ruleId":"476","severity":1,"message":"604","line":58,"column":11,"nodeType":"478","messageId":"479","endLine":58,"endColumn":26},{"ruleId":"476","severity":1,"message":"605","line":63,"column":15,"nodeType":"478","messageId":"479","endLine":63,"endColumn":31},{"ruleId":"476","severity":1,"message":"606","line":96,"column":15,"nodeType":"478","messageId":"479","endLine":96,"endColumn":33},{"ruleId":"476","severity":1,"message":"501","line":33,"column":23,"nodeType":"478","messageId":"479","endLine":33,"endColumn":35},{"ruleId":"502","severity":1,"message":"503","line":85,"column":52,"nodeType":"504","messageId":"505","endLine":85,"endColumn":54},{"ruleId":"525","severity":1,"message":"526","line":303,"column":37,"nodeType":"527","messageId":"528","endLine":303,"endColumn":39},{"ruleId":"480","severity":1,"message":"607","line":330,"column":8,"nodeType":"482","endLine":330,"endColumn":10,"suggestions":"608"},{"ruleId":"508","severity":1,"message":"509","line":356,"column":21,"nodeType":"510","messageId":"511","endLine":356,"endColumn":60},{"ruleId":"476","severity":1,"message":"591","line":6,"column":8,"nodeType":"478","messageId":"479","endLine":6,"endColumn":24},{"ruleId":"476","severity":1,"message":"592","line":7,"column":8,"nodeType":"478","messageId":"479","endLine":7,"endColumn":19},{"ruleId":"476","severity":1,"message":"609","line":3,"column":21,"nodeType":"478","messageId":"479","endLine":3,"endColumn":32},"no-native-reassign",["610"],"no-negated-in-lhs",["611"],"no-unused-vars","'CarImgUpload' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getInfluencers'. Either include it or remove the dependency array.","ArrayExpression",["612"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'loginCheck'. Either include it or remove the dependency array.",["613"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'Button' is defined but never used.","'setResendMsg' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'confirmUser'. Either include it or remove the dependency array.",["614"],"'setHasError' is assigned a value but never used.","'setMsg' is assigned a value but never used.","'createToken' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'handeleRestPw'. Either include it or remove the dependency array.",["615"],"'setCarImages' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Assignments to the 'searchedCars' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.",["616"],"React Hook useEffect has a missing dependency: 'checkToken'. Either include it or remove the dependency array.",["617"],"'car' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'props.customData.userId' and 'props.match.params.id'. Either include them or remove the dependency array.",["618"],"React Hook useEffect has missing dependencies: 'getData' and 'props.profilepageid'. Either include them or remove the dependency array.",["619"],"React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.",["620"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Array.prototype.filter() expects a value to be returned at the end of function.","FunctionExpression","expectedAtEnd","Array.prototype.map() expects a value to be returned at the end of arrow function.","Array.prototype.filter() expects a value to be returned at the end of arrow function.",["621"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase",["610"],["611"],"React Hook useEffect has a missing dependency: 'getComments'. Either include it or remove the dependency array.",["622"],"'modalShow' is assigned a value but never used.","'setModalShow' is assigned a value but never used.","'setUserId' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["623"],"'maxAgeTest' is assigned a value but never used.","no-const-assign","'collectionUser' is constant.","const","React Hook useEffect has missing dependencies: 'props.profileUser.profileCover', 'props.profileUser.profilePic', and 'userObj'. Either include them or remove the dependency array. If 'setCurrentBioPic' needs the current value of 'props.profileUser.profilePic', you can also switch to useReducer instead of useState and read 'props.profileUser.profilePic' in the reducer.",["624"],"'handleShow' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.errMsg'. Either include it or remove the dependency array. If 'setLoginMsg' needs the current value of 'props.errMsg', you can also switch to useReducer instead of useState and read 'props.errMsg' in the reducer.",["625"],["626"],"'Container' is defined but never used.","'userLoggedIn' is assigned a value but never used.","'userLoggedOut' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'userIdParam'. Either include it or remove the dependency array.",["627"],"React Hook useEffect has missing dependencies: 'loginCheck', 'props', and 'userIdParam'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["628"],["629"],"ReturnStatement","expectedReturnValue","React Hook useEffect has a missing dependency: 'checkFanOf'. Either include it or remove the dependency array.",["630"],["631"],["632"],"'formattedFans' is assigned a value but never used.","'getData' is assigned a value but never used.",["633"],"'Realm' is defined but never used.","'checkYoutubeId' is assigned a value but never used.","'filterArray' is assigned a value but never used.","'message' is assigned a value but never used.","'editMode' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'queryData'. Either include it or remove the dependency array.",["634"],"'setCarObj' is assigned a value but never used.","'setSafety' is assigned a value but never used.","'insertData' is assigned a value but never used.",["635"],"React Hook useEffect has a missing dependency: 'props.influencerObj.username'. Either include it or remove the dependency array. If 'setInfluencerName' needs the current value of 'props.influencerObj.username', you can also switch to useReducer instead of useState and read 'props.influencerObj.username' in the reducer.",["636"],"React Hook useEffect has missing dependencies: 'influencerId', 'loginCheck', and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["637"],"'jwt' is defined but never used.","'transmissionIcon' is defined but never used.","'mileageIcon' is defined but never used.","'ProgressBar' is defined but never used.",["638"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","'setResMsg' is assigned a value but never used.","'bucketName' is assigned a value but never used.","'Form' is defined but never used.","'Alert' is defined but never used.","'year' is assigned a value but never used.","'make' is assigned a value but never used.","'update' is assigned a value but never used.","'checkDuplicates' is assigned a value but never used.","'collectionNewCar' is assigned a value but never used.","'collectionAnalysis' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getCarData'. Either include it or remove the dependency array.",["639"],"'carsAllYear' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"640","fix":"641"},{"desc":"642","fix":"643"},{"desc":"644","fix":"645"},{"desc":"646","fix":"647"},{"desc":"648","fix":"649"},{"desc":"650","fix":"651"},{"desc":"652","fix":"653"},{"desc":"654","fix":"655"},{"desc":"656","fix":"657"},{"desc":"650","fix":"658"},{"desc":"659","fix":"660"},{"desc":"661","fix":"662"},{"desc":"663","fix":"664"},{"desc":"665","fix":"666"},{"desc":"667","fix":"668"},{"desc":"669","fix":"670"},{"desc":"671","fix":"672"},{"desc":"663","fix":"673"},{"desc":"674","fix":"675"},{"desc":"676","fix":"677"},{"desc":"671","fix":"678"},{"desc":"671","fix":"679"},{"desc":"680","fix":"681"},{"desc":"680","fix":"682"},{"desc":"683","fix":"684"},{"desc":"685","fix":"686"},{"desc":"642","fix":"687"},{"desc":"688","fix":"689"},"Update the dependencies array to be: [getInfluencers]",{"range":"690","text":"691"},"Update the dependencies array to be: [loginCheck]",{"range":"692","text":"693"},"Update the dependencies array to be: [confirmUser]",{"range":"694","text":"695"},"Update the dependencies array to be: [handeleRestPw]",{"range":"696","text":"697"},"Update the dependencies array to be: [fetchData]",{"range":"698","text":"699"},"Update the dependencies array to be: [checkToken]",{"range":"700","text":"701"},"Update the dependencies array to be: [props.customData.userId, props.isLoggedIn, props.match.params.id]",{"range":"702","text":"703"},"Update the dependencies array to be: [getData, props.profilepageid, userIdParam]",{"range":"704","text":"705"},"Update the dependencies array to be: [getData]",{"range":"706","text":"707"},{"range":"708","text":"701"},"Update the dependencies array to be: [getComments]",{"range":"709","text":"710"},"Update the dependencies array to be: [props]",{"range":"711","text":"712"},"Update the dependencies array to be: [props.profileUser.profileCover, props.profileUser.profilePic, userObj]",{"range":"713","text":"714"},"Update the dependencies array to be: [props.errMsg, props.hasLoginErr]",{"range":"715","text":"716"},"Update the dependencies array to be: [props, props.swapSignup]",{"range":"717","text":"718"},"Update the dependencies array to be: [props.customData, userIdParam]",{"range":"719","text":"720"},"Update the dependencies array to be: [loginCheck, props, userIdParam]",{"range":"721","text":"722"},{"range":"723","text":"714"},"Update the dependencies array to be: [checkFanOf, props.customData.fansOf]",{"range":"724","text":"725"},"Update the dependencies array to be: [checkFanOf, influencer.userId]",{"range":"726","text":"727"},{"range":"728","text":"722"},{"range":"729","text":"722"},"Update the dependencies array to be: [queryData]",{"range":"730","text":"731"},{"range":"732","text":"731"},"Update the dependencies array to be: [props.influecerObj, props.influencerObj.username]",{"range":"733","text":"734"},"Update the dependencies array to be: [influencerId, loginCheck, props]",{"range":"735","text":"736"},{"range":"737","text":"693"},"Update the dependencies array to be: [getCarData]",{"range":"738","text":"739"},[2486,2488],"[getInfluencers]",[7202,7204],"[loginCheck]",[8211,8213],"[confirmUser]",[3035,3037],"[handeleRestPw]",[1999,2001],"[fetchData]",[5590,5592],"[checkToken]",[9957,9975],"[props.customData.userId, props.isLoggedIn, props.match.params.id]",[10255,10268],"[getData, props.profilepageid, userIdParam]",[10369,10371],"[getData]",[5829,5831],[8886,8888],"[getComments]",[1285,1287],"[props]",[19591,19593],"[props.profileUser.profileCover, props.profileUser.profilePic, userObj]",[5315,5334],"[props.errMsg, props.hasLoginErr]",[5631,5649],"[props, props.swapSignup]",[10565,10583],"[props.customData, userIdParam]",[10707,10709],"[loginCheck, props, userIdParam]",[16478,16480],[3869,3894],"[checkFanOf, props.customData.fansOf]",[3947,3966],"[checkFanOf, influencer.userId]",[2936,2938],[3123,3125],[6927,6929],"[queryData]",[6861,6863],[10662,10682],"[props.influecerObj, props.influencerObj.username]",[10777,10779],"[influencerId, loginCheck, props]",[2476,2478],[15122,15124],"[getCarData]"]