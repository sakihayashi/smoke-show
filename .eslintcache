[{"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/index.js":"1","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/reportWebVitals.js":"2","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/App.js":"3","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/aws-exports.js":"4","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/store/reducers/rootReducer.js":"5","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/InfluencerIndexPage.js":"6","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/HomePage.js":"7","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/AboutPage.js":"8","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/EmailConfirmation.js":"9","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/NotFoundPage.js":"10","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/ResetPassword.js":"11","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/CarStats.js":"12","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Swagg.js":"13","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Influencer/BioPage.js":"14","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Fan/BioPage.js":"15","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/CarSearch.js":"16","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Giveaways.js":"17","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/store/reducers/authReducer.js":"18","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/store/reducers/userReducer.js":"19","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/commentsTempData.js":"20","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/carTempData.js":"21","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Comments.js":"22","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Layout/Layout.js":"23","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/giveAwayData.js":"24","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/utils/youtubeAPI.js":"25","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Fan/vehicleCard.js":"26","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Fan/CreateNewCar.js":"27","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Layout/Header.js":"28","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Layout/Footer.js":"29","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Fan/SettingModal.js":"30","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Layout/SignUpModal.js":"31","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Layout/LoginModal.js":"32","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/store/actions/userActions.js":"33","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/store/actions/authActions.js":"34","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Shopify/Cart.js":"35","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Shopify/Products.js":"36","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Shopify/Product.js":"37","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Shopify/LineItem.js":"38","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Shopify/VariantSelector.js":"39","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Fan/ImageUpload.js":"40"},{"size":934,"mtime":1611680438370,"results":"41","hashOfConfig":"42"},{"size":362,"mtime":1604942454463,"results":"43","hashOfConfig":"42"},{"size":1818,"mtime":1611093860931,"results":"44","hashOfConfig":"42"},{"size":1074,"mtime":1611365886225,"results":"45","hashOfConfig":"42"},{"size":368,"mtime":1605920900781,"results":"46","hashOfConfig":"42"},{"size":4522,"mtime":1612500214387,"results":"47","hashOfConfig":"42"},{"size":13368,"mtime":1612500188356,"results":"48","hashOfConfig":"42"},{"size":2384,"mtime":1612402238852,"results":"49","hashOfConfig":"42"},{"size":6739,"mtime":1611860315695,"results":"50","hashOfConfig":"42"},{"size":873,"mtime":1612402277036,"results":"51","hashOfConfig":"42"},{"size":6165,"mtime":1608424831604,"results":"52","hashOfConfig":"42"},{"size":16524,"mtime":1609120836298,"results":"53","hashOfConfig":"42"},{"size":3606,"mtime":1612402283053,"results":"54","hashOfConfig":"42"},{"size":11451,"mtime":1611094187241,"results":"55","hashOfConfig":"42"},{"size":17549,"mtime":1612500254175,"results":"56","hashOfConfig":"42"},{"size":8236,"mtime":1611843297181,"results":"57","hashOfConfig":"42"},{"size":7536,"mtime":1612402244448,"results":"58","hashOfConfig":"42"},{"size":434,"mtime":1606496773615,"results":"59","hashOfConfig":"42"},{"size":405,"mtime":1606150053437,"results":"60","hashOfConfig":"42"},{"size":1018,"mtime":1605734313167,"results":"61","hashOfConfig":"42"},{"size":30355,"mtime":1608082226445,"results":"62","hashOfConfig":"42"},{"size":7417,"mtime":1611783658416,"results":"63","hashOfConfig":"42"},{"size":1674,"mtime":1611884604352,"results":"64","hashOfConfig":"42"},{"size":1595,"mtime":1609789938707,"results":"65","hashOfConfig":"42"},{"size":364,"mtime":1605543123565,"results":"66","hashOfConfig":"42"},{"size":9071,"mtime":1612497396420,"results":"67","hashOfConfig":"42"},{"size":12058,"mtime":1612470731354,"results":"68","hashOfConfig":"42"},{"size":4258,"mtime":1612529112409,"results":"69","hashOfConfig":"42"},{"size":373,"mtime":1610140072353,"results":"70","hashOfConfig":"42"},{"size":17902,"mtime":1612528757710,"results":"71","hashOfConfig":"42"},{"size":5902,"mtime":1607812476224,"results":"72","hashOfConfig":"42"},{"size":6762,"mtime":1612504469520,"results":"73","hashOfConfig":"42"},{"size":521,"mtime":1607799014035,"results":"74","hashOfConfig":"42"},{"size":367,"mtime":1606247792385,"results":"75","hashOfConfig":"42"},{"size":2130,"mtime":1610065399614,"results":"76","hashOfConfig":"42"},{"size":613,"mtime":1610055684017,"results":"77","hashOfConfig":"42"},{"size":4052,"mtime":1610152774195,"results":"78","hashOfConfig":"42"},{"size":2086,"mtime":1596835430000,"results":"79","hashOfConfig":"42"},{"size":546,"mtime":1596835430000,"results":"80","hashOfConfig":"42"},{"size":3624,"mtime":1612401950074,"results":"81","hashOfConfig":"42"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},"1fkg0if",{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"84"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"84"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"84"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"84"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"84"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"84"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"84"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"84"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"84"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"84"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"84"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"84"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"84"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"84"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"157","messages":"158","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"84"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"84"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"84"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"84"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"84"},"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/index.js",[],["182","183"],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/reportWebVitals.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/App.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/aws-exports.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/store/reducers/rootReducer.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/InfluencerIndexPage.js",["184"],"import React, { useEffect, useState } from 'react'\nimport {Helmet} from \"react-helmet\"\nimport { Row, Col, Card, Button } from 'react-bootstrap'\nimport { connect } from 'react-redux'\nimport * as Realm from \"realm-web\"\nimport { uid } from 'react-uid'\nimport { NavLink } from 'react-router-dom'\nimport Layout from './Layout/Layout'\n\nconst InfluencerIndexPage = () =>{\n\n    const videoEmbedURL = 'https://www.youtube.com/embed/'\n\n    const [influencers, setInfluencers] = useState([])\n    // var d = new Date();\n    // var n = new Date().getTime();\n    const appConfig = {\n        id: process.env.REACT_APP_REALM_APP_ID,\n        // timeout: 10000, \n        // timeout in number of milliseconds\n      };\n    const app = new Realm.App(appConfig);\n\n    const getInfluencers = async () =>{\n        const credentials = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTHAPI);\n        try {\n        //   const app = new Realm.App(appConfig);\n      \n          // an authenticated user is required to access a MongoDB instance\n          await app.logIn(credentials).then( async user =>{\n            const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME);\n            const mongoCollection = mongo.db(\"smoke-show\").collection(\"influencers\");\n            const filter = {isActive: true} \n            await mongoCollection.find(filter).then(resAll =>{\n                console.log('find all', resAll);\n                setInfluencers(resAll)\n            })\n           \n          }\n          )\n         }catch(error){console.log(error)}\n    }\n\n    useEffect(() => {\n        getInfluencers()\n\n      }, [])\n\n    return(\n        <Layout>\n        <Helmet>\n          <meta charSet=\"utf-8\" />\n          <title>The list of influencers | The Smoke Show</title>\n          <meta name=\"description\" content=\"Check out our influencers / authors\" />\n          <meta name=\"robots\" content=\"noindex, nofollow\" />\n          {/* <link rel=\"canonical\" href=\"http://mysite.com/example\" /> */}\n        </Helmet>\n            <div className=\"main-wrapper\">\n                <div className=\"spacer-4rem\"></div>\n                <div className=\"title title-adj\">\n                    <h2 >List of Influencers</h2>\n                </div>\n                <Row style={{paddingLeft:'-7px', paddingRight:'-7px'}}>\n                {influencers && influencers.map(influencer =>{\n                    return(\n                        <Col sm={6} md={4} key={uid(influencer)}>\n                            <Card style={{ width: '18rem' }}>\n                                <div className=\"videoWrapper\">\n                                        <iframe src={videoEmbedURL + influencer.featuredVideo.id}\n                                                frameBorder='0'\n                                                allow='autoplay; encrypted-media'\n                                                allowFullScreen\n                                                title='video'\n                                        />\n                                </div>\n                                <Card.Body>\n                                    <Card.Title>{influencer.username}</Card.Title>\n                                    <Card.Text className=\"influencer-desc\">{influencer.desc}</Card.Text>\n                                    <NavLink \n                                    to={{\n                                        pathname: `/influencer/${influencer.userId}`,\n                                        state: { influencer: influencer }\n                                        // influencer: influencer\n                                    }}\n                                    activeStyle={{\n                                        color: \"gray\"\n                                    }}\n                                    >\n                                        <Button className=\"login-btn\">See {influencer.username}'s Bio</Button>\n                                    </NavLink>\n                                    \n                                </Card.Body>\n                            </Card>\n                        </Col>\n                    )\n                    \n                })}\n                \n                </Row>\n                <div className=\"spacer-4rem\"></div>\n            </div>\n        </Layout>\n        \n    )\n}\nconst mapStateToProps = (state) => {\n    //syntax is propName: state.key of combineReducer.key\n    return{\n      username: state.user.username,\n    }\n  }\n\nexport default connect(mapStateToProps)(InfluencerIndexPage)\n\n","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/HomePage.js",["185","186","187"],"import React, { useEffect, useState, Fragment, useRef, Suspense } from 'react'\nimport {Helmet} from \"react-helmet\"\nimport { Row, Col, Form, FormControl, Button } from 'react-bootstrap'\nimport { connect } from 'react-redux'\nimport * as Realm from \"realm-web\"\nimport { youtubeAPI } from '../utils/youtubeAPI'\nimport { carTempData } from './carTempData'\nimport { commentsTempData } from './commentsTempData' \n// import Comments from './Comments'\nimport Avatar from 'react-avatar'\nimport { v4 as uuidv4 } from 'uuid';\nimport powerIcon from '../assets/global/Horsepower.png'\nimport pistonIcon from '../assets/global/piston.png'\nimport priceIcon from '../assets/global/Price-Tag-icon.png'\nimport Layout from './Layout/Layout'\nimport '../scss/spinner.css'\n\nconst Comments = React.lazy(() => import('./Comments'))\n\nconst HomePage = (props) =>{\n    \nconst childRef = useRef();\nconst videoEmbedURL = 'https://www.youtube.com/embed/'\nconst EddieXChannelId = 'UCdOXRB936PKSwx0J7SgF6SQ'\nconst [searchKeyword, setSearchKeyword] = useState('')\nconst [titleStr, setTitleStr] = useState('Your search result')\nconst [searchedCarData, setSearchedCarData] = useState([])\n// var d = new Date();\n// var n = new Date().getTime();\nconst appConfig = {\n    id: process.env.REACT_APP_REALM_APP_ID,\n    // timeout: 10000, \n    // timeout in number of milliseconds\n    };\nconst app = new Realm.App(appConfig);\n//     items: Array(5)\n// 0:\n// etag: \"IPLLqa9ikvoy_gLqxEcoiqqavC4\"\n// id: {kind: \"youtube#channel\", channelId: \"UCdOXRB936PKSwx0J7SgF6SQ\"}\n// kind: \"youtube#searchResult\"\n// snippet:\n// channelId: \"UCdOXRB936PKSwx0J7SgF6SQ\"\n// channelTitle: \"EddieX\"\n// description: \"If you like cars, and you like hearing someone with too much knowledge about cars talk about them, you should check out my Youtube channel! I'm planning on ...\"\n// liveBroadcastContent: \"upcoming\"\n// publishTime: \"2015-06-11T02:01:04Z\"\n// publishedAt: \"2015-06-11T02:01:04Z\"\n// thumbnails:\n// default: {url: \"https://yt3.ggpht.com/a/AATXAJzxcCWM9He6uumiLOa71zR_7mR3feUT_MG2IfBY=s88-c-k-c0xffffffff-no-rj-mo\"}\n// high: {url: \"https://yt3.ggpht.com/a/AATXAJzxcCWM9He6uumiLOa71zR_7mR3feUT_MG2IfBY=s800-c-k-c0xffffffff-no-rj-mo\"}\n// medium: {url: \"https://yt3.ggpht.com/a/AATXAJzxcCWM9He6uumiLOa71zR_7mR3feUT_MG2IfBY=s240-c-k-c0xffffffff-no-rj-mo\"}\n// __proto__: Object\n// title: \"EddieX\"\n\n// id:\n// kind: \"youtube#video\"\n// videoId: \"ifi5cGgJa7s\"\n// __proto__: Object\n// kind: \"youtube#searchResult\"\n// snippet:\n// channelId: \"UCdOXRB936PKSwx0J7SgF6SQ\"\n// channelTitle: \"EddieX\"\n// description: \"Use my referral link to get 12% off your BlendMount Radar Detector mount order! http://blendmount.refr.cc/eddiex Follow me on IG and FB at @eddiex616 to see ...\"\n// liveBroadcastContent: \"none\"\n// publishTime: \"2020-11-10T20:00:04Z\"\n// publishedAt: \"2020-11-10T20:00:04Z\"\n// thumbnails: {default: {…}, medium: {…}, high: {…}}\n// title: \"The Best Mercedes AMG Ever! | SLS Black Series Review\"\n\n  \n    const handleChangeKeyword = (e) =>{\n        setSearchKeyword(e.target.value)\n    }\n    const handleVideoSearch = async e =>{\n        e.preventDefault()\n        await youtubeAPI.get('/search', {\n            params: {\n                q: searchKeyword,\n                channelId: EddieXChannelId\n            }\n        }).then(res =>{\n            console.log('res from youtube', res)\n            setTitleStr(\"EddieX \" + searchKeyword)\n            const searchResult = res.data.items\n            console.log('is this array?', res.data.items)\n            const datayoutube =[]\n            searchResult.map(data =>{\n                datayoutube.push({\n                    videoId: data.id.videoId,\n                    youtube:{\n                        snippet: {title: data.snippet.title}\n                    }\n                })\n                return\n            })\n            setSearchedCarData(datayoutube)\n            console.log('use state check: ', searchedCarData)\n            \n            \n// etag: \"DGXOPdigGW4SFrRywMEE_lwUuwY\"\n// id:\n// kind: \"youtube#video\"\n// videoId: \"iXrO7LJTUkE\"\n// __proto__: Object\n// kind: \"youtube#searchResult\"\n// snippet:\n// channelId: \"UCdOXRB936PKSwx0J7SgF6SQ\"\n// channelTitle: \"EddieX\"\n// description: \"Follow me on IG and FB at @eddiex616 to see daily posts and updates! The Dodge Durango SRT and Ford Explorer ST are two 3 row SUVs that offer some ...\"\n// liveBroadcastContent: \"none\"\n// publishTime: \"2020-02-17T20:00:10Z\"\n// publishedAt: \"2020-02-17T20:00:10Z\"\n// thumbnails: {default: {…}, medium: {…}, high: {…}}\n// title: \"2020 Dodge Durango SRT vs 2020 Ford Explorer ST | Is The V8 Worth $20,000 More?\"\n\n        })\n    }\n \n    const loginCheck = async () =>{\n        let userLogged;\n        // const credentials = Realm.Credentials.emailPassword('saki@thehoongroup.com', 'aaaaaa')\n        const credentials = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTH_PUBLIC_VIEW);\n\n        try {\n      \n          // an authenticated user is required to access a MongoDB instance\n          await app.logIn(credentials).then( async user =>{\n            const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME);\n            const mongoCollection = mongo.db(\"smoke-show\").collection(\"comments\");\n            const filter = {videoId: 'QHLojVxs'} \n            await mongoCollection.find(filter).then(resAll =>{\n                console.log('find all', resAll);\n            })\n           \n          }\n          )\n          // the rest of your code ...\n      \n         }catch(error){console.log(error)}\n    }\n\n\n    useEffect( () => {\n        loginCheck()\n\n      })\n\n    return(\n            <Layout ref={childRef}>\n            <Helmet>\n                <meta charSet=\"utf-8\" />\n                <title>Home | The Smoke Show</title>\n                <meta name=\"description\" content=\"Place the meta description text here.\" />\n                <meta name=\"robots\" content=\"noindex, nofollow\" />\n                {/* <link rel=\"canonical\" href=\"http://mysite.com/example\" /> */}\n            </Helmet>\n                <div className=\"main-wrapper\">\n                <div className=\"spacer-4rem\"></div>\n                <h2 className=\"title\">New Today</h2>\n                <Row style={{paddingLeft:'-7px', paddingRight:'-7px'}}>\n                {\n                    carTempData.map((car, index) =>{\n                        const uuid = uuidv4()\n                        return(\n                            <Fragment key={uuid}>\n                                <Col sm={6} className=\"main-col\" >\n                                    <Row >\n                                        <Col sm={8} >\n                                            <div className=\"videoWrapper\">\n                                                <iframe src={videoEmbedURL + car.videoId}\n                                                        frameBorder='0'\n                                                        allow='autoplay; encrypted-media'\n                                                        allowFullScreen\n                                                        title='video'\n                                                />\n                                \n                                            </div>\n                                            <h3 style={{marginTop:'10px'}} >{car.youtube.snippet.title}</h3>\n                                            <Row className=\"comment-wrapper\" >\n                                                <Col sm={1} style={{margin:0,padding:0}} >\n                                                {car.profile_pic ? <img src={car.profile_pic} \n                                                \n                                                className=\"creator-profile-pic\" alt=\"car\"/> :\n                                                <Avatar color={Avatar.getRandomColor('sitebase', ['red', 'green', 'teal'])} className=\"creator-profile-pic\" name={car.creator} />\n                                                }\n                                                    \n                                                </Col>\n                                                <Col sm={11} style={{paddingRight:0, margin: 'auto'}} >\n                                                <div className=\"creator-name\"><strong>{car.creator}</strong><br /> <span style={{color:'gray', fontSize: '13px'}}>{' '} {car.fans} fans</span></div>\n\n                                                </Col>\n                                            </Row>\n                                            <Suspense fallback={<div class=\"loader\">Loading...</div>}>\n                                                <Comments comments={commentsTempData[index]} videoId={car.videoId} />\n                                            </Suspense>\n                                            \n                                        </Col>\n                                        <Col sm={4} className=\"spec-col\"  >\n                                            <div className=\"spec-wrapper\" key={'spec-wrapper' + uuid}>\n                                            <img alt={car.name} src={require(`../assets/car-brand-logos/${car.logoUrl}`).default} className=\"icon-s\" />{' '}<span className=\"spec-text\" ><strong >{car.name}</strong></span><br/>\n                                            <img alt=\"price\" src={priceIcon} className=\"icon-s\" /><span className=\"spec-text\" >{' '}${car.price}</span><br />\n                                            <img alt=\"power \" src={powerIcon} className=\"icon-s\" /><span  className=\"spec-text\">{' '}{car.engine}</span><br />\n                                            <img alt=\"piston\" key={pistonIcon} src={pistonIcon}  className=\"icon-s\" /><span className=\"spec-text\">{' '}{car.hoursepower}</span><br />\n                                            </div>\n                                        </Col>\n                                    </Row>\n                                </Col>\n                            </Fragment>\n                        )\n                    })\n                }\n            </Row>\n            <div className=\"spacer-4rem\"></div>\n            <div className=\"title title-adj\">\n                <h2 style={{marginBottom: '-1rem'}}>{titleStr}</h2>\n                <Form inline onSubmit={handleVideoSearch} style={{marginRight: '-8px'}}>\n                    <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2 form-adj\" onChange={handleChangeKeyword}/>\n                </Form>\n                </div>\n                <Row style={{paddingLeft:'-7px', paddingRight:'-7px'}}>\n                {searchedCarData &&\n                    searchedCarData.map((car, index) =>{\n                        const uuid = uuidv4()\n                        return(\n                            <Fragment>\n                                <Col sm={6} key={uuid}>\n                                    <Row >\n                                        <Col sm={8} >\n                                            <div className=\"videoWrapper\">\n                                                <iframe src={videoEmbedURL + car.videoId}\n                                                        frameBorder='0'\n                                                        allow='autoplay; encrypted-media'\n                                                        allowFullScreen\n                                                        title='video'\n                                                />\n                                    \n                                            </div>\n                                            <h3 style={{marginTop:'10px'}}>{car.youtube.snippet.title}</h3>\n                                        </Col>\n                                        <Col sm={4} style={{paddingLeft:0}} >\n                                            <div className=\"spec-wrapper\">\n                                            {/* <img alt={car.name} key={car.logoUrl} src={require(`../assets/car-brand-logos/${car.logoUrl}`).default} className=\"icon-s\" />{' '}<span className=\"spec-text\"><strong>{car.name}</strong></span><br/>\n                                            <img alt=\"price\" key={priceIcon} src={priceIcon} className=\"icon-s\" /><span className=\"spec-text\">{' '}${car.price}</span><br />\n                                            <img alt=\"power \" key={powerIcon} src={powerIcon} className=\"icon-s\" /><span className=\"spec-text\">{' '}{car.engine}</span><br />\n                                            <img alt=\"piston\" key={pistonIcon} src={pistonIcon} className=\"icon-s\" /><span className=\"spec-text\">{' '}{car.hoursepower}</span><br /> */}\n                                            </div>\n                                        </Col>\n                                    </Row>\n                                </Col>\n                            </Fragment>\n\n                        )\n                    \n                })\n                }\n                </Row>\n            </div>\n            </Layout>\n    )\n}\nconst mapStateToProps = (state) => {\n    //syntax is propName: state.key of combineReducer.key\n    return{\n      username: state.user.username,\n    }\n  }\n\nexport default connect(mapStateToProps)(HomePage)\n\n// --data '{\"personalizations\": [{\"to\": [{\"email\": \"saki@musicofsnow.io\"}]}],\"from\": {\"email\": \"saki@thehoongroup.com\"},\"subject\": \"Hello, World!\",\"content\": [{\"type\": \"text/plain\", \"value\": \"Heya!\"}]}'\n","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/AboutPage.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/EmailConfirmation.js",["188"],"import React, { useState, useEffect, useRef } from 'react'\nimport { Button, Form } from 'react-bootstrap'\n// import Logo from '../assets/global/Logo-smoke-show.png'\nimport * as Realm from \"realm-web\"\nimport { connect } from 'react-redux'\nimport jwt from 'jsonwebtoken'\nimport Layout from './Layout/Layout'\n\nconst EmailConfirmation = (props) =>{\n    const childRef = useRef()\n    let token = new URLSearchParams(props.location.search).get(\"token\")\n    let tokenId = new URLSearchParams(props.location.search).get(\"tokenId\")\n    const [userObj, setUserObj] = useState({fname: '', lname: '', token: token, tokenId: tokenId, username: '', email: '', password: ''})\n    const [hasError, setHasError] = useState(false)\n    const [hasRegistered, setHasRegistered] = useState(false)\n    const [msg, setMsg] = useState(\"\")\n    const maxAgeTest = 1 * 60 * 60\n    const id = process.env.REACT_APP_REALM_APP_ID\n    const config = { id };\n    const app = new Realm.App(config);\n    \n    const getApp = Realm.App.getApp(id)\n\n    const handleChange =(e) =>{\n        setUserObj({\n            ...userObj,\n            [e.target.name]: e.target.value\n        })\n    }\n    const createToken = (userData) =>{\n        return jwt.sign({ userData: userData }, process.env.REACT_APP_JWT_SECRET, {expiresIn: maxAgeTest});\n    }\n    const handleSubmit = async (e) =>{\n        e.preventDefault()\n        setHasError(false)\n        const email = userObj.email.toLowerCase()\n        \n        const credentials = Realm.Credentials.emailPassword(email, userObj.password)\n        await app.logIn(credentials).then(async user =>{\n            const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME);\n            const userData = {\n                userId: user.id,\n                fname: userObj.fname,\n                lname: userObj.lname,\n                username: userObj.username\n            }\n            \n            const mongoCollection = mongo.db(\"smoke-show\").collection(\"users\");\n            await mongoCollection.insertOne(userData).then(insertOneResult =>{\n                userData.login = {email: email, password: userObj.password}\n                let token = createToken(userData)\n                localStorage.setItem('session_token', token)\n                childRef.current.handleUserByParent(userObj.fname)\n            }).then(()=>{props.history.push(\"/\")})\n\n        })\n    }\n    const handleResendToken = async (e) =>{\n        e.preventDefault()\n        console.log('email', userObj.email)\n        const email = userObj.email\n        const response = await getApp.emailPasswordAuth.resendConfirmation(email)\n        console.log('response', response)\n    }\n    const resendToken = ()=>{\n        return(\n            <div>\n                <center>\n                    <h3>{msg}</h3>\n                </center>\n                \n                <div className=\"spacer-4rem\"></div>\n                <Form className=\"login-form\" onSubmit={handleResendToken}>\n                    <Form.Group controlId=\"formBasicEmail\">\n                        <Form.Label>Email address</Form.Label>\n                        <Form.Control type=\"email\" placeholder=\"e.g. example@example.com\" name=\"email\" onChange={handleChange} required />\n                    </Form.Group>\n                    <div className=\"login-btn-wrapper\">\n                        <Button className=\"login-btn\" type=\"submit\">\n                            Resend Confirmation Email\n                        </Button><br /><br />\n                     \n                    </div>\n                </Form>\n            </div>\n        )\n    }\n    const confirmUser = async () =>{\n        if(token){\n            try{\n                await app.emailPasswordAuth.confirmUser(token, tokenId).then(user =>{\n                    setHasRegistered(true)\n                    \n                })\n            }catch(error){\n                console.log('error', error)\n                setMsg('Oops, the link was expired. Please resend confirmation email.')\n                setHasRegistered(false)\n            }\n        }\n    }\n \n    useEffect(() => {\n        confirmUser()\n        \n    }, [])\n\n    return (\n        <Layout ref={childRef}>\n            <div className=\"custom-modal-body\">\n                <div style={{marginTop:'3rem'}}></div>\n                {hasRegistered ? \n                <React.Fragment>\n                    <div className=\"login-logo-wrapper\">\n                        <h3>You are registered to The Smoke Show.</h3>\n                        <p>Please fill in your info and login.</p>\n                    </div>\n                    <Form className=\"login-form\" onSubmit={handleSubmit}>\n                        <Form.Group >\n                            <Form.Label>First name</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"e.g. John\" name=\"fname\" onChange={handleChange} required/>\n                        </Form.Group>\n                        <Form.Group >\n                            <Form.Label>Last name</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"e.g. Due\" name=\"lname\" onChange={handleChange} required />\n                        </Form.Group>\n                        <Form.Group controlId=\"formBasicEmail\">\n                            <Form.Label>Username</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"e.g. Smoke Show love\" name=\"username\" onChange={handleChange} required/>\n                        </Form.Group>\n                        <Form.Group controlId=\"formBasicEmail\">\n                            <Form.Label>Email address</Form.Label>\n                            <Form.Control type=\"email\" placeholder=\"e.g. example@example.com\" name=\"email\" onChange={handleChange} />\n                        </Form.Group>\n                        <Form.Group controlId=\"formBasicPassword\">\n                            <Form.Label>Password</Form.Label>\n                            <Form.Control type=\"password\" placeholder=\"Between 6 and 128 characters long\" name=\"password\" onChange={handleChange} />\n                        </Form.Group>\n                        \n                        {hasError && <div className=\"error-msg\">{msg}</div>}\n                        <br/>\n                        <div className=\"login-btn-wrapper\">\n                            <Button className=\"login-btn\" type=\"submit\">\n                                Login\n                            </Button>\n                        </div>\n                        <div className=\"spacer-4rem\"></div>\n                    </Form>\n                </React.Fragment>\n                : resendToken()\n                }\n            \n            </div>\n        </Layout>\n        \n    )\n}\n\nexport default connect()(EmailConfirmation)\n\n\n","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/NotFoundPage.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/ResetPassword.js",["189","190","191"],"import React, { useState, useEffect, useRef } from 'react'\nimport { Button, Form } from 'react-bootstrap'\n// import Logo from '../assets/global/Logo-smoke-show.png'\nimport * as Realm from \"realm-web\"\nimport { connect } from 'react-redux'\nimport jwt from 'jsonwebtoken'\nimport Layout from './Layout/Layout'\n\nconst ResetPassword = (props) =>{\n    const childRef = useRef()\n    const token = new URLSearchParams(props.location.search).get(\"token\")\n    const tokenId = new URLSearchParams(props.location.search).get(\"tokenId\")\n    const [userObj, setUserObj] = useState({token: token, tokenId: tokenId, email: '', password: '', password2: ''})\n    const [hasError, setHasError] = useState(false)\n    const [hasReset, setHasReset] = useState(false)\n    const [msg, setMsg] = useState(\"\")\n    const maxAgeTest = 1 * 60 * 60\n    const id = process.env.REACT_APP_REALM_APP_ID\n    const config = { id };\n    const app = new Realm.App(config);\n\n\n    const handleChange =(e) =>{\n        setUserObj({\n            ...userObj,\n            [e.target.name]: e.target.value\n        })\n    }\n    const createToken = (userData) =>{\n        return jwt.sign({ userData: userData }, process.env.REACT_APP_JWT_SECRET, {expiresIn: maxAgeTest});\n    }\n    const handeleRestPw = async (e) =>{\n        e.preventDefault()\n        try{\n            await app.emailPasswordAuth.resetPassword(token, tokenId, userObj.password).then(res =>{\n                console.log('res', res)\n                hasReset(true)\n            })\n        }catch(error){\n            console.log(error)\n        }\n        \n    }\n    const handleLogin = async (e) =>{\n        e.preventDefault()\n        const emailLowerCase = userObj.email.toLocaleLowerCase()\n        const credentials = Realm.Credentials.emailPassword(emailLowerCase, userObj.password)\n\n        try{\n            // Authenticate the user\n            await app.logIn(credentials).then(async user=>{\n                    console.log('working?', user)\n                    // const key = await user.apiKeys.create(uid)\n                    const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME);\n                    const mongoCollection = mongo.db(\"smoke-show\").collection(\"users\");\n                    let token = ''\n                    const queryFilter = { userId: user.id };\n                    await mongoCollection.findOne(queryFilter).then(loginUserData =>{\n                        console.log('login user data', loginUserData)\n                        loginUserData.login = userObj\n                        token = createToken(loginUserData)\n                        \n                        localStorage.setItem('session_token', token)\n                    }).then(()=>{props.history.push(\"/\")})\n                    \n                    \n                });\n            \n      \n        }catch(error){\n            console.log('error', error)\n\n        }\n    }\n    useEffect(() => {\n        \n    }, [])\n\n    return (\n        <Layout ref={childRef}>\n            <div className=\"custom-modal-body theme-text-p height-adj-main\">\n                <div style={{marginTop:'4rem'}}></div>\n                {hasReset ? \n                <React.Fragment>\n                    <div style={{textAlign:\"center\"}}>\n                        <h4>Your password has been reset</h4><br/>\n                        <p> Login with your new password.</p>\n                    </div>\n                    <div className=\"spacer-4rem\"></div>\n                    <Form className=\"login-form\" onSubmit={handleLogin}>\n                        <Form.Group controlId=\"formBasicEmail\">\n                            <Form.Label>Email address</Form.Label>\n                            <Form.Control type=\"email\" placeholder=\"e.g. example@example.com\" name=\"email\" onChange={handleChange} />\n                        </Form.Group>\n\n                        <Form.Group controlId=\"formBasicPassword\">\n                            <Form.Label>Password</Form.Label>\n                            <Form.Control type=\"password\" placeholder=\"\" name=\"password\" onChange={handleChange} />\n                        </Form.Group>\n                        <div className=\"spacer-2rem\"></div>\n                        <div className=\"login-btn-wrapper\">\n                            <Button className=\"login-btn\" type=\"submit\">\n                                Login\n                            </Button><br /><br />\n                            \n                        </div>\n                    \n                    </Form>\n                </React.Fragment>\n                :\n                <React.Fragment>\n                    <div className=\"login-logo-wrapper theme-text-p\">\n                        <h4 className=\"h4-style\">Reset Your Password</h4>\n                        <div className=\"spacer-4rem\"></div>\n                        <p>Please enter your new password below</p>\n                    </div>\n                    <Form className=\"login-form\" onSubmit={handeleRestPw}>\n         \n                        <Form.Group >\n                            <Form.Label>New password</Form.Label>\n                            <Form.Control type=\"password\" placeholder=\"Between 6 and 128 characters long\" name=\"password\" onChange={handleChange} />\n                        </Form.Group>\n                        <br/>\n                        <Form.Group >\n                            <Form.Label>Confirm new password</Form.Label>\n                            <Form.Control type=\"password2\" placeholder=\"type your new password again\" name=\"password\" onChange={handleChange} />\n                        </Form.Group>\n                        {hasError && <div className=\"error-msg\">{msg}</div>}\n                        <br/>\n                        <div className=\"login-btn-wrapper\">\n                            <Button className=\"login-btn\" type=\"submit\">\n                                Set New Password\n                            </Button>\n                        </div>\n                        <div className=\"spacer-4rem\"></div>\n                    </Form>\n                </React.Fragment>\n                }\n            </div>\n        </Layout>\n        \n    )\n}\n\nexport default connect()(ResetPassword)\n\n\n","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/CarStats.js",["192","193","194","195","196"],"import React, { useState, Fragment, useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport Layout from './Layout/Layout'\nimport { Row, Col, Button} from 'react-bootstrap'\nimport './carStats.scss'\nimport { v4 as uuidv4 } from 'uuid'\nimport axios from 'axios';\n\nimport priceIcon from '../assets/global/Price-Tag-icon.svg'\nimport powerIcon from '../assets/global/Horsepower.svg'\nimport weightIcon from '../assets/global/weight.svg'\nimport pistonIcon from '../assets/global/piston.png'\n// import cylinderIcon from '../assets/global/cylinder.svg'\nimport transmissionIcon from '../assets/global/transmission.svg'\nimport driveIcon from '../assets/global/drive_icon.svg'\nimport mileageIcon from '../assets/global/mileage.svg'\nimport torqueIcon from '../assets/global/torque.png'\nimport frontWheels from '../assets/global/front-wheels.png'\nimport rearWheels from '../assets/global/rear-wheels.png'\nimport allWheels from '../assets/global/all-wheels.png'\n\nconst CarStats = (props) =>{\n    const statsArr = ['Main Stats', 'Engine', 'Measurements', 'Comfort & Convenience', 'Drive Train', 'Suspension', 'Color', 'Warranty']\n    const [carImages, setCarImages] = useState([])\n    \n    const [activeTab, setActiveTab] = useState('Main Stats')\n    let searchedCars = []\n    if(props.history.location.cars){\n        searchedCars = props.history.location.cars.map(item => ({...item, tabs: statsArr, activeTab: 'Main Stats'}))\n    }else{props.history.push('/car-search')}\n    \n    const [carData, setCarData] = useState(searchedCars)\n    \n    const handleTabClick = (tab, index) =>{\n        let tempCarArr = [...carData]\n       \n       tempCarArr[index].activeTab = tab\n       setCarData(tempCarArr)\n    }\n    \n\n    const switchTabs = (car, tab) =>{\n        let engine, warranty, measurements, comfort, drivetrain, suspension, mileage, weight, totalSeating, colors, baseMSRP, rearseats, driveIcon, driveType\n\n        if(car.features['Engine'] !== undefined) engine = car.features['Engine']\n        if(car.features['Warranty'] !== undefined) warranty = car.features['Warranty']\n        if(car.features['Measurements'] !== undefined) measurements = car.features['Measurements']\n        if(car.features['Measurements'] !== undefined) weight = car.features['Measurements']['Curb weight']\n        if(car.features['Comfort & Convenience'] !== undefined) comfort = car.features['Comfort & Convenience']\n        if(car.features['Drive Train'] !== undefined){\n            drivetrain = car.features['Drive Train']\n            driveType = drivetrain['Drive type']\n        } \n        if(driveType === undefined){\n            driveType = null\n        }else if(driveType === 'all wheel drive' || drivetrain['Drive type'] === 'four wheel drive'){\n            driveIcon = allWheels\n        }else if(driveType === 'front wheel drive'){\n            driveIcon = frontWheels\n        }else if(driveType === 'rear wheel drive'){\n            driveIcon = rearWheels\n        }else{driveIcon = allWheels}\n\n        if(car.features['Suspension'] !== undefined) suspension = car.features['Suspension']\n        if(car.features['Rearseats'] !== undefined) rearseats = car.features['Rearseats'] \n        if(car.features['Fuel']['EPA mileage est'] == undefined) {\n            console.log('no mileage')\n        }else{mileage = car.features['Fuel']['EPA mileage est'][' (cty/hwy)']}\n        if(car.totalSeating !== undefined) totalSeating = car.totalSeating\n        if(car.color !== undefined) colors = car.color\n     \n        if(car.price === undefined){\n            baseMSRP = null\n        }else if(car.price.baseMSRP === undefined){\n            baseMSRP = null\n        }else{\n            baseMSRP = car.price.baseMSRP.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n        }\n\n        \n        switch(tab) {\n            case 'Main Stats':\n              return <Fragment>\n                        {baseMSRP &&\n                        <div className=\"stats-box\">\n                        <div  className=\"xs-txt\">\n                            <img src={priceIcon} alt=\"price\" className=\"icon-stats\" />\n                            <div>MSRP</div>\n                        </div>\n                        <div className=\"stats-label\">\n                            ${' '} {baseMSRP}\n                        </div>\n                        \n                        </div>}\n\n                        {weight &&\n                        <div className=\"stats-box\">\n                            <div className=\"xs-txt\">\n                                <img src={weightIcon} alt=\"weight\" className=\"icon-stats\" />\n                                <div>Curb weight</div>\n                            </div>\n                            <div className=\"stats-label\">\n                                {weight.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}\n                            </div>\n                        </div>\n                        }\n                        {mileage &&\n                        <div className=\"stats-box\">\n                            <div className=\"xs-txt\">\n                                <img src={mileageIcon} alt=\"mileage\" className=\"icon-stats\" />\n                                <div>Mileage</div>\n                            </div>\n                            <div className=\"stats-label\">\n                                {mileage}\n                            </div>\n                        </div>\n                        }\n                        \n                        {drivetrain &&\n                        <div className=\"stats-box\">\n                            <div className=\"xs-txt\">\n                                <img src={transmissionIcon} alt=\"transmission\" className=\"icon-stats\" />\n                                <div>Transmission</div>\n                            </div>\n                            <div className=\"stats-label\">\n                                {drivetrain['Transmission']}\n                            </div>\n                        </div>\n                        }\n                        {driveType &&\n                        <div className=\"stats-box\">\n                            <div className=\"xs-txt\">\n                                <img src={driveIcon} alt=\"drive\" className=\"icon-stats\" />\n                                <div>Drive type</div>\n                            </div>\n                            <div className=\"stats-label\">\n                                {driveType}\n                            </div>\n                        </div>\n                        }\n                        {car.features.Engine.Torque && \n                        <div className=\"stats-box\">\n                            <div className=\"xs-txt\">\n                                <img src={torqueIcon} alt=\"torque\" className=\"icon-stats\" />\n                                Torque\n                            </div>\n                            <div className=\"stats-label\">\n                                { car.features.Engine.Torque }\n                            </div>\n                        </div>\n                        }\n                        {car.features.Engine.Horsepower &&\n                        <div className=\"stats-box\">\n                            <div className=\"xs-txt\">\n                                <img src={powerIcon} alt=\"hoursepower\" className=\"icon-stats\" />\n                                Horsepower\n                            </div>\n                            <div className=\"stats-label\">\n                                { car.features.Engine.Horsepower}\n                            </div>\n                        </div>\n                        }\n                        {car.features.Engine.Cylinders &&\n                        <div className=\"stats-box\">\n                            <div className=\"xs-txt\">\n                                <img src={pistonIcon} alt=\"Cylinders\" className=\"icon-stats\" />\n                                Cylinders\n                            </div>\n                            <div className=\"stats-label\">\n                                { car.features.Engine.Cylinders}\n                            </div>\n                            \n                        </div>\n                        }\n                    </Fragment>\n            case 'Engine':\n                return <Fragment>\n                        { engine && Object.entries(engine).map(([key, value]) =>{\n                            return <div className=\"stats-box\"><strong>{key}</strong>:  {value}</div>\n                        })}\n                      </Fragment>\n            case 'Warranty':\n                return <Fragment>\n                        {warranty && Object.entries(warranty).map(([key, value]) =>{\n                            return <div className=\"stats-box\"><strong>{key}</strong>:  {value}</div>\n                        })}\n                      </Fragment>\n            case 'Measurements':\n                return <Fragment>\n                        {totalSeating && \n                            <div className=\"stats-box\">Total Seating: {totalSeating}</div>\n                        }\n                        {rearseats && Object.entries(rearseats).map(([key, value]) =>{\n                            return <div className=\"stats-box\"><strong>{key}</strong>:  {value}</div>\n                        })\n                        }\n                        { measurements && Object.entries(measurements).map(([key, value]) =>{\n                            return <div className=\"stats-box\"><strong>{key}</strong>:  {value}</div>\n                        })}\n                          \n                     \n                      </Fragment>  \n            case 'Comfort & Convenience':\n                return <Fragment>\n                        { comfort && Object.keys(comfort).map((key, index)=>{\n                            return <div className=\"stats-box\">{key}</div>\n                        })}\n                          \n                       \n                      </Fragment> \n            case 'Drive Train':\n                return <Fragment>\n                        { drivetrain && Object.entries(drivetrain).map(([key, value]) =>{\n                            if(value === true){\n                                return <div className=\"stats-box\">{key}<strong></strong></div>\n                            }else{\n                                return <div className=\"stats-box\"><strong>{key}</strong>:  {value}</div>\n                            }\n                            \n                        })}\n                      </Fragment>\n            case 'Suspension':\n                return <Fragment>\n                        { suspension && Object.keys(suspension).map((key, index)=>{\n                            return <div className=\"stats-box\">{key}</div>\n                        })}\n                          \n                       \n                      </Fragment>    \n            case 'Color':\n                return <Fragment>\n                        <p><strong>Exterior</strong></p>\n                        { colors && colors['EXTERIOR'].map((color, index)=>{\n                            const uuid = uuidv4()\n                            return <Fragment>\n                                    <div className=\"stats-box-outline\" key={uuid}>\n                                    <div className=\"color-thumbnail\" style={{backgroundColor: `rgb(${color.rgb})`}}></div>\n                                    <div className=\"color-name\">{color.name}</div>\n                                    </div>\n                                   </Fragment>\n                        })}\n                          <hr />\n                       <p><strong>Interior</strong></p>\n                       { colors && colors['INTERIOR'].map((color, index)=>{\n                            return <div className=\"stats-box-outline\">\n                                    <div className=\"color-thumbnail\" style={{backgroundColor: `rgb(${color.rgb})`}}></div>\n                                    <div className=\"color-name\">{color.name}</div>\n                                    </div>\n                        })}\n                      </Fragment>  \n            default:\n              return <Fragment>\n                        <div className=\"stats-box\">Error</div>\n                    </Fragment>\n          }\n    }\n    const getImgData = async () =>{\n        const selected = props.history.location.selected\n        console.log('selected', selected)\n        const url = `https://api.carsxe.com/images?key=${process.env.REACT_APP_CARXE_API_KEY}&year=${selected.year}&make=${selected.make}&model=${selected.model}&format=json&angle=front`\n        await axios.get(url).then(res =>{\n            console.log('img data', res.data)\n            setCarImages(res.dataimages)\n            \n        })\n        // try{\n        //     await fetch(url, {\n        //         // crossDomain:true,\n        //         method: 'GET',\n        //         headers: {\n        //             'Content-Type': 'application/json',\n        //           },\n        //       }).then(response => response.json()).then(result =>{\n        //             console.log('res', result)\n        //             setCarImages(result.images)\n        //         })\n        // }catch(err){\n        //     console.log(err)\n        // }\n        \n\n    }\n    useEffect(() => {\n        \n        // getImgData()\n    }, [])\n    return(\n        <Layout>\n            <div className=\"main-wrapper\">\n                <div className=\"spacer-4rem\"></div>\n                {carData && carData.map((car, index) =>{\n                    car.tabs = statsArr\n                    const maker = car.make.toUpperCase()\n                    const model = car.model.toUpperCase()\n                    console.log('check', carImages)\n                    let carImg;\n                    if(carImages[0]){\n                        carImg = carImages[0].link\n                    }else{\n                        carImg = 'https://smoke-show.s3.amazonaws.com/car-photos/Ferrari-F8_Spider-2020-1280-01.jpg'\n                        }\n                    return(\n                        <Fragment key={car.name}>\n                            <h2 className=\"title\">{car.year} {' '} {maker} {' '} {model}</h2>\n                            <p className=\"theme-text-p\">{car.name}</p>\n                            <Row>\n                                <Col sm={4}>\n                                    {/* <img src=\"https://smoke-show.s3.amazonaws.com/car-photos/Ferrari-F8_Spider-2020-1280-01.jpg\" alt=\"Ferrari F8 spider\" style={{width: '100%'}}/> */}\n                                    <img src={carImg} alt={car.name} style={{width: '100%'}}/>\n                                </Col>\n                                <Col sm={8} style={{paddingLeft: 0}} >\n                                    <div className=\"box-shadow-white car-stats-wrapper\" >\n                                        <table className=\"stats-tab-ul\">\n                                        <tbody>\n                                            <tr>\n                                            {car.tabs.map(tab =>{\n                                                const uuid = uuidv4()\n                                                return(\n                                                        <td key={uuid} id={uuid} name={tab} custom={tab} onClick={()=>handleTabClick(tab, index)} className={ tab === car.activeTab ? 'tab-link tab-active' : 'tab-link' }>{tab}</td>                                       \n                                                )\n                                                \n                                            })}\n                                         \n                                            </tr>\n                                            </tbody>\n                                        </table>\n                                        <div className=\"stats-div\">\n                                            {switchTabs(car, car.activeTab)}\n                                        </div>\n                                    </div>\n                                </Col>\n                            </Row>\n                            <div className=\"spacer-4rem\"></div>\n                        </Fragment>\n                    )\n                })\n                }\n                <div className=\"spacer-4rem\"></div>\n                <Link to=\"/car-search\">\n                    <Button className=\"login-btn\">Start New Search</Button>\n                </Link>\n                \n            </div>\n            \n        </Layout>\n    )\n}\n\nexport default CarStats","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Swagg.js",["197"],"import React, { useEffect, useState } from 'react'\nimport {Helmet} from \"react-helmet\"\nimport Layout from './Layout/Layout'\nimport Client from 'shopify-buy';\nimport Products from './Shopify/Products'\nimport Cart from './Shopify/Cart'\nimport './Shopify/shopify.scss'\nimport Logo from '../assets/global/Logo-smoke-show.png'\n\nconst Swagg = () =>{\nconst [isCartOpen, setIsCartOpen] = useState(false)\nconst [checkout, setCheckout] = useState({ lineItems: [] })\nconst [products, setProducts] =useState([])\nconst [shop, setShop] = useState({})\n\nconst client = Client.buildClient({\n    storefrontAccessToken: process.env.REACT_APP_SHOPIFY_TOKEN,\n        domain: 'thehoongroup.myshopify.com',\n    });\n\nconst fetchData = () =>{\n    client.checkout.create().then((res) => {\n        console.log('cart', res)\n        setCheckout(res)\n      })\n\n      client.product.fetchAll().then((res) => {\n        console.log('product', res)\n        setProducts(res)\n      })\n  \n      client.shop.fetchInfo().then((res) => {\n        console.log('shop', res)\n        setShop(res)\n      });\n}\nconst addVariantToCart = async (variantId, quantity)=>{\n    setIsCartOpen(true)\n\n    const lineItemsToAdd = [{variantId, quantity: parseInt(quantity, 10)}]\n    // const checkoutId = checkout.id\n\n    return await client.checkout.addLineItems(checkout.id, lineItemsToAdd).then(res => {\n      console.log('res', res)\n      setCheckout(res)\n    });\n}\nconst updateQuantityInCart = async (lineItemId, quantity) =>{\n    // const checkoutId = checkout.id\n    const lineItemsToUpdate = [{id: lineItemId, quantity: parseInt(quantity, 10)}]\n\n    return await client.checkout.updateLineItems(checkout.id, lineItemsToUpdate).then(res => {\n        setCheckout(res)\n    });\n}\nconst removeLineItemInCart = async (lineItemId) =>{\n    return await client.checkout.removeLineItems(checkout.id, [lineItemId]).then(res => {\n        setCheckout(res)\n    });\n}\n\nconst handleCartClose = () =>{\n    setIsCartOpen(false)\n}\n\nuseEffect(() => {\n    fetchData()\n}, [])\n    return(\n        <Layout>\n        <Helmet>\n            <meta charSet=\"utf-8\" />\n            <title>Swagg | The Smoke Show</title>\n            <meta name=\"description\" content=\"Check out our swaggs here!\" />\n            <meta name=\"robots\" content=\"noindex, nofollow\" />\n            {/* <link rel=\"canonical\" href=\"http://mysite.com/example\" /> */}\n        </Helmet>\n            <div className=\"main-wrapper\">\n                <div className=\"spacer-4rem\"></div>\n                <h2 className=\"title\">Swagg</h2>\n                {/* <div className=\"swagg-wrapper\">\n                </div> */}\n                <div className=\"App\">\n        <div className=\"App__header\">\n          {!isCartOpen &&\n            <div className=\"App__view-cart-wrapper\">\n              <button className=\"App__view-cart\" onClick={()=> setIsCartOpen(true)}>Cart</button>\n            </div>\n          }\n          <div className=\"App__title\">\n            {/* <h1>{shop.name}</h1> */}\n            <img className=\"logo-header\" src={Logo} alt=\"The Smoke Show logo\"/>\n            <h2>{shop.description}</h2>\n          </div>\n        </div>\n        <div className=\"spacer-4rem\"></div>\n        <Products\n          products={products}\n          client={client}\n          addVariantToCart={addVariantToCart}\n        />\n        <Cart\n          checkout={checkout}\n          isCartOpen={isCartOpen}\n          handleCartClose={handleCartClose}\n          updateQuantityInCart={updateQuantityInCart}\n          removeLineItemInCart={removeLineItemInCart}\n        />\n      </div>\n            </div>\n        </Layout>\n    )\n}\n\nexport default Swagg","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Influencer/BioPage.js",["198","199","200","201","202"],"import React, { useEffect, useState } from 'react'\nimport {Helmet} from \"react-helmet\"\nimport { Row, Col, Form, FormControl } from 'react-bootstrap'\nimport { connect } from 'react-redux'\nimport * as Realm from \"realm-web\"\n// import Avatar from 'react-avatar'\nimport './bioPage.scss'\n// import * as Papa from 'papaparse'\nimport { youtubeAPI } from '../../utils/youtubeAPI'\nimport { carTempData } from '../carTempData'\nimport { commentsTempData } from '../commentsTempData' \nimport Comments from '../Comments'\nimport { uid } from 'react-uid'\nimport Layout from '../Layout/Layout'\n\nimport powerIcon from '../../assets/global/Horsepower.png'\nimport pistonIcon from '../../assets/global/piston.png'\nimport priceIcon from '../../assets/global/Price-Tag-icon.png'\n\nconst BioPage = (props) =>{\n    const influencerId = props.match.params.id\n    const [influencer, setInfluencer] = useState({})\n    // const { banner_img, username, profile_pic, fans } = props.location.state.influencer\n    const [formattedFans, setFormattedFans] = useState('')\n    \n    const { params: { id } } = props.match\n    const videoEmbedURL = 'https://www.youtube.com/embed/'\n    const EddieXChannelId = 'UCdOXRB936PKSwx0J7SgF6SQ'\n    const [searchKeyword, setSearchKeyword] = useState('')\n    const [titleStr, setTitleStr] = useState('Your search result')\n    const [searchedCarData, setSearchedCarData] = useState([])\n    // var d = new Date();\n    // var n = new Date().getTime();\n    const appConfig = {\n        id: process.env.REACT_APP_REALM_APP_ID,\n        timeout: 10000, // timeout in number of milliseconds\n      };\n    const app = new Realm.App(appConfig);\n\n    const handleChangeKeyword = (e) =>{\n        setSearchKeyword(e.target.value)\n    }\n    const handleVideoSearch = async e =>{\n        e.preventDefault()\n        await youtubeAPI.get('/search', {\n            params: {\n                q: searchKeyword,\n                channelId: EddieXChannelId\n            }\n        }).then(res =>{\n            console.log('res from youtube', res)\n            setTitleStr(\"EddieX \" + searchKeyword)\n            const searchResult = res.data.items\n            console.log('is this array?', res.data.items)\n            const datayoutube =[]\n            searchResult.map(data =>{\n                datayoutube.push({\n                    videoId: data.id.videoId,\n                    youtube:{\n                        snippet: {title: data.snippet.title}\n                    }\n                })\n            })\n            setSearchedCarData(datayoutube)\n            console.log('use state check: ', searchedCarData)\n            \n        })\n    }\n    const getInfluencer = async () =>{\n        const credentials = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTHAPI);\n        try {\n \n          await app.logIn(credentials).then( async user =>{\n            const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME);\n            const mongoCollection = mongo.db(\"smoke-show\").collection(\"influencers\");\n            const filter = {userId: influencerId} \n            await mongoCollection.findOne(filter).then(res =>{\n                setInfluencer(res)\n                if(res.fans > 999){\n                    setFormattedFans(Math.sign(res.fans)*((Math.abs(res.fans)/1000).toFixed(1)) + 'k')\n                }else{\n                    setFormattedFans(Math.sign(res.fans)*Math.abs(res.fans))\n                }\n            })\n           \n          }\n          )\n         }catch(error){console.log(error)}\n    }\n    useEffect( async () => {\n        const credentials = Realm.Credentials.emailPassword('saki@thehoongroup.com', 'aaaaaa')\n        try {\n        //   const app = new Realm.App(appConfig);\n      \n          // an authenticated user is required to access a MongoDB instance\n          await app.logIn(credentials).then( async user =>{\n            const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME);\n            const mongoCollection = mongo.db(\"smoke-show\").collection(\"comments\");\n            const filter = {videoId: 'QHLojVxs'} \n            await mongoCollection.find(filter).then(resAll =>{\n            })\n           \n          }\n          )\n         }catch(error){console.log(error)}\n      })\n      useEffect(() => {\n        getInfluencer()\n      }, [])\n    return(\n        <Layout>\n            <Helmet>\n                <title>Influencer {`${influencer.username}`} Bio | The Smoke Show</title>\n            </Helmet>\n            <div className=\"main-wrapper\">\n                <div className=\"banner-wrapper\">\n                    <img src={influencer.banner_img} alt={influencer.username} className=\"influencer-banner\"/>\n                </div>\n                <Row>\n                    <Col style={{paddingRight:0}}>\n                    <img src={influencer.profile_pic} className=\"bio-profile-pic\" />\n                    </Col>\n                    <Col className=\"bio-text-wrapper\" style={{paddingLeft: 0}}>\n                        <div className=\"bio-creator-name\">{influencer.username}</div>\n                        <div className=\"bio-creator-data\">{formattedFans} Fans</div>\n                    </Col>\n                    <Col sm={9} className=\"bio-sub-menu\">\n                        <ul className=\"\">\n                            <li>All Videos</li>\n                            <li>Garage</li>\n                            <li>Social</li>\n                            <li>Swagg</li>\n                        </ul>\n                    </Col>\n                </Row>\n                <div className=\"spacer-4rem\"></div>\n                <h2 className=\"title\">New Today</h2>\n                <Row style={{paddingLeft:'-7px', paddingRight:'-7px'}}>\n                {\n                    carTempData.map((car, index) =>{\n        \n                        return <>\n                        <Col sm={6} key={uid(car)}>\n                        <Row>\n                            <Col sm={8} >\n                                <div className=\"videoWrapper\">\n                                    <iframe src={videoEmbedURL + car.videoId}\n                                            frameBorder='0'\n                                            allow='autoplay; encrypted-media'\n                                            allowFullScreen\n                                            title='video'\n                                    \n                                    />\n                    \n                                </div>\n                                <h3 style={{marginTop:'10px'}}>{car.youtube.snippet.title}</h3>\n                                {/* <Row className=\"comment-wrapper\">\n                                    <Col sm={1} style={{margin:0,padding:0}}>\n                                    {car.profile_pic ? <img src={car.profile_pic} className=\"creator-profile-pic\" /> :\n                                    <Avatar color={Avatar.getRandomColor('sitebase', ['red', 'green', 'teal'])} className=\"creator-profile-pic\" name={car.creator} />\n                                    }\n                                        \n                                    </Col>\n                                    <Col sm={11} style={{margin: 0, paddingRight:0, margin: 'auto'}}>\n                                    <div className=\"creator-name\"><strong>{car.creator}</strong><br /> <span style={{color:'gray', fontSize: '13px'}}>{' '} {car.fans} fans</span></div>\n\n                                    </Col>\n                                </Row> */}\n                    \n                                <Comments comments={commentsTempData[index]} videoId={car.videoId}/>\n                            </Col>\n                            <Col sm={4} style={{paddingLeft:0}}>\n                                <div className=\"spec-wrapper\">\n                                <img alt={car.name} key={car.logoUrl} src={require(`../../assets/car-brand-logos/${car.logoUrl}`).default} className=\"icon-s\" />{' '}<span className=\"spec-text\"><strong>{car.name}</strong></span><br/>\n                                <img alt=\"price\" key={priceIcon} src={priceIcon} className=\"icon-s\" /><span className=\"spec-text\">{' '}${car.price}</span><br />\n                                <img alt=\"power \" key={powerIcon} src={powerIcon} className=\"icon-s\" /><span className=\"spec-text\">{' '}{car.engine}</span><br />\n                                <img alt=\"piston\" key={pistonIcon} src={pistonIcon} className=\"icon-s\" /><span className=\"spec-text\">{' '}{car.hoursepower}</span><br />\n                                </div>\n                            </Col>\n                        </Row>\n                    </Col>\n                        </>\n                    })\n                }\n            </Row>\n            <div className=\"spacer-4rem\"></div>\n            <div className=\"title title-adj\">\n                <h2 style={{marginBottom: '-1rem'}}>{titleStr}</h2>\n                <Form inline onSubmit={handleVideoSearch} style={{marginRight: '-8px'}}>\n                    <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2 form-adj\" onChange={handleChangeKeyword}/>\n                </Form>\n                </div>\n                <Row style={{paddingLeft:'-7px', paddingRight:'-7px'}}>\n                {searchedCarData &&\n                    searchedCarData.map((car, index) =>{\n        \n                        return <>\n                        <Col sm={6} key={uid(car)}>\n                        <Row>\n                            <Col sm={8} >\n                                <div className=\"videoWrapper\">\n                                    <iframe src={videoEmbedURL + car.videoId}\n                                            frameBorder='0'\n                                            allow='autoplay; encrypted-media'\n                                            allowFullScreen\n                                            title='video'\n                                    \n                                    />\n                        \n                                </div>\n                                <h3 style={{marginTop:'10px'}}>{car.youtube.snippet.title}</h3>\n                            </Col>\n                            <Col sm={4} style={{paddingLeft:0}}>\n                                <div className=\"spec-wrapper\">\n                                {/* <img alt={car.name} key={car.logoUrl} src={require(`../assets/car-brand-logos/${car.logoUrl}`).default} className=\"icon-s\" />{' '}<span className=\"spec-text\"><strong>{car.name}</strong></span><br/>\n                                <img alt=\"price\" key={priceIcon} src={priceIcon} className=\"icon-s\" /><span className=\"spec-text\">{' '}${car.price}</span><br />\n                                <img alt=\"power \" key={powerIcon} src={powerIcon} className=\"icon-s\" /><span className=\"spec-text\">{' '}{car.engine}</span><br />\n                                <img alt=\"piston\" key={pistonIcon} src={pistonIcon} className=\"icon-s\" /><span className=\"spec-text\">{' '}{car.hoursepower}</span><br /> */}\n                                </div>\n                            </Col>\n                        </Row>\n                    </Col>\n                        </>\n                })\n                }\n                </Row>\n            </div>\n        </Layout>\n        \n    )\n}\nconst mapStateToProps = (state) => {\n    //syntax is propName: state.key of combineReducer.key\n    return{\n      username: state.user.username,\n    }\n  }\n\nexport default connect(mapStateToProps)(BioPage)\n\n","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Fan/BioPage.js",["203","204","205","206"],"import React, { useState, useEffect, useRef } from 'react'\nimport {Helmet} from \"react-helmet\"\nimport * as Realm from \"realm-web\"\nimport Layout from '../Layout/Layout'\n// import bioImgXs from '../../assets/temp-photos/bio/sample_a1n16a_c_scale,w_375.jpg'\n// import bioImgS from '../../assets/temp-photos/bio/sample_a1n16a_c_scale,w_752.jpg'\n// import bioImgM from '../../assets/temp-photos/bio/sample_a1n16a_c_scale,w_1040.jpg'\n// import bioImgL from '../../assets/temp-photos/bio/sample_a1n16a_c_scale,w_1280.jpg'\n// import bioImgXL from '../../assets/temp-photos/bio/sample_a1n16a_c_scale,w_1500.jpg'\nimport noImg from '../../assets/global/no_image.jpg'\nimport bioPic from '../../assets/temp-photos/bio/avator-male.jpg'\nimport dayDriver from '../../assets/temp-photos/bio/placeholder-car-repair2.jpg'\nimport editIcon from '../../assets/global/edit-icon.svg'\nimport settingsIcon from '../../assets/global/Settings-icon-white.svg'\nimport SettingModal from './SettingModal'\nimport { Button, Row, Col, Form } from 'react-bootstrap'\n\nimport './biopage.scss'\nimport VehicleCard from './vehicleCard'\nimport CreateNewCar from './CreateNewCar'\nimport jwt from 'jsonwebtoken'\nimport moment from 'moment'\n\nconst BioPage = (props) =>{\n  \n    const childRef = useRef()\n    const profileUserId = props.match.params.id\n    const [theUser, setTheUser] = useState({})\n    const [profileUser, setProfileUser] = useState({})\n    const [allowEdit, setAllowEdit] = useState(false)\n    const [editMode, setEditMode] = useState(false)\n    const [showSetting, setShowSetting] = useState(false);\n    const [userCars, setUserCars] = useState([])\n    const [showAddCar, setShowAddCar] = useState(false)\n    const [numOfComments, setNumComments] = useState(null)\n    const altData = {uername: 'No username yet', userId: '', profileDesc: 'No description yet.', myCars: [] }\n    const [formattedTime, setFormattedTime] = useState(null)\n    const altCarData = {name: 'No data yet', upgrades: 'No data yet', color: 'No data yet', wheels: 'No data yet', performance: 'No data yet', category: 'Dream car', imgUlr: noImg}\n    const appConfig = {\n        id: process.env.REACT_APP_REALM_APP_ID,\n        // timeout: 10000, \n        // timeout in number of milliseconds\n      };\n    const app = new Realm.App(appConfig);\n    \n    const handleCloseAddCarModal = () => setShowAddCar(false)\n    const handleShowAddCarModal = () => setShowAddCar(true)\n\n    const handleChangeProfile = (e) =>{\n        console.log('data disappear', profileUser)\n        setProfileUser({\n            ...profileUser,\n            [e.target.name]: e.target.value\n        })\n    }\n    const handleShowSetting = () =>{\n        const token = localStorage.getItem('session_token')\n        jwt.verify(token, process.env.REACT_APP_JWT_SECRET, function(err, decoded) {\n            if (err) {\n                console.log('err', err)\n                \n            }else{\n                console.log('success', decoded.userData.login.email)\n                setProfileUser({\n                    ...profileUser,\n                    email: decoded.userData.login.email\n                })\n                setShowSetting(true)\n            }\n          });\n        \n    }\n    const handleCloseSetting = () =>{\n        setShowSetting(false)\n    }\n    const userLoggedIn = (id) =>{\n        if(id === profileUser.userId){\n            setAllowEdit(true)\n            regainData()\n        }\n    }\n    const userLoggedOut = (id) =>{\n        if(id === profileUserId){\n            setAllowEdit(false)\n        }\n    }\n    const updateProfileData = (data, key)=>{\n\n        setProfileUser({\n            ...profileUser,\n            [key]: data\n        })\n    }\n    const updateUserDetails = (fname, lname, username) =>{\n        setProfileUser({\n            ...profileUser,\n            fname: fname,\n            lname: lname,\n            username: username\n        })\n    }\n    const updateCarData = (data) =>{\n        setUserCars(prevArray => [...prevArray, data])\n    }\n    const handleDataUpdate = async (e) =>{\n        e.preventDefault()\n  \n        if(app.currentUser.id === profileUser.userId){\n            const mongodb = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME);\n            const mongoCollection = mongodb.db(process.env.REACT_APP_REALM_DB_NAME).collection(\"users\")\n    \n            try{\n                await mongoCollection.updateOne(\n                    { \"userId\": app.currentUser.id},\n                    {\n                        \"$set\": {\n                            \"profileDesc\": profileUser.profileDesc\n                          }\n                    }\n                ).then(res =>{\n                    console.log('res', res)\n                })\n            }catch(err){\n                console.log(err)\n            }\n            setEditMode(false)\n        }\n        \n    }\n    const editAbout = ()=>{\n        return(\n            <Form>\n                <Form.Group >\n                    <Form.Label>Edit</Form.Label>\n                    <Form.Control as=\"textarea\" rows={3} name=\"profileDesc\" value={profileUser.profileDesc && profileUser.profileDesc } onChange={handleChangeProfile} />\n                </Form.Group>\n                <div className=\"bio-edit-btn-wrapper\">\n                    <Button variant=\"primary\" type=\"submit\" onClick={handleDataUpdate} className=\"bio-edit-btn\">\n                        Submit\n                    </Button>\n                </div>\n                \n            </Form>\n        )\n    }\n    const regainData = ()=>{\n        const token = localStorage.getItem('session_token')\n        if(token){\n            jwt.verify(token, process.env.REACT_APP_JWT_SECRET, function(err, decoded) {\n                if (err) {\n                    getDataAsPublic()\n                    console.log('err login again', err)\n                    childRef.current.handleLoginModal(true)\n                }else{\n                    getDataAsTheUser(decoded)\n                }\n              });\n            \n        }else{\n            getDataAsPublic()\n        }\n    }\n    const getDataAsTheUser = async (decoded) =>{\n        setTheUser(decoded.userData)\n        const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n        const mongoCollectionUser = mongo.db(\"smoke-show\").collection(\"users\")\n        const filter = {userId: profileUserId}\n        try{\n            await mongoCollectionUser.findOne(filter).then(user =>{\n                        setProfileUser(user)\n                        setFormattedTime(moment(profileUser.joined).local().format('MMMM Do YYYY'))\n                        getTotalComments(user.userId, mongo)\n                        getMyCars(user.userId, mongo)\n            })\n        }catch(err){\n            console.log(err)\n        }\n        // const mongo = decoded.userData.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME);\n        if(theUser.userId === profileUser.userId){\n            setAllowEdit(true)\n        }\n    \n    }\n    \n    const getDataAsPublic = async () =>{\n        const credentials = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTHAPI)\n        try{\n            await app.logIn(credentials).then( async user =>{\n                const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME);\n                const mongoCollection = mongo.db(\"smoke-show\").collection(\"users\")\n\n                const filter = {userId: profileUserId} \n               \n                await mongoCollection.findOne(filter).then(user =>{\n                    if(user === null){\n                        setProfileUser({fname: 'No user data', lname: '', profileDesc: 'No user data', })\n                    }else{\n                        setProfileUser(user)\n                        // console.log('this is profile user', profileUser)\n                        // console.log('cars', profileUser.myCars)\n                        if(user.joined){\n                            setFormattedTime(moment(user.joined).local().format('MMMM Do YYYY'))\n                        }else{\n                            setFormattedTime('No data')\n                        }\n                        \n                        getTotalComments(user.userId, mongo)\n                        getMyCars(user.userId, mongo)\n                    }\n                    \n                })\n            })\n        }catch(err){\n            console.log(err)\n        }\n    }\n    const getTotalComments = async (profileUserId, mongo) =>{\n        \n        const mongoCollectionComments = mongo.db(\"smoke-show\").collection(\"comments\")\n        \n        const filter = {userId: profileUserId}\n        await mongoCollectionComments.find(filter).then(res =>{\n            // setProfileUser({...profileUser, totalComments: res.length})\n            setNumComments(res.length)\n        })\n    }\n    const getMyCars = async (id, mongo) =>{\n        const mongoCollection = mongo.db(\"smoke-show\").collection(\"my-cars\")\n        \n        const filter = {userId: profileUserId}\n        await mongoCollection.find(filter).then( cars =>{\n            setUserCars(cars)\n        })\n    }\n    useEffect(() => {\n       \n        const token = localStorage.getItem('session_token')\n        if(token){\n            jwt.verify(token, process.env.REACT_APP_JWT_SECRET, function(err, decoded) {\n                if (err) {\n                    getDataAsPublic()\n                    console.log('err login again', err)\n                    childRef.current.handleLoginModal(true)\n                }else{\n                    getDataAsTheUser(decoded)\n                }\n              });\n            \n        }else{\n            getDataAsPublic()\n        }\n   \n    }, [])\n\n    return(\n        <Layout ref={childRef} userLoggedIn={userLoggedIn} userLoggedOut={userLoggedOut}>\n        <Helmet>\n            <meta charSet=\"utf-8\" />\n            <title>User profile page | The Smoke Show</title>\n            <meta name=\"description\" content=\"Place the meta description text here.\" />\n            <meta name=\"robots\" content=\"noindex, nofollow\" />\n            {/* <link rel=\"canonical\" href=\"http://mysite.com/example\" /> */}\n        </Helmet>\n        {showAddCar && <CreateNewCar show={showAddCar} handleClose={handleCloseAddCarModal} profileUser={profileUser} updateProfileData={updateProfileData} updateCarData={updateCarData} />}\n            {showSetting && <SettingModal show={showSetting} handleShowSetting={handleShowSetting} handleCloseSetting={handleCloseSetting} profileUser={profileUser}  updateProfileData={updateProfileData} updateUserDetails={updateUserDetails}/>}\n            <div className=\"main-wrapper\">\n                <div className=\"spacer-4rem\"></div>\n                <h2 className=\"title\">User Profile</h2>\n                <div className=\"bio-fleet-img\">\n                    <img\n                    // sizes=\"(max-width: 1500px) 100vw, 1500px\"\n                    // srcset={`\n                    // ${bioImgXs} 375w,\n                    // ${bioImgS} 752w,\n                    // ${bioImgM} 1040w,\n                    // ${bioImgL} 1280w,\n                    // ${bioImgXL} 1500w\n                    // `}\n                    src={profileUser.profileCover ? profileUser.profileCover : noImg}\n                    alt=\"user selected profile image\"\n                     />\n                </div>\n                <div className=\"bio-content-wrapper\">\n                    <div className=\"bio-main-wrapper\">\n                        <div className=\"bio-pic\">\n                            <img src={profileUser.profilePic ? profileUser.profilePic : bioPic} alt=\"the user profile picture\" />\n                        </div>\n                        \n                        <div className=\"bio-title-text\">\n                            <h3 className=\"bio-name-title\">{profileUser.fname && profileUser.fname} {profileUser.lname && profileUser.lname}</h3>\n                            <p>{profileUser.title}</p>\n                        </div>\n                        {allowEdit && \n                            <Button className=\"bio-setting-btn\" onClick={handleShowSetting}>\n                                <img src={settingsIcon} alt=\"setting\" className=\"setting-icon\"/>\n                                Settings\n                            </Button>\n                        }\n                        \n                    </div>\n           \n                    <Row className=\"bio-height-adj\">\n                        <Col sm={4}>\n                            <div className=\"bio-container box-shadow-white\">\n                                <p className=\"bio-about no-m-b\"><strong>About: {` ${profileUser.fname} ${profileUser.lname}`}</strong></p>\n                                <div className=\"\">\n                                    <p className=\"bio-content bio-border\">\n                                        {editMode ? editAbout()\n                                        : [\n                                            (profileUser.profileDesc \n                                                ? <p >{profileUser.profileDesc}</p>\n                                                : <p>{altData.profileDesc}</p>\n                                            )\n                                            ]\n                                        }\n                                    { !editMode && <br/> }\n                                    <div className=\"edit-icon-wrapper\" onClick={()=>{setEditMode(true)}}>\n                                        {editMode ? '' : [\n                                            (allowEdit && <img className=\"edit-icon\" src={editIcon} alt=\"Edit about you\"/>)\n                                        ]}\n                                    </div>\n                                    </p>\n                                </div>\n                                \n                                <Row className=\"bio-border pt-pb-15 bio-row-adj\">\n                                    <Col sm={4}>\n                                        <p className=\"no-m-b\">Joined:</p>\n                                    </Col>\n                                    <Col sm={8}>\n                                        <p>{formattedTime ? formattedTime : 'No data'}</p>\n                                    </Col>\n                                </Row>\n                                <Row className=\"bio-border pt-pb-15 bio-row-adj\">\n                                    <Col sm={4}>\n                                        <p className=\"no-m-b\">Total Comments:</p>\n                                    </Col>\n                                    <Col sm={8}>\n                                        <p className=\"no-m-b\">{numOfComments && numOfComments} comments</p>\n                                    </Col>\n                                </Row>\n                                <Row className=\"bio-border pt-pb-15 bio-row-adj\">\n                                    <Col sm={4}>\n                                        <p className=\"no-m-b\">Fans of:</p>\n                                    </Col>\n                                    <Col sm={8}>\n                                        <p className=\"no-m-b\">\n                                            { profileUser.fansOf &&\n                                                profileUser.fansOf.map((name, i) =>{\n                                                    return <span>{i > 0 && ', '}{name}</span>\n                                                })\n                                            }\n                                        </p>\n                                    </Col>\n                                </Row>\n                                <Row className=\"pt-pb-15 bio-row-adj\"> \n                                    <Col sm={4}>\n                                        <p className=\"no-m-b\">Favorite Driving Song:</p>\n                                    </Col>\n                                    <Col sm={8}>\n                                        <p className=\"no-m-b\">Sting</p>\n                                    </Col>\n                                </Row>\n                            </div>\n                        </Col>\n                        <Col sm={8} className=\"pl-0\">\n                        { userCars !== undefined ?\n                            userCars.map( car =>{\n                               return (\n                                <React.Fragment>\n                                    <VehicleCard car={car} allowEdit={allowEdit} profileUser={profileUser} getMyCars={getMyCars} />\n                                    <div className=\"spacer-2rem\"></div>\n                                </React.Fragment>\n                               )\n                            }) :\n                            <React.Fragment>\n                                <VehicleCard car={altCarData} allowEdit={allowEdit} />\n                                <div className=\"spacer-2rem\"></div>\n                            </React.Fragment>\n                        }\n\n                            <div className=\"spacer-2rem\"></div>\n                            { allowEdit && \n                                <div style={{padding: '0 6px'}}>\n                                    <Button className=\"btn-add-car\" onClick={handleShowAddCarModal}>Add my car</Button>\n                                </div>\n                            }\n                            <div className=\"spacer-2rem\"></div>\n                        </Col>\n                        \n                    </Row>\n                    \n                </div>\n                \n            </div>\n        </Layout>\n    )\n}\n\nexport default BioPage","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/CarSearch.js",["207","208","209","210","211","212","213","214","215","216"],"import React, { Fragment, useState  } from 'react'\nimport { Dropdown, DropdownButton, Button } from 'react-bootstrap'\nimport Layout from './Layout/Layout'\nimport * as Realm from \"realm-web\"\nimport { carsAllYear, carTypes } from './carTempData'\nimport './carStats.scss'\nimport { v4 as uuidv4 } from 'uuid';\n\nconst CarSearch = (props) =>{\n    const [modelName, setModelName] = useState([])\n    const [selectedCar, setSelectedCar] = useState({make: \"Select a maker\", model: \"Select a model\", type: \"Select a type\", year: \"Select a year\"})\n    const [carTypeArr, setCarTypeArr] = useState([])\n    const [carYearArr, setCarYearArr] = useState([])\n    const credentials = Realm.Credentials.emailPassword('saki@thehoongroup.com', 'aaaaaa')\n    const [cars, setCars] = useState([])\n    const appConfig = {\n        id: process.env.REACT_APP_REALM_APP_ID,\n        // timeout: 10000, \n      };\n    const app = new Realm.App(appConfig)\n    const [carMakers, setCarMakers] = useState([])\n    const searchId = uuidv4()\n\n    const getMaker = async () =>{\n        try {\n            // an authenticated user is required to access a MongoDB instance\n            await app.logIn(credentials).then( async user =>{\n              const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME);\n              let carMakerArr = []\n              const mongoCollection = mongo.db(\"smoke-show\").collection(\"cars\");\n            //   const filter = {make: 'aston-martin'} \n              await mongoCollection.find().then(cars =>{\n                  cars.map(car =>{\n                      if (carMakerArr.includes(car.make) === false) carMakerArr.push(car.make);\n                      return\n                  })\n                  setCarMakers(carMakerArr)\n                  \n                  console.log('checkarr',carMakerArr)\n              })\n             \n            })\n            \n           }catch(error){console.log(error)}\n    }\n    const getModel = async (e) =>{\n        setSelectedCar({...selectedCar, make: e})\n        let carModelArr = []\n        try {\n            await app.logIn(credentials).then( async user =>{\n              const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME);\n              const mongoCollection = mongo.db(\"smoke-show\").collection(\"cars\");\n              const makeLowerCase = e.toLowerCase()\n              const filter = {make: makeLowerCase} \n              await mongoCollection.find(filter).then(cars =>{\n                  cars.map(car =>{\n                      if (carModelArr.includes(car.model) === false) carModelArr.push(car.model);\n                  })\n                  \n                  setModelName(carModelArr.sort())\n                  setCars(cars)\n              })\n             \n            })\n            \n           }catch(error){console.log(error)}\n        \n    }\n    const getCarYear = (data) =>{\n        let yearArr = []\n        data.map(car =>{\n            if(yearArr.includes(car.year) === false){\n                yearArr.push(car.year)\n            }\n        })\n        setCarYearArr(yearArr.sort())\n    }\n    const filterByModel = (e) =>{\n        setSelectedCar({...selectedCar, model: e})\n        let filteredByModel = cars.filter(function (car) {\n            if(car.model === e){\n                return car\n            }\n        });\n\n        setCars(filteredByModel)\n        getCarYear(filteredByModel)\n        \n    }\n    const getModelNames = (data) =>{\n        \n        const regCarTypes = /Sedan|Coupe|SUV|Minivan|Wagon|Sport|Station Wagon|Hatchback|Truck/i\n        let availableTypes = data.map(car =>{\n          const result = car.name.match(regCarTypes) \n          if(result){\n              return result[0]\n              \n          }\n          \n        })\n        const finalResult = [...new Set(availableTypes)]\n        setCarTypeArr(finalResult.sort())\n\n    }\n    const filterByYear = (e) =>{\n        setSelectedCar({...selectedCar, year: e})\n        let filteredByYear = cars.filter((car) =>{\n            if(car.year == e){\n                return car\n            }\n        })\n        setCars(filteredByYear)\n        getModelNames(filteredByYear)\n    }\n\n    const filterByType = (e) =>{\n       \n        setSelectedCar({...selectedCar, type: e})\n     \n        let filtered =  cars.filter(car => car.name.includes(e))\n        console.log('filtered', filtered)\n        setCars(filtered)\n    }\n   const goStatsPage = () =>{\n       sessionStorage.setItem(searchId, cars)\n       props.history.push({\n        pathname: `/car-stats/${searchId}`,\n        cars: cars,\n        selected: selectedCar\n      })\n   }\n\n    return(\n        <Layout>\n            <div className=\"spacer-4rem\"></div>\n            <div className=\"main-wrapper\" style={{minHeight: 'calc(100vh - 21rem)'}}>\n            \n                <div className=\"search-wrapper\" >\n                    <div className=\"center-box\">\n                    {/* maker */}\n                    <DropdownButton id=\"dropdown-brand\" title={selectedCar.make} onSelect={getModel} className=\"custom-dropdown\">\n                        { carsAllYear && carsAllYear.map((maker, index) =>{\n                            const titleCase = maker.replace(/\\w\\S*/g, function(txt){return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();});\n                            return(\n                                <Fragment key={maker}>\n                                    <Dropdown.Item  eventKey={titleCase} >\n                                    <img src={require(`../assets/maker_logos/${titleCase}_Logo.png`).default} alt={titleCase} className=\"maker-img\"/>\n                                    {titleCase}\n                                    </Dropdown.Item>\n                                </Fragment>\n                            )\n                            \n                            \n                        })}\n                    </DropdownButton>\n                    </div>\n                    \n                    <div className=\"center-box\">\n                    {/* model */}\n                        <DropdownButton id=\"dropdown-year\" title={selectedCar.model} onSelect={filterByModel} className=\"dropdown-middle\">\n                            {modelName.map(model =>{\n                                return(\n                                    <Fragment key={model}>\n                                        <Dropdown.Item eventKey={model} >{model}</Dropdown.Item>\n                                    </Fragment>\n                                )\n                            })}\n                        </DropdownButton>\n                    </div>\n                    <div className=\"center-box\">\n                    {/* year */}\n                        <DropdownButton id=\"dropdown-model\" title={selectedCar.year} onSelect={filterByYear}>\n                            {carYearArr.map(year =>{\n                                const uuid = uuidv4()\n                                return(\n                                    <Fragment key={uuid} >\n                                        <Dropdown.Item eventKey={year} >{year}</Dropdown.Item>\n                                    </Fragment>\n                                )\n                            })}\n                        </DropdownButton>\n                    </div>\n                    <div className=\"center-box\">\n                        <DropdownButton id=\"dropdown-type\" title={selectedCar.type} onSelect={filterByType} >\n                            { carTypeArr && carTypeArr.map(type =>{\n                                return(\n                                    <Fragment key={type}>\n                                        <Dropdown.Item eventKey={type} >{type}</Dropdown.Item>\n                                    </Fragment>\n                                )\n                                \n                                \n                            })}\n                        </DropdownButton>\n                    </div>\n                    \n                    <div className=\"center-box\">\n                        <Button className=\"search-btn\" onClick={goStatsPage}>Search</Button>\n                    </div>\n                    \n                </div>\n\n                \n            </div>\n        \n        </Layout>\n    )\n}\n\nexport default CarSearch","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Giveaways.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/store/reducers/authReducer.js",["217"],"const initState = {\n    credentials: {},\n    loginUserData: {}\n}\n\nconst authReducer = (state = initState, action) =>{\n    \n    switch(action.type){\n        case 'AUTH_USER':\n            return {\n                credentials: action.userData.credentials,\n                loginUserData: action.userData.loginUserData\n            }\n        default: return state\n    }\nconsole.log('state', state)\nreturn state\n}\n\nexport default authReducer","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/store/reducers/userReducer.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/commentsTempData.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/carTempData.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Comments.js",["218","219"],"import React, { useState, useEffect } from 'react'\nimport { Row, Col, Button, Form } from 'react-bootstrap'\nimport Avatar from 'react-avatar'\nimport { connect } from 'react-redux'\nimport * as Realm from \"realm-web\"\nimport { Link } from 'react-router-dom'\n// import { authUser } from '../store/actions/authActions'\nimport moment from 'moment'\nimport jwt from 'jsonwebtoken'\nimport {uid} from 'react-uid'\n\nconst Comments = (props) =>{\n    // const [commentsData, setCommentsData] = useState(props.comments)\n    const [commentsDB, setCommentsDB] = useState([])\n    const [isLoggedIn, setIsLoggedIn] = useState(false)\n    // const [modalShow, setModalShow] = useState(false)\n    const [userComment, setUserComment] = useState(\"\")\n    const app = new Realm.App({ id: process.env.REACT_APP_REALM_APP_ID })\n    // const getApp = Realm.App.getApp(process.env.REACT_APP_REALM_APP_ID);\n    // console.log('comment props', props)\n\n    const handleChange = (e) =>{\n        setUserComment(e.target.value)\n    }\n    const handleSubmitComment = async (e) =>{\n        e.preventDefault()\n        // console.log('props', props)\n        let tokenLocalStorage = localStorage.getItem('session_token')\n        let newComment ={}\n        let credentials = null\n        if(tokenLocalStorage){\n            jwt.verify(tokenLocalStorage, process.env.REACT_APP_JWT_SECRET, (err, decoded)=>{\n                if(err){\n                    console.log('please log in. session time out')\n                }else{\n                    newComment={\n                        userId: decoded.userData.userId,\n                        comment: userComment,\n                        date_posted: new Date().getTime(),\n                        videoId: props.videoId,\n                        username: decoded.userData.fname\n                    }\n                    credentials = Realm.Credentials.emailPassword(decoded.userData.login.email, decoded.userData.login.password);\n                }\n            })\n        }\n        try{\n            // Authenticate the user\n            await app.logIn(credentials).then(async user=>{\n                \n                    const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME);\n                    const mongoCollection = mongo.db(\"smoke-show\").collection(\"comments\");\n\n                    await mongoCollection.insertOne(newComment).then(result =>{\n                        if(result){\n                            e.target.reset();\n                            getComments()\n                        }else{\n                            console.log('error', result)\n                        }\n                    })\n                });\n            \n      \n        }catch(error){\n            console.log('error', error)\n\n        }\n   \n    }\n    const writeComment = () =>{\n        return (\n        <Row className=\"comment-wrapper\">\n            <Col sm={1} style={{margin:0,padding:0}}>\n                <Avatar color={Avatar.getRandomColor('sitebase', ['red', 'green', 'teal'])} className=\"profile-pic\" name=\"saki\" />\n            </Col>\n            <Col sm={11} style={{margin: 0, paddingRight:0}}>\n                <Form onSubmit={handleSubmitComment} >\n                    <Form.Group >\n                    <Form.Control className=\"comment-input\" type=\"text\" placeholder=\"Write a comment here\" name=\"comment\" onChange={handleChange} required/>\n                        <div className=\"comment-login-wrapper\">\n                            <Button className=\"comment-btn\" type=\"submit\">Post comment</Button>\n                        </div>\n                    </Form.Group>\n                </Form>\n                \n            </Col>\n        </Row>\n        )\n        \n    }\n        \n       \n    const loginToComment = () => {\n        return (\n            <>\n                <div>Please login to comment</div>\n                <hr />\n            </>\n        )\n       \n    }\n    const getComments = async () =>{\n        let userLogged;\n        const credentials = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTH_PUBLIC_VIEW);\n        try {\n        //   const app = new Realm.App(appConfig);\n      \n          // an authenticated user is required to access a MongoDB instance\n          await app.logIn(credentials).then( async user =>{\n            const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME);\n            const mongoCollection = mongo.db(\"smoke-show\").collection(\"comments\")\n            const filter = {videoId: props.videoId} \n            const options = {sort: {date_posted: -1}, limit: 4}\n            await mongoCollection.find(filter,options).then(resAll =>{\n                setCommentsDB(resAll)\n                return resAll\n            })\n           \n          }\n          )\n          // the rest of your code ...\n      \n         }catch(error){console.log(error)}\n    }\n    useEffect(() => {\n        \n        if(props.loginUserData.userId){\n            setIsLoggedIn(true)\n        }else{\n            setIsLoggedIn(false)\n        }\n    }, [props.loginUserData.userId])\n\n    useEffect( () => {\n        \n        getComments()\n        let tokenLocalStorage = localStorage.getItem('session_token')\n         if(tokenLocalStorage){\n            jwt.verify(tokenLocalStorage, process.env.REACT_APP_JWT_SECRET, (err, decoded)=>{\n                if(err){\n                    console.log(err)\n                    setIsLoggedIn(false)\n                }else{\n                    console.log('decoded: ', decoded)\n                    setIsLoggedIn(true)\n                }\n            });\n            \n         }\n    }, [])\n    return(\n        <React.Fragment>\n    \n        {isLoggedIn ? writeComment() : loginToComment() }\n\n        { commentsDB.map(comment =>{\n            var localtime = moment(comment.date_posted).local().format('YYYY-MM-DD')\n           \n            return(\n                <Row className=\"comment-wrapper\" key={uid(comment)}>\n                    \n                    <div style={{margin:0,padding:0}} className=\"col-1\">\n                        <Link to={{\n                            pathname: `/user/${comment.userId}`\n                        }}>\n                            {comment.profile_pic ? <img src={comment.profile_pic} className=\"profile-pic \" alt={comment.username} /> :\n                            <Avatar color={Avatar.getRandomColor('sitebase', ['red', 'green', 'teal'])} className=\"profile-pic\" name={comment.username} />\n                            }\n                        </Link>\n                    </div>\n                    \n                    <div  style={{margin: 0, paddingRight:0}} className=\"col-11\">\n                    <div className=\"comment-username \">\n                        <Link to={{\n                            pathname: `/user/${comment.userId}`\n                        }}>\n                            <strong>{comment.username}</strong>\n                        </Link>\n                     {\" \"} | <span style={{color:'gray'}}>{localtime}</span></div>\n                    <div className=\"comment-txt\" s>{comment.comment}</div>\n                    </div>\n                </Row>\n            )\n        })\n        }\n        </React.Fragment>\n        \n        \n    )\n}\nconst mapStateToProps = (state) => {\n    //syntax is propName: state.key of combineReducer.key\n    return{\n        credentials: state.auth.credentials,\n        loginUserData: state.auth.loginUserData\n    }\n  }\n\nexport default connect(mapStateToProps)(Comments)","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Layout/Layout.js",["220"],"import React, { useState, useImperativeHandle, forwardRef, useRef } from 'react'\nimport Header from './Header'\nimport Footer from './Footer'\nimport { withRouter } from \"react-router\"\n\nconst HeaderWithRouter = withRouter(Header);\n\nconst Layout = forwardRef((props, ref) =>{\n    const [modalShow, setModalShow] = useState(false)\n    const [user, setUser] = useState(false)\n    const [username, setUsername] = useState('')\n    const parentRef = useRef()\n    const modalShowHide = (state)=>{\n        setModalShow(state)\n    }\n    const changeUserState = (state) =>{\n        setUser(state)\n    }\n    const funcSetUsername = (name) =>{\n        console.log('name', name)\n        setUsername(name)\n    }\n    const handleuser = (fname, userId) =>{\n        setUser(true)\n        setUsername(fname)\n        setModalShow(false)\n        props.userLoggedIn(userId)\n    }\n    // const updateLoggedOut = (id) =>{\n    //     props.userLoggedOut(id)\n    // }\n    useImperativeHandle(\n        ref,\n        (fname) => ({\n            handleUserByParent(fname){\n                setUser(true)\n                setUsername(fname)\n            }\n        }),\n    )\n    useImperativeHandle(\n        ref,\n        () =>({\n            handleLoginModal(state){\n                modalShowHide(state)\n            }\n        })\n    )\n\n    return(\n        <div>\n            <HeaderWithRouter handleuser={handleuser} modalShowHide={modalShowHide} user={user} username={username} changeUserState={changeUserState} funcSetUsername={funcSetUsername} modalShow={modalShow} userLoggedOut={props.userLoggedOut} />\n                { props.children }\n            <Footer />\n        </div>\n\n    )\n})\n\nexport default Layout ","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/giveAwayData.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/utils/youtubeAPI.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Fan/vehicleCard.js",["221"],"import React, { useState, Fragment, useCallback } from 'react'\nimport { Row, Col, Modal, Button, Form } from 'react-bootstrap'\n// import {useDropzone} from 'react-dropzone'\nimport noImg from '../../assets/global/no_image.jpg'\nimport * as Realm from \"realm-web\"\nimport ImageUpload from './ImageUpload'\n\nimport editIcon from '../../assets/global/edit-icon.svg'\n// import uploadIcon from '../../assets/global/upload.svg'\n\nconst VehicleCard = (props) =>{\n    const [imgFile, setImgFile] = useState('')\n    const [imgData64, setImgData64] = useState('')\n    const [newImg, setNewImg] = useState(false)\n    const carColors = ['White', 'Black', 'Grey', 'Blue', 'Silver', 'Red', 'Orange', 'Bronze', 'Yellow', 'Green', 'Navy']\n    const [carObj, setCarObj] = useState({name: props.car.name, color: props.car.color, wheels: props.car.wheels, performance: props.car.performance, upgrades: props.car.upgrades, imgUrl: props.car.imgUrl})\n    const [show, setShow] = useState(false)\n    const bucketName = process.env.REACT_APP_AWS_BUCKET_NAME;\n    const appConfig = {\n        id: process.env.REACT_APP_REALM_APP_ID,\n        timeout: 10000, // timeout in number of milliseconds\n        };\n    const app = new Realm.App(appConfig)\n\n    const imgChange = (state) => {\n        setNewImg(state)\n    }\n    const handleClose = () => setShow(false)\n    const handleShow = () => setShow(true)\n    // const onDrop = useCallback(acceptedFiles => {\n    //     // Do something with the files\n    //   }, [])\n    // const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\n    const handleChange = (e) =>{\n        setCarObj({\n            ...carObj,\n            [e.target.name]: e.target.value\n        })\n    }\n    const updateData = async (carData, mongo) =>{\n        const collectionMyCars = mongo.db(process.env.REACT_APP_REALM_DB_NAME).collection(\"my-cars\")\n        try{\n            await collectionMyCars.updateOne(\n                {_id: props.car._id},\n                { $set: carData }\n            ).then(res =>{\n                console.log('res', res)\n                props.getMyCars(props.car.userId, mongo)\n                handleClose()\n            })\n            \n        }catch(err){\n            console.log(err)\n        }\n    }\n    const handleSubmit = async (e) =>{\n        console.log('checking')\n        const baseImgUrl = 'https://s3.amazonaws.com/images.test.smokeshow/'\n        const imgId = new Date().getTime()\n        const filekey = props.profileUser.userId + '/my-cars/' + imgId\n        const imgUrlWithKey = baseImgUrl + filekey\n        const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME);\n        \n        const carData ={\n            name: carObj.name,\n            upgrades: carObj.upgrades,\n            wheels: carObj.wheels,\n            color: carObj.color,\n            userId: props.profileUser.userId,\n            performance: carObj.performance\n        }\n        e.preventDefault()\n        if(app.currentUser.id === props.profileUser.userId){\n            \n            if(newImg){\n                carData.imgUrl = imgUrlWithKey\n                await app.currentUser.functions.putImageObjToS3(imgData64, bucketName, filekey, imgFile.type).then(res =>{\n                    \n                    updateData(carData, mongo)\n                })\n            }else{\n                updateData(carData, mongo)\n            }\n            \n        }else{\n            console.log('figure out what is going on')\n        }\n    }\n        const setImgData = (obj) =>{\n        setImgFile(obj)\n        var file = obj\n        const reader = new FileReader();\n        reader.onload = (event) => {\n        const base64 = event.target.result.split(\",\").pop()\n          setImgData64(base64)\n        //   console.log(base64);\n        };\n        reader.readAsDataURL(file);\n      }\n\n    const editModal = \n    <Fragment>\n        <Modal show={show} onHide={handleClose} className=\"modal-wrapper-bio\">\n            <Modal.Header closeButton>\n            </Modal.Header>\n            <Modal.Body>\n                <Row className=\"bio-modal-inner-wrapper\">\n                    <Col sm={6} className=\"\">\n                    <ImageUpload fileObj={setImgData} imgChange={imgChange} />\n                    {/* <div {...getRootProps()} className=\"dropzone-wrapper\">\n                        <input {...getInputProps()} />\n                        {\n                            isDragActive ?\n                            <p>Drop the files here ...</p> :\n                            <div className=\"drag-dropzone\">\n                                <div className=\"bio-modal-container\">\n                                    <img src={uploadIcon} alt=\"upload files here\" />\n                                    <p>Drag and drop or click to upload an image</p>\n                                    <p>*3MB max image file size<br/>\n                                    *accepted file formats: jpg, png, gif</p>\n                                </div>\n\n                            </div>\n                        }\n                    </div> */}\n                    </Col>\n                    <Col sm={6}>\n                    <h3>Category: {props.car.category}</h3>\n                    <hr />\n                    <Form>\n                        <Form.Group >\n                            <Form.Label>Car name</Form.Label>\n                            <Form.Control type=\"text\" placeholder={carObj.name} onChange={handleChange} name=\"name\"/>\n                        </Form.Group>\n                        <br/>\n                        <Form.Group >\n                            <Form.Label>Color</Form.Label>\n                            {/* <Form.Control type=\"text\" placeholder=\"Select your color\" onChange={handleChange} name=\"color\" /> */}\n                            <Form.Control as=\"select\" onChange={handleChange}>\n                            {carColors.map((color, index) =>{\n                                return(\n                                    <option key={color + index}>{color}</option>\n                                )\n                            })}\n                                \n                            </Form.Control>\n                        </Form.Group>\n                        <br/>\n                        <Form.Group >\n                            <Form.Label>Wheels</Form.Label>\n                            <Form.Control type=\"text\" placeholder={carObj.wheels} onChange={handleChange} name=\"wheels\"/>\n                        </Form.Group>\n                        <br/>\n                        <Form.Group >\n                            <Form.Label>Performance</Form.Label>\n                            <Form.Control type=\"text\" placeholder={carObj.performance} onChange={handleChange} name=\"performance\" />\n                        </Form.Group>\n                        <br/>\n                        <Form.Group >\n                            <Form.Label>Upgrade</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"Enter your update\" onChange={handleChange} name={carObj.upgrades} />\n                        </Form.Group>\n                        <br/><br/>\n                        <Row>\n                            <Col sm={6}>\n                                <Button variant=\"secondary\" onClick={handleClose} className=\"cancel-btn\" > \n                                    Cancel\n                                </Button>\n                            </Col>\n                            <Col sm={6}>\n                                <Button variant=\"primary\" onClick={handleSubmit} className=\"save-changes-btn\">\n                                Save Changes\n                                </Button>\n                            </Col>\n                        </Row>\n                    </Form>\n                    </Col>\n                </Row>\n            </Modal.Body>\n            <Modal.Footer>\n  \n            </Modal.Footer>\n        </Modal>\n    </Fragment>\n    \n\n    return(\n        <div className=\"bio-container box-shadow-white\">\n        { editModal}\n            <div className=\"car-names\">\n                <strong>{props.car.category ? props.car.category : 'Dream Car'}</strong>\n                    <div className=\"edit-icon-wrapper-card\" onClick={handleShow}>\n                    {props.allowEdit && \n                        <img className=\"edit-icon\" src={editIcon} alt=\"Edit about you\"/>\n                    }\n                        \n                    </div>\n            </div>\n            <Row>\n                <Col sm={5} >\n                    <img src={props.car.imgUrl !== undefined ? props.car.imgUrl : noImg} className=\"bio-my-car\" alt=\"my daily driver\" />\n                </Col>\n                <Col sm={7} className=\"bio-car-contents\">\n                    <p>Name: {props.car.name}</p>\n                    <p>Upgrades: {props.car.upgrades}</p>\n                    <p>Color: {props.car.color}</p>\n                    <p>Wheels: {props.car.wheels}</p>\n                    <p>Performance: {props.car.performance}</p>\n                </Col>\n            </Row>\n        </div>\n    )\n}\nexport default VehicleCard","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Fan/CreateNewCar.js",["222"],"import React, { useState, Fragment } from 'react'\nimport { Row, Col, Modal, Button, Form } from 'react-bootstrap'\nimport * as Realm from \"realm-web\"\nimport ImageUpload from './ImageUpload'\nimport jwt from 'jsonwebtoken'\n\nconst CreateNewCar = (props) =>{\n    const bucketName = process.env.REACT_APP_AWS_BUCKET_NAME;\n    const [imgFile, setImgFile] = useState('')\n    const [imgData64, setImgData64] = useState('')\n    const appConfig = {\n        id: process.env.REACT_APP_REALM_APP_ID,\n        timeout: 10000, // timeout in number of milliseconds\n        };\n    const app = new Realm.App(appConfig)\n    const maxAgeTest = 1 * 60 * 60\n\n    const setImgData = (obj) =>{\n        setImgFile(obj)\n        var file = obj\n        const reader = new FileReader();\n        reader.onload = (event) => {\n        const base64 = event.target.result.split(\",\").pop()\n          setImgData64(base64)\n        //   console.log(base64);\n        };\n        reader.readAsDataURL(file);\n      }\n    const closeModal = () =>{\n        setNewCarObj({name: '', category: '', color: '', wheels: '', upgrades: ''})\n        props.handleClose()\n    }\n\n\n    // const onDrop = useCallback(acceptedFiles => {\n        \n        // var file = acceptedFiles[0]\n        // const reader = new FileReader();\n        // reader.onload = (event) => {\n        // setImgFile(acceptedFiles[0])\n        // const base64 = event.target.result.split(\",\").pop()\n        //   setImgData64(base64)\n        // //   console.log(event.target.result);\n        // };\n        // reader.readAsDataURL(file);\n    //     // Do something with the files\n    //   }, [])\n    // const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\n    \n    const carColors = ['White', 'Black', 'Grey', 'Blue', 'Silver', 'Red', 'Orange', 'Bronze', 'Yellow', 'Green', 'Navy']\n    const carCategories = ['Dream Car', 'Daily Driver', 'Vehicle #2']\n    const [newCarObj, setNewCarObj] = useState({name: '', category: 'Dream Car', color: 'White', wheels: '', upgrade: ''})\n\n    const handleChange = (e) =>{\n        setNewCarObj({\n            ...newCarObj,\n            [e.target.name]: e.target.value\n        })\n    }\n    const createToken = (userData) =>{\n        return jwt.sign({ userData: userData }, process.env.REACT_APP_JWT_SECRET, {expiresIn: maxAgeTest});\n    }\n\n \n\n    const handleSubmit = async (e) =>{\n        e.preventDefault()\n        const baseImgUrl = 'https://s3.amazonaws.com/images.test.smokeshow/'\n        const imgId = new Date().getTime()\n        const filekey = props.profileUser.userId + '/my-cars/' + imgId\n        const imgUrlWithKey = baseImgUrl + filekey\n        const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME);\n        const collectionUsers = mongo.db(process.env.REACT_APP_REALM_DB_NAME).collection(\"users\")\n        const collectionMyCars = mongo.db(process.env.REACT_APP_REALM_DB_NAME).collection(\"my-cars\")\n\n        const newCarData = {\n            name: newCarObj.name,\n            upgrades: newCarObj.upgrades,\n            wheels: newCarObj.wheels,\n            imgUrl: imgUrlWithKey,\n            category: newCarObj.category,\n            color: newCarObj.color,\n            userId: props.profileUser.userId,\n            performance: newCarObj.performance\n        }\n        if(app.currentUser.id === props.profileUser.userId){\n            \n            try{\n                await app.currentUser.functions.putImageObjToS3(imgData64, bucketName, filekey, imgFile.type).then( async res =>{\n                    \n                    try{\n                        await collectionMyCars.insertOne(newCarData).then(async res =>{\n                            console.log('res', res)\n                            console.log('inserted', res.insertedId)\n                            await collectionUsers.updateOne(\n                                { \"userId\": app.currentUser.id },\n                                {$push: { myCars:  res.insertedId}},\n                                { upsert: true }\n                                ).then(res =>{\n                                    console.log('res', res)\n                                    const oldArr = props.profileUser.myCars\n                                    const cars = {myCars: oldArr.push(newCarData)}\n                                    props.updateProfileData(cars, 'myCars')\n                                    props.updateCarData(newCarData)\n                                    closeModal()\n                                })\n                        })\n                    //     await mongoCollection.updateOne(\n                    //         { \"userId\": app.currentUser.id},\n                    //         {\n                    //          $push: { myCars: newCarData }\n                    //         }\n                    //         ).then(res =>{\n                    //             console.log('res', res)\n                    //             const oldArr = props.profileUser.myCars\n                    //             const cars = {myCars: oldArr.push(newCarData)}\n                    //             props.updateProfileData(cars, 'myCars')\n                    //             closeModal()\n                    //         })\n                    }catch(err){\n                        console.log(err)\n                    }\n                })\n            }catch(err){\n                console.log(err)\n            }\n        }else{\n            console.log('warning current user and the login user do not match')\n            const token = localStorage.getItem('session_token')\n            const decoded = jwt.verify(token, process.env.REACT_APP_JWT_SECRET)\n            const credentials = Realm.Credentials.emailPassword(decoded.userData.login.email, decoded.userData.login.password)\n            \n            try{\n                await app.logIn(credentials).then(user =>{\n                    user.functions.putImageObjToS3(imgData64, bucketName, filekey, imgFile.type).then( async res =>{\n             \n                        try{\n                            await collectionMyCars.insertOne(newCarData).then(async res =>{\n                                console.log('res', res)\n                                console.log('inserted', res.insertedId)\n                                await collectionUsers.updateOne(\n                                    { \"userId\": app.currentUser.id },\n                                    {$push: { myCars:  res.insertedId}},\n                                    { upsert: true }\n                                    ).then(res =>{\n                                        console.log('res', res)\n                                        const oldArr = props.profileUser.myCars\n                                        const cars = {myCars: oldArr.push(newCarData)}\n                                        props.updateProfileData(cars, 'myCars')\n                                        closeModal()\n                                    })\n                            })\n                        }catch(err){\n                            console.log(err)\n                        }\n                    })\n                    \n                })\n            }catch(err){\n                console.log(err)\n            }\n        }\n    }\n        \n\n\n    return(\n    <Fragment>\n        <Modal show={props.show} onHide={props.handleClose} className=\"modal-wrapper-bio\">\n            <Modal.Header closeButton>\n            </Modal.Header>\n            <Modal.Body>\n                <Row className=\"bio-modal-inner-wrapper\">\n                    <Col sm={6} className=\"\">\n                    <ImageUpload fileObj={setImgData} />\n\n                    {/* <div {...getRootProps()} className=\"dropzone-wrapper\">\n                        <input {...getInputProps()} />\n                        {\n                            isDragActive ?\n                            <p>Drop the files here ...</p> :\n                            <div className=\"drag-dropzone\">\n                                <div className=\"bio-modal-container\">\n                                    <img src={uploadIcon} alt=\"upload files here\" />\n                                    <p>Drag and drop or click to upload an image</p>\n                                    <p>*3MB max image file size<br/>\n                                    *accepted file formats: jpg, png, gif</p>\n                                </div>\n\n                            </div>\n                        }\n                    </div> */}\n                    \n                    </Col>\n                    <Col sm={6}>\n                    <Form>\n                        <Form.Group >\n                            <Form.Label>Category</Form.Label>\n                            <Form.Control as=\"select\"  onChange={handleChange} name=\"category\">\n                            {carCategories.map((category, index) =>{\n                                return(\n                                    <option key={category + index}>{category}</option>\n                                )\n                            })}\n\n                            </Form.Control>\n                        </Form.Group>\n                        <br/>\n                        <Form.Group >\n                            <Form.Label>Car name</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"Enter car name e.g. maker, model, year\" onChange={handleChange} name=\"name\"/>\n                        </Form.Group>\n                        <br/>\n                        <Form.Group >\n                            <Form.Label>Color</Form.Label>\n                            {/* <Form.Control type=\"text\" placeholder=\"Select your color\" onChange={handleChange} name=\"color\" /> */}\n                            <Form.Control as=\"select\" onChange={handleChange} name=\"color\">\n                            {carColors.map((color, index) =>{\n                                return(\n                                    <option key={color + index}>{color}</option>\n                                )\n                            })}\n                                \n                            </Form.Control>\n                        </Form.Group>\n                        <br/>\n                        <Form.Group >\n                            <Form.Label>Wheels</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"Enter your wheel\" onChange={handleChange} name=\"wheels\"/>\n                        </Form.Group>\n                        <br/>\n                        <Form.Group >\n                            <Form.Label>Performance</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"Enter your performance\" onChange={handleChange} name=\"performance\" />\n                        </Form.Group>\n                        <br/>\n                        <Form.Group >\n                            <Form.Label>Upgrades</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"Enter your update\" onChange={handleChange} name=\"upgrades\" />\n                        </Form.Group>\n                        <br/><br/>\n                        <Row>\n                            <Col sm={6}>\n                                <Button variant=\"secondary\" onClick={closeModal} className=\"cancel-btn\" > \n                                    Cancel\n                                </Button>\n                            </Col>\n                            <Col sm={6}>\n                                <Button variant=\"primary\" type=\"submit\" onClick={handleSubmit} className=\"save-changes-btn\">\n                                Add my new car\n                                </Button>\n                                {/* <br></br><br/>\n                                <button onClick={testImgUpload}>test upload</button> */}\n                            </Col>                          \n                        </Row>\n                    </Form>\n                    </Col>\n                </Row>\n            </Modal.Body>\n            <Modal.Footer>\n  \n            </Modal.Footer>\n        </Modal>\n    </Fragment>\n    )\n}\n\nexport default CreateNewCar","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Layout/Header.js",["223","224","225","226","227"],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Layout/Footer.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Fan/SettingModal.js",["228","229","230","231","232"],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Layout/SignUpModal.js",["233","234","235"],"import React, { useState } from 'react'\nimport { Modal, Button, Form } from 'react-bootstrap'\nimport * as Realm from \"realm-web\"\nimport { createNewUser } from '../../store/actions/userActions'\nimport { connect } from 'react-redux'\nimport Logo from '../../assets/global/Logo-smoke-show.png'\n\n\nconst SignUpModal = (props) =>{\n    const [userObj, setUserObj] = useState({fname: '', lname: '', email: '', password: '', password2: '', username: ''})\n    const [msg, setMsg] = useState(\"\")\n    const [emailSent, setEmailSent] = useState(false)\n    const [hasError, setHasError] = useState(false)\n    //this is different from props.app -getApp\n    const appId = process.env.REACT_APP_REALM_APP_ID\n    const getApp = Realm.App.getApp(appId);\n    \n    // console.log('check from signin', props)\n    const handleChange =(e) =>{\n        setUserObj({\n            ...userObj,\n            [e.target.name]: e.target.value\n        })\n    }\n    const handleSubmit = async (e) =>{\n        e.preventDefault()\n        setHasError(false)\n        const email = userObj.email.toLowerCase()\n        if(userObj.password === userObj.password2){\n            try{\n                await getApp.emailPasswordAuth.registerUser(email, userObj.password).then(async res =>{\n                    console.log('res token?', res)\n                  \n                    setEmailSent(true)\n                    \n                })\n       \n                \n            }catch(error){\n                console.log('error', error)\n                setMsg(\"This email address is already registered.\")\n                setHasError(true)\n            }\n        }else{\n            setMsg(\"Password and Confirm Password do not match. Try again.\")\n            setHasError(true)\n        }\n        \n    }\n    const resendConfirmationEmail = async (email)=>{\n        const credentials = Realm.Credentials.anonymous();\n        await applicationCache.logIn(credentials).then(user =>{\n            const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n            const mongoCollection = mongo.db(\"smoke-show\").collection(\"comments\");\n            const filter = {email: email} \n            mongoCollection.find(filter).then(pendingUser =>{\n                const token = pendingUser.token\n                const tokenId = pendingUser.tokenId\n            })\n        })\n        console.log('under construction')\n    }\n    // const handleSubmitToDispatch = () =>{\n    //     props.createNewUser(userObj)\n    // }\n    return (\n        <Modal\n          {...props}\n          size=\"lg\"\n          aria-labelledby=\"contained-modal-title-vcenter\"\n          centered\n        >\n          <Modal.Header closeButton>\n            {/* <Modal.Title id=\"contained-modal-title-vcenter\">\n              Modal heading\n            </Modal.Title> */}\n            \n          </Modal.Header>\n          {emailSent ? \n          <center>\n              <h3>Thank you for your registration. <br /><br />\n              Please check your email and click to confirm. <br /><br />\n              Please check your spam box if you do not find the confirmation email.\n              </h3>\n              <div className=\"spacer-4rem\"></div>\n          </center>\n          :\n          <Modal.Body className=\"custom-modal-body\">\n            <div className=\"login-logo-wrapper\">\n                <img src={Logo} alt=\"The Smoke Show\" className=\"logo-header\" />\n            </div>\n          \n            <Form className=\"login-form\" onSubmit={handleSubmit}>\n                {/* <Form.Group > */}\n                    {/* <Form.Label>First name</Form.Label>\n                    <Form.Control type=\"text\" placeholder=\"e.g. John\" name=\"fname\" onChange={handleChange}/>\n                </Form.Group>\n                <Form.Group >\n                    <Form.Label>Last name</Form.Label>\n                    <Form.Control type=\"text\" placeholder=\"e.g. Due\" name=\"lname\" onChange={handleChange}/>\n                </Form.Group> */}\n                <Form.Group controlId=\"formBasicEmail\">\n                    <Form.Label>Email address</Form.Label>\n                    <Form.Control type=\"email\" placeholder=\"e.g. example@example.com\" name=\"email\" onChange={handleChange} />\n                </Form.Group>\n                {/* <Form.Group controlId=\"formBasicEmail\">\n                    <Form.Label>Username</Form.Label>\n                    <Form.Control type=\"text\" placeholder=\"e.g. Smoke Show love\" name=\"username\" onChange={handleChange} />\n                </Form.Group> */}\n                <Form.Group controlId=\"formBasicPassword\">\n                    <Form.Label>Password</Form.Label>\n                    <Form.Control type=\"password\" placeholder=\"Between 6 and 128 characters long\" name=\"password\" onChange={handleChange} />\n                </Form.Group>\n                <Form.Group controlId=\"formBasicPassword\">\n                    <Form.Label>Confirm Password</Form.Label>\n                    <Form.Control type=\"password\" placeholder=\"\" name=\"password\" onChange={handleChange} name=\"password2\" />\n                </Form.Group>\n                {hasError && \n                <div>\n                    <div className=\"error-msg\">{msg}</div>\n                    <p onClick={resendConfirmationEmail}>Click here to resend the confirmation email</p>\n                </div>}\n                <div className=\"login-btn-wrapper\">\n                    <Button className=\"login-btn\" type=\"submit\">\n                        Signup\n                    </Button><br /><br />\n                    <p className=\"click-div\" onClick={ props.toggleModal}>Or Login here</p>\n                </div>\n                \n            </Form>\n          </Modal.Body>\n\n        }\n        </Modal>\n      );\n}\nconst mapDispatchToProps = (dispatch) =>{\n    return {\n        createNewUser: (userObj) => dispatch(createNewUser(userObj))\n    }\n}\n\nexport default connect(null, mapDispatchToProps)(SignUpModal)\n\n// export default SignUpModal","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Layout/LoginModal.js",["236","237","238","239"],"import React, { useState } from 'react'\nimport { Modal, Button, Form, Alert } from 'react-bootstrap'\nimport * as Realm from \"realm-web\"\nimport { authUser } from '../../store/actions/authActions'\nimport { connect } from 'react-redux'\nimport Logo from '../../assets/global/Logo-smoke-show.png'\nimport jwt from 'jsonwebtoken'\nimport { useUID } from 'react-uid'\nimport { v4 as uuidv4 } from 'uuid';\n\n\nconst LoginModal = (props) =>{\n    \n    const [userObj, setUserObj] = useState({fname: '', lname: '', email: '', password: ''})\n    const [hasError, setHasError] = useState(false)\n    const [forgotPw, setForgotPw] = useState(false)\n    const [resetPwSent, setResetPwSent] = useState(false)\n    const uid = useUID()\n    const [loginMsg, setLoginMsg] = useState('')\n    const appId = process.env.REACT_APP_REALM_APP_ID\n    const appConfig = {\n        id: appId,\n        timeout: 10000, // timeout in number of milliseconds\n      };\n    const getApp = Realm.App.getApp(appId)\n    //max age one day number of day, hours, min and sec\n    const maxAge = 1 * 24 * 60 * 60\n    const maxAgeTest = 1 * 60 * 60\n\n    const createToken = (userData) =>{\n        return jwt.sign({ userData: userData }, process.env.REACT_APP_JWT_SECRET, {expiresIn: maxAgeTest});\n    }\n    const handleResetPw = async (e) =>{\n        e.preventDefault()\n        const newPW = uuidv4()\n        // Additional arguments for the reset function\n        const args = [\"something\"];\n        await getApp.emailPasswordAuth.callResetPasswordFunction(userObj.email, newPW, args).then(res =>{\n            console.log('res', res)\n            setResetPwSent(true)\n        })\n        \n    }\n    const closeWindow = () =>{\n        setForgotPw(false)\n\n    }\n    const handleChange =(e) =>{\n        setUserObj({\n            ...userObj,\n            [e.target.name]: e.target.value \n        })\n    }\n    let resetPassword\n    if(resetPwSent){\n        resetPassword =\n        <div>\n            <p class=\"login-form\" style={{textAlign: 'center', marginBottom: '2rem'}}>We've sent you an email link to reset your password.<br/><br /> Please check your email inbox.</p><br/>\n            <p >Please close this window.</p>\n        </div>\n        \n    }else if(!resetPwSent){\n        resetPassword =\n        <Form className=\"login-form\" onSubmit={handleResetPw}>\n            <Form.Group >\n                <Form.Label>Type your email address below.</Form.Label>\n                <Form.Control type=\"email\" placeholder=\"e.g. example@example.com\" name=\"email\" onChange={handleChange} />\n            </Form.Group>\n            <div style={{marginTop: '4rem'}}></div>\n            <Button className=\"login-btn\" type=\"submit\">Reset Password</Button>\n            <p className=\"click-div\" style={{marginTop: '1rem'}} onClick={()=>setForgotPw(false)}>Go back to login</p>\n            <div style={{marginTop:\"4rem\"}}></div>\n        </Form>\n    }else{\n        resetPassword = ''\n    }\n    \n    const handleSubmit = async (e) =>{\n        e.preventDefault()\n        const emailLowerCase = userObj.email.toLocaleLowerCase()\n        const credentials = Realm.Credentials.emailPassword(emailLowerCase, userObj.password)\n        console.log('working?')\n        try{\n            // Authenticate the user\n            await props.app.logIn(credentials).then(async user=>{\n                if(user.id === props.app.currentUser.id){\n                    console.log('matched')\n                }else{\n                    console.log('not match')\n                }\n                    // const key = await user.apiKeys.create(uid)\n                    const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME);\n                    const mongoCollection = mongo.db(\"smoke-show\").collection(\"users\");\n                    let token = ''\n       \n                    const queryFilter = { userId: user.id };\n                    await mongoCollection.findOne(queryFilter).then(loginUserData =>{\n                        loginUserData.login = userObj\n                        token = createToken(loginUserData)\n                        \n                        localStorage.setItem('session_token', token)\n                        const userData = {loginUserData: loginUserData, credentials: userObj}\n                        props.handleuser(loginUserData.fname, loginUserData.userId)\n                        props.authUser(userData)\n                    })\n                    \n                    \n                });\n            \n      \n        }catch(error){\n            console.log('error', error)\n            setHasError(true)\n            setLoginMsg('Your email and password do not match')\n        }\n    }\n    \n    return (\n        <Modal\n          {...props}\n          size=\"lg\"\n          aria-labelledby=\"contained-modal-title-vcenter\"\n          centered\n        >\n          <Modal.Header closeButton>\n     \n          </Modal.Header>\n          <div className=\"login-logo-wrapper\">\n            <img src={Logo} alt=\"The Smoke Show\" className=\"logo-header\" />\n          </div>\n          <Modal.Body className=\"custom-modal-body\">\n         \n            <div style={{marginBottom: '15px'}}></div>\n            {forgotPw ? resetPassword :\n            <Form className=\"login-form\" onSubmit={handleSubmit}>\n                <Form.Group controlId=\"formBasicEmail\">\n                    <Form.Label>Email address</Form.Label>\n                    <Form.Control type=\"email\" placeholder=\"e.g. example@example.com\" name=\"email\" onChange={handleChange} />\n                </Form.Group>\n\n                <Form.Group controlId=\"formBasicPassword\">\n                    <Form.Label>Password</Form.Label>\n                    <Form.Control type=\"password\" placeholder=\"\" name=\"password\" onChange={handleChange} />\n                </Form.Group>\n                <p className=\"click-div\" onClick={()=>{setForgotPw(true)}}>Forgot password?</p>\n                {hasError && <Alert variant=\"danger\" style={{padding: '5px', marginTop: '1rem', textAlign:'center'}}><small>{loginMsg}</small></Alert> }\n                <div className=\"login-btn-wrapper\">\n                    <Button className=\"login-btn\" type=\"submit\">\n                        Login\n                    </Button><br /><br />\n                    \n                    <p className=\"click-div\" onClick={props.toggleModal}>Or Signup here</p>\n                </div>\n                \n            </Form>\n        }\n          </Modal.Body>\n        </Modal>\n      );\n}\n\nconst mapStateToProps = (state) => {\n    //syntax is propName: state.key of combineReducer.key\n    return{\n      userData: state.auth.userData,\n    }\n  }\nconst mapDispatchToProps = (dispatch) =>{\n    return {\n        authUser: (userObj) => dispatch(authUser(userObj))\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginModal)","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/store/actions/userActions.js",["240"],"\nimport * as Realm from \"realm-web\"\n\nconst getApp = Realm.App.getApp(process.env.REACT_APP_REALM_APP_ID);\n\nexport const createNewUser = (userObj) =>{\n    //with thunk, we can reutrn function but otherwise, return state\n    \n    return (dispatch, getState) =>{\n        //make async call here\n        // await getApp.emailPasswordAuth.registerUser(userObj.email, userObj.password).then(res =>{\n        //     console.log('response', res)\n            dispatch({type: 'CREATE_USER', userObj})\n        // })\n        \n    }\n}\n\n","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/store/actions/authActions.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Shopify/Cart.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Shopify/Products.js",["241"],"import React, { Component } from 'react';\nimport Product from './Product';\nimport { Row, Container } from 'react-bootstrap'\n\nclass Products extends Component {\n  render() {\n    let products = this.props.products.map((product) => {\n      return (\n        <Product\n          addVariantToCart={this.props.addVariantToCart}\n          client={this.props.client}\n          key={product.id.toString()}\n          product={product}\n        />\n      );\n    });\n\n    return (\n      <div className=\"width-adj-shop\">\n        <Row>\n          {products}\n        </Row>\n      </div>\n      \n    );\n  }\n}\n\nexport default Products;\n","/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Shopify/Product.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Shopify/LineItem.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Shopify/VariantSelector.js",[],"/Users/sakihayashi/Desktop/JOBS/Brandon/web/client/src/components/Fan/ImageUpload.js",["242"],"import React from 'react'\nimport { useState, useEffect } from 'react'\nimport uploadIcon from '../../assets/global/upload.svg'\n\nimport { useDropzone } from 'react-dropzone'\n\n  const thumbsContainer = {\n    display: 'flex',\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    marginTop: 16\n  };\n  \n  const thumb = {\n    display: 'inline-flex',\n    borderRadius: 2,\n    border: '1px solid #eaeaea',\n    marginBottom: 8,\n    marginRight: 8,\n    width: 100,\n    height: 100,\n    padding: 4,\n    boxSizing: 'border-box'\n  };\n  \n  const thumbInner = {\n    display: 'flex',\n    minWidth: 0,\n    overflow: 'hidden'\n  };\n  \n  const img = {\n    display: 'block',\n    width: 'auto',\n    height: '100%'\n  };\n\n\nconst ImageUpload = (props ) => {\n    \n    const [files, setFiles] = useState([])\n    const [msg, setMsg] = useState('')\n    const [uploaded, setUploaded] = useState(false)\n\n    const getFileData = (obj) => {\n        // Create a root reference\n        console.log('file obj', obj)\n        // const newValue = files[0]\n        props.fileObj(obj)\n    }\n\n    const {getRootProps, getInputProps, isDragActive} = useDropzone({\n            accept: 'image/*',\n            onDrop: acceptedFiles => {\n              \n              if(acceptedFiles.length > 1){\n                  setMsg('You can upload only one image.')\n              }else{\n                    getFileData(acceptedFiles[0])\n                    setUploaded(true)\n                    if(props.imgChange){\n                      props.imgChange(true)\n                    }\n                    \n                    setFiles(acceptedFiles.map( file => Object.assign(file, {\n                              preview: URL.createObjectURL(file)\n                          \n                        })\n                        ))\n              }\n            }\n          })\n\n    const thumbs = files.map(file => (\n      <div style={thumb} key={file.name}>\n        <div style={thumbInner}>\n          <img\n            src={file.preview}\n            style={img}\n          />\n        </div>\n      </div>\n    ));\n  \n    useEffect(() => {\n      // Make sure to revoke the data uris to avoid memory leaks\n        files.forEach(file => URL.revokeObjectURL(file.preview));\n    }, [files]);\n\n    return ( \n        <React.Fragment>\n            {msg ? <p>{msg}</p> : ''}\n                <div {...getRootProps({className: 'dropzone'})} className=\"dropzone dropzone-wrapper\" >\n                    <input {...getInputProps()} required/>\n                    {\n                            isDragActive ?\n                            <p>Drop the files here ...</p> :\n                            <div className=\"drag-dropzone\">\n                                <div className=\"bio-modal-container\">\n                                    <img src={uploadIcon} alt=\"upload files here\" />\n                                    <p style={{padding: '5px'}}>\n                                      { uploaded ? 'Change Image' : 'Drop an image file here or click to upload an image'}\n                                    </p>\n                                    <p>*3MB max image file size<br/>\n                                    *accepted file formats: jpg, png, gif</p>\n                                    <aside style={thumbsContainer}>\n                                        {uploaded ? thumbs : ''}\n                                    </aside>\n                                </div>\n                                \n                            </div>\n                        }\n                    \n                </div>\n                \n         \n        </React.Fragment>\n\n     );\n}\n \nexport default ImageUpload;",{"ruleId":"243","replacedBy":"244"},{"ruleId":"245","replacedBy":"246"},{"ruleId":"247","severity":1,"message":"248","line":47,"column":10,"nodeType":"249","endLine":47,"endColumn":12,"suggestions":"250"},{"ruleId":"251","severity":1,"message":"252","line":3,"column":39,"nodeType":"253","messageId":"254","endLine":3,"endColumn":45},{"ruleId":"255","severity":1,"message":"256","line":94,"column":17,"nodeType":"257","messageId":"258","endLine":94,"endColumn":23},{"ruleId":"251","severity":1,"message":"259","line":120,"column":13,"nodeType":"253","messageId":"254","endLine":120,"endColumn":23},{"ruleId":"247","severity":1,"message":"260","line":106,"column":8,"nodeType":"249","endLine":106,"endColumn":10,"suggestions":"261"},{"ruleId":"251","severity":1,"message":"262","line":14,"column":22,"nodeType":"253","messageId":"254","endLine":14,"endColumn":33},{"ruleId":"251","severity":1,"message":"263","line":15,"column":22,"nodeType":"253","messageId":"254","endLine":15,"endColumn":33},{"ruleId":"251","severity":1,"message":"264","line":16,"column":17,"nodeType":"253","messageId":"254","endLine":16,"endColumn":23},{"ruleId":"251","severity":1,"message":"265","line":15,"column":8,"nodeType":"253","messageId":"254","endLine":15,"endColumn":17},{"ruleId":"251","severity":1,"message":"266","line":26,"column":12,"nodeType":"253","messageId":"254","endLine":26,"endColumn":21},{"ruleId":"251","severity":1,"message":"267","line":26,"column":23,"nodeType":"253","messageId":"254","endLine":26,"endColumn":35},{"ruleId":"268","severity":1,"message":"269","line":66,"column":52,"nodeType":"270","messageId":"271","endLine":66,"endColumn":54},{"ruleId":"251","severity":1,"message":"272","line":257,"column":11,"nodeType":"253","messageId":"254","endLine":257,"endColumn":21},{"ruleId":"247","severity":1,"message":"273","line":68,"column":4,"nodeType":"249","endLine":68,"endColumn":6,"suggestions":"274"},{"ruleId":"251","severity":1,"message":"275","line":26,"column":23,"nodeType":"253","messageId":"254","endLine":26,"endColumn":25},{"ruleId":"255","severity":1,"message":"256","line":56,"column":35,"nodeType":"276","messageId":"277","endLine":56,"endColumn":37},{"ruleId":"247","severity":1,"message":"278","line":90,"column":16,"nodeType":"276","endLine":106,"endColumn":8},{"ruleId":"247","severity":1,"message":"279","line":109,"column":10,"nodeType":"249","endLine":109,"endColumn":12,"suggestions":"280"},{"ruleId":"281","severity":1,"message":"282","line":121,"column":21,"nodeType":"283","endLine":121,"endColumn":85},{"ruleId":"251","severity":1,"message":"284","line":12,"column":8,"nodeType":"253","messageId":"254","endLine":12,"endColumn":17},{"ruleId":"247","severity":1,"message":"285","line":253,"column":8,"nodeType":"249","endLine":253,"endColumn":10,"suggestions":"286"},{"ruleId":"287","severity":1,"message":"288","line":270,"column":21,"nodeType":"283","endLine":281,"endColumn":24},{"ruleId":"287","severity":1,"message":"288","line":286,"column":29,"nodeType":"283","endLine":286,"endColumn":130},{"ruleId":"251","severity":1,"message":"289","line":5,"column":23,"nodeType":"253","messageId":"254","endLine":5,"endColumn":31},{"ruleId":"251","severity":1,"message":"290","line":21,"column":12,"nodeType":"253","messageId":"254","endLine":21,"endColumn":21},{"ruleId":"251","severity":1,"message":"291","line":24,"column":11,"nodeType":"253","messageId":"254","endLine":24,"endColumn":19},{"ruleId":"255","severity":1,"message":"256","line":35,"column":23,"nodeType":"257","messageId":"258","endLine":35,"endColumn":29},{"ruleId":"255","severity":1,"message":"256","line":56,"column":32,"nodeType":"276","messageId":"277","endLine":56,"endColumn":34},{"ruleId":"255","severity":1,"message":"256","line":71,"column":22,"nodeType":"276","messageId":"277","endLine":71,"endColumn":24},{"ruleId":"255","severity":1,"message":"292","line":80,"column":43,"nodeType":"293","messageId":"294","endLine":80,"endColumn":52},{"ruleId":"255","severity":1,"message":"295","line":93,"column":43,"nodeType":"276","messageId":"294","endLine":93,"endColumn":45},{"ruleId":"255","severity":1,"message":"296","line":107,"column":48,"nodeType":"276","messageId":"294","endLine":107,"endColumn":50},{"ruleId":"268","severity":1,"message":"269","line":108,"column":25,"nodeType":"270","messageId":"271","endLine":108,"endColumn":27},{"ruleId":"297","severity":1,"message":"298","line":16,"column":1,"nodeType":"299","messageId":"300","endLine":17,"endColumn":13},{"ruleId":"251","severity":1,"message":"259","line":104,"column":13,"nodeType":"253","messageId":"254","endLine":104,"endColumn":23},{"ruleId":"247","severity":1,"message":"301","line":151,"column":8,"nodeType":"249","endLine":151,"endColumn":10,"suggestions":"302"},{"ruleId":"251","severity":1,"message":"303","line":12,"column":11,"nodeType":"253","messageId":"254","endLine":12,"endColumn":20},{"ruleId":"251","severity":1,"message":"304","line":1,"column":37,"nodeType":"253","messageId":"254","endLine":1,"endColumn":48},{"ruleId":"251","severity":1,"message":"305","line":60,"column":11,"nodeType":"253","messageId":"254","endLine":60,"endColumn":22},{"ruleId":"251","severity":1,"message":"306","line":3,"column":23,"nodeType":"253","messageId":"254","endLine":3,"endColumn":27},{"ruleId":"251","severity":1,"message":"307","line":3,"column":29,"nodeType":"253","messageId":"254","endLine":3,"endColumn":40},{"ruleId":"251","severity":1,"message":"308","line":12,"column":8,"nodeType":"253","messageId":"254","endLine":12,"endColumn":14},{"ruleId":"281","severity":1,"message":"282","line":42,"column":99,"nodeType":"283","endLine":42,"endColumn":137},{"ruleId":"247","severity":1,"message":"309","line":59,"column":9,"nodeType":"249","endLine":59,"endColumn":11,"suggestions":"310"},{"ruleId":"251","severity":1,"message":"311","line":5,"column":8,"nodeType":"253","messageId":"254","endLine":5,"endColumn":11},{"ruleId":"268","severity":1,"message":"269","line":222,"column":98,"nodeType":"270","messageId":"271","endLine":222,"endColumn":100},{"ruleId":"268","severity":1,"message":"269","line":229,"column":43,"nodeType":"270","messageId":"271","endLine":229,"endColumn":45},{"ruleId":"247","severity":1,"message":"312","line":236,"column":8,"nodeType":"249","endLine":236,"endColumn":10,"suggestions":"313"},{"ruleId":"287","severity":1,"message":"288","line":321,"column":37,"nodeType":"283","endLine":321,"endColumn":144},{"ruleId":"251","severity":1,"message":"314","line":57,"column":23,"nodeType":"253","messageId":"254","endLine":57,"endColumn":28},{"ruleId":"251","severity":1,"message":"315","line":58,"column":23,"nodeType":"253","messageId":"254","endLine":58,"endColumn":30},{"ruleId":"316","severity":1,"message":"317","line":116,"column":106,"nodeType":"318","endLine":116,"endColumn":122},{"ruleId":"251","severity":1,"message":"319","line":18,"column":11,"nodeType":"253","messageId":"254","endLine":18,"endColumn":14},{"ruleId":"251","severity":1,"message":"320","line":21,"column":11,"nodeType":"253","messageId":"254","endLine":21,"endColumn":20},{"ruleId":"251","severity":1,"message":"321","line":27,"column":11,"nodeType":"253","messageId":"254","endLine":27,"endColumn":17},{"ruleId":"251","severity":1,"message":"322","line":44,"column":11,"nodeType":"253","messageId":"254","endLine":44,"endColumn":22},{"ruleId":"251","severity":1,"message":"323","line":4,"column":7,"nodeType":"253","messageId":"254","endLine":4,"endColumn":13},{"ruleId":"251","severity":1,"message":"324","line":3,"column":15,"nodeType":"253","messageId":"254","endLine":3,"endColumn":24},{"ruleId":"281","severity":1,"message":"282","line":77,"column":11,"nodeType":"283","endLine":80,"endColumn":13},"no-native-reassign",["325"],"no-negated-in-lhs",["326"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getInfluencers'. Either include it or remove the dependency array.","ArrayExpression",["327"],"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","'userLogged' is defined but never used.","React Hook useEffect has a missing dependency: 'confirmUser'. Either include it or remove the dependency array.",["328"],"'setHasError' is assigned a value but never used.","'setHasReset' is assigned a value but never used.","'setMsg' is assigned a value but never used.","'driveIcon' is defined but never used.","'activeTab' is assigned a value but never used.","'setActiveTab' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'getImgData' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.",["329"],"'id' is assigned a value but never used.","ArrowFunctionExpression","expectedInside","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","React Hook useEffect has a missing dependency: 'getInfluencer'. Either include it or remove the dependency array.",["330"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'dayDriver' is defined but never used.","React Hook useEffect has missing dependencies: 'getDataAsPublic' and 'getDataAsTheUser'. Either include them or remove the dependency array.",["331"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","'carTypes' is defined but never used.","'carMakers' is assigned a value but never used.","'getMaker' is assigned a value but never used.","Array.prototype.filter() expects a value to be returned at the end of function.","FunctionExpression","expectedAtEnd","Array.prototype.map() expects a value to be returned at the end of arrow function.","Array.prototype.filter() expects a value to be returned at the end of arrow function.","no-unreachable","Unreachable code.","ExpressionStatement","unreachableCode","React Hook useEffect has a missing dependency: 'getComments'. Either include it or remove the dependency array.",["332"],"'parentRef' is assigned a value but never used.","'useCallback' is defined but never used.","'createToken' is assigned a value but never used.","'Form' is defined but never used.","'FormControl' is defined but never used.","'bioPic' is defined but never used.","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["333"],"'jwt' is defined but never used.","React Hook useEffect has missing dependencies: 'props.profileUser.profileCover', 'props.profileUser.profilePic', and 'userObj'. Either include them or remove the dependency array. If 'setCurrentBioPic' needs the current value of 'props.profileUser.profilePic', you can also switch to useReducer instead of useState and read 'props.profileUser.profilePic' in the reducer.",["334"],"'token' is assigned a value but never used.","'tokenId' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'uid' is assigned a value but never used.","'appConfig' is assigned a value but never used.","'maxAge' is assigned a value but never used.","'closeWindow' is assigned a value but never used.","'getApp' is assigned a value but never used.","'Container' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"335","fix":"336"},{"desc":"337","fix":"338"},{"desc":"339","fix":"340"},{"desc":"341","fix":"342"},{"desc":"343","fix":"344"},{"desc":"345","fix":"346"},{"desc":"347","fix":"348"},{"desc":"349","fix":"350"},"Update the dependencies array to be: [getInfluencers]",{"range":"351","text":"352"},"Update the dependencies array to be: [confirmUser]",{"range":"353","text":"354"},"Update the dependencies array to be: [fetchData]",{"range":"355","text":"356"},"Update the dependencies array to be: [getInfluencer]",{"range":"357","text":"358"},"Update the dependencies array to be: [getDataAsPublic, getDataAsTheUser]",{"range":"359","text":"360"},"Update the dependencies array to be: [getComments]",{"range":"361","text":"362"},"Update the dependencies array to be: [props]",{"range":"363","text":"364"},"Update the dependencies array to be: [props.profileUser.profileCover, props.profileUser.profilePic, userObj]",{"range":"365","text":"366"},[1607,1609],"[getInfluencers]",[4111,4113],"[confirmUser]",[1999,2001],"[fetchData]",[4271,4273],"[getInfluencer]",[9625,9627],"[getDataAsPublic, getDataAsTheUser]",[5550,5552],"[getComments]",[2131,2133],"[props]",[9505,9507],"[props.profileUser.profileCover, props.profileUser.profilePic, userObj]"]