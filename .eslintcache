[{"/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/index.js":"1","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/reportWebVitals.js":"2","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/store/reducers/rootReducer.js":"3","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/App.js":"4","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/store/reducers/userReducer.js":"5","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/store/reducers/bioReducer.js":"6","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/store/reducers/influencerReducer.js":"7","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/store/reducers/authReducer.js":"8","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Swagg.js":"9","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/EmailConfirmation.js":"10","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/CaStatsListsResults.js":"11","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Loading.js":"12","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/InfluencerIndexPage.js":"13","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/HomePage.js":"14","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/ResetPassword.js":"15","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/CarSearch.js":"16","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Giveaways.js":"17","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/CarStats.js":"18","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/NotFoundPage.js":"19","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/CarStatsVideo.js":"20","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Terms.js":"21","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/AboutPage.js":"22","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/CarStatsListsYear.js":"23","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/CarStatsListsModel.js":"24","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Privacy.js":"25","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Influencer/Swagg.js":"26","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Influencer/Social.js":"27","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Admin/QueryVideoData.js":"28","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Influencer/AllVideos.js":"29","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Influencer/BioPage.js":"30","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Admin/Instagram.js":"31","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Admin/AddCarData.js":"32","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Admin/CarImgUpload.js":"33","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Influencer/Garage.js":"34","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Admin/UpdateDB.js":"35","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Admin/EditVideoDataKirk.js":"36","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Fan/BioPage.js":"37","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Admin/EditVideoData.js":"38","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/CarStatsCard.js":"39","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/functionsStats.js":"40","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/jsonLD.js":"41","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Fan/SettingModal.js":"42","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Shopify/Products.js":"43","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Fan/editsBioPage.js":"44","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Shopify/Cart.js":"45","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Fan/CreateNewCar.js":"46","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Influencer/SubNav.js":"47","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Admin/AdminLoginDiv.js":"48","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Influencer/CreateNewCar.js":"49","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Influencer/SettingModal.js":"50","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Layout/Layout.js":"51","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Global/vehicleCard.js":"52","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/store/actions/influencerActions.js":"53","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/store/actions/authActions.js":"54","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/carTempData.js":"55","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Admin/FormCheckbox.js":"56","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Admin/FormText.js":"57","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Admin/colorInterior.js":"58","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Admin/colorDiv.js":"59","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Global/ImageUpload.js":"60","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Layout/Footer.js":"61","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Layout/Header.js":"62","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/store/actions/bioActions.js":"63","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/store/actions/userActions.js":"64","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Shopify/LineItem.js":"65","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Shopify/Product.js":"66","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Global/functions.js":"67","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Comments.js":"68","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/SpecDiv.js":"69","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/adData.js":"70","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Layout/SignUpModal.js":"71","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Layout/LoginModal.js":"72","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Shopify/VariantSelector.js":"73","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Edits.js":"74","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/VideoDiv.js":"75","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/TermsTxt.js":"76","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/utils/youtubeAPI.js":"77","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/giveAwayData.js":"78","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/GiveawayCount.js":"79","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/InfluCard.js":"80","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/CarStatsListsMake.js":"81","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/aws-exports.js":"82"},{"size":933,"mtime":1634819504851,"results":"83","hashOfConfig":"84"},{"size":362,"mtime":1634819504852,"results":"85","hashOfConfig":"84"},{"size":375,"mtime":1634819504852,"results":"86","hashOfConfig":"84"},{"size":5601,"mtime":1634819504825,"results":"87","hashOfConfig":"84"},{"size":426,"mtime":1634819504852,"results":"88","hashOfConfig":"84"},{"size":297,"mtime":1634819504852,"results":"89","hashOfConfig":"84"},{"size":662,"mtime":1634819504852,"results":"90","hashOfConfig":"84"},{"size":2342,"mtime":1634819504852,"results":"91","hashOfConfig":"84"},{"size":3551,"mtime":1634819504844,"results":"92","hashOfConfig":"84"},{"size":10893,"mtime":1634819504840,"results":"93","hashOfConfig":"84"},{"size":5504,"mtime":1634819504839,"results":"94","hashOfConfig":"84"},{"size":123,"mtime":1634819504843,"results":"95","hashOfConfig":"84"},{"size":7292,"mtime":1634819504843,"results":"96","hashOfConfig":"84"},{"size":16191,"mtime":1634944607107,"results":"97","hashOfConfig":"84"},{"size":5701,"mtime":1634819504843,"results":"98","hashOfConfig":"84"},{"size":12444,"mtime":1634819504839,"results":"99","hashOfConfig":"84"},{"size":10438,"mtime":1634819504841,"results":"100","hashOfConfig":"84"},{"size":3010,"mtime":1634819504840,"results":"101","hashOfConfig":"84"},{"size":736,"mtime":1634819504843,"results":"102","hashOfConfig":"84"},{"size":12274,"mtime":1634819504840,"results":"103","hashOfConfig":"84"},{"size":820,"mtime":1634819504844,"results":"104","hashOfConfig":"84"},{"size":5876,"mtime":1634819504838,"results":"105","hashOfConfig":"84"},{"size":4028,"mtime":1634819504840,"results":"106","hashOfConfig":"84"},{"size":4145,"mtime":1634819504840,"results":"107","hashOfConfig":"84"},{"size":26965,"mtime":1634819504843,"results":"108","hashOfConfig":"84"},{"size":9446,"mtime":1634819504842,"results":"109","hashOfConfig":"84"},{"size":10152,"mtime":1634819504842,"results":"110","hashOfConfig":"84"},{"size":17531,"mtime":1634819504839,"results":"111","hashOfConfig":"84"},{"size":25302,"mtime":1634819504842,"results":"112","hashOfConfig":"84"},{"size":19778,"mtime":1634819504842,"results":"113","hashOfConfig":"84"},{"size":7147,"mtime":1634819504839,"results":"114","hashOfConfig":"84"},{"size":28723,"mtime":1634819504838,"results":"115","hashOfConfig":"84"},{"size":11062,"mtime":1634819504838,"results":"116","hashOfConfig":"84"},{"size":23732,"mtime":1634819504842,"results":"117","hashOfConfig":"84"},{"size":15023,"mtime":1634819504839,"results":"118","hashOfConfig":"84"},{"size":9121,"mtime":1634819504839,"results":"119","hashOfConfig":"84"},{"size":21505,"mtime":1634819504840,"results":"120","hashOfConfig":"84"},{"size":9083,"mtime":1634819504839,"results":"121","hashOfConfig":"84"},{"size":2334,"mtime":1634819504840,"results":"122","hashOfConfig":"84"},{"size":10541,"mtime":1634819504845,"results":"123","hashOfConfig":"84"},{"size":6952,"mtime":1634819504845,"results":"124","hashOfConfig":"84"},{"size":28893,"mtime":1634819504841,"results":"125","hashOfConfig":"84"},{"size":613,"mtime":1634819504844,"results":"126","hashOfConfig":"84"},{"size":2037,"mtime":1634819504841,"results":"127","hashOfConfig":"84"},{"size":2130,"mtime":1634819504844,"results":"128","hashOfConfig":"84"},{"size":11819,"mtime":1634819504840,"results":"129","hashOfConfig":"84"},{"size":7358,"mtime":1634819504842,"results":"130","hashOfConfig":"84"},{"size":1267,"mtime":1634819504838,"results":"131","hashOfConfig":"84"},{"size":10770,"mtime":1634819504842,"results":"132","hashOfConfig":"84"},{"size":24940,"mtime":1634819504842,"results":"133","hashOfConfig":"84"},{"size":2142,"mtime":1634819504843,"results":"134","hashOfConfig":"84"},{"size":12883,"mtime":1634819504841,"results":"135","hashOfConfig":"84"},{"size":1373,"mtime":1634819504852,"results":"136","hashOfConfig":"84"},{"size":5217,"mtime":1634819504852,"results":"137","hashOfConfig":"84"},{"size":2072,"mtime":1634819504845,"results":"138","hashOfConfig":"84"},{"size":693,"mtime":1634819504839,"results":"139","hashOfConfig":"84"},{"size":447,"mtime":1634819504839,"results":"140","hashOfConfig":"84"},{"size":966,"mtime":1634819504839,"results":"141","hashOfConfig":"84"},{"size":956,"mtime":1634819504839,"results":"142","hashOfConfig":"84"},{"size":3876,"mtime":1634819504841,"results":"143","hashOfConfig":"84"},{"size":3312,"mtime":1634819504843,"results":"144","hashOfConfig":"84"},{"size":5385,"mtime":1634819504843,"results":"145","hashOfConfig":"84"},{"size":126,"mtime":1634819504852,"results":"146","hashOfConfig":"84"},{"size":342,"mtime":1634819504852,"results":"147","hashOfConfig":"84"},{"size":2086,"mtime":1634819504844,"results":"148","hashOfConfig":"84"},{"size":4052,"mtime":1634819504844,"results":"149","hashOfConfig":"84"},{"size":310,"mtime":1634819504841,"results":"150","hashOfConfig":"84"},{"size":16657,"mtime":1634819504840,"results":"151","hashOfConfig":"84"},{"size":2411,"mtime":1634819504844,"results":"152","hashOfConfig":"84"},{"size":679,"mtime":1634819504844,"results":"153","hashOfConfig":"84"},{"size":6176,"mtime":1634819504843,"results":"154","hashOfConfig":"84"},{"size":8202,"mtime":1634819504843,"results":"155","hashOfConfig":"84"},{"size":546,"mtime":1634819504844,"results":"156","hashOfConfig":"84"},{"size":870,"mtime":1634819504840,"results":"157","hashOfConfig":"84"},{"size":682,"mtime":1634819504844,"results":"158","hashOfConfig":"84"},{"size":46206,"mtime":1634819504844,"results":"159","hashOfConfig":"84"},{"size":357,"mtime":1634819504852,"results":"160","hashOfConfig":"84"},{"size":1524,"mtime":1634819504845,"results":"161","hashOfConfig":"84"},{"size":8447,"mtime":1634819504841,"results":"162","hashOfConfig":"84"},{"size":2366,"mtime":1634819504841,"results":"163","hashOfConfig":"84"},{"size":1047,"mtime":1634819504840,"results":"164","hashOfConfig":"84"},{"size":1500,"mtime":1634869419533,"results":"165","hashOfConfig":"84"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"168"},"13y7poj",{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"168"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"168"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"168"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"168"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"168"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"168"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"168"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"168"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"168"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"168"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"168"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"168"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"204","messages":"205","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"168"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"168"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"168"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"168"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"168"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"168"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"168"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"168"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"168"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"168"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233","usedDeprecatedRules":"168"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236","usedDeprecatedRules":"168"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239","usedDeprecatedRules":"168"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242","usedDeprecatedRules":"168"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245","usedDeprecatedRules":"168"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248","usedDeprecatedRules":"168"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251","usedDeprecatedRules":"168"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254","usedDeprecatedRules":"168"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257","usedDeprecatedRules":"168"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"260","usedDeprecatedRules":"168"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"263","usedDeprecatedRules":"168"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"266","usedDeprecatedRules":"168"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"269","usedDeprecatedRules":"168"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"272","usedDeprecatedRules":"168"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"168"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"277","usedDeprecatedRules":"168"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"280","usedDeprecatedRules":"168"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"283","usedDeprecatedRules":"168"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"286","usedDeprecatedRules":"168"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"168"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"168"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"293","usedDeprecatedRules":"168"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"296","usedDeprecatedRules":"168"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"168"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"301","usedDeprecatedRules":"168"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"304","usedDeprecatedRules":"168"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"307","usedDeprecatedRules":"168"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"168"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"312","usedDeprecatedRules":"168"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"168"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"168"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"168"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"168"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"168"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"168"},{"filePath":"325","messages":"326","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"327","usedDeprecatedRules":"168"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"168"},{"filePath":"330","messages":"331","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"168"},{"filePath":"332","messages":"333","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"168"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"168"},{"filePath":"336","messages":"337","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"168"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"168"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"168"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"344","usedDeprecatedRules":"168"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"168"},{"filePath":"347","messages":"348","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"168"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"168"},{"filePath":"351","messages":"352","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"353","usedDeprecatedRules":"168"},{"filePath":"354","messages":"355","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"168"},{"filePath":"356","messages":"357","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"168"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"168"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"168"},{"filePath":"362","messages":"363","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"168"},{"filePath":"364","messages":"365","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"168"},{"filePath":"366","messages":"367","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"368","usedDeprecatedRules":"168"},{"filePath":"369","messages":"370","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"371","usedDeprecatedRules":"168"},{"filePath":"372","messages":"373","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"168"},{"filePath":"374","messages":"375","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"168"},"/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/index.js",[],["376","377"],"/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/reportWebVitals.js",[],"/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/store/reducers/rootReducer.js",[],"/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/App.js",["378"],"import React from 'react'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  // Redirect,\n} from \"react-router-dom\"\nimport loadable from '@loadable/component'\n\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './scss/App.scss'\n// import HomePage from './components/HomePage'\n\n// import InfluencerIndexPage from './components/InfluencerIndexPage'\n// import BioPage from './components/Fan/BioPage'\nimport EmailConfirmation from './components/EmailConfirmation';\nimport ResetPassword from './components/ResetPassword'\n// import AboutPage from './components/AboutPage'\n// import CarStats from './components/CarStats'\nimport CarSearch from './components/CarSearch'\n// import CreateDta from './components/CreateData'\nimport Giveaways from './components/Giveaways'\n// import NotFoundPage from './components/NotFoundPage'\nimport Swagg from './components/Swagg'\n// import BioPageInfluencer from './components/Influencer/BioPage'\nimport Garage from './components/Influencer/Garage'\nimport Social from './components/Influencer/Social'\nimport SwaggInfluencer from './components/Influencer/Swagg'\n// import QueryVideoData from './components/Admin/QueryVideoData'\n// import EditVideoData from './components/Admin/EditVideoData'\n// import AddCarData from './components/Admin/AddCarData'\n// import CheckCarData from './components/Admin/CheckCarData'\n// import EditVideoDataKirk from './components/Admin/EditVideoDataKirk'\n// import AllVideos from './components/Influencer/AllVideos'\n// import Terms from './components/Terms'\n// import Privacy from './components/Privacy'\n// import CarImgUpload from './components/Admin/CarImgUpload'\nimport UpdateDB from './components/Admin/UpdateDB'\nimport CarStatsVideo from './components/CarStatsVideo'\nimport CarStatsListsYear from './components/CarStatsListsYear'\nimport CarStatsListsModel from './components/CarStatsListsModel'\nimport CarStatsListsResults from './components/CaStatsListsResults'\nimport Loading from './components/Loading'\nimport Instagram from './components/Admin/Instagram'\n// import CreateSiteMap from './components/Admin/CreateSiteMap'\nconst HomePage = loadable(() => import('./components/HomePage'), {\n  fallback: <Loading />\n})\n\nconst InfluencerIndexPage = loadable(() => import('./components/InfluencerIndexPage'))\nconst BioPage = loadable(() => import('./components/Fan/BioPage'))\nconst AboutPage = loadable(() => import('./components/AboutPage'))\nconst CarStats = loadable(() => import('./components/CarStats'))\nconst BioPageInfluencer = loadable(() => import('./components/Influencer/BioPage'))\nconst AllVideos = loadable(() => import('./components/Influencer/AllVideos'), {\n  fallback: <Loading />\n})\nconst NotFoundPage = loadable(() => import('./components/NotFoundPage'))\nconst QueryVideoData = loadable(() => import('./components/Admin/QueryVideoData'))\nconst EditVideoData = loadable(() => import('./components/Admin/EditVideoData'))\nconst AddCarData = loadable(() => import('./components/Admin/AddCarData'))\nconst EditVideoDataKirk = loadable(() => import('./components/Admin/EditVideoDataKirk'))\nconst Terms = loadable(() => import('./components/Terms'))\nconst Privacy = loadable(() => import('./components/Privacy'))\nconst CarImgUpload = loadable(() => import('./components/Admin/CarImgUpload'), {\n  fallback: <Loading />\n})\n\nfunction App() {\n\n  return (\n    <Router>\n        <Switch>\n          <Route exact path=\"/\" component={HomePage} />\n          \n          <Route path=\"/email-confirmation\" component={EmailConfirmation}/>\n          <Route path=\"/reset-password\" component={ResetPassword}/>\n          <Route exact path=\"/about\" component={AboutPage} />\n          <Route exact path=\"/car-stats/search/:id\" component={CarStats} />\n          <Route exact path=\"/car-search\" component={CarSearch} />\n          <Route exact path=\"/car-stats/:make\" component={CarStatsListsYear} />\n          <Route exact path=\"/car-stats/:make/:year\" component={CarStatsListsModel} />\n          <Route exact path=\"/car-stats/:make/:year/:model\" component={CarStatsListsResults} />\n\n          <Route exact path=\"/giveaways\" component={Giveaways} />\n          <Route exact path=\"/swagg\" component={Swagg} />\n          <Route path=\"/user/:id\" component={BioPage} />\n\n          <Route exact path=\"/influencers\" component={InfluencerIndexPage} />\n          <Route exact path=\"/influencer/:username\" component={BioPageInfluencer} />\n\n          <Route exact path=\"/influencer/:username/social\" component={Social} />\n          <Route exact path=\"/influencer/:username/swagg\" component={SwaggInfluencer} />\n          <Route exact path=\"/influencer/:username/all-videos\" component={AllVideos} />\n          <Route exact path=\"/influencer/:username/garage\" component={Garage} />\n          \n          <Route path=\"/add-car-data\" component={AddCarData} />\n          <Route path=\"/edit-video-data\" component={EditVideoData} />\n          <Route path=\"/edit-video-data-kirk\" component={EditVideoDataKirk} />\n          <Route path=\"/privacy-policy\" component={Privacy} />\n          <Route path=\"/terms\" component={Terms} />\n          <Route path=\"/car-stats/:make/:year/:model/:id\" component={CarStatsVideo} />\n          {/* <Route path=\"/check-data\" component={CheckCarData} /> */}\n          {/* <Route exact path=\"/create-sitemap\" component={CreateSiteMap} /> */}\n\n          <Route path=\"/update-video\" component={QueryVideoData} />\n          <Route path=\"/img-upload\" component={CarImgUpload} />\n          <Route path=\"/instagram\" component={Instagram} />\n          <Route component={NotFoundPage} />\n        </Switch>\n    </Router>    \n  );\n}\n\nexport default App;\n","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/store/reducers/userReducer.js",["379"],"const initState = {\n  profilepageid: '',\n}\n\nconst userReducer = (state = initState, action) =>{\n    switch(action.type){\n\n        case 'UPDATE_PROFILEPAGE': \n        console.log('reducer', action.userId)\n            return {\n                ...state,\n                profilepageid: action.userId\n            }\n        // default:\n        //     console.log('error', action)\n    }\n    return state\n}\n\nexport default userReducer","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/store/reducers/bioReducer.js",["380","381"],"import * as Realm from \"realm-web\"\n\nconst initState = {}\n\nconst bioReducer = (state = initState, action) =>{\n    \n    switch(action.type){\n        case 'CREATE_CAR':\n            console.log('car created', action.car)\n        // default: return state\n    }\nreturn state\n}\n\nexport default bioReducer","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/store/reducers/influencerReducer.js",["382"],"const initState = {\n    influencerObj: {},\n    formattedFans: ''\n}\n\nconst influencerReducer = (state = initState, action) =>{\n    switch(action.type){\n        case 'GET_INFLUENCER':\n            console.log('user from reducer', action.state)\n            return {\n                ...state,\n                influencerObj: action.data.user,\n                formattedFans: action.data.numOfFans\n            }\n        \n        // case 'BECOME_FAN': \n        //     console.log('from reducer', action.userObj)\n        //     return action.userObj\n        // default:\n        //     console.log('error', action)\n    }\n    return state\n}\n\nexport default influencerReducer","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/store/reducers/authReducer.js",["383"],"const initState = {\n    credentials: {},\n    loginUserData: {},\n    isLoggedIn: false,\n    customData: {},\n    hasLoginErr: false,\n    // mongo: null,\n    isPublicView: false,\n    openmodal: false,\n    modalMsg: '',\n    errMsg: '',\n    swapSignup: ''\n}\n\nconst authReducer = (state = initState, action) =>{\n    \n    switch(action.type){\n        case 'AUTH_USER':\n            return {\n                ...state,\n                credentials: action.userData.credentials,\n                loginUserData: action.userData.loginUserData\n            }\n        \n        case 'LOGIN_SUCCESS':\n            return{\n                ...state,\n                customData: action.customData,\n                isLoggedIn: true,\n                openmodal: false\n            }\n        case 'LOGIN_FAIL':\n            return{\n                ...state,\n                isLoggedIn: false,\n                hasLoginErr: true,\n                errMsg: action.msg\n            }\n        case 'LOGOUT':\n            return{\n                ...state,\n                isLoggedIn: false,\n                customData: {}\n            }\n        // case 'LOGIN_CHECK':\n        //     return{\n        //         ...state,\n        //         mongo: action.mongo\n        //     }\n        case 'LOGIN_PUBLIC':\n            return{\n                ...state,\n                isLoggedIn: false,\n                isPublicView: true\n            }\n        case 'LOGIN_CURRENT':\n            return{\n                // isLoggedIn: false,\n                ...state,\n                mongo: action.mongo\n            }\n        case 'LOGIN_UPDATE':\n            return{\n                ...state,\n                customData: action.customData,\n                isLoggedIn: true\n            }\n        case 'OPEN_LOGIN_MODAL':\n            return {\n                ...state,\n                openmodal: action.state\n            }\n        case 'SWAP_SIGNUP':\n            return{\n                ...state,\n                openmodal: true,\n                swapSignup: 'signup'\n            }\n        case 'SWAP_LOGIN':\n            return{\n                ...state,\n                swapSignup: ''\n            }\n        case 'ATTACH_MSG':\n            return{\n                ...state,\n                modalMsg: action.msg\n            }\n        // default: return state\n    }\nreturn state\n}\n\nexport default authReducer","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Swagg.js",["384"],"import React, { useEffect, useState } from 'react'\nimport {Helmet} from \"react-helmet\"\nimport Layout from './Layout/Layout'\nimport Client from 'shopify-buy';\nimport Products from './Shopify/Products'\nimport Cart from './Shopify/Cart'\nimport './Shopify/shopify.scss'\nimport Logo from '../assets/global/Logo-smoke-show.png'\n\nconst Swagg = () =>{\nconst [isCartOpen, setIsCartOpen] = useState(false)\nconst [checkout, setCheckout] = useState({ lineItems: [] })\nconst [products, setProducts] =useState([])\nconst [shop, setShop] = useState({})\n\nconst client = Client.buildClient({\n    storefrontAccessToken: process.env.REACT_APP_SHOPIFY_TOKEN,\n        domain: 'thehoongroup.myshopify.com',\n    });\n\nconst fetchData = () =>{\n    client.checkout.create().then((res) => {\n        console.log('cart', res)\n        setCheckout(res)\n      })\n\n      client.product.fetchAll().then((res) => {\n        console.log('product', res)\n        setProducts(res)\n      })\n  \n      client.shop.fetchInfo().then((res) => {\n        console.log('shop', res)\n        setShop(res)\n      });\n}\nconst addVariantToCart = async (variantId, quantity)=>{\n    setIsCartOpen(true)\n\n    const lineItemsToAdd = [{variantId, quantity: parseInt(quantity, 10)}]\n    // const checkoutId = checkout.id\n\n    return await client.checkout.addLineItems(checkout.id, lineItemsToAdd).then(res => {\n      console.log('res', res)\n      setCheckout(res)\n    });\n}\nconst updateQuantityInCart = async (lineItemId, quantity) =>{\n    // const checkoutId = checkout.id\n    const lineItemsToUpdate = [{id: lineItemId, quantity: parseInt(quantity, 10)}]\n\n    return await client.checkout.updateLineItems(checkout.id, lineItemsToUpdate).then(res => {\n        setCheckout(res)\n    });\n}\nconst removeLineItemInCart = async (lineItemId) =>{\n    return await client.checkout.removeLineItems(checkout.id, [lineItemId]).then(res => {\n        setCheckout(res)\n    });\n}\n\nconst handleCartClose = () =>{\n    setIsCartOpen(false)\n}\n\nuseEffect(() => {\n    fetchData()\n}, [])\n    return(\n        <Layout>\n        <Helmet>\n            <meta charSet=\"utf-8\" />\n            <title>Swagg | The Smoke Show</title>\n            <meta name=\"description\" content=\"Check out The Smoke Show swaggs here!\" />\n            <link rel=\"canonical\" href=\"https://thesmokeshow.com/swagg\" />\n        </Helmet>\n            <div className=\"main-wrapper\">\n                <div className=\"spacer-4rem\"></div>\n                <h2 className=\"title\">Swagg</h2>\n                {/* <div className=\"swagg-wrapper\">\n                </div> */}\n                <div className=\"App\">\n        <div className=\"App__header\">\n          {!isCartOpen &&\n            <div className=\"App__view-cart-wrapper\">\n              <button className=\"App__view-cart\" onClick={()=> setIsCartOpen(true)}>Cart</button>\n            </div>\n          }\n          <div className=\"App__title\">\n            {/* <h1>{shop.name}</h1> */}\n            <img className=\"logo-header\" src={Logo} alt=\"The Smoke Show logo\"/>\n            <h2>{shop.description}</h2>\n          </div>\n        </div>\n        <div className=\"spacer-4rem\"></div>\n        <Products\n          products={products}\n          client={client}\n          addVariantToCart={addVariantToCart}\n        />\n        <Cart\n          checkout={checkout}\n          isCartOpen={isCartOpen}\n          handleCartClose={handleCartClose}\n          updateQuantityInCart={updateQuantityInCart}\n          removeLineItemInCart={removeLineItemInCart}\n        />\n      </div>\n            </div>\n        </Layout>\n    )\n}\n\nexport default Swagg","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/EmailConfirmation.js",["385","386"],"import React, { useState, useEffect } from 'react'\nimport { Button, Form } from 'react-bootstrap'\nimport * as Realm from \"realm-web\"\nimport { connect } from 'react-redux'\nimport jwt from 'jsonwebtoken'\nimport Layout from './Layout/Layout'\nimport axios from 'axios'\n\nconst EmailConfirmation = (props) =>{\n    let token = new URLSearchParams(props.location.search).get(\"token\")\n    let tokenId = new URLSearchParams(props.location.search).get(\"tokenId\")\n    const [userObj, setUserObj] = useState({fname: '', lname: '', token: token, tokenId: tokenId, username: '', email: '', password: ''})\n    const [hasError, setHasError] = useState(false)\n    const [hasRegistered, setHasRegistered] = useState(false)\n    const [msg, setMsg] = useState(\"\")\n    const maxAgeTest = 1 * 60 * 60\n    const id = process.env.REACT_APP_REALM_APP_ID\n    const config = { id };\n    const app = new Realm.App(config);\n    const [clicked, setClicked] = useState(false)\n    const [resendMsg, setResendMsg] = useState('')\n    \n    const vipNames = [\"EddieX\", \"Lexurious Fleet\", \"Stradman\", \"Burlacher\", \"SummitLife\", \"HeavyD\", \"Hoovies Garage\", \"Streetspeed717\", \"RFRacing\", \"Bertrand850\", \"InShane Designs\", \"Savage Garage\", \"effSpot\", \"Goonzquad\", \"Tavarish\", \"VinWiki\", \"TJ Hunt\", \"DDE\", \"Emelia Hartford\", \"Doug Demuro\", \"StraightPipes\", \"Savage Geese\", \"SaabKyle04\", \"ThatDudeInBlue\", \"JR Garage\", \"Alex Rebuilds\", \"vTuned\", \"Cleetus McFarland\", \"Chevy Dude\", \"Seen Through Glass\", \"Shmee150\", \"SOL\", \"Mr JWW\", \"itsjusta6\", \"WhistlinDiesel\", \"Samcrac\", \"Car Wizard\", \"The Smoking Tire\", \"Manny Khoshbin\", \"Donut Media\", \"Scotty Kilmer\", \"Jay Leno's Garage\", \"WatchJRGo\", \"Rich Rebuilds\", \"Speed Phenom\", \"RDB LA\", \"Salomondrin\", \"Buddy Wyrick\", \"Ken Block\", \"B is for Build\", \"SuperSpeeders\", \"Royalty Exotic Cars\", \"Adam LZ\", \"Rob Dahm\", \"ThrottleHouse\", \"LegitStreetCars\", \"Supercar Blondie\", \"Wrench Everyday\", \"Lambo Jesus\", \"Lambo Fan\", \"Motor Tube\", \"Redline Reviews\"]\n\n    const handleChange =(e) =>{\n        setUserObj({\n            ...userObj,\n            [e.target.name]: e.target.value\n        })\n    }\n    const createToken = (userData) =>{\n        return jwt.sign({ userData: userData }, process.env.REACT_APP_JWT_SECRET, {expiresIn: maxAgeTest});\n    }\n\n    const handleSubmit = async (e) =>{\n        let isUnique = (vipNames.indexOf(userObj.username) > -1)\n        console.log(isUnique)\n        e.preventDefault()\n        if(!clicked){\n            setHasError(false)\n            if(!isUnique){\n                const email = userObj.email.toLowerCase()\n                const credentials = Realm.Credentials.emailPassword(email, userObj.password)\n                try {\n                    await app.logIn(credentials).then(async user =>{\n                        const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME);\n                        const mongoCollection = mongo.db(\"smoke-show\").collection(\"users\")\n                        const filterUsername = {username: userObj.username}\n                        try {\n                            await mongoCollection.findOne(filterUsername).then(async res =>{\n                                console.log('res', res)\n                                if(res){\n                                    setMsg('The username is already taken. Please try again.')\n                                    setHasError(true)\n                                }else{\n                                    const joined = new Date().getTime()\n                                    const userData = {\n                                        userId: user.id,\n                                        fname: userObj.fname,\n                                        lname: userObj.lname,\n                                        username: userObj.username,\n                                        joined: joined\n                                    }\n                                    try {\n                                        await mongoCollection.insertOne(userData).then(insertOneResult =>{\n                                            let token = createToken(userData)\n                                            const tokenCredentials = jwt.sign({ cre: credentials }, process.env.REACT_APP_JWT_SECRET, {expiresIn: maxAgeTest})\n                                            const oldToken = sessionStorage.getItem('session_token')\n                                            if(oldToken){\n                                                sessionStorage.removeItem('session_token')\n                                                sessionStorage.removeItem('session_user')\n                                                sessionStorage.setItem('session_token', token)\n                                                sessionStorage.setItem('session_user', tokenCredentials)\n                                            }else{\n                                                sessionStorage.setItem('session_token', token)\n                                                sessionStorage.setItem('session_user', tokenCredentials)\n                                            }\n                                            setClicked(true)\n                                 \n                                        }).then(()=>{props.history.push(\"/\")})\n                                    } catch (error) { console.log(error)}\n                                }\n                            })\n                        } catch (error) { console.log(error)}\n                    })\n                   } catch (error) {\n            \n                   }\n            }else{\n                setMsg('The username is already taken. Please try again.')\n                setHasError(true)\n                return\n            }\n    }\n}\n\n    const handleResendToken = async (e) =>{\n        e.preventDefault()\n        const email = userObj.email\n        \n        try{\n            axios.post(`https://stitch.mongodb.com/api/client/v2.0/app/${process.env.REACT_APP_REALM_APP_ID}/auth/providers/local-userpass/confirm/call`, { email }).then(res => {\n                console.log(res);\n                setMsg('We have sent you a confirmation email. Please check your inbox.')\n                setHasError(true)\n            })\n         \n        }catch(err){\n            console.log(err)\n            setMsg('The email address you typed is not in our record. Please check your email address.')\n            setHasError(true)\n        }\n   \n    }\n\n    const resendToken = ()=>{\n        return(\n            <div className=\"min-height-all\">\n                <center>\n                    <h3>{msg}</h3>\n                </center>\n                \n                <div className=\"spacer-4rem\"></div>\n                <Form className=\"login-form\" onSubmit={handleResendToken}>\n                    <Form.Group >\n                        <Form.Label>Email address</Form.Label>\n                        <Form.Control type=\"email\" placeholder=\"e.g. example@example.com\" name=\"email\" onChange={handleChange} required />\n                    </Form.Group>\n                    <div className=\"spacer-2rem\"></div>\n                    <div className=\"login-btn-wrapper\">\n                    { resendMsg && resendMsg }\n                        <Button className=\"login-btn\" type=\"submit\">\n                            Resend Confirmation Email\n                        </Button><br /><br />\n                        {/* <Button onClick={test}>check child ref</Button> */}\n                    </div>\n                </Form>\n            </div>\n        )\n    }\n\n    const confirmUser = async () =>{\n        if(token){\n            try{\n                await app.emailPasswordAuth.confirmUser(token, tokenId).then(user =>{\n                    setHasRegistered(true)\n                    \n                })\n            }catch(error){\n                console.log('error', error)\n                setMsg('Oops, the link was expired. Please resend confirmation email.')\n                setHasError(true)\n                setHasRegistered(false)\n            }\n        }\n    }\n \n    useEffect(() => {\n        confirmUser()\n        \n    }, [])\n\n    return (\n        <Layout >\n            <div className=\"custom-modal-body\" style={{padding:'1rem'}}>\n                <div className=\"spacer-4rem\"></div>\n                {hasRegistered ? \n                <React.Fragment>\n                    <div className=\"login-logo-wrapper\">\n                        <h3>You are registered to The Smoke Show.</h3>\n                        <p>Please fill in your info and login.</p>\n                    </div>\n                    <Form className=\"login-form\" onSubmit={handleSubmit}>\n                        <Form.Group >\n                            <Form.Label>First name</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"e.g. John\" name=\"fname\" onChange={handleChange} required/>\n                        </Form.Group>\n                        <Form.Group >\n                            <Form.Label>Last name</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"e.g. Due\" name=\"lname\" onChange={handleChange} required />\n                        </Form.Group>\n                        <Form.Group controlId=\"formBasicEmail\">\n                            <Form.Label>Username</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"Ex: SmokeShowFan\" name=\"username\" onChange={handleChange} required/>\n                        </Form.Group>\n                        <Form.Group controlId=\"formBasicEmail\">\n                            <Form.Label>Email address</Form.Label>\n                            <Form.Control type=\"email\" placeholder=\"e.g. example@example.com\" name=\"email\" onChange={handleChange} />\n                        </Form.Group>\n                        <Form.Group controlId=\"formBasicPassword\">\n                            <Form.Label>Password</Form.Label>\n                            <Form.Control type=\"password\" placeholder=\"Between 6 and 128 characters long\" name=\"password\" onChange={handleChange} />\n                        </Form.Group>\n                        \n                        {hasError && <div className=\"error-msg\">{msg}</div>}\n                        <br/>\n                        <div className=\"login-btn-wrapper\">\n                            <Button className=\"login-btn\" type=\"submit\">\n                                Login\n                            </Button>\n                          \n                        </div>\n                        <div className=\"spacer-4rem\"></div>\n                    </Form>\n                </React.Fragment>\n                : resendToken()\n                }\n            \n            </div>\n        </Layout>\n    )\n }\n\n\nconst mapDispatchToProps = (dispatch)=>{\n    return{\n        // openLoginModal: (state) => dispatch(openLoginModal(state)),\n    }\n}\n\nexport default connect(null, mapDispatchToProps)(EmailConfirmation)","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/CaStatsListsResults.js",["387","388","389"],"import React, { useEffect, useState } from 'react'\nimport Layout from './Layout/Layout'\nimport { Button } from 'react-bootstrap'\nimport { Link } from 'react-router-dom'\nimport { Helmet } from 'react-helmet'\nimport * as Realm from \"realm-web\"\nimport jwt from 'jsonwebtoken'\nimport { jsonLD4 } from './jsonLD'\nimport loadable from '@loadable/component'\nimport { switchTabs } from './functionsStats'\n\nconst CarStatsCard = loadable(() => import('./CarStatsCard'))\n\n\nconst CarStatsListsResults = (props) =>{\n    const makeName = props.match.params.make\n    const carYear = props.match.params.year\n    const carModel = props.match.params.model\n\n    let title;\n    if(makeName.includes(\"-\")){\n        let splitted = makeName.split(\"-\")\n        let temp =[]\n        for(let i=0; i < splitted.length; i++){\n            temp.push(splitted[i].charAt(0).toUpperCase() + splitted[i].slice(1))\n        }\n        title = temp.join(\" \")\n    }else{\n        let str = makeName\n        title = str.charAt(0).toUpperCase() + str.slice(1)\n    }\n    let today = new Date()\n    const timeISO = today.toISOString()\n    let published = new Date('2021-03-01')\n    const publishedISO = published.toISOString()\n    const slug = `car-stats/${makeName}/${carYear}`\n    const list2 = `car-stats/${makeName}`\n    const list2Name = `List of year to search ${title} car data`\n    const list3 = carYear\n    const list4 = carModel\n    const list3Name = `List of car model names of ${title} in ${carYear}`\n    const pageName = `Search Car Statistics for ${makeName} ${carYear} ${carModel}`\n    const dataLD = { timeISO, publishedISO, slug, list2, list3, list4, list2Name, list3Name, pageName }\n    const appConfig = {\n        id: process.env.REACT_APP_REALM_APP_ID,\n        // timeout: 10000, \n        // timeout in number of milliseconds\n        };\n    const app = new Realm.App(appConfig)\n    const [carData, setCarData] = useState()\n    const [carImages, setCarImages] = useState([])\n    const statsArr = ['Main Stats', 'Engine', 'Measurements', 'Comfort & Convenience', 'Drive Train', 'Suspension', 'Color', 'Warranty']\n\n    const handleTabClick = (tab, index) =>{\n        let tempCarArr = [...carData]\n       \n       tempCarArr[index].activeTab = tab\n       setCarData(tempCarArr)\n    }\n\n    const loginCheck = () =>{\n        const tokenUser = sessionStorage.getItem('session_user')\n        if(tokenUser){\n            jwt.verify(tokenUser, process.env.REACT_APP_JWT_SECRET, (err, decoded)=>{\n                if(err){\n                    const credentials = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTH_PUBLIC_VIEW);\n                    return credentials\n                }else{\n                    return decoded.cre\n                }\n            })\n        }else{\n            const credentials = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTH_PUBLIC_VIEW);\n            return credentials\n        }\n    }\n    const getData = async (cre) =>{\n        try {\n            await app.logIn(cre).then(async user =>{\n                const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n                const collectionCars = mongo.db(\"smoke-show\").collection(\"cars\")\n                const filter = {make: makeName, year: Number(carYear), modelName: carModel}\n                const results = await collectionCars.find(filter)\n                const temp = results.map(item => ({...item, tabs: statsArr, activeTab: 'Main Stats'}))\n                setCarData(temp)\n            })\n        } catch (error) {\n            \n        }\n    }\n\n    useEffect(() => {\n  \n        const cre = loginCheck()\n        getData(cre)\n    }, [])\n    return(\n        <Layout>\n            <Helmet encodeSpecialCharacters={true}>\n                <title>Car Statistics {title} {carYear} {carModel} | The Smoke Show</title>\n                <meta name=\"description\" content={`Car statistics and data for ${title} ${carYear} ${carModel}` } />\n                <script src=\"https://lib.tashop.co/the_smoke_show/adengine.js\" async data-tmsclient=\"The Smoke Show\" data-layout=\"searches\" data-debug=\"true\"></script>\n                <script>{`window.TAS = window.TAS.reload() || { cmd: [] }`}</script>\n                <script type=\"application/ld+json\">{jsonLD4(dataLD)}</script>\n            </Helmet>\n            <div className=\"main-wrapper stats-container\">\n                <div className=\"spacer-4rem\"></div>\n                {carData && carData.map((car, index) =>{\n                    car.tabs = statsArr\n                 \n                    let carImg;\n                    if(carImages[0]){\n                        carImg = carImages[0].link\n                    }else{\n                        carImg = 'https://smoke-show.s3.amazonaws.com/car-photos/Ferrari-F8_Spider-2020-1280-01.jpg'\n                        }\n                    return(\n\n                        <CarStatsCard car={car} index={index} handleTabClick={handleTabClick} switchTabs={switchTabs} />\n                      \n                    )\n                })\n                }\n                <div className=\"spacer-4rem\"></div>\n                <div className=\"ad-on-search\">\n                    <div id=\"unit-1620778820240\" class=\"tmsads\"></div>\n                </div>\n                <div className=\"spacer-2rem\"></div>\n                <Link to=\"/car-search\">\n                    <Button className=\"login-btn\">Start New Search</Button>\n                </Link>\n                \n            </div>\n        </Layout>\n    )\n}\n\nexport default CarStatsListsResults\n\n\n\n","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Loading.js",[],"/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/InfluencerIndexPage.js",["390","391"],"import React, { useEffect, useState } from 'react'\nimport {Helmet} from \"react-helmet\"\nimport { Row, Col, Card, Button } from 'react-bootstrap'\nimport { connect } from 'react-redux'\nimport * as Realm from \"realm-web\"\nimport { Link } from 'react-router-dom'\nimport Layout from './Layout/Layout'\nimport './influencerIndexPage.scss'\nimport jwt from 'jsonwebtoken'\nimport noImg from '../assets/global/no_image.jpg'\nimport short from 'short-uuid'\nimport Logo from '../assets/global/Logo-smoke-show.png'\nimport loadable from '@loadable/component'\n\nconst InfluCard = loadable(() => import('./InfluCard'))\n\nconst InfluencerIndexPage = () =>{\n    let today = new Date()\n    const timeISO = today.toISOString()\n    let published = new Date('2021-03-01')\n    const publishedISO = published.toISOString()\n    const slug = 'influencers'\n    const pageName = 'All Influencers and Vloggers'\n\n    const [influencers, setInfluencers] = useState([])\n    const appConfig = {\n        id: process.env.REACT_APP_REALM_APP_ID,\n        // timeout: 10000, \n        // timeout in number of milliseconds\n      };\n    const app = new Realm.App(appConfig);\n   \n    const getInfluencers = async (credentials) =>{\n\n        try{\n            await app.logIn(credentials).then(async user =>{\n                const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n                const mongoCollection = mongo.db(\"smoke-show\").collection(\"influencers\")\n                try {\n            \n                    const filter = {isActive: true} \n                    await mongoCollection.find(filter).then(resAll =>{\n                        setInfluencers(resAll)\n                    })\n                   \n                 }catch(error){console.log(error)}\n            })\n        }catch(err){\n            console.log(err)\n        }\n    }\n\n    useEffect(() => {\n        let token = sessionStorage.getItem('session_user')\n        if(token){\n            jwt.verify(token, process.env.REACT_APP_JWT_SECRET, (err, decoded)=>{\n                if(err){\n                    console.log(err)\n                    const credentials = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTH_PUBLIC_VIEW);\n                    getInfluencers(credentials)\n                }else{\n                    getInfluencers(decoded.cre)\n                }\n            });\n            \n         }else{\n            const credentials = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTH_PUBLIC_VIEW);\n            getInfluencers(credentials)\n         }\n        \n\n      }, [])\n\n    return(\n        <Layout>\n        <Helmet encodeSpecialCharacters={true}>\n          <meta charSet=\"utf-8\" />\n          <title>All influencers | The Smoke Show</title>\n          <meta name=\"description\" content=\"The best place to stay up to date with Automotive Influencers. Watch the newest videos, see what's in their garage, and even pick up some new swag!\" />\n          <link rel=\"canonical\" href=\"https://thesmokeshow.com/influencers\" />\n          <script type=\"application/ld+json\">\n            {`\n                {\n                    \"@context\": \"http://schema.org\",\n                    \"@graph\": [{\"@type\":\"WebSite\",\"@id\":\"https://thesmokeshow.com/#website\",\n                    \"url\":\"https://thesmokeshow.com/\",\n                    \"name\":\"The Smoke Show\",\n                    \"description\":\"\",\n                    \"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":\"https://thesmokeshow.com/search?s={search_term_string}\",\"query-input\":\"required name=search_term_string\"}],\n                    \"inLanguage\":\"en\"},\n                    {\"@type\": \"WebPage\",\n                    \"@id\": \"https://thesmokeshow.com/${slug}/#webpage\", \"url\": \"https://thesmokeshow.com/${slug}/\", \"name\": \"${pageName} | The Smoke Show\",\"isPartOf\":{\"@id\":\"https://thesmokeshow.com/#website\"}, \"datePublished\": \"${publishedISO}\", \"dateModified\": \"${timeISO}\", \"description\": \"The Smoke Show is a home for auto fans, built by auto fans. The best place to watch Car Vloggers and find all Car Info. Learn all about giveaways and buy swag!\", \"breadcrumb\":{\"@id\":\"https://thesmokeshow.com/${slug}/#breadcrumb\"},\"inLanguage\":\"en\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https://thesmokeshow.com/${slug}/\"]}]},\n                    {\"@type\":\"BreadcrumbList\",\"@id\":\"https://thesmokeshow.com/#breadcrumb\",\n                    \"itemListElement\":[{\n                        \"@type\":\"ListItem\",\"position\":1,\n                        \"item\":{\"@type\":\"WebPage\",\"@id\":\"https://thesmokeshow.com/\",\"url\":\"https://thesmokeshow.com/\",\"name\":\"Home\"}\n                        },\n                        {\n                            \"@type\":\"ListItem\",\n                            \"position\":2,\n                            \"item\":{\"@type\":\"WebPage\",\"@id\":\"https://thesmokeshow.com/${slug}/\",\"url\":\"https://thesmokeshow.com/${slug}/\",\"name\":\"${pageName}\"}\n                        }\n                        ]}\n                    ]\n                }\n            `}\n            </script>\n        </Helmet>\n            <div className=\"main-wrapper footer-pos\">\n                <div className=\"spacer-4rem\"></div>\n                <div className=\"title title-adj\">\n                    <h2 >All Influencers</h2>\n                </div>\n                <Row style={{paddingLeft:'-7px', paddingRight:'-7px'}}>\n                {influencers && influencers.map(influencer =>{\n                    const unique = short.generate()\n                    let username = influencer.username\n                    const replaced = username.replace(' ', '-')\n                    return(\n                        <InfluCard unique={unique} influencer={influencer} replaced={replaced}/>\n                    )\n                    \n                })}\n                    <Col sm={6} md={4} >\n                        <Card className=\"card-influencer\" >\n                            <div className=\"videoWrapper\" style={{background: '#eee'}}>\n                            {/* <img src={noImg} alt=\"coming soon\" style={{width: '100%'}}/> */}\n                            <img src={Logo} className=\"overlay-logo\" alt=\"more coming soon | The Smoke Show\"/>\n                                    \n                            </div>\n                            <Card.Body>\n                                <Card.Title>More Coming Soon!</Card.Title>\n                                <Card.Text className=\"influencer-desc\">Check back here as we grow Influencers on The Smoke Show!<br/><br/>\n                                <Link to=\"/about\"><span>Want your content featured too? </span></Link>\n                                </Card.Text>\n                                <Link to=\"/about\">\n                                <Button className=\"login-btn\" >More details here</Button>\n                                </Link>\n                                    \n                                {/* </NavLink> */}\n                                \n                            </Card.Body>\n                        </Card>\n                    </Col>\n                </Row>\n                <div className=\"spacer-4rem\"></div>\n            </div>\n        </Layout>\n        \n    )\n}\nconst mapStateToProps = (state) => {\n    return{\n      username: state.user.username,\n    }\n  }\n\nexport default connect(mapStateToProps)(InfluencerIndexPage)\n\n","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/HomePage.js",["392","393"],"/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/ResetPassword.js",["394","395","396","397"],"import React, { useState, useEffect } from 'react'\nimport { Button, Form } from 'react-bootstrap'\nimport * as Realm from \"realm-web\"\nimport jwt from 'jsonwebtoken'\nimport Layout from './Layout/Layout'\nimport { Helmet } from 'react-helmet'\n\nconst ResetPassword = (props) =>{\n\n    const token = new URLSearchParams(props.location.search).get(\"token\")\n    const tokenId = new URLSearchParams(props.location.search).get(\"tokenId\")\n    console.log(token)\n    console.log(tokenId)\n    const [userObj, setUserObj] = useState({token: token, tokenId: tokenId, email: '', password: '', password2: ''})\n    const [hasError, setHasError] = useState(false)\n    const [hasReset, setHasReset] = useState(false)\n    const [msg, setMsg] = useState(\"\")\n    const maxAgeTest = 1 * 60 * 60\n    const id = process.env.REACT_APP_REALM_APP_ID\n    const config = { id };\n    const app = new Realm.App(config);\n\n\n    const handleChange =(e) =>{\n        setUserObj({\n            ...userObj,\n            [e.target.name]: e.target.value\n        })\n    }\n    const createToken = (userData) =>{\n        return jwt.sign({ userData: userData }, process.env.REACT_APP_JWT_SECRET, {expiresIn: maxAgeTest});\n    }\n    const handeleRestPw = async (e) =>{\n        e.preventDefault()\n        try{\n            await app.emailPasswordAuth.resetPassword( token, tokenId, userObj.password).then(res =>{\n                console.log('res', res)\n                setHasReset(true)\n            })\n        }catch(error){\n            console.log(error)\n        }\n        \n    }\n    const handleLogin = async (e) =>{\n        e.preventDefault()\n        const emailLowerCase = userObj.email.toLocaleLowerCase()\n        const credentials = Realm.Credentials.emailPassword(emailLowerCase, userObj.password)\n\n        try{\n            // Authenticate the user\n            await app.logIn(credentials).then( user=>{\n                    console.log('working?', user)\n                    // const key = await user.apiKeys.create(uid)\n                    const customData = user.customData\n                    const token = jwt.sign({ userData: customData }, process.env.REACT_APP_JWT_SECRET, {expiresIn: maxAgeTest})\n                    sessionStorage.setItem('session_token', token)\n                    const tokenUser = jwt.sign({ cre: credentials }, process.env.REACT_APP_JWT_SECRET, {expiresIn: maxAgeTest})\n                    sessionStorage.setItem('session_user', tokenUser)\n                    \n                }).then(()=>{props.history.push(\"/\")})\n            \n      \n        }catch(error){\n            console.log('error', error)\n\n        }\n    }\n    useEffect(() => {\n        handeleRestPw()\n    }, [])\n\n    return (\n        <Layout>\n        <Helmet>\n            <title>Reset your password | The Smoke Show</title>\n        </Helmet>\n        \n            <div className=\"custom-modal-body theme-text-p height-adj-main\">\n                <div style={{marginTop:'4rem'}}></div>\n                {hasReset ? \n                <React.Fragment>\n                    <div style={{textAlign:\"center\"}}>\n                        <h4>Your password has been reset</h4><br/>\n                        <p> Login with your new password.</p>\n                    </div>\n                    <div className=\"spacer-4rem\"></div>\n                    <Form className=\"login-form\" onSubmit={handleLogin}>\n                        <Form.Group controlId=\"formBasicEmail\">\n                            <Form.Label>Email address</Form.Label>\n                            <Form.Control type=\"email\" placeholder=\"e.g. example@example.com\" name=\"email\" onChange={handleChange} />\n                        </Form.Group>\n\n                        <Form.Group controlId=\"formBasicPassword\">\n                            <Form.Label>Password</Form.Label>\n                            <Form.Control type=\"password\" placeholder=\"\" name=\"password\" onChange={handleChange} />\n                        </Form.Group>\n                        <div className=\"spacer-2rem\"></div>\n                        <div className=\"login-btn-wrapper\">\n                            <Button className=\"login-btn\" type=\"submit\">\n                                Login\n                            </Button><br /><br />\n                            \n                        </div>\n                    \n                    </Form>\n                </React.Fragment>\n                :\n                <React.Fragment>\n                    <div className=\"login-logo-wrapper theme-text-p\">\n                        <h4 className=\"h4-style\">Reset Your Password</h4>\n                        <div className=\"spacer-4rem\"></div>\n                        <p>Please enter your new password below</p>\n                    </div>\n                    <Form className=\"login-form\" onSubmit={handeleRestPw}>\n         \n                        <Form.Group >\n                            <Form.Label>New password</Form.Label>\n                            <Form.Control type=\"password\" placeholder=\"Between 6 and 128 characters long\" name=\"password\" onChange={handleChange} />\n                        </Form.Group>\n                        <br/>\n                    \n                        {hasError && <div className=\"error-msg\">{msg}</div>}\n                        <br/>\n                        <div className=\"login-btn-wrapper\">\n                            <Button className=\"login-btn\" type=\"submit\">\n                                Set New Password\n                            </Button>\n                        </div>\n                        <div className=\"spacer-4rem\"></div>\n                    </Form>\n                </React.Fragment>\n                }\n            </div>\n        </Layout>\n        \n    )\n}\n\nexport default ResetPassword\n\n\n","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/CarSearch.js",["398","399"],"import React, { Fragment, useState, useEffect  } from 'react'\nimport { Dropdown, DropdownButton, Button } from 'react-bootstrap'\nimport Layout from './Layout/Layout'\nimport * as Realm from \"realm-web\"\nimport { carsAllYear } from './carTempData'\nimport './carStats.scss'\nimport { v4 as uuidv4 } from 'uuid'\nimport jwt from 'jsonwebtoken'\nimport { Helmet } from 'react-helmet'\nimport loadable from '@loadable/component'\n\n// import CarStatsListsMake from './CarStatsListsMake'\nconst CarStatsListsMake = loadable(() => import('./CarStatsListsMake'))\n\n\nconst CarSearch = (props) =>{\n\n    let today = new Date()\n    const timeISO = today.toISOString()\n    let published = new Date('2021-03-01')\n    const publishedISO = published.toISOString()\n    const slug = 'car-search'\n    const pageName = 'Search Car Statistics'\n    const [modelName, setModelName] = useState([])\n    const [selectedCar, setSelectedCar] = useState({make: \"Select a maker\", model: \"Select a model\", type: \"Select a type\", year: \"Select a year\"})\n    const [carTypeArr, setCarTypeArr] = useState([])\n    const [carYearArr, setCarYearArr] = useState([])\n    const [mongo, setMongo] = useState()\n    const [disabled, setDisabled] = useState(true)\n    const [carResults, setCarResults] = useState([])\n    const appConfig = {\n        id: process.env.REACT_APP_REALM_APP_ID,\n        // timeout: 10000, \n      };\n    \n    const app = new Realm.App(appConfig)\n  \n    const searchId = uuidv4()\n\n\n    const getModel = async (e) =>{\n        setModelName([])\n        setDisabled(true)\n        setSelectedCar({ make: e, model: \"Select a model\", type: \"Select a type\", year: \"Select a year\"})\n        const makeLowerCase = e.toLowerCase()\n        const models = await app.currentUser.functions.distinctCarModel(makeLowerCase)\n\n        if(models){\n            setModelName(models.sort())\n        }else{\n            setModelName(['error. Please choose another maker name.'])\n        }\n        setCarYearArr([])\n        \n    }\n \n    const filterByModel = async (e) =>{\n        \n        setSelectedCar({...selectedCar, model: e, type: \"Select a type\", year: \"Select a year\"})\n        const makeLowerCase = selectedCar.make.toLowerCase()\n        const years = await app.currentUser.functions.distinctCarYear(makeLowerCase, e)\n        setCarYearArr(years.sort((a, b) => b - a))\n        const collectionCars = mongo.db(\"smoke-show\").collection(\"cars\")\n        const filter = { make: makeLowerCase, modelName: e }\n        const results = await collectionCars.find(filter)\n        setCarResults(results)\n        setDisabled(false)\n        \n    }\n    const getModelNames = (data) =>{\n\n        const regCarTypes = /Sedan|Coupe|SUV|Minivan|Wagon|Sport|Station Wagon|Hatchback|Truck/i\n        let availableTypes = data.map(car =>{\n          const result = car.name.match(regCarTypes) \n          if(result){\n              return result[0]\n              \n          }\n          \n        })\n        const finalResult = [...new Set(availableTypes)]\n        setCarTypeArr(finalResult.sort())\n\n    }\n    const filterByYear = async (e) =>{\n        setSelectedCar({...selectedCar, year: e, type: \"Select a type\"})\n        const collectionCars = mongo.db(\"smoke-show\").collection(\"cars\")\n        const filter = {make: selectedCar.make.toLowerCase(), modelName: selectedCar.model, year: Number(e)}\n        const results = await collectionCars.find(filter)\n        // let filteredByYear = carsByModel.filter((car) =>{\n        //     if(car.year == e){\n        //         return car\n        //     }\n        // })\n        // setCarsByYear(filteredByYear)\n        setCarResults(results)\n        getModelNames(results)\n    }\n\n    const filterByType = (e) =>{\n       \n        setSelectedCar({...selectedCar, type: e})\n        let filtered =  carResults.filter(car => car.name.includes(e))\n        setCarResults(filtered)\n    }\n   const goStatsPage = () =>{\n      \n       sessionStorage.setItem(searchId, carResults)\n       props.history.push({\n        pathname: `/car-stats/search/${searchId}`,\n        cars: carResults,\n        selected: selectedCar\n      })\n   }\n   const checkToken = async () =>{\n    const tokenUser = sessionStorage.getItem('session_user')\n    if(tokenUser){\n        jwt.verify(tokenUser, process.env.REACT_APP_JWT_SECRET, async (err, decoded)=>{\n            if(err){\n                console.log(err)\n                const credentials = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTH_PUBLIC_VIEW)\n                try{\n                    await app.logIn(credentials).then(  user =>{\n                        const mongoClient = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n                        setMongo(mongoClient)\n                    })\n                }catch(err){\n                    console.log(err)\n                }\n            }else{\n             \n                try{\n                    await app.logIn(decoded.cre).then( user =>{\n                        const mongoClient = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n                        setMongo(mongoClient)\n                    })\n                }catch(err){\n                    console.log(err)\n                }\n            }\n        });\n        \n     }else{\n        const credentials = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTH_PUBLIC_VIEW);\n        try{\n            await app.logIn(credentials).then(  user =>{\n                const mongoClient = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n                setMongo(mongoClient)\n            })\n        }catch(err){\n            console.log(err)\n        }\n     }\n   }\n\n   useEffect(() => {\n    checkToken()\n    \n   }, [])\n    return(\n        <Layout>\n        <Helmet encodeSpecialCharacters={true}>\n            <title>Car Statistics Search | The Smoke Show</title>\n            <meta name=\"description\" content=\"Look at all information about any car and have the results displayed in a way that's actually readable by a human. We didn't invent car search, we perfected it!\" />\n            <link rel=\"canonical\" href=\"https://thesmokeshow.com/car-search\" />\n            <script src=\"https://lib.tashop.co/the_smoke_show/adengine.js\" async data-tmsclient=\"The Smoke Show\" data-layout=\"searches\" data-debug=\"true\"></script>\n            <script>{`window.TAS = window.TAS.reload() || { cmd: [] }`}</script>\n            <script type=\"application/ld+json\">\n        {`\n            {\n                \"@context\": \"http://schema.org\",\n                \"@graph\": [{\"@type\":\"WebSite\",\"@id\":\"https://thesmokeshow.com/#website\",\n                \"url\":\"https://thesmokeshow.com/\",\n                \"name\":\"The Smoke Show\",\n                \"description\":\"\",\n                \"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":\"https://thesmokeshow.com/search?s={search_term_string}\",\"query-input\":\"required name=search_term_string\"}],\n                \"inLanguage\":\"en\"},\n                {\"@type\": \"WebPage\",\n                \"@id\": \"https://thesmokeshow.com/${slug}/#webpage\", \"url\": \"https://thesmokeshow.com/${slug}/\", \"name\": \"${pageName} | The Smoke Show\",\"isPartOf\":{\"@id\":\"https://thesmokeshow.com/#website\"}, \"datePublished\": \"${publishedISO}\", \"dateModified\": \"${timeISO}\", \"description\": \"Look at all information about any car and have the results displayed in a way that's actually readable by a human. We didn't invent car search, we perfected it!\", \"breadcrumb\":{\"@id\":\"https://thesmokeshow.com/${slug}/#breadcrumb\"},\"inLanguage\":\"en\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https://thesmokeshow.com/${slug}/\"]}]},\n                {\"@type\":\"BreadcrumbList\",\"@id\":\"https://thesmokeshow.com/#breadcrumb\",\n                \"itemListElement\":[{\n                    \"@type\":\"ListItem\",\"position\":1,\n                    \"item\":{\"@type\":\"WebPage\",\"@id\":\"https://thesmokeshow.com/\",\"url\":\"https://thesmokeshow.com/\",\"name\":\"Home\"}\n                    },\n                    {\n                        \"@type\":\"ListItem\",\n                        \"position\":2,\n                        \"item\":{\"@type\":\"WebPage\",\"@id\":\"https://thesmokeshow.com/${slug}/\",\"url\":\"https://thesmokeshow.com/${slug}/\",\"name\":\"${pageName}\"}\n                    }\n                    ]}\n                ]\n            }\n        `}\n        </script>\n        </Helmet>\n            <div className=\"spacer-4rem\"></div>\n            <div className=\"main-wrapper main-height\" style={{minHeight: 'calc(100vh - 21rem)'}}>\n                <h1 className=\"h1-seo\">Search car data</h1>\n                <div className=\"search-wrapper\" >\n                    <div className=\"center-box\">\n                    {/* maker */}\n                    <DropdownButton id=\"dropdown-brand\" title={selectedCar.make} onSelect={getModel} className=\"custom-dropdown\">\n                        { carsAllYear && carsAllYear.map((maker, index) =>{\n                            const titleCase = maker.replace(/\\w\\S*/g, function(txt){return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();});\n                            return(\n                                <Fragment key={maker +index}>\n                                    <Dropdown.Item  eventKey={titleCase} >\n                                   \n                                        <img src={require(`../assets/maker_logos/${titleCase}_Logo.png`).default} alt={titleCase} loading=\"lazy\" className=\"maker-img\" /> \n                                    \n                                    {titleCase}\n                                    </Dropdown.Item>\n                                </Fragment>\n                            )\n                        })}\n                    </DropdownButton>\n                    </div>\n                    \n                    <div className=\"center-box\">\n                    {/* model */}\n                        <DropdownButton id=\"dropdown-year\" title={selectedCar.model} onSelect={filterByModel} className=\"dropdown-middle\">\n                            {modelName && modelName.map((model, index) =>{\n                                // const titleCase = model.replace(/\\w\\S*/g, function(txt){return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();})\n                                return(\n                                    <Fragment key={model +index}>\n                                        <Dropdown.Item eventKey={model} >{model}</Dropdown.Item>\n                                    </Fragment>\n                                )\n                            })}\n                        </DropdownButton>\n                    </div>\n                    <div className=\"center-box\">\n                    {/* year */}\n                        <DropdownButton id=\"dropdown-model\" title={selectedCar.year} onSelect={filterByYear}>\n                            {carYearArr && carYearArr.map(year =>{\n                                const uuid = uuidv4()\n                                return(\n                                    <Fragment key={uuid} >\n                                        <Dropdown.Item eventKey={year} >{year}</Dropdown.Item>\n                                    </Fragment>\n                                )\n                            })}\n                        </DropdownButton>\n                    </div>\n                    <div className=\"center-box\">\n                        <DropdownButton id=\"dropdown-type\" title={selectedCar.type} onSelect={filterByType} >\n                            { carTypeArr && carTypeArr.map((type, index) =>{\n                                return(\n                                    <Fragment key={type +index}>\n                                        <Dropdown.Item eventKey={type} >{type}</Dropdown.Item>\n                                    </Fragment>\n                                )\n                            })}\n                        </DropdownButton>\n                    </div>\n                    \n                    <div className=\"center-box\">\n                        <Button className=\"search-btn\" onClick={goStatsPage} disabled={disabled}>Search</Button>\n                    </div>\n                    \n                </div>\n                <div className=\"spacer-4rem\"></div>\n                <CarStatsListsMake />\n                <div className=\"spacer-2rem\"></div>\n                <div className=\"ad-on-search\">\n                    <div id=\"unit-1620778820240\" class=\"tmsads\"></div>\n                </div>\n            </div>\n            \n        </Layout>\n    )\n}\n\nexport default CarSearch","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Giveaways.js",["400"],"import React from 'react'\nimport {Helmet} from \"react-helmet\"\nimport Layout from './Layout/Layout'\nimport { Row  } from 'react-bootstrap'\nimport './giveaways.scss'\nimport { giveAwaysArr } from './giveAwayData'\nimport { openLoginModal, attachMsg, swapToSignup } from '../store/actions/authActions'\nimport { connect } from 'react-redux'\nimport loadable from '@loadable/component'\n\n// import {\n//     EmailShareButton,\n//     FacebookShareButton,\n//     TwitterShareButton,\n//   } from \"react-share\";\n// import short from 'short-uuid'\n// import { FacebookShareCount } from \"react-share\";\n\n// import facebookIcon from '../assets/global/Facebook-icon.svg'\n// import twitterIcon from '../assets/global/Twitter-icon.svg'\n// import emailIcon from '../assets/global/Messages-icon.svg'\nconst GiveawayCount = loadable(() => import('./GiveawayCount'))\n\nconst Giveaways = (props) =>{\n    const sharePathname = props.location.pathname\n    const shareUrl = `https://thesmokeshow.com/${sharePathname}`\n    let today = new Date()\n    const timeISO = today.toISOString()\n    let published = new Date('2021-03-01')\n    const publishedISO = published.toISOString()\n    const slug = 'giveaways'\n    const seoDesc = 'Learn about active giveaways in the car community!  Find out how to win prizes from influencers. Only confirmed and verified info is found here, never fakes!'\n    return(\n        <Layout>\n        <Helmet>\n            <meta charSet=\"utf-8\" />\n            <title>Giveaways | The Smoke Show</title>\n            <meta name=\"description\" content={seoDesc} />\n            \n            <link rel=\"canonical\" href=\"https://thesmokeshow.com/giveaways\" />\n            <script type=\"application/ld+json\">\n            {`\n                    {\n                        \"@context\": \"http://schema.org\",\n                        \"@graph\": [{\"@type\":\"WebSite\",\"@id\":\"https://thesmokeshow.com/#website\",\n                        \"url\":\"https://thesmokeshow.com/\",\n                        \"name\":\"The Smoke Show\",\n                        \"description\":\"The Smoke Show is a home for auto fans, built by auto fans. The best place to watch Car Vloggers and find all Car Info. Learn all about giveaways and buy swag!\",\n                        \"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":\"https://thesmokeshow.com/search?s={search_term_string}\",\"query-input\":\"required name=search_term_string\"}],\n                        \"inLanguage\":\"en\"},\n                        {\"@type\": \"WebPage\",\n                        \"@id\": \"https://thesmokeshow.com/giveaways/#webpage\", \"url\": \"https://thesmokeshow.com/giveaways/\", \"name\": \"Giveaways | The Smoke Show\",\"isPartOf\":{\"@id\":\"https://thesmokeshow.com/#website\"}, \"datePublished\": \"${publishedISO}\", \"dateModified\": \"${timeISO}\", \"description\": \"${seoDesc}\", \"breadcrumb\":{\"@id\":\"https://thesmokeshow.com/giveaways/#breadcrumb\"},\"inLanguage\":\"en\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https://thesmokeshow.com/giveaways/\"]}]},\n                        {\"@type\":\"BreadcrumbList\",\"@id\":\"https://thesmokeshow.com/#breadcrumb\",\n                        \"itemListElement\":[{\n                            \"@type\":\"ListItem\",\"position\":1,\n                            \"item\":{\"@type\":\"WebPage\",\"@id\":\"https://thesmokeshow.com/\",\"url\":\"https://thesmokeshow.com/\",\"name\":\"Home\"}\n                            },\n                            {\n                                \"@type\":\"ListItem\",\n                                \"position\":2,\n                                \"item\":{\"@type\":\"WebPage\",\"@id\":\"https://thesmokeshow.com/giveaways/\",\"url\":\"https://thesmokeshow.com/giveaways/\",\"name\":\"Giveaways\"}\n                            }\n                            ]}\n                        ]\n                    }\n                `}\n        </script>\n        </Helmet>\n            <div className=\"spacer-4rem\"></div>\n            <div className=\"main-wrapper\" style={{minHeight: 'calc(100vh - 21rem)'}}>\n            <h2 className=\"title\">Giveaways</h2>\n            <div className=\"notice-div\">\n            All active giveaways in the Car Community.<br/>\n            Only VERIFIED and CONFIRMED events from influencers will be found here.\n            </div>\n                <Row>\n                <GiveawayCount data={giveAwaysArr[0]} shareUrl={shareUrl}  />\n                {/* { giveAwaysArr.map(data =>{\n                    const unique = short.generate()\n                    return(\n                        <Col sm={6} key={unique}>\n                            <Card className=\"givaways-card\">\n                                <Card.Img variant=\"top\" src={data.imgUrl} />\n                                    \n                                <Card.Body>\n                                    <Card.Title className=\"card-title\">\n                                    <div className=\"card-title-text\">\n                                        <div className=\"card-left\"></div>\n                                        <strong>{data.item}</strong>{' '} giveaway\n                                    \n                                    <div className=\"share-btn-wrapper\">\n                                        <TwitterShareButton\n                                            url={shareUrl}\n                                            quote={data.item}\n                                            className=\"social-share-btn\"\n                                        >\n                                            <img src={twitterIcon} alt=\"share via facebook\" className=\"share-icon\"/>\n                                        </TwitterShareButton>\n\n                                        <div className=\"link-counter\">\n                                     \n                                        </div>\n                                        <FacebookShareButton\n                                            url={shareUrl}\n                                            quote={data.item}\n                                            className=\"social-share-btn\"\n                                        >\n                                            <img src={facebookIcon} alt=\"share via facebook\" className=\"share-icon\"/>\n                                        </FacebookShareButton>\n\n                                        <div className=\"link-counter\">\n                                            <FacebookShareCount url={shareUrl} className=\"\">\n                                            {count => count}\n                                            </FacebookShareCount>\n                                        </div>\n                                        <EmailShareButton\n                                            url={shareUrl}\n                                            quote={data.item}\n                                            className=\"social-share-btn\"\n                                        >\n                                            <img src={emailIcon} alt=\"share via email\" className=\"share-icon\"/>\n                                        </EmailShareButton>\n                                        <div className=\"link-counter\">\n                                         \n                                        </div>\n                                    </div>\n                                    </div>\n                                    <p>by {data.influencer} {' '} \n                                    <span className=\"card-mute-text\">| {data.entries.length} {' '} entries</span></p>\n                                    \n                                    </Card.Title>\n                                    <Card.Text>\n                                    <p>\n                                        <strong>How to enter:</strong><br/> {data.howTo}\n                                    </p><br/>\n                                    <p>\n                                        <strong>Details:</strong> <br/>{data.details}\n                                    </p>\n                                    </Card.Text>\n                                    <div className=\"counter-div\">\n                                        <div className=\"counter-wrapper\">\n                                            <div className=\"ends-in\">Ends in:</div>\n                                            <div className=\"counter-box\">\n                                                <span className=\"timer-num\">10 </span>\n                                                <span className=\"unit-div\">days</span>\n                                            </div>\n                                            <div className=\"counter-box\">\n                                                <span className=\"timer-num\">12</span>\n                                                <span className=\"unit-div\">hours</span>\n                                            </div>\n                                            <div className=\"counter-box\">\n                                                <span className=\"timer-num\">21</span>\n                                                <span className=\"unit-div\">minutes</span>\n                                            </div>\n                                            <div className=\"counter-box\">\n                                                <span className=\"timer-num\">13</span>\n                                                <span className=\"unit-div\">seconds</span>\n                                            </div>\n                                        </div>\n                                        <div className=\"padding-btn\">\n                                            <Button className=\"login-btn \">Entry now</Button>\n                                        </div>\n                                    </div>\n                                    \n                                </Card.Body>\n                            </Card>\n                        </Col>\n                        )\n                })} */}\n                    \n                </Row>\n            </div>\n\n        </Layout>\n    )\n}\nconst mapDispatchToProps = (dispatch)=>{\n    return{\n        openLoginModal: (state) => dispatch(openLoginModal(state)),\n        attachMsg: (msg)=> dispatch(attachMsg(msg)),\n        swapToSignup: (state) => dispatch(swapToSignup(state))\n    }\n}\nconst mapStateToProps = (state) => {\n    //syntax is propName: state.key of combineReducer.key\n    return{\n        isLoggedIn: state.auth.isLoggedIn\n    }\n  }\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Giveaways)","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/CarStats.js",["401","402","403","404"],"import React, { useState, Fragment, useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport Layout from './Layout/Layout'\nimport { Button} from 'react-bootstrap'\nimport './carStats.scss'\n\nimport { Helmet } from 'react-helmet'\nimport { switchTabs } from './functionsStats'\nimport loadable from '@loadable/component'\n\nconst CarStatsCard = loadable(() => import('./CarStatsCard'))\n\n\nconst CarStats = (props) =>{\n    const statsArr = ['Main Stats', 'Engine', 'Measurements', 'Comfort & Convenience', 'Drive Train', 'Suspension', 'Color', 'Warranty']\n    const [carImages, setCarImages] = useState([])\n    const [carData, setCarData] = useState()\n    let searchedCars = []\n\n    const handleTabClick = (tab, index) =>{\n        let tempCarArr = [...carData]\n       \n       tempCarArr[index].activeTab = tab\n       setCarData(tempCarArr)\n    }\n    \n\n    useEffect(() => {\n        if(props.history.location.cars){\n            searchedCars = props.history.location.cars.map(item => ({...item, tabs: statsArr, activeTab: 'Main Stats'}))\n            setCarData(searchedCars)\n        }else{props.history.push('/car-search')}\n    }, [])\n    return(\n        <Layout>\n            <Helmet encodeSpecialCharacters={true}>\n                {/* <title>{carData && carData[0].make}, {carData && carData[0].year}, {carData && carData[0].model} Specs, Reviews, and Pricing | The Smoke Show</title> */}\n                <title>{typeof(carData) !== 'undefined' && `${carData[0].make}, ${carData[0].year}, ${carData[0].model}, Statistics, Specs`}</title>\n                <script src=\"https://lib.tashop.co/the_smoke_show/adengine.js\" async data-tmsclient=\"The Smoke Show\" data-layout=\"searches\" data-debug=\"true\"></script>\n                <script>{`window.TAS = window.TAS.reload() || { cmd: [] }`}</script>\n            </Helmet>\n            <div className=\"main-wrapper stats-container\">\n                <div className=\"spacer-4rem\"></div>\n                {carData && carData.map((car, index) =>{\n                    car.tabs = statsArr\n\n                    let carImg;\n                    if(carImages[0]){\n                        carImg = carImages[0].link\n                    }else{\n                        carImg = 'https://smoke-show.s3.amazonaws.com/car-photos/Ferrari-F8_Spider-2020-1280-01.jpg'\n                        }\n                    return(\n                        <CarStatsCard car={car} index={index} handleTabClick={handleTabClick} switchTabs={switchTabs} />\n                    )\n                })\n                }\n                <div className=\"spacer-4rem\"></div>\n                <div className=\"ad-on-search\">\n                    <div id=\"unit-1620778820240\" class=\"tmsads\"></div>\n                </div>\n                <div className=\"spacer-4rem\"></div>\n                <Link to=\"/car-search\">\n                    <Button className=\"login-btn\">Start New Search</Button>\n                </Link>\n                \n            </div>\n            \n        </Layout>\n    )\n}\n\nexport default CarStats","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/NotFoundPage.js",[],"/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/CarStatsVideo.js",["405","406","407","408","409"],"import React, { useState, useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport Layout from './Layout/Layout'\nimport { Row, Col, Button} from 'react-bootstrap'\nimport './carStats.scss'\nimport * as Realm from \"realm-web\"\nimport jwt from 'jsonwebtoken'\n\nimport loadable from '@loadable/component'\nimport beforeIcon from '../assets/global/before.svg'\nimport moment from 'moment'\nimport { switchTabs } from './functionsStats'\n\nimport { Helmet } from 'react-helmet'\n\nconst CarStatsCard = loadable(() => import('./CarStatsCard'))\nconst VideoDiv = loadable(()=> import('./VideoDiv'))\n\nconst CarStatsVideo = (props) =>{\n    const statsArr = ['Main Stats', 'Engine', 'Measurements', 'Comfort & Convenience', 'Drive Train', 'Suspension', 'Color', 'Warranty']\n    const [carImages, setCarImages] = useState([])\n    const [carData, setCarData] = useState()\n    const [original, setOriginal] = useState(null)\n    const [videos, setVideos] = useState(null)\n    const appConfig = {\n        id: process.env.REACT_APP_REALM_APP_ID,\n        // timeout: 10000, \n        // timeout in number of milliseconds\n      };\n    const app = new Realm.App(appConfig);\n    const carDataId = props.match.params.id\n    const carMake = props.match.params.make\n    const carModel = props.match.params.model\n    const carYear = props.match.params.year\n    let today = new Date()\n    const timeISO = today.toISOString()\n    let published = new Date('2021-03-01')\n    const publishedISO = published.toISOString()\n    const s3BaseUrl = 'https://s3.amazonaws.com/smokeshow.users/'\n\n    const handleTabClick = (tab, index) =>{\n       let tempCarArr = [...carData]\n       \n       tempCarArr[index].activeTab = tab\n       setCarData(tempCarArr)\n    }\n    const handleTabClickOriginal = (tab, index) =>{\n        setOriginal({...original, activeTab: tab})\n    }\n    \n    const loginCheck = () =>{\n        const tokenUser = sessionStorage.getItem('session_user')\n        if(tokenUser){\n            jwt.verify(tokenUser, process.env.REACT_APP_JWT_SECRET, (err, decoded)=>{\n                if(err){\n                    const credentials = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTH_PUBLIC_VIEW);\n                    getCarData(credentials)\n                }else{\n                    getCarData(decoded.cre)\n                }\n            })\n        }else{\n            const credentials = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTH_PUBLIC_VIEW)\n            getCarData(credentials)\n\n        }\n\n    }\n    const getCarData = async (cre) =>{\n        const filterMany = {make: carMake, year: Number(carYear), model: carModel}\n        \n        try {\n            await app.logIn(cre).then(async user =>{\n                const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n                const collectionCars = mongo.db(\"smoke-show\").collection(\"cars\")\n                const collectionYoutube = mongo.db(\"smoke-show\").collection(\"youtube-videos\")\n                let tempArr = []\n      \n                const relatedCars = await collectionCars.find(filterMany)\n                relatedCars.map(car =>{\n                    car.tabs= statsArr \n                    car.activeTab = 'Main Stats'\n                    if(car._id.toString() === carDataId){\n                        setOriginal(car)\n                    }else{\n                        tempArr.push(car)\n                    }\n                })\n                setCarData(tempArr)\n                const filterVido = {carDataId: carDataId}\n                const relatedVideos = await collectionYoutube.find(filterVido)\n                if(relatedVideos){\n                    setVideos(relatedVideos)\n                }else{\n                    setVideos(null)\n                }\n            })\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    useEffect(() => {\n       loginCheck()\n\n    }, [])\n    return(\n        <Layout>\n            <Helmet  >\n \n                <title>{typeof(carMake) !== 'undefined' && `${carMake.toUpperCase()}, ${carYear}, ${carModel.toUpperCase()} all types car statictics | The Smoke Show`}</title>\n                <meta name=\"description\" content={`${carMake.toUpperCase()} ${carYear} ${carModel.toUpperCase()} car statistics | engines, price, warranty, color, and more information`} />\n                \n                <link rel=\"canonical\" href={`https://thesmokeshow.com/car-stats/${carMake}/${carYear}/${carModel}/${carDataId}`} />\n\n                <script src=\"https://lib.tashop.co/the_smoke_show/adengine.js\" async data-tmsclient=\"The Smoke Show\" data-layout=\"searches\" data-debug=\"true\"></script>\n                <script>{`window.TAS = window.TAS.reload() || { cmd: [] }`}</script>\n\n                 <script type=\"application/ld+json\">\n            {`\n                    {\n                        \"@context\": \"http://schema.org\",\n                        \"@graph\": [{\"@type\":\"WebSite\",\"@id\":\"https://thesmokeshow.com/#website\",\n                        \"url\":\"https://thesmokeshow.com/\",\n                        \"name\":\"The Smoke Show\",\n                        \"description\":\"\",\n                        \"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":\"https://thesmokeshow.com/search?s={search_term_string}\",\"query-input\":\"required name=search_term_string\"}],\n                        \"inLanguage\":\"en\"},\n                        {\"@type\": \"WebPage\",\n                        \"@id\": \"https://thesmokeshow.com/giveaways/#webpage\", \"url\": \"https://thesmokeshow.com/giveaways/\", \"name\": \"Giveaways | The Smoke Show\",\"isPartOf\":{\"@id\":\"https://thesmokeshow.com/#website\"}, \"datePublished\": \"${publishedISO}\", \"dateModified\": \"${timeISO}\", \"description\": \"${carMake.toUpperCase()} ${carYear} ${carModel.toUpperCase()} car statistics | engines, price, warranty, colors, and more information.\", \"breadcrumb\":{\"@id\":\"https://thesmokeshow.com/car-stats/${carMake}/${carYear}/${carModel}/${carDataId}/#breadcrumb\"},\"inLanguage\":\"en\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https://thesmokeshow.com/car-stats/${carMake}/${carYear}/${carModel}/${carDataId}/\"]}]},\n                        {\"@type\":\"BreadcrumbList\",\"@id\":\"https://thesmokeshow.com/#breadcrumb\",\n                        \"itemListElement\":[{\n                            \"@type\":\"ListItem\",\"position\":1,\n                            \"item\":{\"@type\":\"WebPage\",\"@id\":\"https://thesmokeshow.com/\",\"url\":\"https://thesmokeshow.com/\",\"name\":\"Home\"}\n                            },\n                            {\n                                \"@type\":\"ListItem\",\n                                \"position\":2,\n                                \"item\":{\"@type\":\"WebPage\",\"@id\":\"https://thesmokeshow.com/car-search/\",\"url\":\"https://thesmokeshow.com/car-search/\",\"name\":\"Car statistics search\"}\n                            },\n                            {\n                                \"@type\":\"ListItem\",\n                                \"position\":3,\n                                \"item\":{\"@type\":\"WebPage\",\"@id\":\"https://thesmokeshow.com/car-stats/${carMake}\",\"url\":\"https://thesmokeshow.com/car-stats/${carMake}\",\"name\":\"Search statistics for ${carMake} cars\"}\n                            },\n                            {\n                                \"@type\":\"ListItem\",\n                                \"position\":4,\n                                \"item\":{\"@type\":\"WebPage\",\"@id\":\"https://thesmokeshow.com/car-stats/${carMake}/${carYear}\",\"url\":\"https://thesmokeshow.com/car-stats/${carMake.toUpperCase()}/${carYear}\",\"name\":\"Search statistics for ${carMake.toUpperCase()} cars released in ${carYear}\"}\n                            },\n                            {\n                                \"@type\":\"ListItem\",\n                                \"position\":5,\n                                \"item\":{\"@type\":\"WebPage\",\"@id\":\"https://thesmokeshow.com/car-stats/${carMake}/${carYear}\",\"url\":\"https://thesmokeshow.com/car-stats/${carMake}/${carYear}/${carModel}\",\"name\":\"See all statistics for ${carMake} ${carModel}cars released in ${carYear}\"}\n                            }\n                            ]}\n                        ]\n                    }\n                `}\n        </script>\n            </Helmet>\n            <div className=\"main-wrapper stats-container\" style={{minHeight: 'calc(100vh - 21rem'}}>\n                <div className=\"spacer-4rem\"></div>\n                <div onClick={()=>props.history.goBack()} className=\"goback-btn\">\n                    <img src={beforeIcon} alt=\"go back\" width=\"24\"/>Go Back\n                </div>\n                <div className=\"spacer-2rem\"></div>\n                {original && <CarStatsCard car={original} index=\"0\" handleTabClick={handleTabClickOriginal} switchTabs={switchTabs} />}\n                \n                <div className=\"spacer-4rem\"></div>\n                \n                <h2  style={{ marginBottom: 0, borderBottom: '1px solid gray', borderTop: '1px solid gray'}} >Related car data</h2>\n                <div className=\"spacer-2rem\"></div>\n                {carData ? carData.map((car, index) =>{\n                    car.tabs = statsArr\n                    {/* console.log('check', carImages) */}\n                    let carImg;\n                    if(carImages[0]){\n                        carImg = carImages[0].link\n                    }else{\n                        carImg = 'https://smoke-show.s3.amazonaws.com/car-photos/Ferrari-F8_Spider-2020-1280-01.jpg'\n                        }\n                    return(\n                        <CarStatsCard car={car} index={index} handleTabClick={handleTabClick} switchTabs={switchTabs} />\n                    )\n                }) : <p>No related cars</p>\n                }\n                <h2  style={{ marginBottom: 0, borderBottom: '1px solid gray', borderTop: '1px solid gray'}} >Related Vlogs</h2>\n                <div className=\"spacer-1rem\"></div>\n                <Row>\n                    {videos && videos.map(video =>{\n                        const date = moment(video.snippet.publishedAt).fromNow()\n                        return(\n                            <Col key={video.videoId}>\n                                <VideoDiv video={video} videoId={video.videoId} />\n                                <h3 style={{marginTop:'10px'}} className=\"video-title\">{video.snippet.title}</h3>\n                                {/* <small>{date}</small> */}\n                                <Row>\n                                    <div className=\"col-12\">\n                                        <Link to={`/influencer/${video.userId}`}>\n                                            <img src={`${s3BaseUrl}${video.userId}/profile/thumbnail`} className=\"creator-profile-pic\" alt={`Vlogger ${video.snippet.channelTitle}`}  />\n                                            \n                                        </Link>\n                                    \n                                        <div className=\"creator-name\" style={{display: 'inline-flex', height: '100%'}}>\n                                            <span style={{margin: 'auto auto auto 5px'}}>\n                                            <Link to={`/influencer/${video.userId}`}>\n                                            {video.snippet.channelTitle} \n                                            </Link>\n                                            \n                                            <small style={{marginLeft: '1rem'}}>{date}</small>\n                                            </span>\n                                            \n                                        </div>\n                                    </div>\n                                </Row>\n                            </Col>\n                        )\n                        \n                    })\n                    }\n                </Row>\n                <div className=\"spacer-4rem\"></div>\n                <div className=\"ad-on-search\" style={{minHeight: '90px', marginBottom: '1rem'}}>\n                    <div id=\"unit-1620778820240\" class=\"tmsads\"></div>\n                </div>\n                <Link to=\"/car-search\">\n                    <Button className=\"login-btn\">Search other cars</Button>\n                </Link>\n                \n            </div>\n            \n        </Layout>\n    )\n}\n\nexport default CarStatsVideo","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Terms.js",[],"/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/AboutPage.js",[],"/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/CarStatsListsYear.js",["410"],"import React, { useEffect, useState } from 'react'\nimport Layout from './Layout/Layout'\nimport { Container, Row, Col } from 'react-bootstrap'\nimport { Link } from 'react-router-dom'\nimport * as Realm from \"realm-web\"\nimport jwt from 'jsonwebtoken'\nimport { Helmet } from \"react-helmet\"\nimport { jsonLD2 } from './jsonLD'\n\nconst CarStatsListsYear = (props) =>{\n    const makeName = props.match.params.make\n    let title;\n    if(makeName.includes(\"-\")){\n        let splitted = makeName.split(\"-\")\n        let temp =[]\n        for(let i=0; i < splitted.length; i++){\n            temp.push(splitted[i].charAt(0).toUpperCase() + splitted[i].slice(1))\n        }\n        title = temp.join(\" \")\n    }else{\n        let str = makeName\n        title = str.charAt(0).toUpperCase() + str.slice(1)\n    }\n    let today = new Date()\n    const timeISO = today.toISOString()\n    let published = new Date('2021-03-01')\n    const publishedISO = published.toISOString()\n    const slug = `car-stats/${makeName}`\n    const pageName = `Search Car Statistics for ${makeName}`\n    const dataLD = { slug, pageName, publishedISO, timeISO }\n\n    const [years, setYears] = useState([])\n    const appConfig = {\n        id: process.env.REACT_APP_REALM_APP_ID,\n        // timeout: 10000, \n        // timeout in number of milliseconds\n        };\n    const app = new Realm.App(appConfig);\n    const loginCheck = () =>{\n        const tokenUser = sessionStorage.getItem('session_user')\n        if(tokenUser){\n            jwt.verify(tokenUser, process.env.REACT_APP_JWT_SECRET, (err, decoded)=>{\n                if(err){\n                    const credentials = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTH_PUBLIC_VIEW);\n                    return credentials\n                }else{\n                    return decoded.cre\n                }\n            })\n        }else{\n            const credentials = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTH_PUBLIC_VIEW);\n            return credentials\n        }\n    }\n    const getData = async (cre) =>{\n        try {\n            await app.logIn(cre).then(async user =>{\n         \n                const unique = await user.functions.yearsFromMake(makeName)\n        \n                unique.sort((a, b) => b - a)\n                setYears(unique)\n             \n            })\n        } catch (error) {\n            \n        }\n    }\n\n    useEffect(() => {\n  \n        const cre = loginCheck()\n        getData(cre)\n    }, [])\n    return(\n        <Layout>\n            <Helmet>\n                <title>Car Statistics Search for {title} | The Smoke Show</title>\n                <meta name=\"description\" content={`Search ${title.toUpperCase()} car statistics | engines, price, warranty, color, and more information`} />\n                <script src=\"https://lib.tashop.co/the_smoke_show/adengine.js\" async data-tmsclient=\"The Smoke Show\" data-layout=\"searches\" data-debug=\"true\"></script>\n                <script>{`window.TAS = window.TAS.reload() || { cmd: [] }`}</script>\n                <script type=\"application/ld+json\">{jsonLD2(dataLD)}</script>\n            </Helmet>\n            <div className=\"spacer-4rem\"></div>\n            <div className=\"main-wrapper\" style={{minHeight: 'calc(100vh - 22rem)'}}>\n            <h1 className=\"title\">{title} car data year list</h1>\n            <div className=\"spacer-1rem\"></div>\n            <Container>\n            <Row className=\"list-container\">\n                { years && years.map((year) =>{\n                    return(\n                        <Col sm={4} className=\"list-pd\" key={year} >\n                            <Link to={`/car-stats/${makeName}/${year}`} >\n                            {year}\n                            </Link>\n                        </Col>\n                    )\n\n                })}\n                </Row>\n            </Container>\n            </div>\n            <div className=\"ad-on-search\">\n                <div id=\"unit-1620778820240\" class=\"tmsads\"></div>\n            </div>\n        </Layout>\n    )\n}\n\nexport default CarStatsListsYear\n\n\n\n","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/CarStatsListsModel.js",["411"],"import React, { useEffect, useState } from 'react'\nimport Layout from './Layout/Layout'\nimport { Container, Row, Col } from 'react-bootstrap'\nimport { Link } from 'react-router-dom'\nimport * as Realm from \"realm-web\"\nimport jwt from 'jsonwebtoken'\nimport { Helmet } from 'react-helmet'\nimport { jsonLD3 } from './jsonLD'\n\nconst CarStatsListsModel = (props) =>{\n    const makeName = props.match.params.make\n    const carYear = props.match.params.year\n    let title;\n    if(makeName.includes(\"-\")){\n        let splitted = makeName.split(\"-\")\n        let temp =[]\n        for(let i=0; i < splitted.length; i++){\n            temp.push(splitted[i].charAt(0).toUpperCase() + splitted[i].slice(1))\n        }\n        title = temp.join(\" \")\n    }else{\n        let str = makeName\n        title = str.charAt(0).toUpperCase() + str.slice(1)\n    }\n    let today = new Date()\n    const timeISO = today.toISOString()\n    let published = new Date('2021-03-01')\n    const publishedISO = published.toISOString()\n    const slug = `car-stats/${makeName}/${carYear}`\n    const list2 = `car-stats/${makeName}`\n    const list2Name = `List of car model names from ${title} year ${carYear}`\n    const list3 = carYear\n    const pageName = `Search Car Statistics for ${makeName} ${carYear}`\n    const dataLD = {\n        slug,\n        pageName,\n        publishedISO,\n        timeISO,\n        list2,\n        list3,\n        list2Name\n    }\n    const [modelNames, setModelNames] = useState([])\n    const appConfig = {\n        id: process.env.REACT_APP_REALM_APP_ID,\n        // timeout: 10000, \n        // timeout in number of milliseconds\n        };\n    const app = new Realm.App(appConfig);\n    const loginCheck = () =>{\n        const tokenUser = sessionStorage.getItem('session_user')\n        if(tokenUser){\n            jwt.verify(tokenUser, process.env.REACT_APP_JWT_SECRET, (err, decoded)=>{\n                if(err){\n                    const credentials = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTH_PUBLIC_VIEW);\n                    return credentials\n                }else{\n                    return decoded.cre\n                }\n            })\n        }else{\n            const credentials = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTH_PUBLIC_VIEW);\n            return credentials\n        }\n    }\n    const getData = async (cre) =>{\n        try {\n            await app.logIn(cre).then(async user =>{\n                let unique = await user.functions.modelsFromMakeYear(makeName, Number(carYear))\n                setModelNames(unique.sort())\n            })\n        } catch (error) {\n            \n        }\n    }\n\n    useEffect(() => {\n        const cre = loginCheck()\n        getData(cre)\n    }, [])\n    return(\n        <Layout>\n            <Helmet>\n                <title>Car Statistics Search for {title} year {carYear} | The Smoke Show</title>\n                <script src=\"https://lib.tashop.co/the_smoke_show/adengine.js\" async data-tmsclient=\"The Smoke Show\" data-layout=\"searches\" data-debug=\"true\"></script>\n                <script>{`window.TAS = window.TAS.reload() || { cmd: [] }`}</script>\n                <script type=\"application/ld+json\">{jsonLD3(dataLD)}</script>\n            </Helmet>\n            <div className=\"spacer-4rem\"></div>\n            <div className=\"main-wrapper\" style={{minHeight: 'calc(100vh - 22rem)'}}>\n            <h1 className=\"title\">{title} {carYear} car data model list</h1>\n            <div className=\"spacer-2rem\"></div>\n            <Container>\n            <Row className=\"list-container\">\n\n            {modelNames && modelNames.map(model =>{\n                return(\n                    <Col sm={4} className=\"list-pd\" key={model}>\n                        <Link to={`/car-stats/${makeName}/${carYear}/${model}`}>\n                            {model}\n                        </Link>\n                    </Col>\n                )\n            })}\n\n                </Row>\n            </Container>\n            </div>\n            <div className=\"ad-on-search\">\n                <div id=\"unit-1620778820240\" class=\"tmsads\"></div>\n            </div>\n        </Layout>\n    )\n}\n\nexport default CarStatsListsModel\n\n\n\n","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Privacy.js",["412","413"],"import React from 'react'\nimport { Helmet } from \"react-helmet\"\nimport Layout from './Layout/Layout'\nimport { Row, Col } from 'react-bootstrap'\nimport './terms.scss'\nconst Privacy = () =>{\n    return(\n        <Layout>\n            <Helmet encodeSpecialCharacters={true}>\n                <title>Privacy Policy | The Smoke Show</title>\n                <meta name=\"description\" content=\"Privacy policy for The Smoke Show \" />\n                <link rel=\"canonical\" href=\"https://thesmokeshow.com/privacy-policy\" />\n            </Helmet>\n            <div className=\"spacer-4rem\"></div>\n            <div className=\"main-wrapper\" style={{minHeight: 'calc(100vh - 21rem)'}}>\n                <center>\n                    <h1 className=\"theme-text-color theme-text-p\" >ONLINE PRIVACY POLICY AGREEMENT</h1><br />\n                    \n                </center>\n                \n                <div className=\"terms-wrapper\">\n                    <p>\n                    January 1, 2021\n                    </p>\n                    <p>\n                    The Hoon Group, LLC ( Hoon Group) values its users' privacy. This Privacy Policy (\"Policy\") will help you understand how we collect and use personal information from those who visit our website or make use of our online facilities and services, and what we will and will not do with the information we collect. Our Policy has been designed and created to ensure those affiliated with The Hoon Group, LLC of our commitment and realization of our obligation not only to meet, but to exceed, most existing privacy standards.\n                    </p>\n                    <p>\n                    We reserve the right to make changes to this Policy at any given time. If you want to make sure that you are up to date with the latest changes, we advise you to frequently visit this page. If at any point in time The Hoon Group, LLC decides to make use of any personally identifiable information on file, in a manner vastly different from that which was stated when this information was initially collected, the user or users shall be promptly notified by email. Users at that time shall have the option as to whether to permit the use of their information in this separate manner.\n                    </p>\n                    <p>\n                    This Policy applies to The Hoon Group, LLC and any subsidiary company listed below, and it governs any and all data collection and usage by us. Through the use of http://www.thehoongroup.com and any subsidiary website listed below, you are therefore consenting to the data collection procedures expressed in this Policy.\n                    </p><br />\n                    <Row >\n                    <Col sm={6} className=\"terms-col\">\n                    <center>\n                    <h2 className=\"theme-text-p\">\n                    Subsidiary Company:\n                    </h2><br />\n                    <div className=\"theme-text-p font-12\">The Smoke Show</div>\n                    </center>\n                        \n                    </Col>\n                    <Col sm={6} className=\"terms-col\">\n                    <center>\n                    <h2 className=\"theme-text-p\">\n                    Subsidiary Website:\n                    </h2><br />\n                    <div className=\"theme-text-p font-12\">http://thesmokeshow.com</div>\n                    </center>\n                        \n                    </Col>\n                </Row>\n                <br />\n                <p>\n                Please note that this Policy does not govern the collection and use of information by companies that The Hoon Group, LLCdoes not control, nor by individuals not employed or managed by us. If you visit a website that we mention or link to, be sure to review its privacy policy before providing the site with information. It is highly recommended and suggested that you review the privacy policies and statements of any website you choose to use or frequent to better understand the way in which websites garner, make use of and share the information collected.\n                </p>\n                <div className=\"spacer-2rem\"></div>\n                <div className=\"theme-text-p font-12\">\n                <b>\n                Specifically, this Policy will inform you of the following\n                </b>\n                \n                </div>\n                <div className=\"terms-list\">\n                    <ol type=\"1\" className=\"term-list-style\">\n                        <li>\n                        What personally identifiable information is collected from you through our website&#59;\n                        </li>\n                        <li>\n                        Why we collect personally identifiable information and the legal basis for such collection&#59;\n                        </li>\n                        <li>\n                        How we use the collected information and with whom it may be shared&#59;\n                        </li>\n                        <li>\n                        What choices are available to you regarding the use of your data&#59; and\n                        </li>\n                        <li>\n                        The security procedures in place to protect the misuse of your information.\n                        </li>\n                    </ol>\n                </div>\n                <div className=\"spacer-2rem\"></div>\n                <h2 className=\"theme-text-p\" style={{textDecoration: 'underline'}}>Information We Collect\n                </h2>\n                <p>\n                It is always up to you whether to disclose personally identifiable information to us, although if you elect not to do so, we reserve the right not to register you as a user or provide you with any products or services. This website collects various types of information, such as:\n                </p>\n                <ul className=\"font-12 term-list-style\">\n                    <li>\n                    Voluntarily provided information which may include your name, address, email address, billing and/or credit card information etc. which may be used when you purchase products and/or services and to deliver the services you have requested.\n                    </li>\n                    <li>\n                    Information automatically collected when visiting our website, which may include cookies, third party tracking technologies and server logs\n                    </li>\n                </ul>\n                <p>\n                In addition, The Hoon Group, LLC may have the occasion to collect non-personal anonymous demographic information, such as age, gender, household income, political affiliation, race and religion, as well as the type of browser you are using, IP address, or type of operating system, which will assist us in providing and maintaining superior quality service.\n                </p>\n                <p>\n                The Hoon Group, LLCmay also deem it necessary, from time to time, to follow websites that our users may frequent to gleam what types of services and products may be the most popular to customers or the general public.\n                </p>\n                <p>\n                Please rest assured that this site will only collect personal information that you knowingly and willingly provide to us by way of surveys, completed membership forms, and emails. It is the intent of this site to use personal information only for the purpose for which it was requested, and any additional uses specifically provided for on this Policy.\n                </p>\n                <div className=\"spacer-2rem\"></div>\n                <h2 className=\"theme-text-p\" style={{textDecoration: 'underline'}}>\n                Why We Collect Information and For How Long\n                </h2><br />\n                <p>\n                <b>We are collecting your data for several reasons:</b>\n                </p>\n                \n                <ol className=\"term-list-style\">\n                    <li>\n                    To better understand your needs and provide you with the services you have requested&#59;\n                    </li>\n                    <li>\n                    To fulfill our legitimate interest in improving our services and products&#59;\n                    </li>\n                    <li>\n                    To send you promotional emails containing information we think you may like when we have your consent to do so&#59;\n                    </li>\n                    <li>\n                    To contact you to fill out surveys or participate in other types of market research, when we have your consent to do so&#59;\n                    </li>\n                    <li>\n                    To customize our website according to your online behavior and personal preferences.&#59;\n                    </li>\n                </ol>\n                <p>\n                The data we collect from you will be stored for no longer than necessary. The length of time we retain said information will be determined based upon the following criteria: the length of time your personal information remains relevant; the length of time it is reasonable to keep records to demonstrate that we have fulfilled our duties and obligations; any limitation periods within which claims might be made; any retention periods prescribed by law or recommended by regulators, professional bodies or associations; the type of contract we have with you, the existence of your consent, and our legitimate interest in keeping such information as stated in this Policy.\n                </p>\n                <h2 className=\"theme-text-p\" style={{textDecoration: 'underline'}}>\n                Use of Information Collected\n                </h2>\n                <p>\n                The Hoon Group, LLC may collect and may make use of personal information to assist in the operation of our website and to ensure delivery of the services you need and request. At times, we may find it necessary to use personally identifiable information as a means to keep you informed of other possible products and/or services that may be available to you from http://www.thehoongroup.com and its subsidiaries.\n                </p>\n                <p>\n                The Hoon Group, LLC and its subsidiaries may also be in contact with you with regards to completing surveys and/or research questionnaires related to your opinion of current or potential future services that may be offered.\n                </p>\n                <p>\n                The Hoon Group, LLCuses various third-party social media features including but not limited to YouTube, Google, Facebook, Instagram, Twitter and other interactive programs. These may collect your IP address and require cookies to work properly. These services are governed by the privacy policies of the providers and are not within The Hoon Group, LLC's control.\n                </p>\n                <div className=\"spacer-2rem\"></div>\n                <h2 className=\"theme-text-p\" style={{textDecoration: 'underline'}}>\n                Disclosure of Information\n                </h2>\n                <p>\n                The Hoon Group, LLC may not use or disclose the information provided by you except under the following circumstances:\n                </p>\n                <ul className=\"term-list-style\">\n                    <li>\n                    as necessary to provide services or products you have ordered&#59;\n                    </li>\n                    <li>\n                    in other ways described in this Policy or to which you have otherwise consented&#59;\n                    </li>\n                    <li>\n                    in the aggregate with other information in such a way so that your identity cannot reasonably be determined&#59;\n                    </li>\n                    <li>\n                    as required by law, or in response to a subpoena or search warrant&#59;\n                    </li>\n                    <li>\n                    to outside auditors who have agreed to keep the information confidential&#59;\n                    </li>\n                    <li>\n                    as necessary to enforce the Terms of Service&#59;\n                    </li>\n                    <li>\n                    as necessary to maintain, safeguard and preserve all the rights and property of The Hoon Group, LLC.\n                    </li>\n                </ul>\n                <div className=\"spacer-2rem\"></div>\n                <h2 className=\"theme-text-p\" style={{textDecoration: 'underline'}}>\n                Non-Marketing Purposes\n                </h2>\n                <p>\n                The Hoon Group, LLC greatly respects your privacy. We do maintain and reserve the right to contact you if needed for non-marketing purposes (such as bug alerts, security breaches, account issues, and/or changes in The Hoon Group, LLC products and services). In certain circumstances, we may use our website, newspapers, or other public means to post a notice.\n                </p>\n                <div className=\"spacer-2rem\"></div>\n                <h2 className=\"theme-text-p\" style={{textDecoration: 'underline'}}>\n                Children under the age of 13\n                </h2>\n                <p>\n                The Hoon Group, LLC's website is not directed to, and does not knowingly collect personal\n                identifiable information from, children under the age of thirteen (13). If it is determined that such information has been inadvertently collected on anyone under the age of thirteen (13), we shall immediately take the necessary steps to ensure that such information is deleted from our system's database, or in the alternative, that verifiable parental consent is obtained for the use and storage of such information. Anyone under the age of thirteen (13) must seek and obtain parent or guardian permission to use this website.\n                </p>\n                <h2 className=\"theme-text-p\" style={{textDecoration: 'underline'}}>\n                Unsubscribe or Opt-Out\n                </h2>\n                <p>\n                All users and visitors to our website have the option to discontinue receiving communications from us by way of email or newsletters. To discontinue or unsubscribe from our website please send an email that you wish to unsubscribe to support@thehoongroup.com. If you wish to unsubscribe or opt-out from any third-party websites, you must go to that specific website to unsubscribe or opt-out. The Hoon Group, LLC will continue to adhere to this Policy with respect to any personal information previously collected.\n                </p>\n                <div className=\"spacer-2rem\"></div>\n                <h2 className=\"theme-text-p\" style={{textDecoration: 'underline'}}>\n                Links to Other Websites\n                </h2>\n                <p>\n                Our website does contain links to affiliate and other websites. The Hoon Group, LLC does not claim nor accept responsibility for any privacy policies, practices and/or procedures of other such websites. Therefore, we encourage all users and visitors to be aware when they leave our website and to read the privacy statements of every website that collects personally identifiable information. This Privacy Policy Agreement applies only and solely to the information collected by our website.\n                </p>\n                <div className=\"spacer-2rem\"></div>\n                <h2 className=\"theme-text-p\" style={{textDecoration: 'underline'}}>\n                Notice to European Union Users\n                </h2>\n                <p>\n                The Hoon Group, LLC's operations are located primarily in the United States. If you provide information to us, the information will be transferred out of the European Union (EU) and sent to the United States. (The adequacy decision on the EU-US Privacy became operational on August 1, 2016. This framework protects the fundamental rights of anyone in the EU whose personal data is transferred to the United States for commercial purposes. It allows the free transfer of data to companies that are certified in the US under the Privacy Shield.) By providing personal information to us, you are consenting to its storage and use as described in this Policy.\n                </p>\n                <div className=\"spacer-2rem\"></div>\n                <h2 className=\"theme-text-p\" style={{textDecoration: 'underline'}}>\n                Your Rights as a Data Subject\n                </h2>\n                <p>\n                Under the regulations of the General Data Protection Regulation (\"GDPR\") of the EU you have certain rights as a Data Subject. These rights are as follows&#58;\n                </p>\n                <ul className=\"term-list-style\">\n                    <li>\n                    <b>The right to be informed&#58;</b> this means you have the right to request access to the data we hold about you and we must respond to those requests within one month. You can do this by sending an email to legal@thehoongroup.com.\n                    </li>\n                    <li>\n                    <b>The right of access&#58;</b> this means we must inform you of how we intend to use your personal data and we do this through the terms of this Policy.\n                    </li>\n                    <li>\n                    <b>The right to rectification&#58;</b>this means that if you believe some of the date, we hold is incorrect, you have the right to have it corrected. You can do this by logging into your account with us, or by sending us an email with your request.\n                    </li>\n                    <li>\n                    <b>The right to erasure&#58;</b>this means you can request that the information we hold be deleted, and we will comply unless we have a compelling reason not to, in which case you will be informed of same. You can do this by sending an email to legal@thehoongroup.com.\n                    </li>\n                    <li>\n                    <b>The right to restrict processing&#58;</b>this means you can change your communication preferences or opt-out of certain communications. You can do this by sending an email to support@thehoongroup.com.\n                    </li>\n                    <li>\n                    <b>The right of data portability&#58;</b>this means you can obtain and use the data we hold for your own purposes without explanation. If you wish to request a copy of your information, contact us at legal@thehoongroup.com.\n                    </li>\n                    <li>\n                    <b>The right to object&#58;</b>this means you can file a formal objection with us regarding our use of your information with regard to third parties, or its processing where our legal basis is our legitimate interest in it. To do this, please send an email to legal@thehoongroup.com.\n                    </li>\n                </ul>\n                <p>\n                In addition to the rights above, please rest assured that we will always aim to encrypt and anonymize your personal information whenever possible. We also have protocols in place in the unlikely event that we suffer a data breach and we will contact you if your personal information is ever at risk. For more details regarding our security protections see the section below or visit our website at http://www.thehoongroup.com.\n                </p>\n                <div className=\"spacer-2rem\"></div>\n                <h2 className=\"theme-text-p\" style={{textDecoration: 'underline'}}>\n                Security\n                </h2>\n                <p>\n                The Hoon Group, LLC takes precautions to protect your information. When you submit sensitive information via the website, your information is protected both online and offline. Wherever we collect sensitive information (e.g. credit card information), that information is encrypted and transmitted to us in a secure way. You can verify this by looking for a lock icon in the address bar and looking for \"https\" at the beginning of the address of the webpage.\n                </p>\n                <p>\n                While we use encryption to protect sensitive information transmitted online, we also protect your information offline. Only employees who need the information to perform a specific job (for example, billing or customer service) are granted access to personally identifiable information. The computers and servers in which we store personally identifiable information are kept in a secure environment. This is all done to prevent any loss, misuse, unauthorized access, disclosure or modification of the user's personal information under our control.\n                </p>\n                <p>\n                The company also uses Secure Socket Layer (SSL) for authentication and private communications to build users' trust and confidence in the internet and website use by providing simple and secure access and communication of credit card and personal information. In addition, The Hoon Group, LLC is a licensee of TRUSTe. The website is also secured by VeriSign.\n                </p>\n                <div className=\"spacer-2rem\"></div>\n                <h2 className=\"theme-text-p\" style={{textDecoration: 'underline'}}>\n                Acceptance of Terms\n                </h2>\n                <p>\n                By using this website, you are hereby accepting the terms and conditions stipulated within the Privacy Policy Agreement. If you are not in agreement with our terms and conditions, then you should refrain from further use of our sites. In addition, your continued use of our website following the posting of any updates or changes to our terms and conditions shall mean that you agree and acceptance of such changes.\n                </p>\n                <div className=\"spacer-2rem\"></div>\n                <h2 className=\"theme-text-p\" style={{textDecoration: 'underline'}}>\n                How to Contact Us\n                </h2>\n                <p>\n                If you have any questions or concerns regarding the Privacy Policy Agreement related to our website, please feel free to contact us at the following email, telephone number or mailing address.\n                </p>\n                <p>\n                    <b>Email</b>legal@thehoongroup.com\n                </p>\n                <p>\n                    <b>Mailing Address:</b>\n                </p>\n                <p>\n                The Hoon Group, LLC<br/>\n                2389 Main St. STE. 100<br />\n                Glastonbury, Connecticut<br/>\n                06033\n                </p>\n                <div className=\"spacer-2rem\"></div>\n                <p>\n                The data controller responsible for your personal information for the purposes of GDPR compliance is:\n                </p>\n                <p>Legal Support<br />\n                legal@thehoongroup.com</p>\n                <div className=\"spacer-2rem\"></div>\n                <p>\n                <b>GDPR Disclosure:</b>\n                </p>\n                <p>\n                If you answered \"yes\" to the question Does your website comply with the General Data Protection Regulation (\"GDPR\")? then the Privacy Policy above includes language that is meant to account for such compliance. Nevertheless, in order to be fully compliant with GDPR regulations your company must fulfill other requirements such as: (i) doing an assessment of data processing activities to improve security; (ii) have a data processing agreement with any third party vendors; (iii) appoint a data protection officer for the company to monitor GDPR compliance; (iv) designate a representative based in the EU under certain circumstances; and (v) have a protocol in place to handle a potential data breach. For more details on how to make sure your company is fully compliant with GDPR, please visit the official website at \n                <a href=\"https://gdpr.eu\" target=\"_blank\">\n                https://gdpr.eu </a>\n                . FormSwift and its subsidiaries are in no way responsible for determining whether or not your company is in fact compliant with GDPR and takes no responsibility for the use you make of this Privacy Policy or for any potential liability your company may face in relation to any GDPR compliance issues.\n                </p>\n                <div className=\"spacer-2rem\"></div>\n                <p>\n                <b>COPPA Compliance Disclosure:</b>\n                </p>\n                <p>\n                This Privacy Policy presumes that your website is not directed at children under the age of 13 and does not knowingly collect personal identifiable information from them or allow others to do the same through your site. If this is not true for your website or online service and you do collect such information (or allow others to do so), please be aware that you must be compliant with all COPPA regulations and guidelines in order to avoid violations which could lead to law enforcement actions, including civil penalties.\n                </p>\n                <p>\n                In order to be fully compliant with COPPA your website or online service must fulfill other requirements such as: (i) posting a privacy policy which describes not only your practices, but also the practices of any others collecting personal information on your site or service — for example, plug-ins or ad networks; (ii) include a prominent link to your privacy policy anywhere you collect personal information from children; (iii) include a description of parental rights (e.g. that you won't require a child to disclose more information than is reasonably necessary, that they can review their child's personal information, direct you to delete it, and refuse to allow any further collection or use of the child's information, and the procedures to exercise their rights); (iv) give parents \"direct notice\" of your information practices before collecting information from their children; and (v) obtain the parents' \"verifiable consent\" before collecting, using or disclosing personal information from a child. For more information on the definition of these terms and how to make sure your website or online service is fully compliant with COPPA please visit \n                <a href=\"https://www.ftc.gov/tips-advice/business-center/guidance/childrens-online-privacy-protection-rule-six-step-compliance\" target=\"_blank\">\n                https://www.ftc.gov/tips-advice/business-center/guidance/childrens-online-privacy-protection-rule-six-step-compliance\n                </a>.\n                FormSwift and its subsidiaries are in no way responsible for determining whether or not your company is in fact compliant with COPPA and takes no responsibility for the use you make of this Privacy Policy or for any potential liability your company may face in relation to any COPPA compliance issues.\n                </p>\n                </div>\n              \n            </div>\n        </Layout>\n    )\n}\n\nexport default Privacy","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Influencer/Swagg.js",["414","415","416"],"import React, { Fragment, useState, useEffect } from 'react'\n// import { Link } from 'react-router-dom'\nimport Layout from '../Layout/Layout'\nimport { Helmet } from \"react-helmet\"\nimport * as Realm from \"realm-web\"\nimport SubNav from './SubNav'\nimport { Row, Col } from 'react-bootstrap'\nimport './social.scss'\nimport teeSpringIcon from '../../assets/swagg/teespring-logo.jpg'\nimport printfulIcon from '../../assets/swagg/printful.jpg'\nimport { getInfluencer }from '../../store/actions/influencerActions'\nimport jwt from 'jsonwebtoken'\nimport { connect } from 'react-redux'\n\n\nconst SwaggInfluencer = (props) =>{\n    let today = new Date()\n    const timeISO = today.toISOString()\n    let published = new Date('2021-03-01')\n    const publishedISO = published.toISOString()\n    const slug = 'swagg'\n    let userIdParam;\n    const name = props.match.params.username\n    if(name === 'EddieX'){\n        userIdParam = '60230361f63ff517d4fdad14'\n    }else if(name === 'Lexurious-Fleet'){\n        userIdParam = '602303890ff2832f7d19a2af'\n    }\n\n    const [influencer, setInfluencer] = useState({profileCover: '', profilePic: '', username: '', userId: '', swagg: {teeSpring: '', printful: ''}})\n    // const [formattedFans, setFormattedFans] = useState('')\n    const [noData, setNodata] = useState(false)\n    const appConfig = {\n        id: process.env.REACT_APP_REALM_APP_ID,\n        // timeout: 10000, \n        // timeout in number of milliseconds\n      };\n    const app = new Realm.App(appConfig)\n\n    // const getData = async () =>{\n    //     const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n    //     const collectionInfluencer = mongo.db(\"smoke-show\").collection(\"influencers\")\n    //     const filter = {userId: userIdParam}\n    //     try{\n    //         await collectionInfluencer.findOne(filter).then(user =>{\n    //             setInfluencer(user)\n    //             if(!user.swagg.teeSpring && !user.swagg.printful) setNodata(true)\n    //             if(user.fans > 999){\n    //                 setFormattedFans(Math.sign(user.fans)*((Math.abs(user.fans)/1000).toFixed(1)) + 'k')\n    //             }else{\n    //                 setFormattedFans(Math.sign(user.fans)*Math.abs(user.fans))\n    //             }\n\n    //         })\n    //     }catch(err){ console.log(err) }\n    // }\n    const userLogin =async (cre) =>{\n        try{\n            await app.logIn(cre).then(user =>{\n                // console.log('user logged in', user.id)\n            })\n        }catch(err){console.log(err)}\n   }\n   const loginCheck = () =>{\n    const tokenUser = sessionStorage.getItem('session_user')\n    if(tokenUser){\n        jwt.verify(tokenUser, process.env.REACT_APP_JWT_SECRET, function(err, decoded) {\n            if (err) {\n                // timeout\n                const cre = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTH_PUBLIC_VIEW);\n                userLogin(cre)\n                \n            }else{\n                userLogin(decoded.cre)\n            }\n          });\n        \n    }else{\n        const cre = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTH_PUBLIC_VIEW);\n        userLogin(cre)\n    }\n}\n    useEffect(() => {\n        if(typeof(props.influencerObj.swagg) !== 'undefined'){\n            setInfluencer(props.influencerObj)\n            if(!props.influencerObj.swagg.teeSpring && !props.influencerObj.swagg.printful) setNodata(true)\n        }\n        \n    }, [props.influencerObj])\n\n    useEffect(() => {\n        // getData()\n        loginCheck()\n        props.getInfluencer(userIdParam)\n    }, [])\n    return(\n        <Fragment>\n            <Helmet>\n                <title>Swagg Influencer | The Smoke Show</title>\n                <meta name=\"description\" content={`Check out car Influencer + Vlogger ${name}'s swagg links here. Get cool things and be cool.`} />\n                <link rel=\"canonical\" href={`https://thesmokeshow.com/influencer/${name}/${slug}/`} />\n                <script type=\"application/ld+json\">\n            {`\n                    {\n                        \"@context\": \"http://schema.org\",\n                        \"@graph\": [{\"@type\":\"WebSite\",\"@id\":\"https://thesmokeshow.com/#website\",\n                        \"url\":\"https://thesmokeshow.com/\",\n                        \"name\":\"The Smoke Show\",\n                        \"description\":\"The Smoke Show is a home for auto fans, built by auto fans. The best place to watch Car Vloggers and find all Car Info. Learn all about giveaways and buy swag!\",\n                        \"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":\"https://thesmokeshow.com/search?s={search_term_string}\",\"query-input\":\"required name=search_term_string\"}],\n                        \"inLanguage\":\"en\"},\n                        {\"@type\": [\"WebPage\",\"CollectionPage\"],\n                        \"@id\": \"https://thesmokeshow.com/influencer/${name}/${slug}/#webpage\", \"url\": \"https://thesmokeshow.com/influencer/influencer/${name}/${slug}/\", \"name\": \"Influencers + Vloggers\",\"isPartOf\":{\"@id\":\"https://thesmokeshow.com/#website\"}, \"datePublished\": \"${publishedISO}\", \"dateModified\": \"${timeISO}\", \"description\": \"Enjoy all videos from the influencer + Vlogger ${name}. Check out the related car statistics and more information. Get cool things and be cool.\", \"breadcrumb\":{\"@id\":\"https://thesmokeshow.com/influencer/${name}/${slug}/#breadcrumb\"},\"inLanguage\":\"en\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https://thesmokeshow.com/influencer/${name}/${slug}/\"]}]},\n                        {\"@type\":\"BreadcrumbList\",\"@id\":\"https://thesmokeshow.com/#breadcrumb\",\n                        \"itemListElement\":[{\n                            \"@type\":\"ListItem\",\"position\":1,\n                            \"item\":{\"@type\":\"WebPage\",\"@id\":\"https://thesmokeshow.com/\",\"url\":\"https://thesmokeshow.com/\",\"name\":\"Home\"}\n                            },\n                            {\n                                \"@type\":\"ListItem\",\n                                \"position\":2,\n                                \"item\":{\"@type\":\"WebPage\",\"@id\":\"https://thesmokeshow.com/influencers/\",\"url\":\"https://thesmokeshow.com/influencers/\",\"name\":\"All car influencers and Vloggers\"}\n                            },\n                            {\n                                \"@type\":\"ListItem\",\n                                \"position\":3,\n                                \"item\":{\"@type\":\"WebPage\",\"@id\":\"https://thesmokeshow.com/influencers/${name}/\",\"url\":\"https://thesmokeshow.com/influencers/${name}/\",\"name\":\"Influencer + Vlogger ${name}'s featured page\"}\n                            },\n                            {\n                                \"@type\":\"ListItem\",\n                                \"position\":4,\n                                \"item\":{\"@type\":\"WebPage\",\"@id\":\"https://thesmokeshow.com/influencers/${name}/${slug}\",\"url\":\"https://thesmokeshow.com/influencers/${name}/${slug}\",\"name\":\"Swagg links from Influencer ${name}\"}\n                            }\n                            ]}\n                        ]\n                    }\n                `}\n        </script>\n            </Helmet>\n            <Layout>\n                <div className=\"main-wrapper\" style={{minHeight: 'calc(100vh - 21rem)'}}>\n                    <div className=\"spacer-4rem\"></div>\n                    <SubNav influencer={influencer} formattedFans={props.formattedFans} username={name}/>\n                    <div className=\"spacer-4rem\"></div>\n                    <h2 className=\"title\">{influencer.username} Swagg</h2>\n                    <div className=\"spacer-4rem\"></div>\n                    <Row>\n                        <Col sm={6}>\n                            <ul style={{listStyle: 'none'}}>\n                                { noData && <p>No Swagg</p>}\n                                { influencer.swagg.teeSpring &&\n                                <li className=\"social-media-container\">\n                                    <a href={influencer.swagg.teeSpring} target=\"_blank\">\n                                        <img src={teeSpringIcon} alt=\"Teespring\" className=\"social-img\"/>\n                                        <p className=\"social-text\">{influencer.swagg.teeSpring}</p>\n                                    </a>\n                                </li>\n                                }\n                                {influencer.swagg.printful && \n                                <li className=\"social-media-container\">\n                                    <a href={influencer.swagg.teeSpring} target=\"_blank\">\n                                        <img src={printfulIcon} alt=\"Printful\" className=\"social-img\"/>\n                                        <p className=\"social-text\">{influencer.swagg.printful}</p>\n                                    </a>\n                                </li>\n                                }\n                            </ul>\n                        </Col>\n                        <Col sm={6}>\n                            \n                        </Col>\n                    </Row>\n                </div>\n            </Layout>\n        </Fragment>\n    )\n}\nconst mapDispatchToProps = (dispatch) =>{\n    return{\n        getInfluencer: (id)=> dispatch(getInfluencer(id))\n    }\n}\nconst mapStateToProps = (state)=>{\n    return{\n        influencerObj: state.influ.influencerObj,\n        formattedFans: state.influ.formattedFans\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SwaggInfluencer)","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Influencer/Social.js",["417","418","419","420","421","422"],"import React, { Fragment, useEffect, useState} from 'react'\n// import { Link } from 'react-router-dom'\nimport { Row, Col } from 'react-bootstrap'\nimport Layout from '../Layout/Layout'\nimport { Helmet } from \"react-helmet\"\nimport SubNav from './SubNav'\nimport * as Realm from \"realm-web\"\nimport './social.scss'\nimport { getInfluencer }from '../../store/actions/influencerActions'\nimport instaIcon from '../../assets/social/instagram.svg'\nimport fbIcon from '../../assets/social/facebook.svg'\nimport twitterIcon from '../../assets/social/twitter.svg'\nimport tiktokIcon from '../../assets/social/TikTok.svg'\nimport amazonIcon from '../../assets/social/Amazon-Affiliate-program.jpg'\nimport { connect } from 'react-redux'\nimport jwt from 'jsonwebtoken'\n\nconst Social = (props) =>{\n    let today = new Date()\n    const timeISO = today.toISOString()\n    let published = new Date('2021-03-01')\n    const publishedISO = published.toISOString()\n    const slug = 'social'\n    let userIdParam;\n    const name = props.match.params.username\n    if(name === 'EddieX'){\n        userIdParam = '60230361f63ff517d4fdad14'\n    }else if(name === 'Lexurious-Fleet'){\n        userIdParam = '602303890ff2832f7d19a2af'\n    }\n    const appConfig = {\n        id: process.env.REACT_APP_REALM_APP_ID,\n        // timeout: 10000, \n        // timeout in number of milliseconds\n      };\n    const app = new Realm.App(appConfig);\n    const [influencer, setInfluencer] = useState({profileCover: '', profilePic: '', username: '', userId: '', social: {instagram: '', facebook: '', twitter: ''}})\n\n    const userLogin =async (cre) =>{\n         try{\n             await app.logIn(cre).then(user =>{\n                //  console.log('user logged in', user.id)\n             })\n         }catch(err){console.log(err)}\n    }\n    const loginCheck = () =>{\n        const tokenUser = sessionStorage.getItem('session_user')\n        if(tokenUser){\n            jwt.verify(tokenUser, process.env.REACT_APP_JWT_SECRET, function(err, decoded) {\n                if (err) {\n                    // timeout\n                    const cre = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTH_PUBLIC_VIEW);\n                    userLogin(cre)\n                    \n                }else{\n                    userLogin(decoded.cre)\n                }\n              });\n            \n        }else{\n            const cre = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTH_PUBLIC_VIEW);\n            userLogin(cre)\n        }\n    }\n    useEffect(() => {\n        if(props.influencerObj.username){\n            setInfluencer(props.influencerObj)\n        }\n        \n    }, [props.influencerObj])\n\n    useEffect(() => {\n        loginCheck()\n        props.getInfluencer(userIdParam)\n    }, [])\n    return(\n        <Fragment>\n            <Helmet>\n                <title>Influencer Social Media Links | The Smoke Show</title>\n                <meta name=\"description\" content={`Check out ${name}'s social media links here. Stay in touch and come back to The Smoke Show`} />\n                <link rel=\"canonical\" href={`https://thesmokeshow.com/influencer/${name}/${slug}/`} />\n                <script type=\"application/ld+json\">\n            {`\n                    {\n                        \"@context\": \"http://schema.org\",\n                        \"@graph\": [{\"@type\":\"WebSite\",\"@id\":\"https://thesmokeshow.com/#website\",\n                        \"url\":\"https://thesmokeshow.com/\",\n                        \"name\":\"The Smoke Show\",\n                        \"description\":\"The Smoke Show is a home for auto fans, built by auto fans. The best place to watch Car Vloggers and find all Car Info. Learn all about giveaways and buy swag!\",\n                        \"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":\"https://thesmokeshow.com/search?s={search_term_string}\",\"query-input\":\"required name=search_term_string\"}],\n                        \"inLanguage\":\"en\"},\n                        {\"@type\": [\"WebPage\",\"CollectionPage\"],\n                        \"@id\": \"https://thesmokeshow.com/influencer/${name}/${slug}/#webpage\", \"url\": \"https://thesmokeshow.com/influencer/influencer/${name}/${slug}/\", \"name\": \"Giveaways | The Smoke Show\",\"isPartOf\":{\"@id\":\"https://thesmokeshow.com/#website\"}, \"datePublished\": \"${publishedISO}\", \"dateModified\": \"${timeISO}\", \"description\": \"Check out ${name}'s social media links here. Stay in touch and come back to The Smoke Show\", \"breadcrumb\":{\"@id\":\"https://thesmokeshow.com/influencer/${name}/${slug}/#breadcrumb\"},\"inLanguage\":\"en\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https://thesmokeshow.com/influencer/${name}/${slug}/\"]}]},\n                        {\"@type\":\"BreadcrumbList\",\"@id\":\"https://thesmokeshow.com/#breadcrumb\",\n                        \"itemListElement\":[{\n                            \"@type\":\"ListItem\",\"position\":1,\n                            \"item\":{\"@type\":\"WebPage\",\"@id\":\"https://thesmokeshow.com/\",\"url\":\"https://thesmokeshow.com/\",\"name\":\"Home\"}\n                            },\n                            {\n                                \"@type\":\"ListItem\",\n                                \"position\":2,\n                                \"item\":{\"@type\":\"WebPage\",\"@id\":\"https://thesmokeshow.com/influencers/\",\"url\":\"https://thesmokeshow.com/giveaways/\",\"name\":\"Influencers and Vloggers\"}\n                            },\n                            {\n                                \"@type\":\"ListItem\",\n                                \"position\":3,\n                                \"item\":{\"@type\":\"WebPage\",\"@id\":\"https://thesmokeshow.com/influencers/${name}/\",\"url\":\"https://thesmokeshow.com/influencers/${name}/\",\"name\":\"Influencer ${name} featured page\"}\n                            },\n                            {\n                                \"@type\":\"ListItem\",\n                                \"position\":4,\n                                \"item\":{\"@type\":\"WebPage\",\"@id\":\"https://thesmokeshow.com/influencers/${name}/${slug}\",\"url\":\"https://thesmokeshow.com/influencers/${name}//${slug}\",\"name\":\"Swagg links from Influencer ${name}\"}\n                            }\n                            ]}\n                        ]\n                    }\n                `}\n        </script>\n            </Helmet>\n            <Layout>\n                <div className=\"main-wrapper\">\n                    <div className=\"spacer-4rem\"></div>\n                    <SubNav influencer={influencer} formattedFans={props.formattedFans} username={name} />\n                    <div className=\"spacer-4rem\"></div>\n                    <h2 className=\"title\">{influencer.username} Social Media</h2>\n                    <div className=\"spacer-4rem\"></div>\n                    <Row>\n                        <Col sm={6}>\n                            <ul style={{listStyle: 'none'}}>\n                            {influencer.social.instagram  && \n                                <li className=\"social-media-container\">\n                                    <a href={influencer.social.instagram} target=\"_blank\">\n                                        <img className=\"social-img\" src={instaIcon} alt=\"Instagram\" />\n                                        <p className=\"social-text\">{influencer.social.instagram}</p>\n                                    </a>\n                                </li>\n                            }\n                            \n                            {influencer.social.facebook && \n                                <li className=\"social-media-container\">\n                                    <a href={influencer.social.facebook} target=\"_blank\">\n                                        <img className=\"social-img\" src={fbIcon} alt=\"Instagram\" />\n                                        <p className=\"social-text\">{influencer.social.facebook}</p>\n                                    </a>\n                                </li>\n                            }\n                            {influencer.social.twitter && \n                                <li className=\"social-media-container\">\n                                    <a href={influencer.social.twitter} target=\"_blank\">\n                                        <img className=\"social-img\" src={twitterIcon} alt=\"Instagram\" />\n                                        <p className=\"social-text\">{influencer.social.twitter}</p>\n                                    </a>\n                                </li>\n                            }\n                            {influencer.social.tiktok && \n                                <li className=\"social-media-container\">\n                                    <a href={influencer.social.tiktok} target=\"_blank\">\n                                        <img className=\"social-img\" src={tiktokIcon} alt=\"Instagram\" />\n                                        <p className=\"social-text\">{influencer.social.tiktok}</p>\n                                    </a>\n                                </li>\n                            }\n                            </ul>\n                        </Col>\n                        <Col sm={6}>\n                            <ul style={{listStyle: 'none'}}>\n                            {influencer.social.amazon && \n                                <li className=\"social-media-container\">\n                                    <a href={influencer.social.amazon} target=\"_blank\">\n                                        <img className=\"social-img\" src={amazonIcon} alt=\"Instagram\" />\n                                        <p className=\"social-text\">{influencer.social.amazon}</p>\n                                    </a>\n                                </li>\n                            }\n                            </ul>\n                        </Col>\n                    </Row>\n                    \n                </div>\n            </Layout>\n        </Fragment>\n        \n    )\n}\nconst mapDispatchToProps = (dispatch) =>{\n    return{\n        getInfluencer: (id)=> dispatch(getInfluencer(id))\n    }\n}\nconst mapStateToProps = (state)=>{\n    return{\n        influencerObj: state.influ.influencerObj,\n        formattedFans: state.influ.formattedFans\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Social)","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Admin/QueryVideoData.js",["423","424","425"],"import React, { useState, useEffect } from 'react'\nimport { Button, Form, Alert } from 'react-bootstrap'\nimport * as Realm from \"realm-web\"\nimport { youtubeAPI } from '../../utils/youtubeAPI'\nimport {Helmet} from \"react-helmet\"\nimport jwt from 'jsonwebtoken'\nimport {logOutUser} from '../../store/actions/authActions'\nimport { connect } from 'react-redux'\n\nimport AdminLoginDiv from './AdminLoginDiv'\n\nconst QueryVideoData = (props) =>{\n    const [carObj, setCarObj] = useState({id: '', name: ''})\n    const [userObj, setUserObj] = useState({email: '', password: ''})\n    const [isLoggedIn, setIsLoggedIn] = useState(false)\n    const [msg, setMsg] = useState('')\n    //last query data Feb 20 2021 for both Kirk and Eddie\n\n    // const [videoData, setVideoData] = useState([])\n    const EddieXChannelId = 'UCdOXRB936PKSwx0J7SgF6SQ'\n    const EddiXuserId = '60230361f63ff517d4fdad14'\n    const KirkUserId = '602303890ff2832f7d19a2af'\n    const KirkChannelId = 'UCXPVB7s1TJTE0WjDpakGp5Q'\n\n    const maxAgeTest = 1 * 60 * 60\n    const appConfig = {\n        id: process.env.REACT_APP_REALM_APP_ID,\n        // timeout: 10000, \n        // timeout in number of milliseconds\n        };\n    const app = new Realm.App(appConfig)\n    const changeUserObj = (e) =>{\n        setUserObj({\n            ...userObj,\n            [e.target.name]: e.target.value\n        })\n    }\n    const handleSubmitLogin = async (e) =>{\n        setMsg('')\n        e.preventDefault()\n        const emailLowerCase = userObj.email.toLowerCase()\n        const credentials = Realm.Credentials.emailPassword(emailLowerCase, userObj.password)\n        try{\n            app.logIn(credentials).then(async user =>{\n                if(app.currentUser.id === user.id){\n                    console.log('user updated')\n                }else{\n                    console.log('user is not updated')\n                }\n                setIsLoggedIn(true)\n                const customData = user.customData\n                const token = jwt.sign({ userData: customData }, process.env.REACT_APP_JWT_SECRET, {expiresIn: maxAgeTest})\n                const tokenCredentials = jwt.sign({ cre: credentials }, process.env.REACT_APP_JWT_SECRET, {expiresIn: maxAgeTest})\n                sessionStorage.setItem('session_token', token)\n                sessionStorage.setItem('session_user', tokenCredentials)\n      \n            })\n        }catch(err){\n            console.log(err)\n            setMsg('login fail')\n        }\n        \n    }\n\n    // const handleVideoSearch = async e =>{\n    //     e.preventDefault()\n\n    //     await youtubeAPI.get('/search', {\n    //         params: {\n    //             // q: searchKeyword,\n    //             channelId: KirkChannelId,\n    //             publishedAfter: '2021-02-21T00:00:00Z',\n    //             publishedBefore: '2021-02-23T23:59:59Z',\n    //             order: 'date'\n    //         }\n    //     }).then(async youtubeObj =>{\n    //         console.log('res from youtube', youtubeObj)\n    //         // setTitleStr(\"EddieX \" + searchKeyword)\n    //         const formatted = youtubeObj.data.items.map(video =>{\n\n    //             video.videoId = video.id.videoId\n    //             video.userId = KirkUserId\n    //             video.channelId = KirkChannelId\n    //             delete video.kind\n    //             delete video.etag\n    //             delete video.id\n    //             return video\n    //         })\n    //         const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n    //         const collection = mongo.db(\"smoke-show\").collection(\"youtube-videos\")\n    //         const result = await collection.insertMany(formatted)\n    //         console.log(result)\n    //     })\n    // }\n\n    // const updateLatest =async ()=>{\n    //     const credentials = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTH_PUBLIC_VIEW);\n        \n    //     try{\n    //         await app.logIn(credentials).then( async user =>{\n    //             const filter = {userId: KirkUserId}\n    //             const numberOfVideos = 5\n    //             const options = {sort: {\"snippet.publishedAt\": -1}, limit: numberOfVideos}\n    //             const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n    //             const collection = mongo.db(\"smoke-show\").collection(\"youtube-videos\")\n    //             await collection.find(filter, options).then(videos=>{\n    //                 console.log('video', videos)\n    //                 var tmp = new Array();\n    //                 for (let i = 0; i < numberOfVideos; i++) {\n    //                     tmp[i] = setInterval(async ()=> {\n    //                         try{\n    //                             await youtubeAPI.get('/videos', {\n    //                                 params: {\n    //                                     id: videos[i].videoId,\n    //                                 }\n    //                             }).then(async videoObj =>{\n    //                                 console.log('obj', videoObj)\n    //                                 console.log('desc', videoObj.data.items[0].snippet.description)\n    //                                 try{\n    //                                     await collection.updateOne(\n    //                                         { videoId: videos[i].videoId },\n    //                                         { $set: { 'snippet.description': videoObj.data.items[0].snippet.description }},\n    //                                         { upsert: false}\n    //                                     )\n    //                                 }catch(err){\n    //                                     console.log(err)\n    //                                     clearInterval(tmp[i])\n    //                                 }\n                                    \n    //                                 clearInterval(tmp[i])\n    //                             })\n    //                         }catch(err){\n    //                             console.log(err)\n    //                             clearInterval(tmp[i])\n    //                         }\n                     \n    //                     }, 3000);\n    //                 }\n    //             })\n    //         })\n    //     }catch(err){\n    //         console.log(err)\n    //     }\n        \n    // }\n\n    // const handleUpdateDesc = async (e) =>{\n    //     const credentials = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTH_PUBLIC_VIEW);\n    //     try{\n    //         await app.logIn(credentials).then(async user =>{\n    //             const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n    //             const collection = mongo.db(\"smoke-show\").collection(\"youtube-videos\")\n\n    //             const filter = {userId: EddiXuserId}\n    //             // {\"snippet.publishedAt\": -1}\n    //             await collection.find(filter).then(videos =>{\n    //                 console.log('videos', videos)\n    //                 var tmp = new Array();\n    //                 var v = new Array();\n    //                 for (let i = 144; i < 146; i++) {\n    //                     // var j = 0;\n    //                     tmp[i] = setInterval(async ()=> {\n    //                         try{\n    //                             await youtubeAPI.get('/videos', {\n    //                                 params: {\n    //                                     id: videos[i].videoId,\n    //                                 }\n    //                             }).then(async videoObj =>{\n    //                                 console.log('obj', videoObj)\n    //                                 console.log('desc', videoObj.data.items[0].snippet.description)\n    //                                 try{\n    //                                     await collection.updateOne(\n    //                                         { videoId: videos[i].videoId },\n    //                                         { $set: { 'snippet.description': videoObj.data.items[0].snippet.description }},\n    //                                         { upsert: false}\n    //                                     )\n    //                                 }catch(err){\n    //                                     console.log(err)\n    //                                     clearInterval(tmp[i])\n    //                                 }\n                                    \n    //                                 clearInterval(tmp[i])\n    //                             })\n    //                         }catch(err){\n    //                             console.log(err)\n    //                             clearInterval(tmp[i])\n    //                         }\n                     \n    //                     }, 3000);\n    //                 }\n    //             })\n    //         })\n    //     }catch(err){\n    //         console.log(err)\n    //     }\n      \n    // }\n\n    // const handleCheckVideoId =async ()=>{\n    //     const credentials = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTH_PUBLIC_VIEW);\n    //     try{\n    //         await app.logIn(credentials).then(user=>{\n    //             const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n    //             const collection = mongo.db(\"smoke-show\").collection(\"youtube-videos\")\n    //             let tempArr = []\n    //             const filter = {userId: KirkUserId}\n    //             collection.find(filter).then(videos =>{\n    //                 videos.map(video =>{\n    //                     tempArr.push(video.videoId)\n    //                 })\n    //                 return tempArr\n    //             }).then(async arr =>{\n    //                 console.log('all videos: ', arr)\n    //                 const collectionTemp = mongo.db(\"smoke-show\").collection(\"cars-data-analysis\")\n    //                 const allIds =  {allVideoIds: arr}\n    //                 const res = await collectionTemp.insertOne(allIds)\n    //                 console.log(res)\n    //             })\n    //         })\n    //     }catch(err){\n    //         console.log(err)\n    //     }\n    // }\n    const checkYoutubeId = async() =>{\n        let tempArr = []\n        await youtubeAPI.get('/search', {\n            params: {\n                channelId: KirkChannelId,\n                publishedAfter: '2021-01-01T00:00:00Z',\n                publishedBefore: '2021-02-20T23:59:59Z',\n                order: 'date'\n            }\n        }).then(async youtubeObj =>{\n            console.log('res from youtube', youtubeObj)\n            youtubeObj.data.items.map(video =>{\n                tempArr.push(video.id.videoId)\n            })  \n            return tempArr\n            \n        }).then( async arr =>{\n            const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n            const collection = mongo.db(\"smoke-show\").collection(\"cars-data-analysis\")\n            const youtubeIds = {allVideoIds: arr, source: 'youtube'}\n            const result = await collection.insertOne(youtubeIds)\n            // const result = await collection.updateOne(\n            //     {source: 'youtube'},\n            //     { $push: {allVideoIds: { $each: arr }}}\n            // )\n            console.log(result)\n        })\n    }\n    const filterArray = (arr1, arr2) => {\n        const filtered = arr1.filter(el => {\n            console.log('doing?', arr2.indexOf(el) === -1)\n           return arr2.indexOf(el) === -1;\n        });\n        return filtered;\n     };\n    // const checkMissing = async () =>{\n    //     const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n    //     const collection = mongo.db(\"smoke-show\").collection(\"cars-data-analysis\")\n    //     let tempArr = []\n    //     const filterSmoke = {source: 'smokeShow'}\n    //     const filterYoutube = {source: 'youtube'}\n    //     const smokeShow = await collection.findOne(filterSmoke)\n    //     const youtube = await collection.findOne(filterYoutube)\n       \n    //      const result = filterArray(youtube.allVideoIds, smokeShow.allVideoIds)\n    //      console.log(result);\n    // }\n    const addMissing = async () =>{\n        setMsg('')\n        const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n        const collectionVideos = mongo.db(\"smoke-show\").collection(\"youtube-videos\")\n        const filter = {videoId: carObj.id}\n        try {\n            await collectionVideos.findOne(filter).then( res =>{\n                console.log('res', res)\n                if(res){\n                    setMsg('This videoId is in DB already.')\n                    return\n                }else{\n                    console.log('running?')\n                    let influencer = {userId: '', channelId: ''}\n                    if(carObj.name === 'EddieX'){\n                        influencer.userId = EddiXuserId\n                        influencer.channelId = EddieXChannelId\n                        return influencer\n                    }else if(carObj.name === 'Kirk'){\n                        influencer.userId = KirkUserId\n                        influencer.channelId = KirkChannelId\n                        return influencer\n                    }\n                }\n                \n            }).then(async influencer =>{\n                await youtubeAPI.get('/videos', {\n                    params: {\n                        id: carObj.id\n                    }\n                }).then(async res =>{\n                    const youtubeData = res.data.items[0]\n                    const formatted = {\n                        videoId: carObj.id,\n                        userId: influencer.userId,\n                        channelId: influencer.channelId,\n                        snippet: {\n                            publishedAt: youtubeData.snippet.publishedAt,\n                            title:  youtubeData.snippet.title,\n                            description: youtubeData.snippet.description,\n                            thumbnails: youtubeData.snippet.thumbnails,\n                            channelTitle: youtubeData.snippet.channelTitle,\n                            liveBroadcastContent: youtubeData.snippet.liveBroadcastContent\n                        }            \n                    }\n                    // const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n                    // const collection = mongo.db(\"smoke-show\").collection(\"youtube-videos\")\n                    const result = await collectionVideos.insertOne(formatted)\n                    console.log(result)\n                    setMsg('Success!')\n                })\n            })\n        } catch (error) {\n            console.log(error)\n            // setMsg('error!')\n        }\n        \n        \n    }\n    const handleChange = (e) =>{\n        setCarObj({\n            ...carObj,\n            [e.target.name]: e.target.value\n        })\n        console.log(carObj)\n    }\n    const handleLogout = () =>{\n        props.logOutUser()\n        setIsLoggedIn(false)\n    }\n    useEffect(() => {\n        const tokenUser = sessionStorage.getItem('session_user')\n        if(tokenUser){\n            setIsLoggedIn(true)\n        }else{\n            setIsLoggedIn(false)\n        }\n\n    }, [])\n\n    return(\n        <div>\n        <Helmet>\n            <meta name=\"robots\" content=\"noindex, nofollow\" />\n        </Helmet>\n        <div style={{marginTop: '4rem'}}></div>\n        <center><h1>query youtube data</h1></center>\n\n        <center style={{maxWidth: '600px', margin: '0 auto'}}>\n            { isLoggedIn ?\n            \n            <Form>\n                <Form.Group controlId=\"formBasicEmail\">\n                    <Form.Label>Video ID</Form.Label>\n                    <Form.Control type=\"text\" name=\"id\" placeholder=\"Enter youtube video ID\" onChange={handleChange}/>\n                    <Form.Text className=\"text-muted\">\n                    We'll never share your email with anyone else.\n                    </Form.Text>\n                </Form.Group>\n                <br/><br/>\n                <Form.Control as=\"select\" name=\"name\" onChange={handleChange}>\n                    <option>Select an influencer</option>\n                    <option>EddieX</option>\n                    <option>Kirk</option>\n                </Form.Control>\n                {/* <Button variant=\"primary\" type=\"submit\">\n                    Submit\n                </Button> */}<br/><br/>\n                {msg && <Alert variant=\"danger\">{msg}</Alert>}\n                \n                <Button onClick={addMissing}>Add data</Button>\n                <br/><br/><br/><br/>\n                <Button onClick={handleLogout}>Logout</Button>\n            </Form>\n            :\n            <AdminLoginDiv handleSubmitLogin={handleSubmitLogin} handleChange={changeUserObj} msg={msg} />\n            }\n                {/* <Button onClick={handleVideoSearch}>Query data</Button> */}\n                {/* <Button onClick={handleUpdateDesc}>Click me to update description</Button> */}\n                {/* <Button onClick={updateLatest}>updateLatest</Button> */}\n                {/* <Button onClick={checkYoutubeId}>Check all videoId in youtube</Button> */}\n                {/* <Button onClick={handleCheckVideoId}>Check video ids in DB</Button> */}\n                {/* <Button onClick={checkMissing}>filter arrays</Button> */}\n                \n            </center>\n            \n        </div>\n    )\n}\nconst mapDispatchToProps = (dispatch) =>{\n    return{\n        logOutUser: () => dispatch(logOutUser())\n    }\n}\nexport default connect(null, mapDispatchToProps)(QueryVideoData)\n\n","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Influencer/AllVideos.js",["426","427"],"import React, { useEffect, useState, Fragment } from 'react'\nimport { Helmet } from \"react-helmet\"\nimport { Row, Col } from 'react-bootstrap'\nimport * as Realm from \"realm-web\"\nimport Pagination from 'react-bootstrap/Pagination'\nimport { numberWithCommas, urlify } from '../Global/functions'\nimport Avatar from 'react-avatar'\nimport Layout from '../Layout/Layout'\nimport { logInAsPublic, updateLogin } from '../../store/actions/authActions'\nimport { connect } from 'react-redux'\nimport jwt from 'jsonwebtoken'\nimport { getInfluencer }from '../../store/actions/influencerActions'\nimport './allVideos.scss'\nimport moment from 'moment'\nimport short from 'short-uuid'\nimport loadable from '@loadable/component'\nimport ReactPlayer from 'react-player/lazy'\nimport { adAllVideos, adAllVideosInfinite } from '../adData'\nconst SpecDiv = loadable(() => import('../SpecDiv'))\nconst Comments = loadable(() => import('../Comments'))\nconst SubNav = loadable(() => import('./SubNav'))\n\nconst AllVideos = (props) =>{\n    const videoWatchURL = 'https://www.youtube.com/watch?v='\n    let today = new Date()\n    const timeISO = today.toISOString()\n    let published = new Date('2021-03-01')\n    const publishedISO = published.toISOString()\n    const slug = 'all-videos'\n    let influencerId;\n    const name = props.match.params.username\n    if(name === 'EddieX'){\n        influencerId = '60230361f63ff517d4fdad14'\n    }else if(name === 'Lexurious-Fleet'){\n        influencerId = '602303890ff2832f7d19a2af'\n    }\n    const [videoArr, setVideoArr] = useState([])\n    const [allVideoData, setAllVideoData] = useState([])\n    const [views, setViews] = useState([])\n    const [pgNum, setPgNum] = useState(null)\n    const [middleNum, setMiddleNum] = useState(null)\n    const [active, setActive] = useState(1)\n    const [influencerName, setInfluencerName] = useState('')\n    const appConfig = {\n        id: process.env.REACT_APP_REALM_APP_ID,\n        // timeout: 10000, \n        };\n    const app = new Realm.App(appConfig);\n    \n    const chunkArray = (allVideos) =>{\n        let chunk_size = 12\n        let index = 0;\n        let arrayLength = allVideos.length;\n        let tempArray = [];\n        let myChunk\n        \n        for (index = 0; index < arrayLength; index += chunk_size) {\n            myChunk = allVideos.slice(index, index+chunk_size);\n            // Do something if you want with the group\n            tempArray.push(myChunk);\n        }\n\n        return tempArray;\n    }\n    const runCounter = async (videoId, index) => {\n        const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n        const collectionYoutube = mongo.db(process.env.REACT_APP_REALM_DB_NAME).collection(\"youtube-videos\")\n        const addedViews = Number(views[index] +1)\n        const tempArr = [...views]\n        tempArr[index] = addedViews\n\n        try {\n            await collectionYoutube.updateOne(\n                {\"videoId\": videoId},\n                { \"$set\": { \"views\": addedViews} }\n            ).then(res => {\n                console.log(res)\n                // setViews(tempArr)\n            })\n            \n        } catch (error) {\n            console.log('err', error);\n        }\n    }\n\n    const attachCarData = async (chunk, num) =>{\n        \n        setVideoArr([])\n        setViews([])\n        const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n        const collectionCars = mongo.db(\"smoke-show\").collection(\"cars\")\n        const collectionManual = mongo.db(\"smoke-show\").collection(\"cars-manual\")\n        let arr = [...views]\n        if(chunk){\n            const mapResults = chunk[num].map(async (video, index) =>{\n                if(typeof(video.views) !== 'undefined'){\n                    arr[index] = Number(video.views)\n                }else{\n                    arr[index] = 0;\n                }\n                const filterCar = {_id: {\"$oid\": video.carDataId}}\n\n                const data = await collectionCars.findOne(filterCar)\n                \n                if(data){\n                    video.carData = data\n                    return video\n                }else{\n\n                    const data = await collectionManual.findOne(filterCar)\n                    if(data){\n                        video.carData = data\n                        return video\n                    }else{\n                        console.log('no data')\n                    }\n                }\n                        \n            })\n            Promise.all(mapResults).then(video =>{\n                setVideoArr(video)\n                setViews(arr)\n            })\n        }else{\n            const results = allVideoData[num].map(async (video, index) =>{\n                if(typeof(video.views) !== 'undefined'){\n                    arr[index] = Number(video.views)\n                }else{\n                    arr[index] = 0;\n                }\n                const filterCar = {_id: {\"$oid\": video.carDataId}}\n                const data = await collectionCars.findOne(filterCar)\n                \n                if(data){\n                video.carData = data\n                return video\n\n                }else{\n                const data = await collectionManual.findOne(filterCar)\n                    video.carData = data\n                    return video\n                }\n                \n            })\n            Promise.all(results).then(res =>{\n                setVideoArr(res)\n                setViews(arr)\n            })\n        }\n                \n    }\n    const getVideos = async (cre) =>{\n        \n        try{\n            await app.logIn(cre).then(async  user =>{\n                if(app.currentUser.id === user.id){\n                    console.log('user login updated')\n                }\n                const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n                const mongoCollection = mongo.db(\"smoke-show\").collection(\"youtube-videos\")\n                const filter = {userId: influencerId}\n                const options = {sort: {\"snippet.publishedAt\": -1}}\n                try{\n                    await mongoCollection.find(filter, options).then(async videos =>{\n                    //   console.log('videos', videos)\n                        const res = Math.floor(videos.length / 12)\n                        setPgNum(res)\n                        if(res % 2 === 0){\n                            setMiddleNum(res / 2)\n                        }else{\n                            const half = res/2\n                            setMiddleNum(Math.ceil(half))\n                        }\n                        \n                        const chunk = chunkArray(videos)\n                        setAllVideoData(chunk)\n                        return chunk\n                    }).then( chunk =>{\n                        attachCarData(chunk, 0)\n                    })\n                }catch(err){\n                    console.log(err)\n                }\n                \n            })\n        }catch(err){\n            console.log(err)\n        }\n        \n    }\n\n    const loginCheck = () =>{\n        const tokenUser = sessionStorage.getItem('session_user')\n        if(tokenUser){\n            jwt.verify(tokenUser, process.env.REACT_APP_JWT_SECRET, function(err, decoded) {\n                if (err) {\n                    // timeout\n                    const cre = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTH_PUBLIC_VIEW);\n                    getVideos(cre)\n                    \n                }else{\n                    getVideos(decoded.cre)\n                }\n              });\n            \n        }else{\n            const cre = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTH_PUBLIC_VIEW);\n            getVideos(cre)\n            \n        }\n    }\n    const getselectedPage =(number)=>{\n        setActive(number)\n        attachCarData(null, number)\n    }\n    const getPrevPage = () =>{\n        if(active > 1){\n            const num = active -1\n            setActive(num)\n            attachCarData(null, num)\n            if(num < pgNum -1){\n                if(num === 2){\n                    setMiddleNum(3)\n                }else if(num <= 1){\n                    if(pgNum %2 === 0){\n                        setMiddleNum(pgNum /2)\n                    }else{\n                        const temp = pgNum /2\n                        setMiddleNum(Math.ceil(temp))\n                    }\n                    \n                }else{\n                    setMiddleNum(num)\n                }\n                \n            }else if(num === pgNum -1){\n                setMiddleNum(pgNum -2)\n            }\n            \n        }else{\n            return\n        }\n    }\n    const getNextPage = () =>{\n        if(active < pgNum){\n            const num = active +1\n            setActive(num)\n            attachCarData(null, num)\n            \n            if( num > 2){\n                if(pgNum -2 < num){\n                    setMiddleNum(pgNum -2)\n                }else(\n                    setMiddleNum(num)\n                )\n                \n            }else if(num === 2){\n                setMiddleNum(3)\n            }else if (num === pgNum -1){\n                setMiddleNum(pgNum -2)\n            }\n        }else{\n            return\n        }\n    }\n\n    const paginationItems = () =>{\n        let items = [];\n        if(pgNum > 9){\n            // const middle = pgNum / 2\n            const middleMinus = middleNum -1\n            const middlePlus = middleNum +1\n            const paginationDiv = \n                    <Fragment>\n                        {/* <Pagination.First /> */}\n                        <Pagination.Prev onClick={()=>getPrevPage()}/>\n                        <Pagination.Item active={1 === active} onClick={()=>getselectedPage(1)} >{1}</Pagination.Item>\n                        <Pagination.Ellipsis />\n\n                        <Pagination.Item  active={middleMinus === active} onClick={()=>getselectedPage(middleNum -1)} >{middleNum -1}</Pagination.Item>\n                        <Pagination.Item  active={middleNum === active} onClick={()=>getselectedPage(middleNum)} >{middleNum}</Pagination.Item>\n                        <Pagination.Item active={middlePlus === active} onClick={()=>getselectedPage(middlePlus)} >{middlePlus}</Pagination.Item>\n\n                        <Pagination.Ellipsis />\n                        <Pagination.Item  active={pgNum === active} onClick={()=>getselectedPage(pgNum)} >{pgNum}</Pagination.Item>\n                        <Pagination.Next onClick={()=>getNextPage()}/>\n                        {/* <Pagination.Last /> */}\n                    </Fragment>\n            return paginationDiv\n        }else{\n            for (let number = 1; number <= pgNum; number++) {\n                items.push(\n                    <Pagination.Item key={`page-${number}`} active={number === active} onClick={()=>getselectedPage(number)} >\n                    {number}\n                    </Pagination.Item>\n                )\n            }\n            return items\n        }\n    }\n    // const new_script = ()=>{\n    //     return new Promise(function(resolve, reject){\n\n    //             const script = document.createElement(\"script\");\n    //             script.setAttribute('data-layout', \"all-videos\");\n    //             script.setAttribute('data-debug', \"true\");\n    //             script.setAttribute('data-tmsclient', \"The Smoke Show\");\n    //             script.setAttribute('id', \"all-videos\");\n    //             script.src = \"https://lib.tashop.co/the_smoke_show/adengine.js\";\n    //             script.async = true;\n    //             const scriptW = document.createElement(\"script\");\n    //             scriptW.setAttribute('id', 'ad-w');\n    //             scriptW.text = 'window.TAS = window.TAS || { cmd: [] }'\n               \n    //             script.addEventListener('load', function () {\n    //               resolve();\n    //             });\n    //             script.addEventListener('error', function (e) {\n    //               reject(e);\n    //             });\n    //             document.body.appendChild(script);\n    //             document.body.appendChild(scriptW)\n            \n            \n    //       })\n    // }\n\n\n    useEffect(() => {\n        if(typeof(props.influencerObj.username) !== 'undefined'){\n            setInfluencerName(props.influencerObj.username)\n        }\n    }, [props.influecerObj])\n    useEffect( () => {\n        \n        // new_script()\n        // if(allVideosScript){\n        //     document.body.removeChild(allVideosScript)\n        //     document.body.removeChild(scriptA)\n        //     const script = document.createElement(\"script\");\n        //     script.setAttribute('data-layout', \"all-videos\");\n        //     script.setAttribute('data-debug', \"true\");\n        //     script.setAttribute('data-tmsclient', \"The Smoke Show\");\n        //     script.setAttribute('id', \"all-videos\");\n        //     script.src = \"https://lib.tashop.co/the_smoke_show/adengine.js\";\n        //     script.async = true;\n        //     document.body.appendChild(script);\n        //     const scriptW = document.createElement(\"script\");\n        //     scriptW.setAttribute('id', 'ad-w');\n        //     scriptW.text = 'window.TAS = window.TAS || { cmd: [] }'\n        //     document.body.appendChild(scriptW)\n        // }else{\n        //     const script = document.createElement(\"script\");\n        //     script.setAttribute('data-layout', \"all-videos\");\n        //     script.setAttribute('data-debug', \"true\");\n        //     script.setAttribute('data-tmsclient', \"The Smoke Show\");\n        //     script.setAttribute('id', \"all-videos\");\n        //     script.src = \"https://lib.tashop.co/the_smoke_show/adengine.js\";\n        //     script.async = true;\n        //     document.body.appendChild(script);\n        //     const scriptW = document.createElement(\"script\");\n        //     scriptW.setAttribute('id', 'ad-w');\n        //     scriptW.text = 'window.TAS = window.TAS || { cmd: [] }'\n        //     document.body.appendChild(scriptW)\n        // }\n        \n        // const scriptW = document.createElement(\"script\")\n        // scriptW.innerHTML = \"window.TAS = window.TAS || { cmd: [] }\"\n        \n        loginCheck()\n        props.getInfluencer(influencerId)\n    }, [])\n    \n    return(\n        <Layout >\n            <Helmet>\n                <meta charSet=\"utf-8\" />\n                <title>All Videos from {`${influencerName}`} | The Smoke Show</title>\n                <meta name=\"description\" content={`Enjoy all videos from the influencer + Vlogger ${influencerName}. Check out the related car statistics and more information.`} />\n                <link rel=\"canonical\" href={`https://thesmokeshow.com/${name}/all-videos`} />\n                <script src=\"https://lib.tashop.co/the_smoke_show/adengine.js\" async data-tmsclient=\"The Smoke Show\" data-layout=\"all-videos\" data-debug=\"true\"></script>\n                \n\n                <script>{`window.TAS = window.TAS.reload() || { cmd: [] }`}</script>\n                <script type=\"application/ld+json\">\n            {`\n                    {\n                        \"@context\": \"http://schema.org\",\n                        \"@graph\": [{\"@type\":\"WebSite\",\"@id\":\"https://thesmokeshow.com/#website\",\n                        \"url\":\"https://thesmokeshow.com/\",\n                        \"name\":\"The Smoke Show\",\n                        \"description\":\"The Smoke Show is a home for auto fans, built by auto fans. The best place to watch Car Vloggers and find all Car Info. Learn all about giveaways and buy swag!\",\n                        \"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":\"https://thesmokeshow.com/search?s={search_term_string}\",\"query-input\":\"required name=search_term_string\"}],\n                        \"inLanguage\":\"en\"},\n                        {\"@type\": [\"WebPage\",\"CollectionPage\"],\n                        \"@id\": \"https://thesmokeshow.com/influencer/${name}/${slug}/#webpage\", \"url\": \"https://thesmokeshow.com/influencer/influencer/${name}/${slug}/\", \"name\": \"Giveaways | The Smoke Show\",\"isPartOf\":{\"@id\":\"https://thesmokeshow.com/#website\"}, \"datePublished\": \"${publishedISO}\", \"dateModified\": \"${timeISO}\", \"description\": \"Enjoy all videos from the influencer + Vlogger ${influencerName}. Check out the related car statistics and more information.\", \"breadcrumb\":{\"@id\":\"https://thesmokeshow.com/influencer/${name}/${slug}/#breadcrumb\"},\"inLanguage\":\"en\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https://thesmokeshow.com/influencer/${name}/${slug}/\"]}]},\n                        {\"@type\":\"BreadcrumbList\",\"@id\":\"https://thesmokeshow.com/#breadcrumb\",\n                        \"itemListElement\":[{\n                            \"@type\":\"ListItem\",\"position\":1,\n                            \"item\":{\"@type\":\"WebPage\",\"@id\":\"https://thesmokeshow.com/\",\"url\":\"https://thesmokeshow.com/\",\"name\":\"Home\"}\n                            },\n                            {\n                                \"@type\":\"ListItem\",\n                                \"position\":2,\n                                \"item\":{\"@type\":\"WebPage\",\"@id\":\"https://thesmokeshow.com/influencers/\",\"url\":\"https://thesmokeshow.com/giveaways/\",\"name\":\"Influencers and Vloggers\"}\n                            },\n                            {\n                                \"@type\":\"ListItem\",\n                                \"position\":3,\n                                \"item\":{\"@type\":\"WebPage\",\"@id\":\"https://thesmokeshow.com/influencers/${name}/\",\"url\":\"https://thesmokeshow.com/influencers/${name}/\",\"name\":\"Influencer ${name} featured page\"}\n                            },\n                            {\n                                \"@type\":\"ListItem\",\n                                \"position\":4,\n                                \"item\":{\"@type\":\"WebPage\",\"@id\":\"https://thesmokeshow.com/influencers/${name}/${slug}\",\"url\":\"https://thesmokeshow.com/influencers/${name}//${slug}\",\"name\":\"All videos from Influencer ${name}\"}\n                            }\n                            ]}\n                        ]\n                    }\n                `}\n                </script>\n            </Helmet>\n            \n            <div className=\"main-wrapper\">\n                <SubNav influencer={props.influencerObj} formattedFans={props.formattedFans} username={name} />\n            <div className=\"spacer-4rem\"></div>\n            <h2 className=\"title\">All Videos from {props.influencerObj.username && props.influencerObj.username}</h2>\n            <div className=\"pagination-wrapper\">\n                <Pagination>\n                    { pgNum && paginationItems() }\n                </Pagination>\n            </div>\n            <Row style={{paddingLeft:'-7px', paddingRight:'-7px'}}>\n            {   videoArr[0] &&\n                videoArr.map((video, index) =>{\n                    console.log('check how many times', video.videoId)\n                    const unique = short.generate()\n                    const str = video.carData.model\n                    const id = video.videoId\n                    const date = moment(video.snippet.publishedAt).fromNow()\n                    const model = str.charAt(0).toUpperCase() +str.slice(1)\n                    const name = video.carData.make\n                    const titleCase = name.charAt(0).toUpperCase() +name.slice(1)\n                    let price;\n                    let weight\n                    if(video.carData.features.Measurements && video.carData.features.Measurements[\"Curb weight\"]){\n                        weight = video.carData.features.Measurements[\"Curb weight\"]\n                        weight = numberWithCommas(weight)\n                    }else{\n                        weight = ''\n                    }\n                    \n                    if(video.carData.price && video.carData.price.baseMSRP){\n                        price = numberWithCommas(video.carData.price.baseMSRP)\n                    }else{ price = ''}\n                    \n                    return(\n                        <Fragment key={unique} >\n                            <Col sm={6} className=\"main-col\" >\n                                \n                                <Row className=\"video-row\">\n                                    <Col sm >\n                                        <div className=\"videoWrapper\">\n                                            <ReactPlayer\n                                            onStart={() => runCounter(video.videoId, index)}\n                                            width=\"560\" \n                                            height=\"315\"\n                                            url={videoWatchURL + video.videoId}\n                                            controls={true}\n                                            />\n                                        </div>\n                                    \n                                        <div className=\"video-title-div\" dangerouslySetInnerHTML={{__html: video.snippet.title}} />\n                                        <small>{date}</small> {' |'}\n                                        { <small>{views[index] ? views[index] : 0 } views</small>\n                                        }\n                                            \n                                        <Row className=\"comment-wrapper\" >\n                                            <div className=\"col-1\" style={{margin:0,padding:0}} >\n                                            {props.influencerObj.profilePic ? <img src={props.influencerObj.profilePic} \n                                            \n                                            className=\"creator-profile-pic\" alt={props.influencerObj.username}/> :\n                                            <Avatar color={Avatar.getRandomColor('sitebase', ['red', 'green', 'teal'])} className=\"creator-profile-pic\" name={video.snippet.channelTitle} />\n                                            }\n                                            \n                                            </div>\n                                            <div className=\"col-11\" style={{paddingRight:0, margin: 'auto'}} >\n                                            <div className=\"creator-name\"><strong>{video.snippet.channelTitle}</strong><br /> <span style={{color:'gray', fontSize: '13px'}}>{' '} {props.formattedFans} fans</span></div>\n                                            </div>\n                                            \n                                            <input className=\"acd-input\" type=\"checkbox\" id={`title${index}`} />\n                                    \n                                            <label htmlFor={`title${index}`} className=\"acd-label\">Show </label>\n                                            <div className=\"desc-box\">\n                                                {video.snippet.description}\n                                            </div> \n                                            <div className=\"content\">\n                                            <small className=\"whole-desc\" dangerouslySetInnerHTML={{ __html: urlify(video.snippet.description) }}></small>\n                                            </div>\n                                        </Row>\n                                        \n                                        <div className=\"spacer-4rem\"></div>\n                                        <Comments videoId={id} />\n                                        \n                                    </Col>\n                                    <Col sm=\"auto\"  className=\"spec-col\"  >\n                                        <div style={{minWidth: '160px'}}>\n                                        <SpecDiv video={video} titleCase={titleCase} price={price} model={model} dataid={video.carDataId} weight={weight}/>\n                                        </div>\n                                        <div className=\"ad-container\">\n                                            {index < 6 ? \n                                            <div id={`unit-${adAllVideos[index]}`} className=\"tmsads\" key={Math.random()}></div>\n                                            :\n                                            <div id={`child-${adAllVideosInfinite}-${index}`} className=\"tmsads\" data-ad={`unit-${adAllVideosInfinite}`} key={Math.random()}></div>\n                                            }\n                                            \n                                        </div>\n                                    </Col>\n                                </Row>\n                                \n                            </Col>\n                        </Fragment>\n                    )\n                })\n            }\n        </Row>\n        <div className=\"spacer-4rem\"></div>\n       \n        </div>\n        </Layout>\n    )\n    }\n    const mapDispatchToProps = (dispatch) =>{\n        return{\n            logInAsPublic: () => dispatch(logInAsPublic()),\n            updateLogin: (credentials)=> dispatch(updateLogin(credentials)),\n            getInfluencer: (id)=> dispatch(getInfluencer(id))\n        }\n    }\n    const mapStateToProps = (state)=>{\n        \n        return{\n            influencerObj: state.influ.influencerObj,\n            formattedFans: state.influ.formattedFans\n        }\n    }\n\n    export default connect(mapStateToProps, mapDispatchToProps )(AllVideos)\n","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Influencer/BioPage.js",["428","429","430"],"import React, { useEffect, useState, Fragment } from 'react'\nimport { Helmet } from \"react-helmet\"\nimport { Row, Col } from 'react-bootstrap'\nimport { connect } from 'react-redux'\nimport { Link } from 'react-router-dom'\nimport * as Realm from \"realm-web\"\n// import Avatar from 'react-avatar'\nimport './bioPage.scss'\nimport ReactPlayer from 'react-player/lazy'\nimport { adInfluencer, adFeatured } from '../adData'\nimport Layout from '../Layout/Layout'\nimport jwt from 'jsonwebtoken'\nimport loadable from '@loadable/component'\nimport moment from 'moment'\nimport { switchTabs } from '../functionsStats'\nimport { numberWithCommas, urlify } from '../Global/functions'\n\nconst SpecDiv = loadable(() => import('../SpecDiv'))\nconst Comments = loadable(() => import('../Comments'))\nconst SubNav = loadable(() => import('./SubNav'))\n\nconst BioPage = (props) =>{\n    const videoWatchURL = 'https://www.youtube.com/watch?v='\n    let today = new Date()\n    const timeISO = today.toISOString()\n    let published = new Date('2021-03-01')\n    const publishedISO = published.toISOString()\n    const slug = props.match.params.username\n    let pageName = `Influencer + Vlogger ${slug.replace(\"-\", \" \")} on The Smoke Show`\n\n    let influencerId;\n    const name = props.match.params.username\n    if(name === 'EddieX'){\n        influencerId = '60230361f63ff517d4fdad14'\n    }else if(name === 'Lexurious-Fleet'){\n        influencerId = '602303890ff2832f7d19a2af'\n    }\n\n    const [featured, setFeatured] = useState()\n    const [influencer, setInfluencer] = useState({userId: '', fname: '', lname: '', username: '', fans: null, desc: '', channelId: '', banner_img: '', profile_pic: '', featuredVideo: {id: '', title: ''}})\n    const [views, setViews] = useState([])\n    const [formattedFans, setFormattedFans] = useState('')\n    const [featuredViews, setFeaturedViews] = useState(null)\n    const [latestVideos, setLatestVideos] = useState([])\n    const appConfig = {\n        id: process.env.REACT_APP_REALM_APP_ID,\n        // timeout: 10000, \n      };\n    const app = new Realm.App(appConfig);\n\n    const getInfluencer = async (mongo) =>{\n\n            try {\n                const mongoCollection = mongo.db(\"smoke-show\").collection(\"influencers\");\n                const replaced = name.replace('-', ' ')\n                const filter = {username: replaced} \n                await mongoCollection.findOne(filter).then( async res =>{\n                    setInfluencer(res)\n                    const collectionFans = mongo.db(\"smoke-show\").collection(`fans-${res.username}`)\n                    try{\n                        await collectionFans.count().then(num =>{\n                            if(num > 999){\n                                setFormattedFans(Math.sign(num)*((Math.abs(num)/1000).toFixed(1)) + 'k')\n                            }else{\n                                setFormattedFans(Math.sign(num)*Math.abs(num))\n                            }\n                        })\n                    }catch(err){console.log(err)}\n                    \n                })\n             }catch(error){console.log(error)}\n        \n    }\n    const getVideos = async (mongo) =>{\n        setLatestVideos([])\n        const collectionVideos = mongo.db(\"smoke-show\").collection(\"youtube-videos\")\n        const collectionCars = mongo.db(\"smoke-show\").collection(\"cars\")\n        const collectionManual = mongo.db(\"smoke-show\").collection(\"cars-manual\")\n \n        const filter = {userId: influencerId}\n        const options = {sort: {\"snippet.publishedAt\": -1}, limit: 7 }\n        const videos = await collectionVideos.find(filter, options)\n        let arr = [...views]\n        if(videos){\n            const results = videos.map(async (video, index) =>{\n                if(typeof(video.views) !== 'undefined'){\n                    arr[index] = Number(video.views)\n                }else{\n                    arr[index] = 0;\n                }\n                const filterCar = {_id: {\"$oid\": video.carDataId}}\n                const data =  await collectionCars.findOne(filterCar)\n                if(data){\n                video.carData = data\n                return video\n                }else{\n                    const anotherData = await collectionManual.findOne(filterCar)\n                    if(anotherData){\n                        video.carData = anotherData\n                        return video\n                  \n                    }else{\n                        console.log('no data')\n                        video.carData = {}\n                        return video\n                    }\n                    \n                }\n            })\n            Promise.all(results).then(res =>{\n                let removed = res.shift()\n                let removedViews = arr.shift()\n                setViews(arr)\n                setFeaturedViews(Number(removedViews))\n                const str = removed.carData.model\n                const modelTitle = str.charAt(0).toUpperCase() +str.slice(1)\n                const make = removed.carData.make\n                const makeTitle = make.charAt(0).toUpperCase() +make.slice(1)\n                removed.makeTitle = makeTitle\n                removed.modelTitle = modelTitle\n                if(removed.carData.price && removed.carData.price.baseMSRP){\n                    removed.price = numberWithCommas(removed.carData.price.baseMSRP)\n                }else{ removed.price = ''}\n                setFeatured(removed)\n                setLatestVideos(res)\n            })\n        }\n    }\n    const runCounter = async (videoId, index) => {\n        const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n        const collectionYoutube = mongo.db(process.env.REACT_APP_REALM_DB_NAME).collection(\"youtube-videos\")\n        const addedViews = Number(views[index] +1)\n        const tempArr = [...views]\n        tempArr[index] = addedViews\n\n        try {\n            await collectionYoutube.updateOne(\n                {\"videoId\": videoId},\n                { \"$set\": { \"views\": addedViews} }\n            ).then(res => {\n                console.log(res)\n                setViews(tempArr)\n            })\n            \n        } catch (error) {\n            console.log('err', error);\n        }\n    }\n    const runCounterFeatured = async (id) => {\n        const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n        const collectionYoutube = mongo.db(process.env.REACT_APP_REALM_DB_NAME).collection(\"youtube-videos\")\n        const addedViews = Number(featuredViews + 1)\n        try {\n            await collectionYoutube.updateOne(\n                {\"videoId\": id},\n                { \"$set\": { \"views\": addedViews} }\n            ).then(res => {\n                console.log(res)\n                setFeaturedViews(addedViews)\n            })\n            \n        } catch (error) {\n            console.log('err', error);\n        }\n    }\n    const checkToken = async () =>{\n        const token = sessionStorage.getItem('session_user')\n        if(token){\n            jwt.verify(token, process.env.REACT_APP_JWT_SECRET, async( err, decoded) =>{\n                if(err){\n                    const credentials = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTH_PUBLIC_VIEW);\n                    await app.logIn(credentials).then( user =>{\n                    const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n                    return mongo\n                }).then( mongo => {\n                    getInfluencer(mongo)\n                    getVideos(mongo)\n                })\n                }else{\n                    const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n                    getInfluencer(mongo)\n                    getVideos(mongo)\n                }\n            })\n        }else{\n            const credentials = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTH_PUBLIC_VIEW);\n                    await app.logIn(credentials).then( user =>{\n                    const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n                    return mongo\n                }).then( mongo => {\n                    getInfluencer(mongo)\n                    getVideos(mongo)\n                })\n        }\n    }\n      useEffect(() => {\n        checkToken()\n      }, [])\n\n    return(\n        <Layout>\n            <Helmet>\n                <title>Influencer {name.replace(\"-\", \" \")} Featured Page | The Smoke Show</title>\n                <meta name=\"description\" content={influencer && influencer.desc} />\n                <link rel=\"canonical\" href={`https://thesmokeshow.com/influencer/${name}`} />\n                <script src=\"https://lib.tashop.co/the_smoke_show/adengine.js\" async data-tmsclient=\"The Smoke Show\" data-layout=\"influencer\" data-debug=\"true\"></script>\n                <script>{`window.TAS = window.TAS.reload() || { cmd: [] }`}</script>\n\n                <script type=\"application/ld+json\">\n        {`\n            {\n                \"@context\": \"http://schema.org\",\n                \"@graph\": [\n                    {\"@type\":\"WebSite\",\n                    \"@id\":\"https://thesmokeshow.com/#website\",\n                \"url\":\"https://thesmokeshow.com/\",\n                \"name\":\"The Smoke Show\",\n                \"description\":\"\",\n                \"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":\"https://thesmokeshow.com/search?s={search_term_string}\",\"query-input\":\"required name=search_term_string\"}],\n                \"inLanguage\":\"en\"},\n                {\"@type\": [\"WebPage\",\"CollectionPage\"],\n                \"@id\": \"https://thesmokeshow.com/influencer/${slug}/#webpage\", \n                \"url\": \"https://thesmokeshow.com/influencer/${slug}/\", \n                \"name\": \"${pageName}\",\"isPartOf\":{\"@id\":\"https://thesmokeshow.com/#website\"}, \n                \"datePublished\": \"${publishedISO}\", \"dateModified\": \"${timeISO}\", \"description\": \"${influencer && influencer.desc}\", \n                \"breadcrumb\":{\"@id\":\"https://thesmokeshow.com/influencer/${slug}/#breadcrumb\"},\n                \"inLanguage\":\"en\",\n                \"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https://thesmokeshow.com/influencer/${slug}/\"]}]},\n                {\"@type\":\"BreadcrumbList\",\"@id\":\"https://thesmokeshow.com/influencer/${slug}/#breadcrumb\",\n                \"itemListElement\":[{\n                    \"@type\":\"ListItem\",\"position\":1,\n                    \"item\":{\"@type\":\"WebPage\",\n                    \"@id\":\"https://thesmokeshow.com/\",\n                    \"url\":\"https://thesmokeshow.com/\",\n                    \"name\":\"Home\"}\n                    },\n                    {\n                        \"@type\":\"ListItem\",\n                        \"position\":2,\n                        \"item\":{\"@type\":\"WebPage\",\n                        \"@id\":\"https://thesmokeshow.com/influencers/\",\"url\":\"https://thesmokeshow.com/influencers/\",\"name\":\"List of Influencers and Vloggers\"}\n                    },\n                    {\n                        \"@type\":\"ListItem\",\n                        \"position\": 3,\n                        \"item\":{\"@type\":\"WebPage\",\n                        \"@id\":\"https://thesmokeshow.com/influencer/${slug}/\",\"url\":\"https://thesmokeshow.com/influencer/${slug}/\",\"name\":\"${pageName}\"}\n                    }\n                    ]}\n                ]\n            }\n        `}\n        </script>\n\n            </Helmet>\n            <div className=\"main-wrapper\">\n   \n                <SubNav influencer={influencer} formattedFans={formattedFans} username={name}/>\n\n                <div className=\"spacer-2rem\"></div>\n                <h2 className=\"title\">Newest Vlog</h2>\n                <Row className=\"bio-main-row\">\n                    <Col sm={6}>\n                        <div className=\"videoWrapper\">\n                        {featured && \n                            <ReactPlayer\n                                onStart={() => runCounterFeatured(featured.videoId)}\n                                width=\"560\" \n                                height=\"315\"\n                                url={videoWatchURL + featured.videoId}\n                                controls={true}\n                                />\n                        }\n                        </div>\n                        <h3 style={{marginTop:'10px'}}>{featured && featured.snippet.title}</h3>\n                        <small>{featured && moment(featured.snippet.publishedAt).fromNow()}</small>{' | '}\n                        { <small>{featuredViews ? featuredViews : 0 } views</small>\n                                }\n                        {featured && <Comments videoId={featured.videoId} />\n                                }\n                    </Col>\n                    <Col sm={6}>\n                    <div className=\"bio-featured-stats\">\n                    {featured && <div className=\"bio-sub-title-wrapper\">\n                                    <img alt={featured.carData.name} src={require(`../../assets/maker_logos/${featured.makeTitle}_Logo.png`).default}  className=\"icon-f\" loading=\"lazy\" />\n                                    <h3 className=\"sub-title\" style={{fontSize: '1.75rem'}}>{featured.carData.year}{' '}{featured.makeTitle} {' '}{featured.modelTitle}</h3>\n                                 </div>\n                    }\n                            \n                                <div className=\"stats-div\">\n                                    {featured && switchTabs(featured.carData, 'Main Stats')}\n                                </div>\n                                {featured && \n                                    <Link \n                                        to={{\n                                            pathname: `/car-stats/${featured.carData.make}/${featured.carData.year}/${featured.carData.model.toLowerCase()}/${featured.carData._id.toString()}`\n                                        }}\n                                        >\n                                        <div className=\"btn-spec\" style={{margin: '0 20px'}}>\n                                            See more stats\n                                        </div>\n                                    </Link>\n                                }\n                        \n                                </div>\n                                <div className=\"bio-desc-wrapper\">\n                                <div className=\"spacer-2rem\"></div>\n                                <input className=\"acd-input\" type=\"checkbox\" id={`title-featured`} />\n                                        \n                                <label className=\"show-label\" htmlFor={`title-featured`} className=\"acd-label\">Show </label>\n                                <div className=\"desc-box-featured\">\n                                    { featured && featured.snippet.description}\n                                </div> \n                                <div className=\"content\">\n                                {featured &&\n                                    <small className=\"wrap-text-desc\" dangerouslySetInnerHTML={{ __html: urlify(featured.snippet.description) }}></small>\n                                }\n                                    \n                                </div>\n                                <div className=\"spacer-4rem\"></div>\n                                <div className=\"ad-featured\">\n                                <div id={`unit-${adFeatured}`} className=\"tmsads\"></div>\n                                </div>\n                            </div>\n                        \n                    </Col>\n                </Row>\n                <div className=\"spacer-4rem\"></div>\n                <h2 className=\"title\">Recent Vlogs</h2>\n                <Row className=\"bio-main-row\">\n                { latestVideos && \n                    latestVideos.map((video, index) =>{\n                        console.log('id', video.videoId)\n                        console.log('views', video.views)\n                        const str = video.carData.model\n                        const model = str.charAt(0).toUpperCase() +str.slice(1)\n                        const name = video.carData.make\n                        const titleCase = name.charAt(0).toUpperCase() +name.slice(1)\n                        const date = moment(video.snippet.publishedAt).fromNow()\n                        let price;\n                        const car = video.carData\n                        let weight = video.carData.features.Measurements[\"Curb weight\"]\n                        \n                        if(video.carData.price && video.carData.price.baseMSRP){\n                            price = numberWithCommas(video.carData.price.baseMSRP)\n                        }else{ price = ''}\n                        if(weight){\n                            weight = numberWithCommas(weight)\n                        }else{\n                            weight= 'N/A'\n                        }\n                        return (\n                        <Fragment key={video.videoId}>\n                        <Col sm={6} >\n                        <Row>\n                            <Col sm >\n                             <div className=\"videoWrapper\">\n                                <ReactPlayer\n                                onStart={() => runCounter(video.videoId, index)}\n                                width=\"560\" \n                                height=\"315\"\n                                url={videoWatchURL + video.videoId}\n                                controls={true}\n                                />\n                            </div>\n                   \n                                <h3 style={{marginTop:'10px'}}>{video.snippet.title}</h3>\n                                <small>{date}</small> {' |'}\n                                { <small>{views[index] ? views[index] : 0 } views</small>\n                                }\n                                <input className=\"acd-input\" type=\"checkbox\" id={`title${index}`} />\n                                    \n                                <label htmlFor={`title${index}`} className=\"acd-label\">Show </label>\n                                <div className=\"desc-box\">\n                                    {video.snippet.description}\n                                </div> \n                                <div className=\"content\">\n                                    <small className=\"whole-desc\" dangerouslySetInnerHTML={{ __html: urlify(video.snippet.description) }}></small>\n                                </div>\n                                <div className=\"spacer-4rem\"></div>\n                                <Comments videoId={video.videoId}/>\n                            </Col>\n                            <Col sm=\"auto\" className=\"bio-stats\">\n                                <div className=\"ad-size\">\n                      \n                                <SpecDiv video={video} titleCase={titleCase} price={price} model={model} dataid={video.carDataId} weight={weight}/>\n                                <div className=\"ad-container\">\n                                    <div id={`unit-${adInfluencer[index]}`} className=\"tmsads\" key={Math.random()}></div>\n                                    </div>\n                                </div>\n                            </Col>\n                        </Row>\n                    </Col>\n                    </Fragment>)\n                    })\n                }\n            </Row>\n       \n            </div>\n        </Layout>\n        \n    )\n}\n\n\nconst mapDispatchToProps = (dispatch) =>{\n    return{\n        \n    }\n}\nconst mapStateToProps = (state) => {\n    //syntax is propName: state.key of combineReducer.key\n    return{\n      username: state.user.username,\n      mongo: state.auth.mongo\n    }\n  }\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BioPage)\n\n","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Admin/Instagram.js",["431"],"import React, { useEffect, useState } from 'react'\nimport { Helmet } from \"react-helmet\"\nimport Layout from '../Layout/Layout'\nimport { Col, Row, Card, Button, Carousel, Pagination } from 'react-bootstrap'\nimport axios from 'axios'\nimport './insta.scss'\nimport { urlify } from '../Global/functions'\n// import { Carousel } from 'bootstrap'\n\nconst Instagram = () =>{\n    const [instaData, setInstaData] = useState([])\n    const [pageNum, setPageNum] = useState(1)\n    const [nextData, setNextData] = useState('')\n    const [prevData, setPrevData] = useState('')\n \n    const filterCarousel =  (data) =>{\n        const result = data.map(async data =>{\n            \n            if(data.media_type === 'CAROUSEL_ALBUM'){\n                const res = await axios.get(`https://graph.instagram.com/${data.id}/children?fields=media_url&access_token=IGQVJVLTJSRmRhemp3MTBqekJZAeFZAfYzFZANjJreEhCc1lVY05FaWd4T0tfN1NLVWp2WG52MG5ETTByR3NSVFo3M01PWk4tdFpzYzN2Ql9XMVRmelRmVEhwbFFwSDgzdzVOdDU5TkJB`)\n                \n                data.imgArr = res.data.data\n                return data\n            }else{\n                return data\n            }\n        })\n        Promise.all(result).then(res =>{\n            console.log('res in promise all', res)\n            setInstaData(res)\n            \n        })\n        \n    }\n    const setData = (prev, next) =>{\n        if(prev){\n            setPrevData(prev)\n        }else{\n            setPrevData('')\n        }\n        if(next){\n            setNextData(next)\n        }else{\n            setNextData('')\n        }\n    }\n    const nextPage = () =>{\n        setPageNum(pageNum +1)\n        axios.get(nextData).then(res =>{\n            console.log('res next page', res)\n            filterCarousel(res.data.data)\n            setData(res.data.paging.previous, res.data.paging.next)\n            \n        })\n    }\n    const prevPage = () =>{\n        setPageNum(pageNum -1)\n        axios.get(prevData).then(res =>{\n            filterCarousel(res.data.data)\n            setData(res.data.paging.previous, res.data.paging.next)\n        })\n    }\n    useEffect(() =>{\n        // axios.get(`https://graph.instagram.com/me/media?fields=id,caption,permalink,media_url&access_token=${process.env.REACT_APP_INSTA}`)\n        // IGQVJVLTJSRmRhemp3MTBqekJZAeFZAfYzFZANjJreEhCc1lVY05FaWd4T0tfN1NLVWp2WG52MG5ETTByR3NSVFo3M01PWk4tdFpzYzN2Ql9XMVRmelRmVEhwbFFwSDgzdzVOdDU5TkJB\n        axios.get(`https://graph.instagram.com/me/media?fields=id,caption,permalink,media_url,media_type,username&access_token=IGQVJVLTJSRmRhemp3MTBqekJZAeFZAfYzFZANjJreEhCc1lVY05FaWd4T0tfN1NLVWp2WG52MG5ETTByR3NSVFo3M01PWk4tdFpzYzN2Ql9XMVRmelRmVEhwbFFwSDgzdzVOdDU5TkJB`)\n      .then(res => {\n        setNextData(res.data.paging.next)\n        filterCarousel(res.data.data)\n        // setInstaData(res.data.data)\n      })\n    }, [])\n    return(\n        <Layout>\n            <Helmet>\n                <meta name=\"robots\" content=\"noindex\" />\n            </Helmet>\n            <div className=\"main-wrapper\">\n            <div className=\"spacer-4rem\"></div>\n            <h2 className=\"title\">Instagram Feed @ {instaData[0] && instaData[0].username}</h2>\n                <Row className=\"insta-row\" >\n                    {instaData[0] && \n                        instaData.map(data =>{\n                            const instaLink = data.permalink\n                            const caption = data.caption\n                            return (\n                                <Col md={4} xl={3} key={data.id}>\n                                    <Card style={{ width: '100%' }} >\n                                        <div className=\"square-insta\">\n                                            { data.media_type === 'VIDEO' ? \n                                            <video className=\"insta-video\" controls>\n                                            <source src={data.media_url}\n                                            type=\"video/mp4\"/>\n                                            </video>\n                                            : (\n                                                data.media_type === 'IMAGE' ? \n                                                <Card.Img variant=\"top\" src={data.media_url} />\n                                                :\n                                                <React.Fragment>\n                                                { data.imgArr[0] ?\n                                                    <Carousel  >\n                                                    {data.imgArr.map(img =>{\n                                                            return(\n                                                            <Carousel.Item key={img.id}>\n                                                            <img \n                                                            className=\"d-block w-100\"\n                                                            alt=\"images\"\n                                                            src={img.media_url} />\n                                                            </Carousel.Item> \n                                                            )\n                                                            \n                                                        })\n                                                    }\n                                                    </Carousel>\n                                                    : <div>test</div>\n                                                }\n                                                </React.Fragment>\n                                               \n                                            )\n                                            }\n                                        \n                                        </div>\n                                        \n                                        <Card.Body>\n                                            {/* <Card.Title>Card Title</Card.Title> */}\n                                            <Card.Text dangerouslySetInnerHTML={{ __html: caption && urlify(caption)}}>\n                                            </Card.Text>\n                                            <a target=\"_blank\" href={instaLink}>\n                                            <Button variant=\"outline-primary\">Go Instagram</Button>\n                                            </a>\n                                            \n                                        </Card.Body>\n                                    </Card>\n                                </Col>\n                                \n                            )\n                        })\n                        \n                    }\n                    \n                </Row>\n                <Pagination className=\"pagination-insta\">\n                    { prevData !== '' && <Pagination.Prev  onClick={prevPage}/> }\n                    <div className=\"page-num-insta\">{pageNum}</div>\n                    { nextData !== '' && <Pagination.Next onClick={nextPage} /> }\n                    \n                </Pagination>\n            </div>\n            \n        </Layout>\n    )\n}\n\nexport default Instagram","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Admin/AddCarData.js",["432"],"import React, { Fragment, useEffect, useState } from 'react'\nimport * as Realm from \"realm-web\"\n\n// import AdminLoginDiv from './AdminLoginDiv'\nimport { Container, Button, Form, Col, Row, Alert } from 'react-bootstrap'\n\nimport { logInUser } from '../../store/actions/authActions'\nimport { connect } from 'react-redux'\nimport short from 'short-uuid'\nimport loadable from '@loadable/component'\n\nconst ColorDiv = loadable(() => import('./colorDiv'))\nconst ColorInterior = loadable(() => import('./colorInterior'))\nconst FormText = loadable(() => import('./FormText'))\nconst FormCheckbox = loadable(() => import('./FormCheckbox'))\nconst AdminLoginDiv = loadable(() => import('./AdminLoginDiv'))\n\nconst AddCarData = (props) =>{\n    const [userObj, setUserObj] = useState({email: '', password: ''})\n    const [isLoggedIn, setIsLoggedIn] = useState(false)\n    // const maxAgeTest = 1 * 60 * 60\n    const app = new Realm.App({ id: process.env.REACT_APP_REALM_APP_ID })\n    const [price, setPrice] = useState({baseMSRP: null, baseInvoice: null})\n    const [powerFeatures, setPowerFeatures] = useState({})\n    const [colorExterior, setColorExterior] = useState([{name: '', rgb: null}])\n    const [colorInterior, setColorInterior] = useState([{name: '', rgb: null}])\n    const [basicData, setBasicData] = useState({make: '', model: '', year: null, id: null, name: '', totalSeating: null })\n    const [warranty, setWarranty] = useState({Basic: \"\", Drivetrain: \"\", Rust: \"\", Roadside: \"\"})\n    const [isSaved, setIsSaved] = useState(false)\n    const [measurements, setMeasurements] = useState({\n        \"Maximum cargo capacity\": \"\",\n        \"Curb weight\": \"\",\n        \"Cargo capacity, all seats in place\": \"\",\n        \"Angle of approach\": \"\",\n        \"Angle of departure\": \"\",\n        Length: \"\",\n        \"Ground clearance\": \"\",\n        Height: \"\",\n        \"Wheel base\": \"\",\n        Width: \"\"\n    })\n    const [fuel, setFuel] = useState({\n        \"Range in miles (cty/hwy)\": \"\",\n        \"Fuel tank capacity\": \"\",\n        \"Combined MPG\": \"\",\n        \"Fuel type\": \"\"\n    })\n    const [fuelMileage, setFuelMileage] = useState({\n        \"EPA mileage est\": {\n            \"(cty/hwy)\": \"\"\n        }\n    })\n    const [engine, setEngine] = useState({\n        Torque: \"\",\n        \"Base engine size\": \"\",\n        Horsepower: \"\",\n        \"Turning circle\": \"\",\n        Valves: \"\",\n        \"Base engine type\": \"\",\n        \"Valve timing\": \"\",\n        \"Cam type\": \"\",\n        Cylinders: \"\"\n    })\n    const [rearseats, setRearseats] = useState({})\n    const [comfort, setComfort] = useState({})\n    const [exteriorOptions, setExteriorOptions] = useState({})\n    const [driveTrain, setDriveTrain] = useState({})\n    const [suspension, setSuspension] = useState({})\n    const [instrumentation, setInstrumentation] = useState({})\n    const [entertainment, setEntertainment] = useState({})\n    const [frontseats, setFrontseats] = useState({})\n    const [safety, setSafety] = useState({})\n    const [tires, setTires] = useState({})\n    const [interiorOptions, setInteriorOptions] = useState({})\n    const [carObj, setCarObj] = useState({\n        id: null,\n        name: '',\n        make: '',\n        model: '',\n        year: null,\n        totalSeating: null,\n        typeCategories: {},\n        price: {\n            baseMSRP: null,\n            baseInvoice: null\n        },\n        color: {\n            EXTERIOR: [],\n            INTERIOR: []\n        },\n        features: {\n            \"Power Feature\": {\n                \"1 one-touch power windows\": false,\n                \"remote keyless power door locks\": false,\n                \"Heated mirrors\": false\n            },\n            Rearseats: {\n                \"Rear head room\": \"\",\n                \"Rear hip Room\": \"\",\n                \"Rear leg room\": \"\",\n                \"Rear shoulder room\": \"\",\n                \"reclining rear seats\": false,\n                \"Split-folding rear seatback\": false,\n                \"folding center armrest\": false\n            },\n            Warranty: {\n                Basic: \"\",\n                Drivetrain: \"\",\n                Rust: \"\",\n                Roadside: \"\"\n            },\n            Measurements: {\n                \"Maximum cargo capacity\": \"\",\n                \"Curb weight\": \"\",\n                \"Cargo capacity, all seats in place\": \"\",\n                \"Angle of approach\": \"\",\n                \"Angle of departure\": \"\",\n                Length: \"\",\n                \"Ground clearance\": \"\",\n                Height: \"\",\n                \"Wheel base\": \"\",\n                Width: \"\"\n            },\n            \"Comfort & Convenience\": {\n                \"Audio and cruise controls on steering wheel\": false,\n                \"cruise control\": false,\n                \"front and rear door pockets\": false,\n                \"rear view camera\": false,\n                \"tilt and telescopic steering wheel\": false\n            },\n            \"Exterior Options\": {\n                \"Wheel Locks\": false\n            },\n            \"Drive Train\": {\n                \"Drive type\": \"\",\n                Transmission: \"\"\n            },\n            Suspension: {\n                \"four-wheel independent suspension\": false\n            },\n            Instrumentation: {\n                clock: false,\n                \"trip computer\": false,\n                \"tachometer\": false\n            },\n            \"In Car Entertainment\": {\n                \"auxiliary audio input and USB with external media control\": false,\n                \"USB connection\": false,\n                \"AM/FM stereo\": false,\n                \"6 total speakers\": false\n            },\n            Frontseats: {\n                \"Front head room\": \"\",\n                \"bucket front seats\": false,\n                \"height adjustable driver seat\": false,\n                \"Front shoulder room\": \"\",\n                \"Front leg room\": \"\",\n                \"4 -way manual passenger seat adjustment\": false,\n                \"Front hip room\": \"\",\n                cloth: false\n            },\n            Fuel: {\n                \"EPA mileage est\": {\n                    \"(cty/hwy)\": \"\"\n                },\n                \"Range in miles (cty/hwy)\": \"\",\n                \"Fuel tank capacity\": \"\",\n                \"Combined MPG\": \"\",\n                \"Fuel type\": \"\"\n            },\n            Safety: {\n                \"4-wheel ABS\": false,\n                \"Rear door child safety locks\": false,\n                \"Rear center 3-point belt\": false,\n                \"child seat anchors\": false,\n                \"dual front side-mounted airbags\": false,\n                \"stability control\": false,\n                \"Passenger airbag occupant sensing deactivation\": false,\n                \"remote anti-theft alarm system\": false,\n                \"2 front headrests\": false,\n                \"3 rear headrests\": false,\n                \"dusk sensing headlamps\": false,\n                \"tire pressure monitoring\": false,\n                \"traction control\": false,\n                \"Ventilated front disc / solid rear disc brakes\": false\n            },\n            \"Tires and Wheels\": {\n                \"temporary spare tire\": false,\n                \"All season tires\": false,\n            },\n            Engine: {\n                Torque: \"\",\n                \"Base engine size\": \"\",\n                Horsepower: \"\",\n                \"Turning circle\": \"\",\n                Valves: \"\",\n                \"Base engine type\": \"\",\n                \"Valve timing\": \"\",\n                \"Cam type\": \"\",\n                Cylinders: \"\"\n            },\n            \"Interior Options\": {\n                \"Carpet Floor Mats\": false,\n                \"Interior Light Kit\": false,\n                \"Cargo Mat\": false\n            }\n        }\n    })\n    // console.log('obj', carObj.features['Comfort & Convenience'])\n    const addDiv = () =>{\n        setColorExterior(colorExterior=>[...colorExterior, {name: '', rgb: null}])\n    }\n    const addDivInterior = () =>{\n        setColorInterior(colorInterior => [...colorInterior, {name: '', rgb: null}])\n        console.log(colorInterior)\n    }\n        \n    const changeColorExterior = (e, index) =>{\n        let newArr = [...colorExterior]; // copying the old datas array\n        newArr[index] = {...newArr[index], [e.target.name]: e.target.value} // \n        setColorExterior(newArr)\n    }\n    const changeColorInterior = (e, index) =>{\n        let newArr = [...colorInterior]; // copying the old datas array\n        newArr[index] = {...newArr[index], [e.target.name]: e.target.value} // \n        setColorInterior(newArr)\n        console.log(colorInterior)\n    }\n    const handleChange = (e) =>[\n        setUserObj({\n            ...userObj,\n            [e.target.name]: e.target.value\n        })\n    ]\n    const changeBasicData = (e) =>{\n        setBasicData({\n            ...basicData,\n            [e.target.name]: e.target.value\n        })\n    }\n    const changePrice =(e)=>{\n        setPrice({\n            ...price,\n            [e.target.name]: Number(e.target.value)\n        })\n    }\n    const changeWarranty = (e)=>{\n        setWarranty({\n            ...warranty,\n            [e.target.name]: e.target.value\n        })\n    }\n    const changeMeasurements = (e) =>{\n        setMeasurements({\n            ...measurements,\n            [e.target.name]: e.target.value\n        })\n    }\n    const changeFuel = (e)=>{\n        setFuel({\n            ...fuel,\n            [e.target.name]: e.target.value\n        })\n    }\n    const changeFuelMileage = (e)=>{\n        setFuelMileage({ \n            \"(cty/hwy)\": e.target.value\n        })\n    }\n    const changeEngine = (e)=>{\n        setEngine({\n            ...engine,\n            [e.target.name]: e.target.value\n        })\n    }\n    const changePowerFeatures = (e) =>{\n        if(e.target.checked === true){\n            setPowerFeatures({\n                ...powerFeatures,\n                [e.target.name]: e.target.checked\n            })\n        }\n    }\n    const changeRearseats = (e) =>{\n        if(e.target.checked){\n            if(e.target.checked === true){\n                setRearseats({\n                    ...rearseats,\n                    [e.target.name]: e.target.checked\n                })\n            }\n        }else{\n            setRearseats({\n                ...rearseats,\n                [e.target.name]: e.target.value\n            })\n        }\n    }\n    const changeComfort = (e) =>{\n        if(e.target.checked === true){\n            setComfort({\n                ...comfort,\n                [e.target.name]: e.target.checked\n            })\n        }\n    }\n    const changeExteriorOptions = (e) =>{\n        if(e.target.checked === true){\n            setExteriorOptions({\n                ...exteriorOptions,\n                [e.target.name]: e.target.checked\n            })\n        }\n    }\n    const changeDriveTrain = (e) =>{\n        setDriveTrain({\n            ...driveTrain,\n            [e.target.name]: e.target.value\n        })\n    }\n    const changeSuspension = (e) =>{\n        if(e.target.checked === true){\n            setSuspension({\n                ...suspension,\n                [e.target.name]: e.target.checked\n            })\n        }\n    }\n    const changeInstrumentation = (e) =>{\n        if(e.target.checked === true){\n            setInstrumentation({\n                ...instrumentation,\n                [e.target.name]: e.target.checked\n            })\n        }\n    }\n    const changeFrontseats = (e)=>{\n        if(e.target.checked){\n            if(e.target.checked === true){\n                setFrontseats({\n                    ...frontseats,\n                    [e.target.name]: e.target.checked\n                })\n            }\n        }else{\n            setFrontseats({\n                ...frontseats,\n                [e.target.name]: e.target.value\n            })\n        }\n    }\n    const changeSafety = (e) =>{\n        if(e.target.checked === true){\n            setSafety({\n                ...safety,\n                [e.target.name]: e.target.checked\n            })\n        }\n    }\n    const changeTires = (e) =>{\n        if(e.target.checked === true){\n            setTires({\n                ...tires,\n                [e.target.name]: e.target.checked\n            })\n        }\n    }\n    const changeInteriorOptions = (e) =>{\n        if(e.target.checked === true){\n            setInteriorOptions({\n                ...interiorOptions,\n                [e.target.name]: e.target.checked\n            })\n        }\n    }\n    const changeEntertainment = (e) =>{\n        if(e.target.checked === true){\n            setEntertainment({\n                ...entertainment,\n                [e.target.name]: e.target.checked\n            })\n        }\n    }\n    const handleSubmitLogin = async (e) =>{\n        e.preventDefault()\n        e.preventDefault()\n        const emailLowerCase = userObj.email.toLowerCase()\n        const credentials = Realm.Credentials.emailPassword(emailLowerCase, userObj.password)\n        props.logInUser(credentials, emailLowerCase)\n        \n    }\n    const handleSubmitData = async (e) =>{\n        // e.preventDefault()\n        setFuel({\n            ...fuel,\n            \"EPA mileage est\": fuelMileage\n        })\n        const carData = {\n            isManual: true,\n            id: basicData.id,\n            name: basicData.name,\n            make: basicData.make,\n            model: basicData.model,\n            year: Number(basicData.year),\n            totalSeating: Number(basicData.totalSeating),\n            price: price,\n            color: {\n                EXTERIOR: colorExterior,\n                INTERIOR: colorInterior\n            },\n            features: {\n                \"Power Feature\": powerFeatures,\n                Rearseats: rearseats,\n                Warranty: warranty,\n                Measurements: measurements,\n                \"Comfort & Convenience\": comfort,\n                \"Exterior Options\": exteriorOptions,\n                \"Drive Train\": driveTrain,\n                Suspension: suspension,\n                Instrumentation: instrumentation,\n                \"In Car Entertainment\": entertainment,\n                Frontseats: frontseats,\n                Fuel: fuel,\n                Safety: safety,\n                \"Tires and Wheels\": tires,\n                Engine: engine,\n                \"Interior Options\": interiorOptions\n            }\n        }\n        const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n        const collection = mongo.db(\"smoke-show\").collection(\"cars-manual\")\n        try{\n            await collection.insertOne(carData).then(res =>{\n                console.log('success!')\n                setIsSaved(true)\n            })\n        }catch(err){\n            console.log(err)\n        }\n    }\n    useEffect(() => {\n        if(props.isLoggedIn){\n            setIsLoggedIn(true)\n        }else{\n            setIsLoggedIn(false)\n        }\n    }, [props.isLoggedIn])\n    useEffect(() => {\n        const token = sessionStorage.getItem('session_token')\n        if(token){\n            setIsLoggedIn(true)\n        }else{\n            setIsLoggedIn(false)\n        }\n    }, [])\n    return(\n        <Fragment>\n            {isLoggedIn ?\n            <Container>\n            <div className=\"spacer-4rem\"></div>\n                <h1>Add New Car Data</h1>\n                <div className=\"spacer-2rem\"></div>\n                <Form>\n                    <Form.Group as={Row} >\n                        <Form.Label column sm=\"4\">\n                        ID\n                        </Form.Label>\n                        <Col sm=\"8\">\n                        <Form.Control type=\"number\" pattern=\"\\d*\" placeholder=\"type number | leave blank if no data found\" name=\"id\" onChange={changeBasicData}/>\n                        </Col>\n                    </Form.Group>\n\n                    <Form.Group as={Row} >\n                        <Form.Label column sm=\"4\">\n                        Name\n                        </Form.Label>\n                        <Col sm=\"8\">\n                        <Form.Control type=\"text\" placeholder=\"Name\" name=\"name\" onChange={changeBasicData}/>\n                        </Col>\n                    </Form.Group>\n                    <Form.Group as={Row} >\n                        <Form.Label column sm=\"4\">\n                        Make\n                        </Form.Label>\n                        <Col sm=\"8\">\n                        <Form.Control type=\"text\" placeholder=\"Maker\" onChange={changeBasicData} name=\"make\" />\n                        </Col>\n                    </Form.Group>\n                    <Form.Group as={Row} >\n                        <Form.Label column sm=\"4\">\n                        Model\n                        </Form.Label>\n                        <Col sm=\"8\">\n                        <Form.Control type=\"text\" placeholder=\"Model\" onChange={changeBasicData} name=\"model\"/>\n                        </Col>\n                    </Form.Group>\n                    <Form.Group as={Row} >\n                        <Form.Label column sm=\"4\">\n                        year\n                        </Form.Label>\n                        <Col sm=\"8\">\n                        <Form.Control type=\"number\" pattern=\"\\d*\" placeholder=\"Type number\" onChange={changeBasicData} name=\"year\" />\n                        </Col>\n                    </Form.Group>\n                    <Form.Group as={Row} >\n                        <Form.Label column sm=\"4\">\n                        Price | base MSRP\n                        </Form.Label>\n                        <Col sm=\"8\">\n                        <Form.Control type=\"number\" pattern=\"\\d*\" placeholder=\"Type number\" name=\"baseMSRP\" onChange={changePrice}/>\n                        </Col>\n                    </Form.Group>\n                    <Form.Group as={Row} >\n                        <Form.Label column sm=\"4\">\n                        Price | base Invoice\n                        </Form.Label>\n                        <Col sm=\"8\">\n                        <Form.Control type=\"number\" pattern=\"\\d*\" placeholder=\"Type number\" onChange={changePrice} name=\"baseInvoice\" />\n                        </Col>\n                    </Form.Group>\n                    <Form.Group as={Row} >\n                        <Form.Label column sm=\"4\">\n                        totalSeating\n                        </Form.Label>\n                        <Col sm=\"8\">\n                        <Form.Control type=\"number\" placeholder=\"Type number\" onChange={changeBasicData} name=\"totalSeating\"/>\n                        </Col>\n                    </Form.Group>\n                    <Form.Group as={Row} >\n                        <Form.Label column sm=\"4\">\n                        Color | EXTERIOR <Button size=\"sm\" onClick={addDiv}>add color</Button>\n                        </Form.Label>\n                        <Col sm=\"8\">\n                        <Form.Control onChange={(e)=>changeColorExterior(e, 0)} name=\"name\" type=\"text\" placeholder=\"Name\" />\n                        </Col>\n                    </Form.Group>\n                    <Form.Group as={Row} >\n                        <Form.Label column sm=\"4\">\n                        Color EXTERIOR : RGB\n                        </Form.Label>\n                        <Col sm=\"8\">\n                        <Form.Control type=\"text\" pattern=\"\\d*\" placeholder=\"111,111,111\" name=\"rgb\" onChange={(e)=>changeColorExterior(e, 0)}  />\n                        </Col>\n                    </Form.Group>\n                    {\n                        colorExterior.map((exterior, index) =>{\n                            const unique = short.generate()\n                            return(\n                                <ColorDiv num={index + 1} changeColorExterior={changeColorExterior} key={unique}/>\n                            )\n                            \n                        })\n                    }\n                    <hr />\n                    <Form.Group as={Row} >\n                        <Form.Label column sm=\"4\">\n                        Color | Interior <Button size=\"sm\" onClick={addDivInterior}>add color</Button>\n                        </Form.Label>\n                        <Col sm=\"8\">\n                        <Form.Control onChange={(e)=>changeColorInterior(e, 0)} name=\"name\" type=\"text\" placeholder=\"Name\" />\n                        </Col>\n                    </Form.Group>\n                    <Form.Group as={Row} >\n                        <Form.Label column sm=\"4\">\n                        Color Interior : RGB\n                        </Form.Label>\n                        <Col sm=\"8\">\n                        <Form.Control type=\"text\" pattern=\"\\d*\" placeholder=\"111,111,111\" name=\"rgb\" onChange={(e)=>changeColorInterior(e, 0)}  />\n                        </Col>\n                    </Form.Group>\n                    {\n                        colorInterior.map((interior, index) =>{\n                            const unique = short.generate()\n                            return(\n                                <ColorInterior changeColorInterior={changeColorInterior} num={index +1} key={unique}/>\n                            )\n                            \n                        })\n                    }\n                    <hr/>\n                    <h3>Features</h3>\n                    <h3>Power Feature</h3>\n                    {  \n                        Object.keys(carObj.features['Power Feature']).map(key =>{\n                            const unique = short.generate()\n                        return <FormCheckbox key={unique} objKey={key} handleChange={changePowerFeatures}/>\n                    })}\n                    <hr/>\n                    <h3>Rearseats</h3>\n                    { Object.keys(carObj.features.Rearseats).map(key=>{\n                        const unique = short.generate()\n                        if(carObj.features.Rearseats[key]=== false || carObj.features.Rearseats[key]=== true){\n                            return <FormCheckbox key={unique} objKey={key} handleChange={changeRearseats} />\n                        }else{\n                            return (<Fragment key={unique}>\n                                    <FormText objKey={key} handleChange={changeRearseats} />\n                                    <hr/>\n                                    </Fragment>)\n                        }\n                    })}\n                    <h3>Warranty</h3>\n                    {Object.keys(carObj.features.Warranty).map(key =>{\n                        const unique = short.generate()\n                        return <FormText key={unique} objKey={key} handleChange={changeWarranty}/>\n                    })}\n                    <hr />\n                    <h3>Measurements</h3>\n                    {Object.keys(carObj.features.Measurements).map(key =>{\n                        const unique = short.generate()\n                        return <FormText key={unique} objKey={key} handleChange={changeMeasurements} />\n                    })}\n                    <hr />\n                    <h3>Comfort & Convenience</h3>\n                    {  \n                        Object.keys(carObj.features['Comfort & Convenience']).map(key =>{\n                            const unique = short.generate()\n                        return <FormCheckbox key={unique} objKey={key} handleChange={changeComfort}/>\n                    })}\n                    <h3>Exterior Options</h3>\n                    {  \n                        Object.keys(carObj.features['Exterior Options']).map(key =>{\n                            const unique = short.generate()\n                        return <FormCheckbox key={unique} objKey={key} handleChange={changeExteriorOptions}/>\n                    })}\n                    <hr />\n                    <h3>Drive Train</h3>\n                    { Object.keys(carObj.features['Drive Train']).map(key =>{\n                        const unique = short.generate()\n                        return <FormText key={unique} objKey={key} handleChange={changeDriveTrain} />\n                    })\n                    }\n                    <hr />\n                    <h3>Suspension</h3>\n                    {  \n                        Object.keys(carObj.features.Suspension).map(key =>{\n                            const unique = short.generate()\n                        return <FormCheckbox key={unique} objKey={key} handleChange={changeSuspension}/>\n                    })}\n                    <hr />\n                    <h3>Instrumentation</h3>\n                    {  \n                        Object.keys(carObj.features.Instrumentation).map(key =>{\n                            const unique = short.generate()\n                        return <FormCheckbox key={unique} objKey={key} handleChange={changeInstrumentation}/>\n                    })}\n                    <h3>In Car Entertainment</h3>\n                    {  \n                        Object.keys(carObj.features['In Car Entertainment']).map(key =>{\n                            const unique = short.generate()\n                        return <FormCheckbox key={unique} objKey={key} handleChange={changeEntertainment}/>\n                    })}\n                    <h3>Frontseats</h3>\n                    { Object.keys(carObj.features.Frontseats).map(key=>{\n                        const unique = short.generate()\n                        if(carObj.features.Frontseats[key]=== false || carObj.features.Frontseats[key]=== true){\n                            return <FormCheckbox key={unique} objKey={key} handleChange={changeFrontseats} />\n                        }else{\n                            return <Fragment>\n                                    <FormText key={unique} objKey={key} handleChange={changeFrontseats}/>\n                                    <hr/>\n                                    </Fragment>\n                        }\n                    })}\n                    <h3>Fuel</h3>\n                    <Form.Group as={Row} >\n                        <Form.Label column sm=\"4\">\n                        EPA mileage est | (cty/hwy)\n                        </Form.Label>\n                        <Col sm=\"8\">\n                        <Form.Control type=\"text\" placeholder=\"Type text\" onChange={changeFuelMileage}/>\n                        </Col>\n                    </Form.Group>\n                    { Object.keys(carObj.features.Fuel).map(key =>{\n                        const unique = short.generate()\n                        if(key === carObj.features.Fuel['EPA mileage est'] ){\n                            return ''\n                        }else{\n                            return <FormText key={unique} objKey={key} handleChange={changeFuel} />\n                        }\n                        \n                    })\n                    }\n                    <hr/>\n                    <h3>Safety</h3>\n                    {  \n                        Object.keys(carObj.features.Safety).map(key =>{\n                            const unique = short.generate()\n                        return <FormCheckbox key={unique} objKey={key} handleChange={changeSafety}/>\n                    })}\n                    <hr />\n                    <h3>Tires and Wheels</h3>\n                    {  \n                        Object.keys(carObj.features['Tires and Wheels']).map(key =>{\n                            const unique = short.generate()\n                        return <FormCheckbox key={unique} objKey={key} handleChange={changeTires} />\n                    })}\n                    <h3>Engine</h3>\n                    { Object.keys(carObj.features.Engine).map(key =>{\n                        const unique = short.generate()\n                        return <FormText key={unique} objKey={key} handleChange={changeEngine} />\n                    })\n                    }\n                    <hr />\n                    <h3>Interior Options</h3>\n                    {  \n                        Object.keys(carObj.features['Interior Options']).map(key =>{\n                            const unique = short.generate()\n                        return <FormCheckbox key={unique} objKey={key} handleChange={changeInteriorOptions}/>\n                    })}\n                    {isSaved && <Alert variant=\"success\">Successfully saved!</Alert>}\n                    <Button style={{margin:'4rem auto', width: '100%'}} onClick={handleSubmitData}>Save data</Button>\n                </Form>\n            </Container>\n             : <AdminLoginDiv handleSubmitLogin={handleSubmitLogin} handleChange={handleChange} />}\n        </Fragment>\n    )\n}\nconst mapDispatchToProps = (dispatch) =>{\n    return {\n        logInUser: (credentials, email) => dispatch(logInUser(credentials, email))\n    }\n}\nconst mapStateToProps = (state) => {\n    //syntax is propName: state.key of combineReducer.key\n    return{\n        isLoggedIn: state.auth.isLoggedIn\n    }\n  }\nexport default connect(mapStateToProps, mapDispatchToProps)(AddCarData)","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Admin/CarImgUpload.js",["433","434"],"import React, { useState, useEffect } from 'react'\nimport {logOutUser} from '../../store/actions/authActions'\nimport { connect } from 'react-redux'\nimport {Helmet} from \"react-helmet\"\nimport { Container, Form, Button, Alert } from 'react-bootstrap'\n// import AdminLoginDiv from './AdminLoginDiv'\nimport jwt from 'jsonwebtoken'\nimport * as Realm from \"realm-web\"\nimport loadable from '@loadable/component'\nimport { carsAllYear, carYears } from '../carTempData'\n\nconst appConfig = {\n    id: process.env.REACT_APP_REALM_APP_ID,\n    timeout: 10000, // timeout in number of milliseconds\n  };\nconst app = new Realm.App(appConfig);\n\nconst AdminLoginDiv = loadable(() => import('./AdminLoginDiv'))\n\nconst CarImgUpload = (props) =>{\n    // const carmake = 'lamborghini'\n    // const caryear = '2016'\n    const [carObj, setCarObj] = useState({})\n    // const year = 2016\n    const [userObj, setUserObj] = useState({email: '', password: ''})\n    const [isLoggedIn, setIsLoggedIn] = useState(false)\n    const [msg, setMsg] = useState('')\n    const [imgThumb, setImgThumb] = useState()\n    const [pic, setPic] = useState()\n    const [imgBase64, setImgBase64] = useState()\n    const maxAgeTest = 1 * 60 * 60\n    const [imgName, setImgName] = useState()\n    const [carName, setCarName] = useState()\n    const [resMsg, setResMsg] = useState()\n    const bucketName = process.env.REACT_APP_BUCKET_NAME_CAR\n    const baseUrl = 'https://s3.amazonaws.com/thesmokeshow'\n\n    const changeUserObj = (e) =>{\n        setUserObj({\n            ...userObj,\n            [e.target.name]: e.target.value\n        })\n        \n    }\n    const picUploadNiceId = (e) =>{\n        console.log('car obj', carObj)\n        const file = e.target.files[0] \n        console.log('file', file)\n        let arr = file.name.split('_')\n        arr.shift()\n        console.log('arr', arr)\n        let str = arr.join('')\n        const index = str.lastIndexOf('.')\n        const trimmed = str.slice(0, index)\n        // console.log('name?', trimmed.replaceAll(\"-\", \" \"))\n        // // setCarName(trimmed.replaceAll(\"-\", \" \"))\n        // const replaced = trimmed.replace(':', '/')\n        setCarName(trimmed)\n        // setImgName(file.name.replaceAll(\"-\", \" \"))\n        setImgName(file.name)\n        setPic(e.target.files[0])\n        setImgThumb(URL.createObjectURL(e.target.files[0]))\n        const reader = new FileReader()\n        reader.onload = (event) => {\n        const base64 = event.target.result.split(\",\").pop()\n          setImgBase64(base64)\n        };\n        reader.readAsDataURL(file)\n    }\n    const picUpload = (e) =>{\n        console.log('car obj', carObj)\n        const file = e.target.files[0] \n        console.log('file', file)\n        let arr = file.name.split('_')\n        arr.shift()\n        console.log('arr', arr)\n        let str = arr.join('')\n        const index = str.lastIndexOf('.')\n        const trimmed = str.slice(0, index)\n        console.log('name?', trimmed.replaceAll(\"-\", \" \"))\n        // setCarName(trimmed.replaceAll(\"-\", \" \"))\n        const replaced = trimmed.replace(':', '/')\n        setCarName(replaced)\n        // setImgName(file.name.replaceAll(\"-\", \" \"))\n        setImgName(file.name)\n        setPic(e.target.files[0])\n        setImgThumb(URL.createObjectURL(e.target.files[0]))\n        const reader = new FileReader()\n        reader.onload = (event) => {\n        const base64 = event.target.result.split(\",\").pop()\n          setImgBase64(base64)\n        };\n        reader.readAsDataURL(file)\n    }\n    const handleChange = (e) =>{\n        setCarObj({\n            ...carObj,\n            [e.target.name]: e.target.value\n        })\n\n        console.log(e.target.value)\n        console.log(carObj)\n    }\n    const savePicNiceId = async () =>{\n        console.log('pic', pic)\n        console.log(carObj)\n        const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n        const collectionCars = mongo.db(process.env.REACT_APP_REALM_DB_NAME).collection(\"cars\")\n\n        const filekey = `/${carObj.make}/${carObj.year}/${imgName}`\n        console.log(filekey)\n        try {\n            await app.currentUser.functions.putImageObjToS3(imgBase64, bucketName, filekey, pic.type).then(async res =>{\n                console.log(res)\n                \n                const filter = {make: carObj.make, year: Number(carObj.year), niceId: carName}\n                await collectionCars.findOne(filter).then(async data =>{\n                    console.log('data', data)\n                    console.log('_id', data._id)\n                    // const replaced = filekey.replaceAll(\" \", \"+\")\n                    if(data){\n                        await collectionCars.updateOne(\n                            { _id: {\"$oid\": data._id.toString()}},\n                            { $set: {imgUrl: baseUrl + filekey}},\n                            { upsert: true}\n                        ).then(res =>{\n                            console.log(res)\n                        })\n                    }\n                })\n            })\n        } catch (error) {\n            console.log(error)\n        }\n\n    }\n    const savePic = async () =>{\n        const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n        const collectionCars = mongo.db(process.env.REACT_APP_REALM_DB_NAME).collection(\"cars\")\n\n        const filekey = `/${carObj.make}/${carObj.year}/${imgName}`\n        console.log(filekey)\n        try {\n            await app.currentUser.functions.putImageObjToS3(imgBase64, bucketName, filekey, pic.type).then(async res =>{\n                console.log(res)\n                \n                const filter = {make: carObj.make, year: Number(carObj.year), name: carName}\n                await collectionCars.findOne(filter).then(async data =>{\n                    console.log('data', data)\n                    console.log('_id', data._id)\n                    const replaced = filekey.replaceAll(\" \", \"+\")\n                    if(data){\n                        \n                        await collectionCars.updateOne(\n                            { _id: {\"$oid\": data._id.toString()}},\n                            { $set: {imgUrl: baseUrl + replaced}},\n                            { upsert: true}\n                        ).then(res =>{\n                            console.log(res)\n                        })\n                    }\n                })\n            })\n        } catch (error) {\n            console.log(error)\n        }\n\n    }\n    const handleSubmitLogin = async (e) =>{\n        setMsg('')\n        e.preventDefault()\n        const emailLowerCase = userObj.email.toLowerCase()\n        const credentials = Realm.Credentials.emailPassword(emailLowerCase, userObj.password)\n        try{\n            app.logIn(credentials).then(async user =>{\n                if(app.currentUser.id === user.id){\n                    console.log('user updated')\n                }else{\n                    console.log('user is not updated')\n                }\n                setIsLoggedIn(true)\n                const tokenCredentials = jwt.sign({ cre: credentials }, process.env.REACT_APP_JWT_SECRET, {expiresIn: maxAgeTest})\n                sessionStorage.setItem('session_user', tokenCredentials)\n      \n            })\n        }catch(err){\n            console.log(err)\n            setMsg('login fail')\n        }\n    }\n\n    const handleLogout = () =>{\n        props.logOutUser()\n        setIsLoggedIn(false)\n    }\n    useEffect(() => {\n        const tokenUser = sessionStorage.getItem('session_user')\n        if(tokenUser){\n            setIsLoggedIn(true)\n        }else{\n            setIsLoggedIn(false)\n        }\n\n    }, [])\n    return(\n        <div>\n        <Helmet>\n            <meta name=\"robots\" content=\"noindex, nofollow\" />\n        </Helmet>\n            {isLoggedIn ? \n            <Container className=\"\" style={{marginTop: '4rem'}}>\n            \n                <center>\n                <img src={imgThumb ? imgThumb : ''} \n                    style={{width: '200px', height: '200px', objectFit: 'cover'}}\n                />\n                <p>{pic && pic.name}</p>\n                <p>uploading url: {imgName && imgName}</p>\n                {resMsg && <Alert variant=\"success\">Uploaded</Alert>}\n                <Form style={{width: '500px', margin: '2rem auto', }}>\n                    <Form.Group controlId=\"select1\">\n                        <Form.Label>Slelect Make</Form.Label>\n                        <Form.Control as=\"select\" name=\"make\" custom onChange={handleChange}>\n                        {carsAllYear && carsAllYear.map(car =>{\n                            return(\n                                <option  value={car} key={car}>{car}</option>\n                            )\n                            \n                        })}\n                        </Form.Control>\n                    </Form.Group>\n                    <div className=\"spacer-2rem\"></div>\n                    <Form.Group controlId=\"select1\">\n                        <Form.Label>Example select</Form.Label>\n                        <Form.Control as=\"select\" name=\"year\" custom onChange={handleChange}>\n                        {carYears && carYears.map(year =>{\n                            return(\n                                <option  value={year} key={year}>{year}</option>\n                            )\n                            \n                        })}\n                        </Form.Control>\n                    </Form.Group>\n                    <br/><br/>\n                    <Form.Group>\n                        <Form.File \n                        id=\"exampleFormControlFile1\" \n                        label=\"NiceId \"\n                        onChange={picUploadNiceId}\n                        style={{background: 'aquamarine', padding: '1rem'}}\n                        />\n                    </Form.Group>\n                    <div className=\"spacer-2rem\"></div>\n                    <Form.Group>\n                        <Form.File \n                        id=\"exampleFormControlFile2\" \n                        label=\"Name field\"\n                        onChange={picUpload}\n                        style={{background: 'lightgray', padding: '1rem'}}\n                        />\n                    </Form.Group>\n                </Form>\n                <Button style={{minWidth: '200px', background: 'aquamarine', color: 'black'}}  onClick={savePicNiceId}>NiceID</Button><br/><br/><br/>\n                <Button style={{minWidth: '200px'}} variant=\"warning\" onClick={savePic}>Name -deprecated</Button>\n                <br/><br/><br/>\n                <Button onClick={handleLogout} variant=\"secondary\" style={{minWidth: '200px'}}>Logout</Button><br/><br/><br/>\n            </center>\n            \n            </Container>\n            :\n            <AdminLoginDiv handleSubmitLogin={handleSubmitLogin} handleChange={changeUserObj} msg={msg} />\n            }\n        </div>\n    )\n}\n\nconst mapDispatchToProps = (dispatch) =>{\n    return{\n        logOutUser: () => dispatch(logOutUser())\n    }\n}\nexport default connect(null, mapDispatchToProps)(CarImgUpload)","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Influencer/Garage.js",["435","436","437"],"import React, { useState, useEffect } from 'react'\nimport { Helmet } from \"react-helmet\"\nimport * as Realm from \"realm-web\"\nimport Layout from '../Layout/Layout'\nimport { connect } from 'react-redux'\nimport noImg from '../../assets/global/no_image.jpg'\nimport editIcon from '../../assets/global/edit-icon.svg'\nimport { Button, Row, Col, Form } from 'react-bootstrap'\nimport { attachMsg, logOutUser, openLoginModal } from '../../store/actions/authActions'\nimport './garage.scss'\n\nimport jwt from 'jsonwebtoken'\nimport moment from 'moment'\nimport { getInfluencer }from '../../store/actions/influencerActions'\nimport loadable from '@loadable/component'\n\nconst SettingModal = loadable(() => import('./SettingModal'))\nconst SubNav = loadable(() => import('./SubNav'))\nconst VehicleCard = loadable(() => import('../Global/vehicleCard'))\nconst CreateNewCar = loadable(() => import('./CreateNewCar'))\n\nconst Garage = (props) =>{\n    let today = new Date()\n    const timeISO = today.toISOString()\n    let published = new Date('2021-03-01')\n    const publishedISO = published.toISOString()\n    const slug = 'garage'\n    let userIdParam;\n    const name = props.match.params.username\n    if(name === 'EddieX'){\n        userIdParam = '60230361f63ff517d4fdad14'\n    }else if(name === 'Lexurious-Fleet'){\n        userIdParam = '602303890ff2832f7d19a2af'\n    }\n    const [profileUser, setProfileUser] = useState({fname: '', lname: '', profilePic: '', profileCover: '', username: '', profileDesc: '', favSong: '', favArtist: ''})\n    const [allowEdit, setAllowEdit] = useState(false)\n    const [editMode, setEditMode] = useState({about: false, song: false, artist: false})\n    // const [formattedFans, setFormattedFans] = useState('')\n    const [showSetting, setShowSetting] = useState(false);\n    const [userCars, setUserCars] = useState([])\n    const [showAddCar, setShowAddCar] = useState(false)\n    const [numOfComments, setNumComments] = useState(null)\n    const altData = {uername: 'No username yet', userId: '', profileDesc: 'No description yet.', myCars: [] }\n    const [formattedTime, setFormattedTime] = useState(null)\n    const altCarData = {name: 'No data yet', upgrades: 'No data yet', color: 'No data yet', wheels: 'No data yet', performance: 'No data yet', category: 'Dream car', imgUlr: noImg, favSong: 'Nodata yet', favArtist: 'No data yet'}\n    const appConfig = {\n        id: process.env.REACT_APP_REALM_APP_ID,\n        // timeout: 10000, \n        // timeout in number of milliseconds\n      };\n    const app = new Realm.App(appConfig);\n    \n    const handleCloseAddCarModal = () => setShowAddCar(false)\n    const handleShowAddCarModal = () => setShowAddCar(true)\n\n    const handleChangeProfile = (e) =>{\n        setProfileUser({\n            ...profileUser,\n            [e.target.name]: e.target.value\n        })\n    }\n    const handleShowSetting = () =>{\n        \n        const token = sessionStorage.getItem('session_token')\n        jwt.verify(token, process.env.REACT_APP_JWT_SECRET, function(err, decoded) {\n            if (err) {\n                console.log('err', err)\n                \n            }else{\n                setProfileUser({\n                    ...profileUser,\n                    email: decoded.userData.email\n                })\n                setShowSetting(true)\n            }\n          });\n        \n    }\n    const handleCloseSetting = () =>{\n        setShowSetting(false)\n    }\n\n    const updateProfileData = (data, key)=>{\n\n        setProfileUser({\n            ...profileUser,\n            [key]: data\n        })\n    }\n    const updateUserDetails = (fname, lname, username) =>{\n        setProfileUser({\n            ...profileUser,\n            fname: fname,\n            lname: lname,\n            username: username\n        })\n    }\n    const updateCarData = (data) =>{\n        setUserCars(prevArray => [...prevArray, data])\n    }\n   \n    const handleDataUpdate = async (e) =>{\n        e.preventDefault()\n  \n        if(app.currentUser.id === profileUser.userId){\n            const mongodb = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME);\n            const mongoCollection = mongodb.db(process.env.REACT_APP_REALM_DB_NAME).collection(\"influencers\")\n    \n            try{\n                await mongoCollection.updateOne(\n                    { \"userId\": app.currentUser.id},\n                    {\n                        \"$set\": {\n                            \"profileDesc\": profileUser.profileDesc,\n                            \"favSong\": profileUser.favSong,\n                            \"favArtist\": profileUser.favArtist\n                          }\n                    }\n                ).then(res =>{\n                    console.log('res', res)\n                })\n            }catch(err){\n                console.log(err)\n            }\n            setEditMode({...editMode, about: false, song: false, artist: false})\n        }\n        \n    }\n    const editAbout = ()=>{\n        return(\n            <Form>\n                <Form.Group >\n                    <Form.Label>Edit</Form.Label>\n                    <Form.Control as=\"textarea\" rows={3} name=\"profileDesc\" value={profileUser.profileDesc && profileUser.profileDesc } onChange={handleChangeProfile} />\n                </Form.Group>\n                <div className=\"bio-edit-btn-wrapper\">\n                    <Button variant=\"primary\" type=\"submit\" onClick={handleDataUpdate} className=\"bio-edit-btn\">\n                        Submit\n                    </Button>\n                </div>\n                \n            </Form>\n        )\n    }\n    const editSong = ()=>{\n        return(\n            <Form>\n                <Form.Group >\n                    <Form.Label>Edit</Form.Label>\n                    <Form.Control as=\"textarea\" rows={3} name=\"favSong\" value={profileUser.favSong && profileUser.favSong } onChange={handleChangeProfile} />\n                </Form.Group>\n                <div className=\"bio-edit-btn-wrapper\">\n                    <Button variant=\"primary\" type=\"submit\" onClick={handleDataUpdate} className=\"bio-edit-btn\">\n                        Submit\n                    </Button>\n                </div>\n                \n            </Form>\n        )\n    }\n    const editArtist = ()=>{\n        return(\n            <Form>\n                <Form.Group >\n                    <Form.Label>Edit</Form.Label>\n                    <Form.Control as=\"textarea\" rows={3} name=\"favArtist\" value={profileUser.favArtist && profileUser.favArtist } onChange={handleChangeProfile} />\n                </Form.Group>\n                <div className=\"bio-edit-btn-wrapper\">\n                    <Button variant=\"primary\" type=\"submit\" onClick={handleDataUpdate} className=\"bio-edit-btn\">\n                        Submit\n                    </Button>\n                </div>\n                \n            </Form>\n        )\n    }\n\n    const getInfluencerData = async (credentials) =>{\n        try{\n            await app.logIn(credentials).then(async user =>{\n                if(userIdParam === user.id){\n                    console.log('param matched')\n                    setAllowEdit(true)\n                }else{\n                    setAllowEdit(false)\n                }\n                const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n                const collectionInfluencer = mongo.db(\"smoke-show\").collection(\"influencers\")\n                const filter = {userId: userIdParam}\n                try{\n                    await collectionInfluencer.findOne(filter).then( user =>{\n                        const userId = user.userId\n                        setProfileUser(user)\n                        if(typeof(user.joined) == 'undefined'){\n                            setFormattedTime('No data')\n                        }else{\n                            const formatted = moment(user.joined).local().format('MMMM Do YYYY')\n                            setFormattedTime(formatted)\n                        }\n                        getTotalComments(mongo)\n                        getMyCars(mongo)\n                        return user\n                    })\n                }catch(err){\n                    console.log(err)\n                }\n\n            })\n        }catch(err){\n            console.log(err)\n        }\n        \n    }\n    \n    const getTotalComments = async (mongo) =>{\n        \n        const mongoCollectionComments = mongo.db(\"smoke-show\").collection(\"comments\")\n        \n        const filter = {userId: userIdParam}\n        await mongoCollectionComments.find(filter).then(res =>{\n            setNumComments(res.length)\n        })\n    }\n    const getMyCars = async (mongo) =>{\n        const mongoCollection = mongo.db(\"smoke-show\").collection(\"my-cars\")\n        \n        const filter = {userId: userIdParam}\n        await mongoCollection.find(filter).then( cars =>{\n            setUserCars(cars)\n        })\n    }\n    const loginCheck = async () =>{\n        const token = sessionStorage.getItem('session_token')\n        const tokenUser = sessionStorage.getItem('session_user')\n        if(token){\n            jwt.verify(token, process.env.REACT_APP_JWT_SECRET, function(err, decoded) {\n                if (err) {\n                    console.log('time out')\n                    // timeout\n                    const credentials = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTH_PUBLIC_VIEW);\n                    props.logOutUser()\n                    props.openLoginModal(true)\n                    getInfluencerData(credentials)\n                }else{\n                    console.log('logged in')\n                    const credentials = jwt.verify(tokenUser, process.env.REACT_APP_JWT_SECRET)\n                    getInfluencerData(credentials.cre)\n                    if(decoded.userData.userId === userIdParam){\n                        setAllowEdit(true)\n                    }else{setAllowEdit(false)}\n                }\n              });\n            \n        }else{\n            console.log('no token')\n            const credentials = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTH_PUBLIC_VIEW);\n            getInfluencerData(credentials)\n        }\n    }\n    useEffect(() => {\n        if(props.customData.userId === userIdParam){\n            setAllowEdit(true)\n        }else{\n            setAllowEdit(false)\n        }\n    }, [props.customData])\n\n    useEffect(() => {\n        // getDataAsCurrent()\n        loginCheck()\n        props.getInfluencer(userIdParam)\n    }, [])\n\n    return(\n        <Layout   >\n        <Helmet>\n            <meta charSet=\"utf-8\" />\n            <title>Influencer Garage page | The Smoke Show</title>\n            <meta name=\"description\" content={`An Influencer + car Vlogger ${name} profile page on The Smoke Show. Check out ${name}'s garage, dream cars and more information here`} />\n            <link rel=\"canonical\" href={`https://thesmokeshow.com/${name}/${slug}`} />\n            <script type=\"application/ld+json\">\n            {`\n                    {\n                        \"@context\": \"http://schema.org\",\n                        \"@graph\": [{\"@type\":\"WebSite\",\"@id\":\"https://thesmokeshow.com/#website\",\n                        \"url\":\"https://thesmokeshow.com/\",\n                        \"name\":\"The Smoke Show\",\n                        \"description\":\"The Smoke Show is a home for auto fans, built by auto fans. The best place to watch Car Vloggers and find all Car Info. Learn all about giveaways and buy swag!\",\n                        \"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":\"https://thesmokeshow.com/search?s={search_term_string}\",\"query-input\":\"required name=search_term_string\"}],\n                        \"inLanguage\":\"en\"},\n                        {\"@type\": \"WebPage\",\n                        \"@id\": \"https://thesmokeshow.com/influencer/${name}/${slug}/#webpage\", \"url\": \"https://thesmokeshow.com/influencer/influencer/${name}/${slug}/\", \"name\": \"Influencer + Vlogger ${name}'s Garage page\",\"isPartOf\":{\"@id\":\"https://thesmokeshow.com/#website\"}, \"datePublished\": \"${publishedISO}\", \"dateModified\": \"${timeISO}\", \"description\": \"An Influencer + Vlogger ${name} profile page on The Smoke Show. Check out ${name}'s garage, dream cars and more information here.\", \"breadcrumb\":{\"@id\":\"https://thesmokeshow.com/influencer/${name}/${slug}/#breadcrumb\"},\"inLanguage\":\"en\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https://thesmokeshow.com/influencer/${name}/${slug}/\"]}]},\n                        {\"@type\":\"BreadcrumbList\",\"@id\":\"https://thesmokeshow.com/#breadcrumb\",\n                        \"itemListElement\":[{\n                            \"@type\":\"ListItem\",\"position\":1,\n                            \"item\":{\"@type\":\"WebPage\",\"@id\":\"https://thesmokeshow.com/\",\"url\":\"https://thesmokeshow.com/\",\"name\":\"Home\"}\n                            },\n                            {\n                                \"@type\":\"ListItem\",\n                                \"position\":2,\n                                \"item\":{\"@type\":\"WebPage\",\"@id\":\"https://thesmokeshow.com/influencers/\",\"url\":\"https://thesmokeshow.com/influencers/\",\"name\":\"Car Influencers and Vloggers\"}\n                            },\n                            {\n                                \"@type\":\"ListItem\",\n                                \"position\":3,\n                                \"item\":{\"@type\":\"WebPage\",\"@id\":\"https://thesmokeshow.com/influencers/${name}/\",\"url\":\"https://thesmokeshow.com/influencers/${name}/\",\"name\":\"Car Influencer ${name}'s featured page\"}\n                            },\n                            {\n                                \"@type\":\"ListItem\",\n                                \"position\":4,\n                                \"item\":{\"@type\":\"WebPage\",\"@id\":\"https://thesmokeshow.com/influencers/${name}/${slug}\",\"url\":\"https://thesmokeshow.com/influencers/${name}//${slug}\",\"name\":\"All videos from car Influencer + Vlogger ${name}\"}\n                            }\n                            ]}\n                        ]\n                    }\n                `}\n        </script>\n        </Helmet>\n        {showAddCar && <CreateNewCar show={showAddCar} handleClose={handleCloseAddCarModal} profileUser={profileUser} updateProfileData={updateProfileData} updateCarData={updateCarData} getMyCars={getMyCars} />}\n            {showSetting && <SettingModal show={showSetting} handleShowSetting={handleShowSetting} handleCloseSetting={handleCloseSetting} profileUser={profileUser}  updateProfileData={updateProfileData} updateUserDetails={updateUserDetails}/>}\n            <div className=\"main-wrapper\">\n                <div className=\"spacer-4rem\"></div>\n                <SubNav influencer={profileUser} formattedFans={props.formattedFans} allowEdit={allowEdit} handleShowSetting={handleShowSetting} username={name} />\n                {/* <div className=\"garage-setting-wrapper\">\n                    {allowEdit && \n                        <Button className=\"garage-setting-btn\" onClick={handleShowSetting} >\n                            <img src={settingsIcon} alt=\"setting\" className=\"setting-icon\"/>\n                            Settings\n                        </Button>\n                    }\n                </div> */}\n                    \n                <div className=\"spacer-4rem\"></div>\n                <h2 className=\"title\">Influencer Garage</h2>\n                {/* <div className=\"bio-fleet-img\">\n                    <img\n                    src={ typeof(profileUser.profileCover) == 'undefined' || !profileUser.hasOwnProperty(\"profileCover\") ?  noImg : profileUser.profileCover }\n                    alt=\"user selected profile image\"\n                     />\n                </div> */}\n                <div className=\"spacer-2rem\"></div>\n                <div className=\"bio-content-wrapper\">\n           \n                    <Row className=\"bio-height-adj\">\n                        <Col sm={4}>\n                            <div className=\"bio-container box-shadow-white\">\n                                <p className=\"bio-about no-m-b\"><strong>About: {` ${profileUser.fname} ${profileUser.lname}`}</strong></p>\n                                <div className=\"\">\n                                    <p className=\"bio-content bio-border\">\n                                        {editMode.about ? editAbout()\n                                        : [\n                                            (profileUser.profileDesc \n                                                ? <p >{profileUser.profileDesc}</p>\n                                                : <p>{altData.profileDesc}</p>\n                                            )\n                                            ]\n                                        }\n                                    { !editMode.about && <br/> }\n                                    <div className=\"edit-icon-wrapper\" onClick={()=>{setEditMode({...editMode, about: true})}}>\n                                        {editMode.about ? '' : [\n                                            (allowEdit && <img className=\"edit-icon\" src={editIcon} alt=\"Edit about you\"/>)\n                                        ]}\n                                    </div>\n                                    </p>\n                                </div>\n                                \n                                <Row className=\"bio-border pt-pb-15 bio-row-adj\">\n                                    <Col sm={4}>\n                                        <p className=\"no-m-b\">Joined:</p>\n                                    </Col>\n                                    <Col sm={8}>\n                                        <p>{formattedTime ? formattedTime : 'No data'}</p>\n                                    </Col>\n                                </Row>\n                                <Row className=\"bio-border pt-pb-15 bio-row-adj\">\n                                    <Col sm={4}>\n                                        <p className=\"no-m-b\">Total Comments:</p>\n                                    </Col>\n                                    <Col sm={8}>\n                                        <p className=\"no-m-b\">{numOfComments && numOfComments} comments</p>\n                                    </Col>\n                                </Row>\n                                <Row className=\"bio-border pt-pb-15 bio-row-adj\">\n                                    <Col sm={4}>\n                                        <p className=\"no-m-b\">Fans of:</p>\n                                    </Col>\n                                    <Col sm={8}>\n                                        <p className=\"no-m-b\">\n                                            { profileUser.fansOf &&\n                                                profileUser.fansOf.map((influencer, i) =>{\n                                                    return <span key={influencer.username}>{i > 0 && ', '}{influencer.username}</span>\n                                                })\n                                            }\n                                        </p>\n                                    </Col>\n                                </Row>\n                                <Row className=\"pt-pb-15 bio-row-adj\"> \n                                    <Col sm={4}>\n                                        <p className=\"no-m-b\">Favorite Driving Song:</p>\n                                    </Col>\n                                    <Col sm={8}>\n                                        {editMode.song ? editSong()\n                                        : [\n                                            (profileUser.favSong \n                                                ? <p className=\"no-m-b\">{profileUser.favSong}</p>\n                                                : <p className=\"no-m-b\">{altData.favSong}</p>\n                                            )\n                                            ]\n                                        }\n                                        <div className=\"edit-icon-wrapper\" onClick={()=>{setEditMode({...editMode, song: true})}}>\n                                        {editMode.song ? '' : [\n                                            (allowEdit && <img className=\"edit-icon\" src={editIcon} alt=\"Edit your favourite songs\"/>)\n                                        ]}\n                                    </div>\n                                    </Col>\n                                </Row>\n                                <Row className=\"pt-pb-15 bio-row-adj\"> \n                                    <Col sm={4}>\n                                        <p className=\"no-m-b\">Favorite Artist:</p>\n                                    </Col>\n                                    <Col sm={8}>\n                                    {editMode.artist ? editArtist()\n                                        : [\n                                            (profileUser.favArtist \n                                                ? <p className=\"no-m-b\">{profileUser.favArtist}</p>\n                                                : <p className=\"no-m-b\">{altData.favArtist}</p>\n                                            )\n                                            ]\n                                        }\n                                        <div className=\"edit-icon-wrapper\" onClick={()=>{setEditMode({...editMode, artist: true})}}>\n                                        {editMode.artist ? '' : [\n                                            (allowEdit && <img className=\"edit-icon\" src={editIcon} alt=\"Edit your favourite artists\"/>)\n                                        ]}\n                                    </div>\n                                    </Col>\n                                </Row>\n                            </div>\n                        </Col>\n                        <Col sm={8} className=\"pl-0-pc\">\n                        { userCars !== undefined ?\n                            userCars.map( car =>{\n                               return (\n                                <React.Fragment>\n                                    <VehicleCard car={car} allowEdit={allowEdit} profileUser={profileUser} getMyCars={getMyCars} />\n                                    <div className=\"spacer-2rem\"></div>\n                                </React.Fragment>\n                               )\n                            }) :\n                            <React.Fragment>\n                                <VehicleCard car={altCarData} allowEdit={allowEdit} />\n                                <div className=\"spacer-2rem\"></div>\n                            </React.Fragment>\n                        }\n\n                            <div className=\"spacer-2rem\"></div>\n                            { allowEdit && \n                                <div style={{padding: '0 6px'}}>\n                                    <Button className=\"btn-add-car\" onClick={handleShowAddCarModal}>Add my car</Button>\n                                </div>\n                            }\n                            <div className=\"spacer-2rem\"></div>\n                        </Col>\n                        \n                    </Row>\n                    \n                </div>\n                \n            </div>\n        </Layout>\n    )\n}\nconst mapDispatchToProps = (dispatch) =>{\n    return{\n        openLoginModal: (state) => dispatch(openLoginModal(state)),\n        attachMsg: (msg)=> dispatch(attachMsg(msg)),\n        logOutUser: ()=>dispatch(logOutUser()),\n        getInfluencer: (id)=> dispatch(getInfluencer(id))\n    }\n}\nconst mapStateToProps = (state) =>{\n    return{\n        customData: state.auth.customData,\n        influencerObj: state.influ.influencerObj,\n        formattedFans: state.influ.formattedFans\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Garage)","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Admin/UpdateDB.js",["438","439","440","441","442","443","444","445","446","447","448","449"],"import React, { useState, useEffect } from 'react'\nimport {logOutUser} from '../../store/actions/authActions'\nimport { connect } from 'react-redux'\nimport {Helmet} from \"react-helmet\"\nimport { Container, Form, Button, Alert } from 'react-bootstrap'\nimport AdminLoginDiv from './AdminLoginDiv'\nimport jwt from 'jsonwebtoken'\nimport * as Realm from \"realm-web\"\nconst appConfig = {\n    id: process.env.REACT_APP_REALM_APP_ID,\n    timeout: 10000, // timeout in number of milliseconds\n  };\nconst app = new Realm.App(appConfig);\n\nconst UpdateDB = (props) =>{\n    const yearG = {$in:[1990,1991,1992,1993,1994,1995,1996,1997,1998,1999,2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010]}\n    const makeG = 'mercury'\n\n    const [userObj, setUserObj] = useState({email: '', password: ''})\n    const [isLoggedIn, setIsLoggedIn] = useState(false)\n    const [msg, setMsg] = useState('')\n\n    const maxAgeTest = 1 * 60 * 60\n\n    const update = async () =>{\n        const id = 401875194\n        const filter = {id: id}\n        const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n        const collectionCars = mongo.db(\"smoke-show\").collection(\"cars\")\n        const collectionNewCar = mongo.db(\"smoke-show\").collection(\"cars-new\")\n        try {\n            await collectionNewCar.findOne(filter).then(async newdata =>{\n                const result = await collectionCars.updateOne(\n                    {id: id},\n                    {$set: {\n                        name: newdata.name,\n                        price: newdata.price,\n                        totalSeating: newdata.totalSeating,\n                        color: newdata.color,\n                        features: newdata.features,\n                        typeCategories: newdata.typeCategories,\n                        modelName: newdata.modelName,\n                        niceId: newdata.niceId\n                    }},\n                    { upsert: true }\n                )\n                if(result){\n                    console.log(result)\n                }else{\n                    console.log('fail')\n                }\n            })\n        } catch (error) {\n            \n        }\n    }\n    const checkCarIds = () =>{\n        const make = makeG\n        const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n    }\n\n    const checkDuplicates = async () =>{\n        // const year = 2020\n        const make = makeG\n        const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n        const collectionCars = mongo.db(\"smoke-show\").collection(\"cars\")\n        const collectionNewCar = mongo.db(\"smoke-show\").collection(\"cars-new\")\n        const collectionYoutube= mongo.db(\"smoke-show\").collection(\"youtube-videos\")\n        const filter = {make: make}\n        console.log('running', filter)\n        \n        try {\n            await collectionCars.find(filter).then(cars =>{\n\n                const results = cars.map(car =>{\n                    return car.id\n                })\n                Promise.all(results).then(res =>{\n                    console.log('original', res.length)\n                    const uniq = [...new Set(res)];\n                    console.log('removed duplicates', uniq.length)\n\n                    let duplicates = [...res]\n                    uniq.forEach((item) => {\n                    const i = duplicates.indexOf(item)\n                    duplicates = duplicates\n                        .slice(0, i)\n                        .concat(duplicates.slice(i + 1, duplicates.length))\n                    })\n                    console.log('dups', duplicates) \n                    let count = 0\n                    duplicates.map(async id =>{\n                        const filter = {id: id}\n                        const resArr = await collectionCars.find(filter)\n                        \n                        if(resArr){\n                            resArr.map(async obj =>{\n                                const filter = {carDataId: obj._id.toString()}\n                                const found = await collectionYoutube.find(filter)\n                                console.log('res', found)\n                                if(found.length === 0){\n                                    console.log('ok')\n                                }else{\n                                    console.log('do not remove this id', obj._id.toString())\n                                }\n                            })\n                        }else{\n                            console.log('sth wrong in your code')\n                        }\n                    })\n                })\n            })\n        } catch (error) {\n            console.log(error)\n        }\n    }\n    const deleteDups = async () =>{\n    // const year = 2020\n    const make = makeG\n    const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n    const collectionCars = mongo.db(\"smoke-show\").collection(\"cars\")\n    // const collectionNewCar = mongo.db(\"smoke-show\").collection(\"cars-new\")\n    // const collectionYoutube= mongo.db(\"smoke-show\").collection(\"youtube-videos\")\n    const filter = {make: make}\n    console.log('running', filter)\n    \n    try {\n        await collectionCars.find(filter).then(cars =>{\n\n            const results = cars.map(car =>{\n                return car.id\n            })\n            Promise.all(results).then(res =>{\n                console.log('original', res.length)\n                const uniq = [...new Set(res)];\n                console.log('removed duplicates', uniq.length)\n\n                let duplicates = [...res]\n                uniq.forEach((item) => {\n                const i = duplicates.indexOf(item)\n                duplicates = duplicates\n                    .slice(0, i)\n                    .concat(duplicates.slice(i + 1, duplicates.length))\n                })\n                console.log('dups', duplicates) \n                let count = 0\n                duplicates.map(async id =>{\n                    const filter = {id: id}\n                    const resArr = await collectionCars.find(filter)\n                                    \n                    if(resArr.length === 1){\n                        console.log('no need to do anything')\n                    }else if(resArr.length > 1){\n                        const preserved = resArr.shift()\n                        console.log('presearved', preserved)\n                        resArr.map(async dup =>{\n                            const filter = {_id: {$oid: dup._id.toString()}}\n                            const removed = await collectionCars.deleteOne(filter)\n                            count++\n                            console.log('finally removed', removed)\n                            console.log('numbers', count)\n                        })\n                    }\n\n                })\n            })\n        })\n    } catch (error) {\n        console.log(error)\n    }\n    }\n    const updateMissing = async () =>{\n        const filter= {make: makeG, niceId: { $exists: false }}\n        const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n        const collectionCars = mongo.db(\"smoke-show\").collection(\"cars\")\n        const collectionFullSet = mongo.db(\"full-set-test\").collection(\"full-2021-march\")\n        const missingCars = await collectionCars.find(filter)\n        if(missingCars){\n            missingCars.map(async car =>{\n                const found = await collectionFullSet.findOne({id: Number(car.id)})\n                if(found){\n                    console.log('found id', Number(car.id))\n                    const updated = await collectionCars.updateOne(\n                        {id: found.id},\n                        {$set: {\n                            name: found.name,\n                            price: found.price,\n                            totalSeating: found.totalSeating,\n                            color: found.color,\n                            features: found.features,\n                            typeCategories: found.typeCategories,\n                            modelName: found.modelName,\n                            niceId: found.niceId\n                        }},\n                        { upsert: false }\n                    )\n                    console.log('updated', updated)\n                }else{\n                    console.log('no such id in new set', Number(car.id))\n                }\n            })\n        }else{\n            console.log('no missing data found. check query string')\n        }\n\n    }\n    const checkNum =async () =>{\n        const make = makeG\n        const filter = {make: makeG}\n        const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n        const collectionCars = mongo.db(\"smoke-show\").collection(\"cars\")\n        const collectionFullSet = mongo.db(\"full-set-test\").collection(\"full-2021-march\")\n        const newCars = await collectionCars.find(filter)\n        console.log(newCars)\n        newCars.map(async newcar =>{\n            const filter = {make: makeG, id: newcar.id}\n         \n             const response = await collectionFullSet.find(filter)\n             if(response.length !== 0){\n                 console.log('found')\n             }else if(response.length === 0){\n                console.log('not found', newcar)\n             }\n        })\n    }\n    const manualInsert = async () =>{\n        const filter ={id: 401874663}\n        const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n        const collectionCars = mongo.db(\"smoke-show\").collection(\"cars\")\n        const collectionFullSet = mongo.db(\"full-set-test\").collection(\"full-2021-march\")\n        try {\n            await collectionFullSet.findOne(filter).then(async newcar =>{\n                await collectionCars.insertOne(newcar).then(res =>{\n                    console.log(res)\n                })\n            })\n        } catch (error) {\n            console.log('sth going on', error)\n        }\n    }\n    const storeData = async () =>{\n \n        // const filter = {make: makeG, year: yearG}\n        const filter = {make:makeG}\n        console.log('filter', filter)\n        const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n        const collectionCars = mongo.db(\"smoke-show\").collection(\"cars\")\n        const collectionFullSet = mongo.db(\"full-set-test\").collection(\"full-2021-march\")\n        // const collectionAnalysis = mongo.db(\"smoke-show\").collection(\"cars-data-analysis\")\n        try {\n            await collectionFullSet.find(filter).then(async newcars =>{\n                console.log(newcars)\n                newcars.map( async newcar =>{\n                    const filterCar = {id: newcar.id}\n                    const res = await collectionCars.findOne(filterCar)\n                    if(res){\n                        // console.log('found', newcar.id)\n                        const updated = await collectionCars.updateOne(\n                            {id: newcar.id},\n                            {$set: {\n                                name: newcar.name,\n                                price: newcar.price,\n                                totalSeating: newcar.totalSeating,\n                                color: newcar.color,\n                                features: newcar.features,\n                                typeCategories: newcar.typeCategories,\n                                modelName: newcar.modelName,\n                                niceId: newcar.niceId\n                            }},\n                            { upsert: false }\n                        )\n                        console.log('updated', updated)\n                        // return\n                  \n                    }else{\n                        // console.log('not found', newcar.id)\n                        const inserted = await collectionCars.insertOne(newcar)\n                        console.log('inserted', inserted)\n                    }\n                })\n            })\n        } catch (error) {\n            \n        }\n    }\n\n    const changeUserObj = (e) =>{\n        setUserObj({\n            ...userObj,\n            [e.target.name]: e.target.value\n        })\n    }\n\n    const handleSubmitLogin = async (e) =>{\n        setMsg('')\n        e.preventDefault()\n        const emailLowerCase = userObj.email.toLowerCase()\n        const credentials = Realm.Credentials.emailPassword(emailLowerCase, userObj.password)\n        try{\n            app.logIn(credentials).then(async user =>{\n                if(app.currentUser.id === user.id){\n                    console.log('user updated')\n                }else{\n                    console.log('user is not updated')\n                }\n                setIsLoggedIn(true)\n                const tokenCredentials = jwt.sign({ cre: credentials }, process.env.REACT_APP_JWT_SECRET, {expiresIn: maxAgeTest})\n                sessionStorage.setItem('session_user', tokenCredentials)\n      \n            })\n        }catch(err){\n            console.log(err)\n            setMsg('login fail')\n        }\n    }\n\n    const handleLogout = () =>{\n        props.logOutUser()\n        setIsLoggedIn(false)\n    }\n    useEffect(() => {\n        const tokenUser = sessionStorage.getItem('session_user')\n        if(tokenUser){\n            setIsLoggedIn(true)\n        }else{\n            setIsLoggedIn(false)\n        }\n\n    }, [])\n    return(\n        <div>\n        <Helmet>\n            <meta name=\"robots\" content=\"noindex, nofollow\" />\n        </Helmet>\n            {isLoggedIn ? \n            <Container className=\"\" style={{marginTop: '4rem'}}>\n                <center>\n                {/* {resMsg && <Alert variant=\"success\">Uploaded</Alert>} */}\n  \n                <Button onClick={checkDuplicates} style={{minWidth: '200px'}} >check duplicates</Button><br/><br/>\n                <Button onClick={deleteDups} style={{minWidth: '200px', background: 'pink'}} >DELETE duplicates</Button><br/><br/><br/>\n                <Button onClick={storeData} style={{minWidth: '200px'}} >\n                Update data \n                </Button>\n                <br/><br/>\n                <Button onClick={checkNum} style={{minWidth: '200px'}}>Check number of cars</Button>\n\n                {/* <br/><br/>\n                <Button onClick={manualInsert} style={{minWidth: '200px'}}>Manual Insert</Button> */}\n                {/* <Button onClick={updateMissing} style={{minWidth: '200px'}} >\n                Update Missing data in current\n                </Button> */}\n                <br/><br/><br/><br/>\n                <Button onClick={handleLogout} style={{minWidth: '200px'}}>Logout</Button>\n            </center>\n            \n            </Container>\n            :\n            <AdminLoginDiv handleSubmitLogin={handleSubmitLogin} handleChange={changeUserObj} msg={msg} />\n            }\n        </div>\n    )\n}\n\nconst mapDispatchToProps = (dispatch) =>{\n    return{\n        logOutUser: () => dispatch(logOutUser())\n    }\n}\nexport default connect(null, mapDispatchToProps)(UpdateDB)","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Admin/EditVideoDataKirk.js",["450","451","452","453"],"import React, { useState, Fragment, useEffect } from 'react'\nimport * as Realm from \"realm-web\"\nimport Helmet from 'react-helmet'\nimport { Container, Row, Col, Form, Pagination, Button } from 'react-bootstrap'\nimport jwt from 'jsonwebtoken'\n\nconst EditVideoDataKirk = () =>{\n    const [activePag, setActivePag] = useState(0)\n    const [isLoggedIn, setIsLoggedIn] = useState(false)\n    const [userObj, setUserObj] = useState({email: '', password: ''})\n    const kirkChannelId = 'UCXPVB7s1TJTE0WjDpakGp5Q'\n    const app = new Realm.App({ id: process.env.REACT_APP_REALM_APP_ID })\n    const [allVideos, setAllVideos] = useState([])\n    const [message, setMessage] = useState('')\n    const [carDataId, setCarDataId] = useState('')\n    const [editVideoId, setEditVideoId] = useState('')\n    const [editMode, setEditMode] = useState(false)\n    const maxAgeTest = 1 * 60 * 60\n    const [items, setItems] = useState([])\n    let chunk_size = 15\n\n    const handlePagNum = (num) =>{\n        console.log('num', num)\n        setActivePag(num)\n        // setAllVideos({...allVideos})\n    }\n    \n    const handleChange = (e) =>[\n        setUserObj({\n            ...userObj,\n            [e.target.name]: e.target.value\n        })\n    ]\n    const videoEmbedURL = 'https://www.youtube.com/embed/'\n\n    const chunkArray = (allVideos) =>{\n        \n        let index = 0;\n        let arrayLength = allVideos.length;\n        let tempArray = [];\n        let myChunk\n        \n        for (index = 0; index < arrayLength; index += chunk_size) {\n            myChunk = allVideos.slice(index, index+chunk_size);\n            // Do something if you want with the group\n            tempArray.push(myChunk);\n        }\n\n        return tempArray;\n    }\n    \n    const handleSubmitLogin = async (e) =>{\n        e.preventDefault()\n        const emailLowerCase = userObj.email.toLowerCase()\n        const credentials = Realm.Credentials.emailPassword(emailLowerCase, userObj.password)\n        try{\n            app.logIn(credentials).then(async user =>{\n                setIsLoggedIn(true)\n                const customData = user.customData\n                const token = jwt.sign({ userData: customData }, process.env.REACT_APP_JWT_SECRET, {expiresIn: maxAgeTest})\n                const tokenCredentials = jwt.sign({ cre: credentials }, process.env.REACT_APP_JWT_SECRET, {expiresIn: maxAgeTest})\n                sessionStorage.setItem('session_token', token)\n                sessionStorage.setItem('session_user', tokenCredentials)\n                const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME);\n                const mongoCollection = mongo.db(\"smoke-show\").collection(\"youtube-videos\")\n                const filter = {channelId: kirkChannelId}\n                await mongoCollection.find(filter).then( videos =>{\n                    console.log(videos)\n                    const chunkedVideos = chunkArray(videos)\n                    setAllVideos(chunkedVideos)\n                    \n                })\n            })\n        }catch(err){\n            console.log(err)\n            setMessage('login fail')\n        }\n        \n    }\n\n    const loginDiv =\n    <Container style={{alignItems: 'center', justifyContent: 'center', marginTop: '5rem'}}>\n        <Form onSubmit={handleSubmitLogin}>\n            <Form.Group controlId=\"formBasicEmail\">\n                <Form.Label>Email address</Form.Label>\n                <Form.Control type=\"email\" placeholder=\"Enter email\" name=\"email\" onChange={handleChange}/>\n                <Form.Text className=\"text-muted\">\n                </Form.Text>\n            </Form.Group>\n\n            <Form.Group controlId=\"formBasicPassword\">\n                <Form.Label>Password</Form.Label>\n                <Form.Control type=\"password\" placeholder=\"Password\" onChange={handleChange} name=\"password\" />\n            </Form.Group>\n            <br />\n            <Button variant=\"primary\" type=\"submit\">\n                Log in\n            </Button>\n        </Form>\n    </Container>\n    \n    const handleChangeCarData = (e) =>{\n      \n        setCarDataId(e.target.value)\n        setEditVideoId(e.target.name)\n    }\n    const handleDataUpdate = async (e) =>{\n        e.preventDefault()\n        const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME);\n        const collectionYoutube = mongo.db(process.env.REACT_APP_REALM_DB_NAME).collection(\"youtube-videos\")\n        let str = carDataId\n        str = str.replace(/\\s/g, '')\n        setCarDataId(str)\n        try{\n            await collectionYoutube.updateOne(\n                { \"videoId\": editVideoId},\n                { \"$set\": { \"carDataId\": carDataId } },\n                { upsert: true}\n            ).then( async res =>{\n                console.log(res)\n                // e.target.reset()\n                setEditVideoId('')\n                setCarDataId('')\n                setEditMode(false)\n                const filter = {channelId: kirkChannelId}\n                await collectionYoutube.find(filter).then( videos =>{\n                    const chunkedVideos = chunkArray(videos)\n                    setAllVideos(chunkedVideos)\n                })\n            })\n        }catch(err){\n            console.log(err)\n        }\n        \n    }\n    const editCarData = (video)=>{\n        // setEditVideoId(video.videoId)\n        return(\n            <Form>\n                <Form.Group >\n                    <Form.Label>Edit car data ID</Form.Label>\n                    <Form.Control as=\"textarea\" rows={2} name={video.videoId} value={allVideos[activePag].carDataId && allVideos[activePag].carDataId } onChange={handleChangeCarData} />\n                </Form.Group>\n                \n                <div className=\"bio-edit-btn-wrapper\">\n                    <Button variant=\"primary\" type=\"submit\" onClick={handleDataUpdate} className=\"bio-edit-btn\">\n                        Submit\n                    </Button>\n                </div>\n                \n            </Form>\n        )\n    }\n    const makePagination = (num) =>{\n        let temp = []\n        for (let i = 0; i < num; i++) {\n            temp.push(\n                <Pagination.Item key={i} active={ i === activePag} onClick={()=>{handlePagNum(i)}}>\n                {i}\n                </Pagination.Item>,\n            );\n            if(i == num -1){\n                setItems(temp)\n            }\n        }\n        \n    }\n    const queryData = async () =>{\n        const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME);\n        const collectionYoutube = mongo.db(process.env.REACT_APP_REALM_DB_NAME).collection(\"youtube-videos\")\n        const filter = {channelId: kirkChannelId}\n        await collectionYoutube.find(filter).then( videos =>{\n            makePagination(Math.ceil(videos.length/chunk_size))\n            const chunkedVideos = chunkArray(videos)\n            setAllVideos(chunkedVideos)\n        })\n    }\n    useEffect(() => {\n        const tokenUser = sessionStorage.getItem('session_user')\n        if(tokenUser){\n            setIsLoggedIn(true)\n            queryData()\n        }else{\n            setIsLoggedIn(false)\n        }\n\n    }, [])\n    return(\n        <Fragment>\n            <Helmet>\n                <meta name=\"robots\" content=\"noindex, nofollow\" />\n            </Helmet>\n            {isLoggedIn ? \n            <Container>\n                <h1>Edit video data</h1>\n                <center><Pagination>{items}</Pagination></center>\n                <hr />\n                <Row>\n                { allVideos[activePag] && \n                    allVideos[activePag].map(video =>{\n                        return(\n                            <Col style={{marginBottom: '2rem'}} key={video.videoId}>\n                                <iframe src={videoEmbedURL + video.videoId}\n                                    frameBorder='0'\n                                    allow='autoplay; encrypted-media'\n                                    allowFullScreen\n                                    title='video'\n                                />\n                                <h3>{video.snippet.title}</h3>\n                                <p>Date: {video.snippet.publishedAt}</p>\n                                <p>Youtube videoId: {video.videoId}</p>\n                                {video.carDataId ? \n                                <div>\n                                <p>Car data ID: {video.carDataId ? video.carDataId : 'No data'}</p>\n                                 {/* <Button onClick={()=>setEditMode(true)}>Edit</Button> */}\n                                \n                                </div>\n                                \n                                 :\n                                editCarData(video)\n                                }\n                                {/* {editMode && editCarData(video)} */}\n                            </Col>\n                        )\n                        \n                        \n                    })\n                }\n                \n           \n                </Row>\n            </Container>\n            : loginDiv}\n        </Fragment>\n    )\n}\n\nexport default EditVideoDataKirk","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Fan/BioPage.js",["454","455","456","457","458"],"import React, { useState, useEffect } from 'react'\nimport { Helmet } from \"react-helmet\"\nimport * as Realm from \"realm-web\"\nimport Layout from '../Layout/Layout'\nimport noImg from '../../assets/global/no_image.jpg'\nimport bioPic from '../../assets/temp-photos/bio/avator-male.jpg'\nimport editIcon from '../../assets/global/edit-icon.svg'\nimport settingsIcon from '../../assets/global/Settings-icon-white.svg'\nimport { Button, Row, Col } from 'react-bootstrap'\nimport './biopage.scss'\nimport { connect } from 'react-redux'\nimport jwt from 'jsonwebtoken'\nimport moment from 'moment'\nimport loadable from '@loadable/component'\nimport { EditAbout, EditSong, EditArtist } from './editsBioPage'\n\nconst VehicleCard = loadable(() => import('../Global/vehicleCard'))\nconst CreateNewCar = loadable(() => import('./CreateNewCar'))\nconst SettingModal = loadable(() => import('./SettingModal'))\n\nconst BioPage = (props) =>{\n\n    const [userIdParam, setUserIdParam] = useState(props.match.params.id)\n    const [profileUser, setProfileUser] = useState({fname: '', lname: '', profilePic: '', profileCover: '', username: '', profileDesc: '', favSong: '', favArtist: ''})\n    const [profilePic, setProfilePic] = useState(bioPic)\n    const [profileCover, setProfileCover] = useState(noImg)\n    const [allowEdit, setAllowEdit] = useState(false)\n    const [editMode, setEditMode] = useState({about: false, song: false, artist: false})\n    const [showSetting, setShowSetting] = useState(false);\n    const [userCars, setUserCars] = useState([])\n    const [showAddCar, setShowAddCar] = useState(false)\n    const [numOfComments, setNumComments] = useState(null)\n    const altData = {uername: 'No username yet', userId: '', profileDesc: 'No description yet.', myCars: [] }\n    const [formattedTime, setFormattedTime] = useState(null)\n    const altCarData = {name: 'No data yet', upgrades: 'No data yet', color: 'No data yet', wheels: 'No data yet', performance: 'No data yet', category: 'Dream car', imgUlr: noImg, favSong: 'Nodata yet', favArtist: 'No data yet'}\n    const appConfig = {\n        id: process.env.REACT_APP_REALM_APP_ID,\n        // timeout: 10000, \n      };\n    const app = new Realm.App(appConfig);\n    \n    const handleCloseAddCarModal = () => setShowAddCar(false)\n    const handleShowAddCarModal = () => setShowAddCar(true)\n\n    const handleChangeProfile = (e) =>{\n        setProfileUser({\n            ...profileUser,\n            [e.target.name]: e.target.value\n        })\n    }\n    const handleShowSetting = () =>{\n        const token = sessionStorage.getItem('session_token')\n        jwt.verify(token, process.env.REACT_APP_JWT_SECRET, function(err, decoded) {\n            if (err) {\n                console.log('err', err)\n                \n            }else{\n                setProfileUser({\n                    ...profileUser,\n                    email: decoded.userData.email\n                })\n                setShowSetting(true)\n            }\n          });\n    }\n    \n    const handleCloseSetting = () =>{\n        setShowSetting(false)\n    }\n    const userLoggedIn = (id) =>{\n        \n        if(id === profileUser.userId){\n            setAllowEdit(true)\n        }\n    }\n    const userLoggedOut = (id) =>{\n        if(id === userIdParam){\n            setAllowEdit(false)\n        }\n    }\n    const updateProfileData = (data, key)=>{\n        setProfileUser({\n            ...profileUser,\n            [key]: data\n        })\n    }\n    const updatedata = async (mongo) =>{\n        const collectionUser = mongo.db(process.env.REACT_APP_REALM_DB_NAME).collection(\"users\")\n        const filter = {userId: profileUser.userId}\n        const res = await collectionUser.findOne(filter)\n        if(res){\n            console.log(res)\n            if(res.profileCover){\n                if(res.profileCover.includes('s3.amazonaws.com/smokeshow.users')){\n                    setProfileCover(res.profileCover.replace('s3.amazonaws.com/smokeshow.users', 'dwdlqiq3zg6k6.cloudfront.net'))\n                }else{\n                    setProfileCover(res.profileCover)\n                }\n            }else{\n                setProfileCover(noImg)\n            }\n            if(res.profilePic){\n                if(res.profilePic.includes('s3.amazonaws.com/smokeshow.users')){\n                    setProfilePic(res.profilePic.replace('s3.amazonaws.com/smokeshow.users', 'dwdlqiq3zg6k6.cloudfront.net'))\n                }else{\n                    setProfilePic(res.profilePic)\n                }\n            }else{\n                setProfilePic(bioPic)\n            }\n        }\n    }\n    const updateUserDetails = (fname, lname, username) =>{\n        setProfileUser({\n            ...profileUser,\n            fname: fname,\n            lname: lname,\n            username: username\n        })\n    }\n    const updateCarData = (data) =>{\n        setUserCars(prevArray => [...prevArray, data])\n    }\n   \n    const handleDataUpdate = async (e) =>{\n        e.preventDefault()\n  \n        if(app.currentUser.id === profileUser.userId){\n            const mongodb = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n            const mongoCollection = mongodb.db(process.env.REACT_APP_REALM_DB_NAME).collection(\"users\")\n    \n            try{\n                await mongoCollection.updateOne(\n                    { \"userId\": app.currentUser.id},\n                    {\n                        \"$set\": {\n                            \"profileDesc\": profileUser.profileDesc,\n                            \"favSong\": profileUser.favSong,\n                            \"favArtist\": profileUser.favArtist\n                          }\n                    }\n                ).then(res =>{\n                    console.log('res', res)\n                })\n            }catch(err){\n                console.log(err)\n            }\n            setEditMode({...editMode, about: false, song: false, artist: false})\n        }\n        \n    }\n\n    const getData = async (credentials) =>{\n        try{\n            await app.logIn(credentials).then(async logInUser =>{\n                const mongo = logInUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n                const collectionUser = mongo.db(\"smoke-show\").collection(\"users\")\n                const filter = {userId: userIdParam}\n                try{\n                    await collectionUser.findOne(filter).then(user =>{\n                            setProfileUser(user)\n                            if(user.joined){\n                                const formatted = moment(user.joined).local().format('MMMM Do YYYY')\n                                setFormattedTime(formatted)\n                            }else{\n                                setFormattedTime('No data')\n                            }\n                            if(user.profilePic){\n                                if(user.profilePic.includes('s3.amazonaws.com/smokeshow.users')){\n                                    setProfilePic(user.profilePic.replace('s3.amazonaws.com/smokeshow.users', 'dwdlqiq3zg6k6.cloudfront.net'))\n                                }else{\n                                    setProfilePic(user.profilePic)\n                                }\n                            }else{\n                                setProfilePic(bioPic)\n                            }\n                            if(user.profileCover){\n                                if(user.profileCover.includes('s3.amazonaws.com/smokeshow.users')){\n                                    setProfileCover(user.profileCover.replace('s3.amazonaws.com/smokeshow.users', 'dwdlqiq3zg6k6.cloudfront.net'))\n                                }else{\n                                    setProfileCover(user.profileCover)\n                                }\n                            }else{\n                                setProfileCover(noImg)\n                            }\n                            getTotalComments(mongo)\n                            getMyCars(mongo)\n                            return user\n                    }).then(user =>{\n                        if( userIdParam === logInUser.id){\n                            setAllowEdit(true)\n                        }else{\n                            setAllowEdit(false)\n                        }\n                    })\n                }catch(err){\n                    console.log(err)\n                }\n            })\n        }catch(err){\n            console.log(err)\n        }\n    }\n    \n    const getTotalComments = async (mongo) =>{\n        const mongoCollectionComments = mongo.db(\"smoke-show\").collection(\"comments\")\n        const filter = {userId: userIdParam}\n        await mongoCollectionComments.find(filter).then(res =>{\n            // setProfileUser({...profileUser, totalComments: res.length})\n            setNumComments(res.length)\n        })\n    }\n    const getMyCars = async (mongo) =>{\n        const mongoCollection = mongo.db(\"smoke-show\").collection(\"my-cars\")\n        // console.log('param', userIdParam)\n        const filter = {userId: props.match.params.id}\n        try {\n            await mongoCollection.find(filter).then( cars =>{\n                    setUserCars(cars)\n            \n            })\n        } catch (error) {\n            console.log(error)\n        }\n    }\n    const loginCheck = () =>{\n        const tokenUser = sessionStorage.getItem('session_user')\n        let cre;\n        if(tokenUser){\n            jwt.verify(tokenUser, process.env.REACT_APP_JWT_SECRET, function(err, decoded) {\n                if (err) {\n                    // timeout\n                    const credentials = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTH_PUBLIC_VIEW)\n                    cre = credentials\n                }else{\n                    cre = decoded.cre\n                }\n              });\n        }else{\n            const credentials = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTH_PUBLIC_VIEW)\n            cre = credentials\n        }\n        return cre\n    }\n    const goInfluencerGarage = (id) =>{\n        if(id === '60230361f63ff517d4fdad14'){\n            props.history.push('/influencer/EddieX/garage')\n        }else if(id === '602303890ff2832f7d19a2af'){\n            props.history.push('/influencer/Lexurious-Fleet/garage')\n        }\n    }\n    useEffect(() => {\n        if(props.isLoggedIn){\n            if(props.customData.userId === props.match.params.id){\n                setAllowEdit(true)\n            }else{\n                setAllowEdit(false)\n            }\n        }else{\n            setAllowEdit(false)\n\n        }\n    }, [props.isLoggedIn])\n\n    useEffect(() => {\n        const id = props.profilepageid\n        setUserIdParam(id)\n        \n    }, [props.profilepageid])\n    useEffect(() => {\n        if(props.profilepageid){\n            const credentials = loginCheck()\n            getData(credentials)\n        }\n    }, [userIdParam])\n    useEffect(() => {\n        if(userIdParam === '60230361f63ff517d4fdad14' || userIdParam === '602303890ff2832f7d19a2af'){\n            goInfluencerGarage(userIdParam)\n        }else{\n        const credentials = loginCheck()\n        getData(credentials)\n        }\n        \n    }, [])\n\n    return(\n        <Layout userLoggedIn={userLoggedIn} userLoggedOut={userLoggedOut} >\n        <Helmet>\n            <meta charSet=\"utf-8\" />\n            <title>{profileUser && profileUser.fname} profile page | The Smoke Show</title>\n            <meta name=\"description\" content=\"Place the meta description text here.\" />\n            <link rel=\"canonical\" href={`https://thesmokeshow.com/user/${profileUser.userId}`} />\n        </Helmet>\n        {showAddCar && <CreateNewCar show={showAddCar} handleClose={handleCloseAddCarModal} profileUser={profileUser} updateProfileData={updateProfileData} updateCarData={updateCarData} getMyCars={getMyCars} />}\n            {showSetting && <SettingModal show={showSetting} handleShowSetting={handleShowSetting} handleCloseSetting={handleCloseSetting} profileUser={profileUser}  updateProfileData={updateProfileData} updateUserDetails={updateUserDetails} updatedata={updatedata}/>}\n            <div className=\"main-wrapper\">\n                <div className=\"spacer-4rem\"></div>\n                <h2 className=\"title\">{profileUser && profileUser.username} Profile</h2>\n                <div className=\"bio-fleet-img\">\n                    <img\n    \n                    src={profileCover}\n                    alt={`User ${profileUser.fname}'s cover image on The Smoke Show`}\n                     />\n                </div>\n                <div className=\"bio-content-wrapper\">\n                    <div className=\"bio-main-wrapper\">\n                        <div className=\"bio-pic\">\n                            <img src={profilePic} alt={`User ${profileUser.fname}'s profile image on The Smoke Show`} />\n                          \n                        </div>\n                        \n                        <div className=\"bio-title-text\">\n                            <h3 className=\"bio-name-title\">{profileUser.fname && profileUser.fname} {profileUser.lname && profileUser.lname}</h3>\n                            <p>{profileUser.title}</p>\n                        </div>\n                        {allowEdit && \n                            <Button className=\"bio-setting-btn\" onClick={handleShowSetting}>\n                                <img src={settingsIcon} alt=\"setting\" className=\"setting-icon\"/>\n                                Settings\n                            </Button>\n                        }\n                        \n                    </div>\n           \n                    <Row className=\"bio-height-adj\">\n                        <Col sm={4}>\n                            <div className=\"bio-container box-shadow-white\">\n                                <p className=\"bio-about no-m-b\"><strong>About: {` ${profileUser.fname} ${profileUser.lname}`}</strong></p>\n                                <div className=\"\">\n                                    <p className=\"bio-content bio-border\">\n                                        {editMode.about ? <EditAbout profileUser={profileUser} handleChangeProfile={handleChangeProfile} handleDataUpdate={handleDataUpdate}/>\n                                        : [\n                                            (profileUser.profileDesc \n                                                ? <p >{profileUser.profileDesc}</p>\n                                                : <p>{altData.profileDesc}</p>\n                                            )\n                                            ]\n                                        }\n                                    { !editMode.about && <br/> }\n                                    <div className=\"edit-icon-wrapper\" onClick={()=>{setEditMode({...editMode, about: true})}}>\n                                        {editMode.about ? '' : [\n                                            (allowEdit && <img className=\"edit-icon\" src={editIcon} alt=\"Edit about you\"/>)\n                                        ]}\n                                    </div>\n                                    </p>\n                                </div>\n                                \n                                <Row className=\"bio-border pt-pb-15 bio-row-adj\">\n                                    <Col sm={4}>\n                                        <p className=\"no-m-b\">Joined:</p>\n                                    </Col>\n                                    <Col sm={8}>\n                                        <p>{formattedTime ? formattedTime : 'No data'}</p>\n                                    </Col>\n                                </Row>\n                                <Row className=\"bio-border pt-pb-15 bio-row-adj\">\n                                    <Col sm={4}>\n                                        <p className=\"no-m-b\">Total Comments:</p>\n                                    </Col>\n                                    <Col sm={8}>\n                                        <p className=\"no-m-b\">{numOfComments && numOfComments} comments</p>\n                                    </Col>\n                                </Row>\n                                <Row className=\"bio-border pt-pb-15 bio-row-adj\">\n                                    <Col sm={4}>\n                                        <p className=\"no-m-b\">Fans of:</p>\n                                    </Col>\n                                    <Col sm={8}>\n                                        <p className=\"no-m-b\">\n                                            { profileUser.fansOf &&\n                                                profileUser.fansOf.map((name, i) =>{\n                                                    return <span>{i > 0 && ', '}{name.username}</span>\n                                                })\n                                            }\n                                        </p>\n                                    </Col>\n                                </Row>\n                                <Row className=\"pt-pb-15 bio-row-adj\"> \n                                    <Col sm={4}>\n                                        <p className=\"no-m-b\">Favorite Driving Song:</p>\n                                    </Col>\n                                    <Col sm={8}>\n                                        {editMode.song ? <EditSong profileUser={profileUser} handleChangeProfile={handleChangeProfile} handleDataUpdate={handleDataUpdate}/>\n                                        : [\n                                            (profileUser.favSong \n                                                ? <p className=\"no-m-b\">{profileUser.favSong}</p>\n                                                : <p className=\"no-m-b\">{altData.favSong}</p>\n                                            )\n                                            ]\n                                        }\n                                        <div className=\"edit-icon-wrapper\" onClick={()=>{setEditMode({...editMode, song: true})}}>\n                                        {editMode.song ? '' : [\n                                            (allowEdit && <img className=\"edit-icon\" src={editIcon} alt=\"Edit your favourite songs\"/>)\n                                        ]}\n                                    </div>\n                                    </Col>\n                                </Row>\n                                <Row className=\"pt-pb-15 bio-row-adj\"> \n                                    <Col sm={4}>\n                                        <p className=\"no-m-b\">Favorite Artist:</p>\n                                    </Col>\n                                    <Col sm={8}>\n                                    {editMode.artist ? <EditArtist profileUser={profileUser} handleChangeProfile={handleChangeProfile} handleDataUpdate={handleDataUpdate}/>\n                                        : [\n                                            (profileUser.favArtist \n                                                ? <p className=\"no-m-b\">{profileUser.favArtist}</p>\n                                                : <p className=\"no-m-b\">{altData.favArtist}</p>\n                                            )\n                                            ]\n                                        }\n                                        <div className=\"edit-icon-wrapper\" onClick={()=>{setEditMode({...editMode, artist: true})}}>\n                                        {editMode.artist ? '' : [\n                                            (allowEdit && <img className=\"edit-icon\" src={editIcon} alt=\"Edit your favourite artists\"/>)\n                                        ]}\n                                    </div>\n                                    </Col>\n                                </Row>\n                            </div>\n                        </Col>\n                        <Col sm={8} className=\"pl-0-pc\">\n                        { userCars !== undefined ?\n                            userCars.map( car =>{\n                               return (\n                                <React.Fragment>\n                                    <VehicleCard car={car} allowEdit={allowEdit} profileUser={profileUser} getMyCars={getMyCars} />\n                                    <div className=\"spacer-2rem\"></div>\n                                </React.Fragment>\n                               )\n                            }) :\n                            <React.Fragment>\n                                <VehicleCard car={altCarData} allowEdit={allowEdit} />\n                                <div className=\"spacer-2rem\"></div>\n                            </React.Fragment>\n                        }\n\n                            <div className=\"spacer-2rem\"></div>\n                            { allowEdit && \n                                <div style={{padding: '0 6px'}}>\n                                    <Button className=\"btn-add-car\" onClick={handleShowAddCarModal}>Add my car</Button>\n                                </div>\n                            }\n                            <div className=\"spacer-2rem\"></div>\n                       \n                        </Col>\n                        \n                    </Row>\n                    \n                </div>\n                \n            </div>\n        </Layout>\n    )\n}\nconst mapStateToProps = (state) =>{\n    return{\n        isLoggedIn: state.auth.isLoggedIn,\n        customData: state.auth.customData,\n        profilepageid: state.user.profilepageid\n    }\n}\nexport default connect(mapStateToProps)(BioPage)","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Admin/EditVideoData.js",["459","460","461","462"],"import React, { useState, Fragment, useEffect } from 'react'\nimport * as Realm from \"realm-web\"\nimport Helmet from 'react-helmet'\nimport { Container, Row, Col, Form, Pagination, Button } from 'react-bootstrap'\nimport jwt from 'jsonwebtoken'\n\nconst EditVideoData = () =>{\n    const [activePag, setActivePag] = useState(0)\n    const [isLoggedIn, setIsLoggedIn] = useState(false)\n    const [userObj, setUserObj] = useState({email: '', password: ''})\n    const app = new Realm.App({ id: process.env.REACT_APP_REALM_APP_ID })\n    const [allVideos, setAllVideos] = useState([])\n    const [message, setMessage] = useState('')\n    const [carDataId, setCarDataId] = useState('')\n    const [editVideoId, setEditVideoId] = useState('')\n    const [editMode, setEditMode] = useState(false)\n    const maxAgeTest = 1 * 60 * 60\n    const [items, setItems] = useState([])\n\n    const handlePagNum = (num) =>{\n        setActivePag(num)\n    }\n    const chunk_size = 15\n    \n    const handleChange = (e) =>{\n        setUserObj({\n            ...userObj,\n            [e.target.name]: e.target.value\n        })\n    }\n\n    const videoEmbedURL = 'https://www.youtube.com/embed/'\n\n    const chunkArray = (allVideos) =>{\n        \n        let index = 0;\n        let arrayLength = allVideos.length;\n        let tempArray = [];\n        let myChunk\n        \n        for (index = 0; index < arrayLength; index += chunk_size) {\n            myChunk = allVideos.slice(index, index+chunk_size);\n            // Do something if you want with the group\n            tempArray.push(myChunk);\n        }\n\n        return tempArray;\n    }\n    \n    const handleSubmitLogin = async (e) =>{\n        e.preventDefault()\n        const emailLowerCase = userObj.email.toLowerCase()\n        const credentials = Realm.Credentials.emailPassword(emailLowerCase, userObj.password)\n        try{\n            app.logIn(credentials).then(async user =>{\n                setIsLoggedIn(true)\n                const customData = user.customData\n                const token = jwt.sign({ userData: customData }, process.env.REACT_APP_JWT_SECRET, {expiresIn: maxAgeTest})\n                const tokenCredentials = jwt.sign({ cre: credentials }, process.env.REACT_APP_JWT_SECRET, {expiresIn: maxAgeTest})\n                sessionStorage.setItem('session_token', token)\n                sessionStorage.setItem('session_user', tokenCredentials)\n                const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME);\n                const mongoCollection = mongo.db(\"smoke-show\").collection(\"youtube-videos\")\n                const filter = {channelId: 'UCdOXRB936PKSwx0J7SgF6SQ'}\n                await mongoCollection.find(filter).then( videos =>{\n                    console.log(videos)\n                    const chunkedVideos = chunkArray(videos)\n                    setAllVideos(chunkedVideos)\n                    \n                })\n            })\n        }catch(err){\n            console.log(err)\n            setMessage('login fail')\n        }\n        \n    }\n\n    const loginDiv =\n    <Container style={{alignItems: 'center', justifyContent: 'center', marginTop: '5rem'}}>\n        <Form onSubmit={handleSubmitLogin}>\n            <Form.Group controlId=\"formBasicEmail\">\n                <Form.Label>Email address</Form.Label>\n                <Form.Control type=\"email\" placeholder=\"Enter email\" name=\"email\" onChange={handleChange}/>\n                <Form.Text className=\"text-muted\">\n                </Form.Text>\n            </Form.Group>\n\n            <Form.Group controlId=\"formBasicPassword\">\n                <Form.Label>Password</Form.Label>\n                <Form.Control type=\"password\" placeholder=\"Password\" onChange={handleChange} name=\"password\" />\n            </Form.Group>\n            <br />\n            <Button variant=\"primary\" type=\"submit\">\n                Log in\n            </Button>\n        </Form>\n    </Container>\n    \n    const handleChangeCarData = (e) =>{\n        setCarDataId(e.target.value)\n        setEditVideoId(e.target.name)\n    }\n    const handleDataUpdate = async (e) =>{\n        e.preventDefault()\n        const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME);\n        const collectionYoutube = mongo.db(process.env.REACT_APP_REALM_DB_NAME).collection(\"youtube-videos\")\n        let str = carDataId\n        str = str.replace(/\\s/g, '')\n        setCarDataId(str)\n        try{\n            await collectionYoutube.updateOne(\n                { \"videoId\": editVideoId},\n                { \"$set\": { \"carDataId\": carDataId } },\n                { upsert: true}\n            ).then( async res =>{\n                console.log(res)\n                // e.target.reset()\n                setEditVideoId('')\n                setCarDataId('')\n                setEditMode(false)\n                const filter = {channelId: 'UCdOXRB936PKSwx0J7SgF6SQ'}\n                await collectionYoutube.find(filter).then( videos =>{\n                    const chunkedVideos = chunkArray(videos)\n                    setAllVideos(chunkedVideos)\n                })\n            })\n        }catch(err){\n            console.log(err)\n        }\n        \n    }\n    const editCarData = (video)=>{\n        // setEditVideoId(video.videoId)\n        return(\n            <Form>\n                <Form.Group >\n                    <Form.Label>Edit car data ID</Form.Label>\n                    <Form.Control as=\"textarea\" rows={2} name={video.videoId} value={allVideos[activePag].carDataId && allVideos[activePag].carDataId } onChange={handleChangeCarData} />\n                </Form.Group>\n                \n                <div className=\"bio-edit-btn-wrapper\">\n                    <Button variant=\"primary\" type=\"submit\" onClick={handleDataUpdate} className=\"bio-edit-btn\">\n                        Submit\n                    </Button>\n                </div>\n                \n            </Form>\n        )\n    }\n    const makePagination = (num) =>{\n        let temp = []\n        for (let i = 0; i < num; i++) {\n            temp.push(\n                <Pagination.Item key={i} active={ i === activePag} onClick={()=>{handlePagNum(i)}}>\n                {i}\n                </Pagination.Item>,\n            );\n            // console.log('loop', temp)\n            if(i == num -1){\n                setItems(temp)\n            }\n        }\n        \n    }\n    const queryData = async () =>{\n        const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME);\n        const collectionYoutube = mongo.db(process.env.REACT_APP_REALM_DB_NAME).collection(\"youtube-videos\")\n        const filter = {channelId: 'UCdOXRB936PKSwx0J7SgF6SQ'}\n        await collectionYoutube.find(filter).then( videos =>{\n            makePagination(Math.ceil(videos.length/chunk_size))\n            const chunkedVideos = chunkArray(videos)\n            setAllVideos(chunkedVideos)\n        })\n    }\n    useEffect(() => {\n        const tokenUser = sessionStorage.getItem('session_user')\n        if(tokenUser){\n            setIsLoggedIn(true)\n            queryData()\n        }else{\n            setIsLoggedIn(false)\n        }\n\n    }, [])\n    return(\n        <Fragment>\n            <Helmet>\n                <meta name=\"robots\" content=\"noindex, nofollow\" />\n            </Helmet>\n            {isLoggedIn ? \n            <Container>\n                <h1>Edit video data</h1>\n                <center><Pagination>{items}</Pagination></center>\n                <hr />\n                <Row>\n                {console.log('array 0', allVideos[0])}\n                { allVideos[activePag] && \n                    allVideos[activePag].map(video =>{\n                        return(\n                            <Col style={{marginBottom: '2rem'}}>\n                                <iframe src={videoEmbedURL + video.videoId}\n                                    frameBorder='0'\n                                    allow='autoplay; encrypted-media'\n                                    allowFullScreen\n                                    title='video'\n                                />\n                                <h3>{video.snippet.title}</h3>\n                                <p>Date: {video.snippet.publishedAt}</p>\n                                <p>Youtube videoId: {video.videoId}</p>\n                                {video.carDataId ? \n                                <div>\n                                <p>Car data ID: {video.carDataId ? video.carDataId : 'No data'}</p>\n                                 {/* <Button onClick={()=>setEditMode(true)}>Edit</Button> */}\n                                \n                                </div>\n                                \n                                 :\n                                editCarData(video)\n                                }\n                                {/* {editMode && editCarData(video)} */}\n                            </Col>\n                        )\n                        \n                        \n                    })\n                }\n            \n                </Row>\n            </Container>\n            : loginDiv}\n        </Fragment>\n    )\n}\n\nexport default EditVideoData","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/CarStatsCard.js",[],"/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/functionsStats.js",["463"],"import React, { Fragment } from 'react'\nimport { v4 as uuidv4 } from 'uuid'\n\nimport transmissionIcon from '../assets/global/transmission.svg'\nimport mileageIcon from '../assets/global/mileage.svg'\nimport torqueIcon from '../assets/global/torque.png'\nimport frontWheels from '../assets/global/front-wheels.png'\nimport rearWheels from '../assets/global/rear-wheels.png'\nimport allWheels from '../assets/global/all-wheels.png'\nimport priceIcon from '../assets/global/Price-Tag-icon.svg'\nimport powerIcon from '../assets/global/Horsepower.svg'\nimport weightIcon from '../assets/global/weight.svg'\nimport pistonIcon from '../assets/global/piston.png'\n\nexport const switchTabs = (car, tab) =>{\n    let engine, warranty, measurements, comfort, drivetrain, suspension, mileage, weight, totalSeating, colors, baseMSRP, rearseats, driveIcon, driveType\n\n    if(car.features['Engine'] !== undefined) engine = car.features['Engine']\n    if(car.features['Warranty'] !== undefined) warranty = car.features['Warranty']\n    if(car.features['Measurements'] !== undefined) measurements = car.features['Measurements']\n    if(car.features['Measurements'] !== undefined) weight = car.features['Measurements']['Curb weight']\n    if(car.features['Comfort & Convenience'] !== undefined) comfort = car.features['Comfort & Convenience']\n    if(car.features['Drive Train'] !== undefined){\n        drivetrain = car.features['Drive Train']\n        driveType = drivetrain['Drive type']\n    } \n    if(driveType === undefined){\n        driveType = null\n    }else if(driveType === 'all wheel drive' || drivetrain['Drive type'] === 'four wheel drive'){\n        driveIcon = allWheels\n    }else if(driveType === 'front wheel drive'){\n        driveIcon = frontWheels\n    }else if(driveType === 'rear wheel drive'){\n        driveIcon = rearWheels\n    }else{driveIcon = allWheels}\n\n    if(car.features['Suspension'] !== undefined) suspension = car.features['Suspension']\n    if(car.features['Rearseats'] !== undefined) rearseats = car.features['Rearseats'] \n    if(car.features['Fuel']['EPA mileage est'] == undefined) {\n        console.log('no mileage')\n    }else{mileage = car.features['Fuel']['EPA mileage est'][' (cty/hwy)']}\n    if(car.totalSeating !== undefined) totalSeating = car.totalSeating\n    if(car.color !== undefined) colors = car.color\n\n    if(car.price === undefined || car.price === null){\n        baseMSRP = ''\n        \n    }else if(car.price.baseMSRP === undefined || car.price.baseMSRP === null){\n        baseMSRP = ''\n    }else{\n        baseMSRP = car.price.baseMSRP.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    }\n    \n    switch(tab) {\n        case 'Main Stats':\n          return <Fragment>\n                    {baseMSRP &&\n                    <div className=\"stats-box\">\n                    <div  className=\"xs-txt\">\n                        <img src={priceIcon} alt=\"price\" className=\"icon-stats\" />\n                        <div>MSRP</div>\n                    </div>\n                    <div className=\"stats-label\">\n                        ${' '} {baseMSRP}\n                    </div>\n                    \n                    </div>}\n\n                    {weight &&\n                    <div className=\"stats-box\">\n                        <div className=\"xs-txt\">\n                            <img src={weightIcon} alt=\"weight\" className=\"icon-stats\" />\n                            <div>Curb weight</div>\n                        </div>\n                        <div className=\"stats-label\">\n                            {weight.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}\n                        </div>\n                    </div>\n                    }\n                    {mileage &&\n                    <div className=\"stats-box\">\n                        <div className=\"xs-txt\">\n                            <img src={mileageIcon} alt=\"mileage\" className=\"icon-stats\" />\n                            <div>Mileage</div>\n                        </div>\n                        <div className=\"stats-label\">\n                            {mileage}\n                        </div>\n                    </div>\n                    }\n                    \n                    {drivetrain &&\n                    <div className=\"stats-box\">\n                        <div className=\"xs-txt\">\n                            <img src={transmissionIcon} alt=\"transmission\" className=\"icon-stats\" />\n                            <div>Transmission</div>\n                        </div>\n                        <div className=\"stats-label\">\n                            {drivetrain['Transmission']}\n                        </div>\n                    </div>\n                    }\n                    {driveType &&\n                    <div className=\"stats-box\">\n                        <div className=\"xs-txt\">\n                            <img src={driveIcon} alt=\"drive\" className=\"icon-stats\" />\n                            <div>Drive type</div>\n                        </div>\n                        <div className=\"stats-label\">\n                            {driveType}\n                        </div>\n                    </div>\n                    }\n                    {car.features.Engine.Torque && \n                    <div className=\"stats-box\">\n                        <div className=\"xs-txt\">\n                            <img src={torqueIcon} alt=\"torque\" className=\"icon-stats\" />\n                            Torque\n                        </div>\n                        <div className=\"stats-label\">\n                            { car.features.Engine.Torque }\n                        </div>\n                    </div>\n                    }\n                    {car.features.Engine.Horsepower &&\n                    <div className=\"stats-box\">\n                        <div className=\"xs-txt\">\n                            <img src={powerIcon} alt=\"hoursepower\" className=\"icon-stats\" />\n                            Horsepower\n                        </div>\n                        <div className=\"stats-label\">\n                            { car.features.Engine.Horsepower}\n                        </div>\n                    </div>\n                    }\n                    {car.features.Engine.Cylinders &&\n                    <div className=\"stats-box\">\n                        <div className=\"xs-txt\">\n                            <img src={pistonIcon} alt=\"Cylinders\" className=\"icon-stats\" />\n                            Cylinders\n                        </div>\n                        <div className=\"stats-label\">\n                            { car.features.Engine.Cylinders}\n                        </div>\n                        \n                    </div>\n                    }\n                </Fragment>\n        case 'Engine':\n            return <Fragment>\n                    { engine && Object.entries(engine).map(([key, value]) =>{\n                        return <div className=\"stats-box\"><strong>{key}</strong>:  {value}</div>\n                    })}\n                  </Fragment>\n        case 'Warranty':\n            return <Fragment>\n                    {warranty && Object.entries(warranty).map(([key, value]) =>{\n                        return <div className=\"stats-box\" key={key}><strong>{key}</strong>:  {value}</div>\n                    })}\n                  </Fragment>\n        case 'Measurements':\n            return <Fragment>\n                    {totalSeating && \n                        <div className=\"stats-box\">Total Seating: {totalSeating}</div>\n                    }\n                    {rearseats && Object.entries(rearseats).map(([key, value]) =>{\n                        return <div className=\"stats-box\" key={key}><strong>{key}</strong>:  {value}</div>\n                    })\n                    }\n                    { measurements && Object.entries(measurements).map(([key, value]) =>{\n                        return <div className=\"stats-box\" key={key}><strong>{key}</strong>:  {value}</div>\n                    })}\n                      \n                 \n                  </Fragment>  \n        case 'Comfort & Convenience':\n            return <Fragment>\n                    { comfort && Object.keys(comfort).map((key, index)=>{\n                        return <div className=\"stats-box\" key={key}>{key}</div>\n                    })}\n                      \n                   \n                  </Fragment> \n        case 'Drive Train':\n            return <Fragment>\n                    { drivetrain && Object.entries(drivetrain).map(([key, value]) =>{\n                        if(value === true){\n                            return <div className=\"stats-box\" key={key}>{key}<strong></strong></div>\n                        }else{\n                            return <div className=\"stats-box\" key={key}><strong>{key}</strong>:  {value}</div>\n                        }\n                        \n                    })}\n                  </Fragment>\n        case 'Suspension':\n            return <Fragment>\n                    { suspension && Object.keys(suspension).map((key, index)=>{\n                        return <div className=\"stats-box\" key={key}>{key}</div>\n                    })}\n                      \n                   \n                  </Fragment>    \n        case 'Color':\n            return <Fragment>\n                    <p><strong>Exterior</strong></p>\n                    { colors && colors['EXTERIOR'] && colors['EXTERIOR'].map((color, index)=>{\n                        const uuid = uuidv4()\n                        return <Fragment key={uuid}>\n                                <div className=\"stats-box-outline\" >\n                                <div className=\"color-thumbnail\" style={{backgroundColor: `rgb(${color.rgb})`}}></div>\n                                <div className=\"color-name\">{color.name}</div>\n                                </div>\n                               </Fragment>\n                    })}\n                      <hr />\n                   <p><strong>Interior</strong></p>\n                   { colors && colors['INTERIOR'] && colors['INTERIOR'].map((color, index)=>{\n                        return <div className=\"stats-box-outline\" key={color.name}>\n                                <div className=\"color-thumbnail\" style={{backgroundColor: `rgb(${color.rgb})`}}></div>\n                                <div className=\"color-name\">{color.name}</div>\n                                </div>\n                    })}\n                  </Fragment>  \n        default:\n          return <Fragment>\n                    <div className=\"stats-box\">Error</div>\n                </Fragment>\n      }\n}\n","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/jsonLD.js",["464","465"],"import React, { Fragment } from 'react'\n\nexport const jsonLD2 = (props) =>{\n    const { slug, pageName, publishedISO, timeISO } = props\n    const data = `\n            {\n                \"@context\": \"http://schema.org\",\n                \"@graph\": [{\"@type\":\"WebSite\",\"@id\":\"https://thesmokeshow.com/#website\",\n                \"url\":\"https://thesmokeshow.com/\",\n                \"name\":\"The Smoke Show\",\n                \"description\":\"\",\n                \"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":\"https://thesmokeshow.com/search?s={search_term_string}\",\"query-input\":\"required name=search_term_string\"}],\n                \"inLanguage\":\"en\"},\n                {\"@type\": \"WebPage\",\n                \"@id\": \"https://thesmokeshow.com/${slug}/#webpage\", \"url\": \"https://thesmokeshow.com/${slug}/\", \"name\": \"${pageName} | The Smoke Show\",\"isPartOf\":{\"@id\":\"https://thesmokeshow.com/#website\"}, \"datePublished\": \"${publishedISO}\", \"dateModified\": \"${timeISO}\", \"description\": \"Look at all information about any car and have the results displayed in a way that's actually readable by a human. We didn't invent car search, we perfected it!\", \"breadcrumb\":{\"@id\":\"https://thesmokeshow.com/${slug}/#breadcrumb\"},\"inLanguage\":\"en\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https://thesmokeshow.com/${slug}/\"]}]},\n                {\"@type\":\"BreadcrumbList\",\"@id\":\"https://thesmokeshow.com/#breadcrumb\",\n                \"itemListElement\":[{\n                    \"@type\":\"ListItem\",\"position\":1,\n                    \"item\":{\"@type\":\"WebPage\",\"@id\":\"https://thesmokeshow.com/\",\"url\":\"https://thesmokeshow.com/\",\"name\":\"Home\"}\n                    },\n                    {\n                        \"@type\":\"ListItem\",\n                        \"position\":2,\n                        \"item\":{\"@type\":\"WebPage\",\"@id\":\"https://thesmokeshow.com/${slug}/\",\"url\":\"https://thesmokeshow.com/${slug}/\",\"name\":\"${pageName}\"}\n                    }\n                    ]}\n                ]\n            }\n        `\n    return data\n}\n\nexport const jsonLD3 = (props) =>{\n    const { slug, pageName, publishedISO, timeISO, list2, list3, list2Name } = props\n    const data = \n            `\n            {\n                \"@context\": \"http://schema.org\",\n                \"@graph\": [{\"@type\":\"WebSite\",\"@id\":\"https://thesmokeshow.com/#website\",\n                \"url\":\"https://thesmokeshow.com/\",\n                \"name\":\"The Smoke Show\",\n                \"description\":\"\",\n                \"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":\"https://thesmokeshow.com/search?s={search_term_string}\",\"query-input\":\"required name=search_term_string\"}],\n                \"inLanguage\":\"en\"},\n                {\"@type\": \"WebPage\",\n                \"@id\": \"https://thesmokeshow.com/${slug}/#webpage\", \"url\": \"https://thesmokeshow.com/${slug}/\", \"name\": \"${pageName} | The Smoke Show\",\"isPartOf\":{\"@id\":\"https://thesmokeshow.com/#website\"}, \"datePublished\": \"${publishedISO}\", \"dateModified\": \"${timeISO}\", \"description\": \"Look at all information about any car and have the results displayed in a way that's actually readable by a human. We didn't invent car search, we perfected it!\", \"breadcrumb\":{\"@id\":\"https://thesmokeshow.com/${slug}/#breadcrumb\"},\"inLanguage\":\"en\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https://thesmokeshow.com/${slug}/\"]}]},\n                {\"@type\":\"BreadcrumbList\",\"@id\":\"https://thesmokeshow.com/#breadcrumb\",\n                \"itemListElement\":[{\n                    \"@type\":\"ListItem\",\"position\":1,\n                    \"item\":{\"@type\":\"WebPage\",\"@id\":\"https://thesmokeshow.com/\",\"url\":\"https://thesmokeshow.com/\",\"name\":\"Home\"}\n                    },\n                    {\n                        \"@type\":\"ListItem\",\n                        \"position\":2,\n                        \"item\":{\"@type\":\"WebPage\",\"@id\":\"https://thesmokeshow.com/${list2}/\",\"url\":\"https://thesmokeshow.com/${list2}/\",\"name\":\"${list2Name}\"}\n                    },\n                    {\n                        \"@type\":\"ListItem\",\n                        \"position\":3,\n                        \"item\":{\"@type\":\"WebPage\",\"@id\":\"https://thesmokeshow.com/${list3}/\",\"url\":\"https://thesmokeshow.com/${list3}/\",\"name\":\"${pageName}\"}\n                    }\n                    ]}\n                ]\n            }\n        `\n    return data\n}\n\nexport const jsonLD4 = (props) =>{\n    const { slug, pageName, publishedISO, timeISO, list2, list3, list4, list2Name, list3Name } = props\n    const data = \n            `\n            {\n                \"@context\": \"http://schema.org\",\n                \"@graph\": [{\"@type\":\"WebSite\",\"@id\":\"https://thesmokeshow.com/#website\",\n                \"url\":\"https://thesmokeshow.com/\",\n                \"name\":\"The Smoke Show\",\n                \"description\":\"\",\n                \"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":\"https://thesmokeshow.com/search?s={search_term_string}\",\"query-input\":\"required name=search_term_string\"}],\n                \"inLanguage\":\"en\"},\n                {\"@type\": \"WebPage\",\n                \"@id\": \"https://thesmokeshow.com/${slug}/#webpage\", \"url\": \"https://thesmokeshow.com/${slug}/\", \"name\": \"${pageName} | The Smoke Show\",\"isPartOf\":{\"@id\":\"https://thesmokeshow.com/#website\"}, \"datePublished\": \"${publishedISO}\", \"dateModified\": \"${timeISO}\", \"description\": \"Look at all information about any car and have the results displayed in a way that's actually readable by a human. We didn't invent car search, we perfected it!\", \"breadcrumb\":{\"@id\":\"https://thesmokeshow.com/${slug}/#breadcrumb\"},\"inLanguage\":\"en\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https://thesmokeshow.com/${slug}/\"]}]},\n                {\"@type\":\"BreadcrumbList\",\"@id\":\"https://thesmokeshow.com/#breadcrumb\",\n                \"itemListElement\":[{\n                    \"@type\":\"ListItem\",\"position\":1,\n                    \"item\":{\"@type\":\"WebPage\",\"@id\":\"https://thesmokeshow.com/\",\"url\":\"https://thesmokeshow.com/\",\"name\":\"Home\"}\n                    },\n                    {\n                        \"@type\":\"ListItem\",\n                        \"position\":2,\n                        \"item\":{\"@type\":\"WebPage\",\"@id\":\"https://thesmokeshow.com/${list2}/\",\"url\":\"https://thesmokeshow.com/${list2}/\",\"name\":\"${list2Name}\"}\n                    },\n                    {\n                        \"@type\":\"ListItem\",\n                        \"position\":3,\n                        \"item\":{\"@type\":\"WebPage\",\"@id\":\"https://thesmokeshow.com/${list2}/${list3}/\",\"url\":\"https://thesmokeshow.com/${list2}/${list3}\",\"name\":\"${list3Name}\"}\n                    },\n                    {\n                        \"@type\":\"ListItem\",\n                        \"position\":3,\n                        \"item\":{\"@type\":\"WebPage\",\"@id\":\"https://thesmokeshow.com/${list2}/${list3}/${list4}/\",\"url\":\"https://thesmokeshow.com/${list2}/${list3}/${list4}/\",\"name\":\"${pageName}\"}\n                    }\n                    ]}\n                ]\n            }\n        `\n    return data\n}","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Fan/SettingModal.js",["466","467","468","469"],"import React, { useState, Fragment, useEffect} from 'react'\nimport { Row, Col, Modal, Button, Form, Alert } from 'react-bootstrap'\nimport bioPic from '../../assets/temp-photos/bio/avator-male.jpg'\nimport noImg from '../../assets/global/no_image.jpg'\nimport jwt from 'jsonwebtoken'\nimport * as Realm from \"realm-web\"\nimport short from 'short-uuid'\nimport Compressor from 'compressorjs'\nconst appConfig = {\n    id: process.env.REACT_APP_REALM_APP_ID,\n    timeout: 10000, // timeout in number of milliseconds\n  };\nconst app = new Realm.App(appConfig);\n\nconst SettingModal = (props) =>{\n    const bucketName = process.env.REACT_APP_AWS_BUCKET_NAME\n    const [imgData64Profile, setImgData64Profile] = useState('')\n    const [imgData64Cover, setImgData64Cover] = useState('')\n    const [userObj, setUserObj] = useState({fname: props.profileUser.fname, lname: props.profileUser.lname, email: props.profileUser.email, username: props.profileUser.username})\n    const [uploadMsg, setUploadMsg] = useState({profile: '', cover: ''})\n    // const [currentUserId] = useState(app.currentUser.id)\n    const [userPw, setUserPw] = useState({newPw: '', conNewPw: '', currentPw: ''})\n    const [tooBig, setTooBig] = useState({profile: false, cover: false})\n    const [profilePic, setProfilePic] = useState({})\n    const [coverPic, setCoverPic] = useState({})\n    const [imgThumb, setImgThumb] = useState()\n    const [coverImgThumb, setCoverImgThumb] = useState()\n    const msg = {profilePic: 'Your profile picture is successfully updated', coverPic: 'Your cover picture is successfully updated', userDetails: 'Your account information successfully updated', password: 'Your password is successfully updated'}\n    const [isSuccess, setIsSuccess] = useState({profilePic: false, coverPic: false, userDetails: false, password: false })\n    const [currentBioPic, setCurrentBioPic] = useState()\n    const [currentCover, setCurrentCover] = useState()\n    const [disableBtnStates, setDisableBtnStates] = useState({profilePic: true, coverPic: true, userDetails: true, password: true})\n    // const baseImgUrl = 'https://s3.amazonaws.com/smokeshow.users/'\n    const cloudFrontUrl = 'https://dwdlqiq3zg6k6.cloudfront.net/'\n    const [thumb64, setThumb64] = useState()\n    const handleClose = props.handleCloseSetting\n    // const handleShow = props.handleShowSetting\n\n    const handleChange = (e) =>{\n        setUserObj({...userObj,\n            [e.target.name]: e.target.value\n        })\n        if(disableBtnStates){\n            setDisableBtnStates({\n                ...disableBtnStates,\n                userDetails: false\n            })\n        }\n    }\n    const handleChangePw = (e) =>{\n        setUserPw({\n            ...userPw,\n            [e.target.name]: e.target.value\n        })\n        setDisableBtnStates({\n            ...disableBtnStates,\n            password: false\n        })\n    }\n\n    const profilePicUpload = (e) =>{\n        if (e.target.files[0].size / (1024 * 1024) > 3){\n            setTooBig({...tooBig, profile: true})\n            setUploadMsg({...uploadMsg, profile: 'The file size is too big. Please choose different file.'})\n            return\n        }else{\n            const file = e.target.files[0] \n            new Compressor(file, {\n                // quality: 0.6,\n                minWidth: 300,\n                height: 300,\n                success(result) {\n                    let reader = new FileReader();\n                    reader.readAsDataURL(result); \n                    reader.onloadend = function() {\n                        const base64 = reader.result.split(\",\").pop();                \n                        setImgData64Profile(base64)\n                    }\n                }\n\n              });\n              new Compressor(file, {\n                // quality: 0.6,\n                minWidth: 100,\n                height: 100,\n                success(result) {\n                    let reader = new FileReader();\n                    reader.readAsDataURL(result); \n                    reader.onloadend = function() {\n                        const base64 = reader.result.split(\",\").pop();                \n                        setThumb64(base64)\n                    }\n                    \n                }\n\n              });\n        setProfilePic(e.target.files[0])\n        setImgThumb(URL.createObjectURL(e.target.files[0]))\n        setDisableBtnStates({\n            ...disableBtnStates,\n            profilePic: false\n        })\n    }\n    }\n    const saveProfilePic = async () =>{\n        const imgId = short.generate()\n        const filekey = props.profileUser.userId + '/profile/pic300-' + imgId\n        const keyThumb = props.profileUser.userId + '/profile/thumbnail'\n        const imgUrlWithKey = cloudFrontUrl + filekey\n        const imgUrlWithKeyThumb = cloudFrontUrl + keyThumb\n        const oldProfilePic = props.profileUser.profilePic\n\n        // if( currentUserId === props.profileUser.userId){\n            \n        //     try{\n        //         await app.currentUser.functions.putImageObjToS3(imgData64Profile, bucketName, filekey, profilePic.type).then( async res =>{\n        //             console.log(res)\n        //             try {\n        //                 await app.currentUser.functions.putImageObjToS3(thumb64, bucketName, keyThumb, profilePic.type).then(async res =>{\n        //                     console.log(res)\n        //                     if(typeof(oldProfilePic) !== \"undefined\"){\n        //                         const currentUrl = props.profileUser.profilePic\n        //                         const splitted = currentUrl.split('/');\n        //                         const key = splitted.splice(4, 7).join(\"/\")\n        //                         deleteImgObj(key)\n        //                     }\n        //                     const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n        //                     const collectionUser = mongo.db(\"smoke-show\").collection(\"users\")\n        //                     try{\n        //                         await collectionUser.updateOne(\n        //                             { \"userId\": app.currentUser.id},\n        //                             { \"$set\": {\"profileThumb\": imgUrlWithKeyThumb} },\n        //                             { upsert: true }\n        //                         ).then(async res =>{\n        //                             console.log(res)\n        //                             const result = await collectionUser.updateOne(\n        //                                 { \"userId\": app.currentUser.id},\n        //                                 { \"$set\": {\"profilePic\": imgUrlWithKey} },\n        //                                 { upsert: true }\n        //                             )\n        //                             return result\n        //                         })\n        //                         .then(res =>{\n        //                             console.log('res', res)\n        //                             setIsSuccess({\n        //                                 ...isSuccess,\n        //                                 profilePic: true\n        //                             })\n        //                             setDisableBtnStates({\n        //                                 ...disableBtnStates,\n        //                                 profilePic: true\n        //                             })\n        //                             props.updatedata(mongo)\n                           \n        //                             return\n        //                         })\n        //                     }catch(err){\n        //                         console.log(err)\n        //                     }\n        //                 })\n        //             } catch (error) {\n        //                 console.log(error)\n        //             }\n        //         })\n        //     }catch(err){\n        //     console.log(err)\n        //     }\n        // }else{\n        const tokenUser = sessionStorage.getItem('session_user')\n        // const decoded = jwt.verify(token, process.env.REACT_APP_JWT_SECRET)\n        const decoded = jwt.verify(tokenUser, process.env.REACT_APP_JWT_SECRET)\n        try{\n            await app.logIn(decoded.cre).then(async user =>{\n                if(user.id === app.currentUser.id){\n                    console.log('user updated')\n                }else{\n                    console.log('user not updated')\n                }\n                const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n                const collectionUser = mongo.db(\"smoke-show\").collection(\"users\")\n                await user.functions.putImageObjToS3(imgData64Profile, bucketName, filekey, profilePic.type).then(async res =>{\n                    console.log(res)\n                    const result = await user.functions.putImageObjToS3(thumb64, bucketName, keyThumb, profilePic.type)\n                    console.log(result)\n                    if(typeof(oldProfilePic) !== \"undefined\"){\n                        const currentUrl = props.profileUser.profilePic\n                        const splitted = currentUrl.split('/');\n                        const key = splitted.splice(4, 7).join(\"/\")\n                        deleteImgObj(key)\n                    }\n                })\n                try{\n                    await collectionUser.updateOne(\n                        { \"userId\": user.id},\n                        { \"$set\": { \"profilePic\": imgUrlWithKey} },\n                        { upsert: true}\n                    ).then(async res =>{\n                    console.log(res)\n                       const result =  await collectionUser.updateOne(\n                            { \"userId\": user.id},\n                            { \"$set\": { \"profileThumb\": imgUrlWithKeyThumb} },\n                            { upsert: true}\n                        )\n                        return result\n                    }).then(res =>{\n                        console.log('res', res)\n                        setIsSuccess({\n                            ...isSuccess,\n                            profilePic: true\n                        })\n                        setDisableBtnStates({\n                            ...disableBtnStates,\n                            profilePic: true\n                        })\n                        props.updatedata(mongo)\n                        // props.updateProfileData(imgUrlWithKey, \"profilePic\")\n\n                        return\n                    })\n                }catch(err){\n                    console.log(err)\n                }\n            })\n        }catch(err){\n            console.log(err)\n        }\n        // }\n    }\n    const coverPicUpload = (e) =>{\n        \n        if (e.target.files[0].size / (1024 * 1024) > 3){\n            setTooBig({...tooBig, cover: true})\n            setUploadMsg({...uploadMsg, cover: 'The file size is too big. Please choose different file.'})\n            return\n        }else{\n            setTooBig({...tooBig, cover: false})\n            setUploadMsg({...uploadMsg, cover: ''})\n            console.log(e.target.files[0])\n            setCoverPic(e.target.files[0])\n            setCoverImgThumb(URL.createObjectURL(e.target.files[0]))\n            setDisableBtnStates({\n                ...disableBtnStates,\n                coverPic: false\n            })\n            const file = e.target.files[0] \n            const reader = new FileReader()\n            reader.onload = (event) => {\n            const base64 = event.target.result.split(\",\").pop()\n              setImgData64Cover(base64)\n            };\n            reader.readAsDataURL(file)\n        }\n        \n    }\n    const saveProfileCover = async  (e) =>{\n        const imgId = short.generate()\n        const filekey = props.profileUser.userId + '/profile/cover-' + imgId\n        const imgUrlWithKey = cloudFrontUrl + filekey\n        \n        // if(currentUserId === props.profileUser.userId){\n        //     const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n        //     try{\n        //         await app.currentUser.functions.putImageObjToS3(imgData64Cover, bucketName, filekey, coverPic.type).then( async res =>{\n        //             console.log('res', res)\n        //             if( typeof(props.profileUser.profileCover) !== \"undefined\"){\n        //                 const currentUrl = props.profileUser.profileCover\n        //                 const splitted = currentUrl.split('/');\n        //                 const key = splitted.splice(4, 7).join(\"/\")\n        //                 deleteImgObj(key)\n        //             }\n        //             console.log('url',imgUrlWithKey)\n        //             const collectionUser = mongo.db(\"smoke-show\").collection(\"users\")\n        //             try{\n        //                 await collectionUser.updateOne(\n        //                     { \"userId\": props.profileUser.userId},\n        //                     { \"$set\": { \"profileCover\": imgUrlWithKey } },\n        //                     { upsert: true}\n        //                 ).then( res =>{\n        //                     console.log('res', res)\n        //                     setIsSuccess({\n        //                         ...isSuccess,\n        //                         coverPic: true\n        //                     })\n        //                     setDisableBtnStates({\n        //                         ...disableBtnStates,\n        //                         coverPic: true\n        //                     })\n        //                     props.updatedata(mongo)\n        //                 })\n        //             }catch(err){ console.log(err) }\n        //         })\n        //     }catch(err){\n        //     console.log(err)\n        //     }\n        // }else{\n            const tokenUser = sessionStorage.getItem('session_user')\n            // const decoded = jwt.verify(token, process.env.REACT_APP_JWT_SECRET)\n            const decoded = jwt.verify(tokenUser, process.env.REACT_APP_JWT_SECRET)\n            try{\n                await app.logIn(decoded.cre).then(async  user =>{\n                    if(user.id === app.currentUser.id){\n                        console.log('user updated')\n                    }else{\n                        console.log('user not updated')\n                    }\n                    const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n                    const collectionUser = mongo.db(\"smoke-show\").collection(\"users\")\n                    try {\n                        await user.functions.putImageObjToS3(imgData64Cover, bucketName, filekey, coverPic.type).then( async res =>{\n                            console.log(res)\n                            if( typeof(props.profileUser.profileCover) !== \"undefined\"){\n                                const currentUrl = props.profileUser.profileCover\n                                const splitted = currentUrl.split('/');\n                                const key = splitted.splice(4, 7).join(\"/\")\n                                deleteImgObj(key)\n                            }\n                        })\n                    } catch (error) {\n                        console.log(error)\n                    }\n                    \n                try{\n                    await collectionUser.updateOne(\n                        { \"userId\": user.id},\n                        { \"$set\": { \"profileCover\": imgUrlWithKey } },\n                        { upsert: true}\n                    ).then(res =>{\n                        console.log('res', res)\n                        setIsSuccess({\n                            ...isSuccess,\n                            coverPic: true\n                        })\n                        setDisableBtnStates({\n                            ...disableBtnStates,\n                            coverPic: true\n                        })\n                        props.updatedata(mongo)\n                    })\n                }catch(err){\n                    console.log(err)\n                }\n                })\n            }catch(err){\n                console.log(err)\n            }\n            \n        // }\n    }\n\n\n    const handleUpdateProfile = async (e) =>{\n        e.preventDefault()\n        // const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n        // const collectionUser = mongo.db(\"smoke-show\").collection(\"users\")\n       \n        // if(app.currentUser.id === props.profileUser.userId){\n        //     try{\n        //         await collectionUser.updateOne(\n        //             { \"userId\": app.currentUser.id},\n        //             {\n        //                 \"$set\": {\n        //                     \"fname\": userObj.fname,\n        //                     \"lname\": userObj.lname,\n        //                     \"username\": userObj.username\n        //                   }\n        //             },\n        //             { upsert: true}\n        //         ).then( res =>{\n        //             console.log(res)\n        //             setIsSuccess({\n        //                 ...isSuccess,\n        //                 userDetails: true\n        //             })\n        //             setDisableBtnStates({\n        //                 ...disableBtnStates,\n        //                 userDetails: true\n        //             })\n        //             props.updateUserDetails(userObj.fname, userObj.lname, userObj.username)\n        //         })\n        //     }catch(err){ console.log(err) }\n            \n        // }else{\n            const token = sessionStorage.getItem('session_user')\n            const decoded = jwt.verify(token, process.env.REACT_APP_JWT_SECRET)\n            \n            try{\n                await app.logIn(decoded.cre).then( async user =>{\n                    const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n                    const collectionUser = mongo.db(\"smoke-show\").collection(\"users\")\n                    try{\n                        await collectionUser.updateOne(\n                            { \"userId\": user.userId },\n                            {\n                                \"$set\": {\n                                    \"fname\": userObj.fname,\n                                    \"lname\": userObj.lname,\n                                    \"username\": userObj.username\n                                  }\n                            },\n                            { upsert: true }\n                        ).then( res =>{\n                            console.log(res)\n                            setIsSuccess({\n                                ...isSuccess,\n                                userDetails: true\n                            })\n                            setDisableBtnStates({\n                                ...disableBtnStates,\n                                userDetails: true\n                            })\n                            props.updateUserDetails(userObj.fname, userObj.lname, userObj.username)\n                        })\n                    }catch(err){ console.log(err) }\n                })\n            }catch(err){ console.log(err) }\n        // }\n        \n    }\n\nconst deleteImgObj = async (key) =>{\n\n    if(app.currentUser.id === props.profileUser.userId){\n        try{\n            await app.currentUser.functions.deleteImageObjToS3(bucketName, key).then(res =>{\n                console.log('res', res)\n            })\n        }catch(err){console.log(err)}\n    }else{\n        const token = sessionStorage.getItem('session_user')\n        const decoded = jwt.verify(token, process.env.REACT_APP_JWT_SECRET)\n        try{\n            await app.logIn(decoded.cre).then(async user =>{\n                await user.functions.deleteImageObjToS3(bucketName, key).then(res =>{\n                    console.log('res', res)\n                })\n            })\n        }catch(err){console.log(err)}\n    }\n}\n\n    useEffect(() => {\n\n        if( typeof(props.profileUser.profilePic) == 'undefined' || props.profileUser.profilePic  == ''){\n            setCurrentBioPic(bioPic)\n        \n        }else{\n            setCurrentBioPic(props.profileUser.profilePic)\n        }\n        setUserObj({...userObj, profilePic: bioPic})\n        if(props.profileUser.profileCover == '' || typeof(props.profileUser.profileCover) == \"undefined\"){\n            setCurrentCover(noImg)\n        }else{\n            setCurrentCover(props.profileUser.profileCover)\n        }\n      \n        \n    }, [])\n\n    return(\n    <Fragment>\n        <Modal className=\"modal-wrapper-bio\" show={props.show} onHide={handleClose}>\n            <Modal.Header closeButton>\n            </Modal.Header>\n            <Modal.Body>\n                <Row className=\"bio-modal-inner-wrapper\">\n                    <Col sm={6} className=\"\">\n                    <p className=\"heading-modal\">Your profile picture</p>\n                    <Row>\n                    \n                        <Col sm={4}>\n                            <div className=\"change-bio-pic-wrapper\">\n                                <img src={imgThumb ? imgThumb : currentBioPic} alt=\"user avator\" className=\"change-pic\" />\n                            </div>\n                            \n                        </Col>\n                        <Col sm={8} className=\"setting-file-btn\" >\n                        \n                            <Form>\n                                <Form.Group>\n                                    <Form.File \n                                    id=\"bio-pic\"\n                                    label={profilePic.name ? profilePic.name : '' }\n                                    onChange={profilePicUpload}\n                                    custom\n                                     />\n                                </Form.Group>\n                                <small >Maximum file size is 3MB.</small>\n                                {isSuccess.profilePic ? <Alert variant=\"success\" style={{padding: '5px', marginTop: '1rem', textAlign:'center'}}><small>{msg.profilePic}</small></Alert> :\n                                <div style={{marginTop: '1rem'}}></div>\n                                }\n                                {tooBig.profile && <Alert variant=\"danger\">{uploadMsg.profile}</Alert>}\n                                <Button variant=\"primary\" onClick={saveProfilePic} className=\"save-changes-btn\" disabled={disableBtnStates.profilePic}>\n                                Upload\n                                </Button>\n                                \n                            </Form>\n                        </Col>\n                    </Row>\n                    <hr />\n                    <div className=\"spacer-2rem\"></div>\n                    <p className=\"heading-modal\">Your account information</p>\n                              \n                    <Form>\n                        <Row>\n                            <Col sm={6}>\n                                <Form.Group >\n                                    <Form.Label>First Name</Form.Label>\n                                    <Form.Control name=\"fname\" type=\"text\" placeholder={props.profileUser.fname ? props.profileUser.fname : \"Enter your first name\"} onChange={handleChange} />\n                                </Form.Group>\n                            </Col>\n                            <Col sm={6}>\n                                <Form.Group >\n                                    <Form.Label>Last Name</Form.Label>\n                                    <Form.Control name=\"lname\" type=\"text\" placeholder={props.profileUser.lname ? props.profileUser.lname : \"Enter your first name\"} onChange={handleChange} />\n                                </Form.Group>\n                            </Col>\n                        </Row>\n                        \n                        <br/>\n                        <Form.Group >\n                            <Form.Label>Email</Form.Label>\n                            <Form.Control type=\"email\" name=\"email\" placeholder={props.profileUser.email ? props.profileUser.email: \"Please add your email\"} disabled />\n                        </Form.Group>\n                        <br/>\n                        <Form.Group >\n                            <Form.Label>Username</Form.Label>\n                            <Form.Control type=\"text\" name=\"username\" placeholder={props.profileUser.username ? props.profileUser.username : \"Please add your username\"} disabled/>\n                        </Form.Group>\n                        <br/>\n                        {isSuccess.userDetails ? <Alert variant=\"success\" style={{padding: '5px', marginTop: '1rem', textAlign:'center'}}><small>{msg.userDetails}</small></Alert> : \"\"}\n                        <Button variant=\"primary\" onClick={handleUpdateProfile} className=\"save-changes-btn\" disabled={disableBtnStates.userDetails}>\n                                Save Changes\n                        </Button>\n                    </Form>\n                    </Col>\n                    <Col sm={6}>\n                        <p className=\"heading-modal\">Your cover image</p>\n                        <Row>\n                            <Col sm={4}>\n                                <div className=\"change-bio-pic-wrapper\">\n                                    <img src={coverImgThumb ? coverImgThumb : currentCover} alt=\"user uploaded photo\" className=\"change-pic\" />\n                                </div>\n                                \n                            </Col>\n                            <Col sm={8} className=\"setting-file-btn\" >\n                                <Form>\n                                    <Form.Group>\n                                        <Form.File \n                                        // id=\"exampleFormControlFile2\" className=\"upload-file-btn\"\n                                        id=\"bio-pic\"\n                                        label={coverPic.name ? coverPic.name : ''}\n                                        onChange={coverPicUpload}\n                                        custom\n                                        />\n                                    </Form.Group>\n                                    <small >Maximum file size 3MB.</small>\n                                    {isSuccess.coverPic ? <Alert variant=\"success\" style={{padding: '5px', marginTop: '1rem', textAlign:'center'}}><small>{msg.coverPic}</small></Alert> :\n                                    <div style={{marginTop: '1rem'}}></div>\n                                    }\n                                    {tooBig.cover && <Alert variant=\"danger\">{uploadMsg.cover}</Alert>}\n                                    <Button variant=\"primary\" onClick={saveProfileCover} className=\"save-changes-btn \" disabled={disableBtnStates.coverPic}>\n                                    Upload\n                                    </Button>\n                                </Form>\n                            </Col>\n                        </Row>\n                        \n                        <hr />\n                        <div className=\"spacer-2rem\"></div>\n                        \n                        <p className=\"heading-modal\">Change password</p>\n                        <Form>\n                            <Form.Group >\n                                <Form.Label>Current password</Form.Label>\n                                <Form.Control type=\"password\" placeholder=\"Enter your current password\" name=\"currentPw\" onChange={handleChangePw} />\n                            </Form.Group>\n                            <br/>\n                            <Form.Group >\n                                <Form.Label>New password</Form.Label>\n                                <Form.Control type=\"password\" placeholder=\"Enter your new password\" name=\"newPw\" onChange={handleChangePw} />\n                            </Form.Group>\n                            <br/>\n                            <Form.Group >\n                                <Form.Label>Confirm new password</Form.Label>\n                                <Form.Control type=\"password\" placeholder=\"Confirm your new password\" name=\"conNewPw\" onChange={handleChangePw} />\n                            </Form.Group>\n                            <br/>\n                            { isSuccess.password && <Alert variant=\"success\">{msg.password}</Alert> }\n\n                            <Button variant=\"primary\" onClick={handleClose} className=\"save-changes-btn\" disabled={disableBtnStates.password}>\n                                    Save new password\n                            </Button>\n                        </Form>\n                    </Col>\n                </Row>\n                \n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"primary\" onClick={handleClose} className=\"save-changes-btn btn-close-settings\">\n                        Close\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    </Fragment>\n    )\n}\n\nexport default SettingModal","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Shopify/Products.js",["470"],"import React, { Component } from 'react';\nimport Product from './Product';\nimport { Row, Container } from 'react-bootstrap'\n\nclass Products extends Component {\n  render() {\n    let products = this.props.products.map((product) => {\n      return (\n        <Product\n          addVariantToCart={this.props.addVariantToCart}\n          client={this.props.client}\n          key={product.id.toString()}\n          product={product}\n        />\n      );\n    });\n\n    return (\n      <div className=\"width-adj-shop\">\n        <Row>\n          {products}\n        </Row>\n      </div>\n      \n    );\n  }\n}\n\nexport default Products;\n","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Fan/editsBioPage.js",[],"/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Shopify/Cart.js",[],"/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Fan/CreateNewCar.js",["471"],"import React, { useState, Fragment } from 'react'\nimport { Row, Col, Modal, Button, Form } from 'react-bootstrap'\nimport * as Realm from \"realm-web\"\n// import ImageUpload from './ImageUpload'\nimport jwt from 'jsonwebtoken'\nimport short from 'short-uuid'\nimport { createMyCar } from '../../store/actions/bioActions'\nimport { connect } from 'react-redux'\nimport loadable from '@loadable/component'\n\nconst ImageUpload = loadable(() => import('../Global/ImageUpload'))\n\nconst CreateNewCar = (props) =>{\n    const bucketName = process.env.REACT_APP_AWS_BUCKET_NAME;\n    const [imgFile, setImgFile] = useState('')\n    const [imgData64, setImgData64] = useState('')\n    const appConfig = {\n        id: process.env.REACT_APP_REALM_APP_ID,\n        timeout: 10000, // timeout in number of milliseconds\n        };\n    const app = new Realm.App(appConfig)\n    const maxAgeTest = 1 * 60 * 60\n\n    const setImgData = (obj) =>{\n        setImgFile(obj)\n        var file = obj\n        const reader = new FileReader();\n        reader.onload = (event) => {\n        const base64 = event.target.result.split(\",\").pop()\n          setImgData64(base64)\n        //   console.log(base64);\n        };\n        reader.readAsDataURL(file);\n      }\n    const closeModal = () =>{\n        setNewCarObj({name: '', category: '', color: '', wheels: '', upgrades: ''})\n        props.handleClose()\n    }\n\n    \n    const carColors = ['White', 'Black', 'Grey', 'Blue', 'Silver', 'Red', 'Orange', 'Bronze', 'Yellow', 'Green', 'Navy']\n    const carCategories = ['Dream Car', 'Daily Driver', 'Vehicle #2']\n    const [newCarObj, setNewCarObj] = useState({name: '', category: 'Dream Car', color: 'White', wheels: '', upgrade: ''})\n\n    const handleChange = (e) =>{\n        setNewCarObj({\n            ...newCarObj,\n            [e.target.name]: e.target.value\n        })\n    }\n\n    const handleSubmit = async (e) =>{\n        e.preventDefault()\n        let baseImgUrl = `https://s3.amazonaws.com/${process.env.REACT_APP_AWS_BUCKET_NAME}/`\n        let imgId = short.generate()\n        let filekey = props.profileUser.userId + '/my-cars/' + imgId\n        let imgUrlWithKey;\n        if(imgData64){\n            filekey = props.profileUser.userId + '/my-cars/' + imgId\n            imgUrlWithKey = baseImgUrl + filekey\n        }else{\n            imgUrlWithKey = \"\"\n        }\n        const newCarData = {\n            name: newCarObj.name,\n            upgrades: newCarObj.upgrades,\n            wheels: newCarObj.wheels,\n            imgUrl: imgUrlWithKey,\n            category: newCarObj.category,\n            color: newCarObj.color,\n            userId: props.profileUser.userId,\n            performance: newCarObj.performance\n        }\n        if(app.currentUser.id === props.profileUser.userId){\n            const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME);\n            const collectionUsers = mongo.db(process.env.REACT_APP_REALM_DB_NAME).collection(\"users\")\n            const collectionMyCars = mongo.db(process.env.REACT_APP_REALM_DB_NAME).collection(\"my-cars\")\n            if(imgData64){\n                const result = await app.currentUser.functions.putImageObjToS3(imgData64, bucketName, filekey, imgFile.type)\n                console.log('res', result)\n            }\n                    \n                    try{\n                        await collectionMyCars.insertOne(newCarData).then(async res =>{\n                            console.log('res', res)\n                            console.log('inserted', res.insertedId)\n                            await collectionUsers.updateOne(\n                                { \"userId\": app.currentUser.id },\n                                {$push: { myCars:  res.insertedId}},\n                                { upsert: true }\n                                ).then(res =>{\n                                    console.log('res', res)\n                                    props.getMyCars(mongo)\n                         \n                                    closeModal()\n                                })\n                        })\n         \n                    }catch(err){\n                        console.log(err)\n                    }\n \n        }else{\n            console.log('warning current user and the login user do not match')\n            // const token = sessionStorage.getItem('session_token')\n            const tokenUser = sessionStorage.getItem('session_user')\n        \n            const credentials = jwt.verify(tokenUser, process.env.REACT_APP_JWT_SECRET)\n            \n            try{\n                await app.logIn(credentials.cre).then(async user =>{\n                    const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME);\n                    const collectionUsers = mongo.db(process.env.REACT_APP_REALM_DB_NAME).collection(\"users\")\n                    const collectionMyCars = mongo.db(process.env.REACT_APP_REALM_DB_NAME).collection(\"my-cars\")\n                    if(user.id === app.currentUser.id){\n                        console.log('user updated')\n                    }else{\n                        console.log('user not updated')\n                    }\n                    if(imgData64){\n                        const result = await user.functions.putImageObjToS3(imgData64, bucketName, filekey, imgFile.type)\n                        console.log('res', result)\n                    }\n               \n                        try{\n                            await collectionMyCars.insertOne(newCarData).then(async res =>{\n                                console.log('res', res)\n                                await collectionUsers.updateOne(\n                                    { \"userId\": app.currentUser.id },\n                                    {$push: { myCars:  res.insertedId}},\n                                    { upsert: true }\n                                    ).then(res =>{\n                                        console.log('res', res)\n                                        props.getMyCars(mongo)\n                                        // const oldArr = props.profileUser.myCars\n                                        // const cars = {myCars: oldArr.push(newCarData)}\n                                        // props.updateProfileData(cars, 'myCars')\n                                        closeModal()\n                                    })\n                            })\n                        }catch(err){\n                            console.log(err)\n                        }\n                //     })\n                    \n                })\n            }catch(err){\n                console.log(err)\n            }\n    }\n        \n}\n\n    return(\n    <Fragment>\n        <Modal show={props.show} onHide={props.handleClose} className=\"modal-wrapper-bio\">\n            <Modal.Header closeButton>\n            </Modal.Header>\n            <Modal.Body>\n                <Row className=\"bio-modal-inner-wrapper\">\n                    <Col sm={6} className=\"\">\n                    <ImageUpload fileObj={setImgData} />\n\n                    {/* <div {...getRootProps()} className=\"dropzone-wrapper\">\n                        <input {...getInputProps()} />\n                        {\n                            isDragActive ?\n                            <p>Drop the files here ...</p> :\n                            <div className=\"drag-dropzone\">\n                                <div className=\"bio-modal-container\">\n                                    <img src={uploadIcon} alt=\"upload files here\" />\n                                    <p>Drag and drop or click to upload an image</p>\n                                    <p>*3MB max image file size<br/>\n                                    *accepted file formats: jpg, png, gif</p>\n                                </div>\n\n                            </div>\n                        }\n                    </div> */}\n                    \n                    </Col>\n                    <Col sm={6}>\n                    <Form>\n                        <Form.Group >\n                            <Form.Label>Category</Form.Label>\n                            <Form.Control as=\"select\"  onChange={handleChange} name=\"category\">\n                            {carCategories.map((category, index) =>{\n                                return(\n                                    <option key={category + index}>{category}</option>\n                                )\n                            })}\n\n                            </Form.Control>\n                        </Form.Group>\n                        <br/>\n                        <Form.Group >\n                            <Form.Label>Car name</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"Enter car name e.g. maker, model, year\" onChange={handleChange} name=\"name\" required/>\n                        </Form.Group>\n                        <br/>\n                        <Form.Group >\n                            <Form.Label>Color</Form.Label>\n                            {/* <Form.Control type=\"text\" placeholder=\"Select your color\" onChange={handleChange} name=\"color\" /> */}\n                            <Form.Control as=\"select\" onChange={handleChange} name=\"color\">\n                            {carColors.map((color, index) =>{\n                                return(\n                                    <option key={color + index}>{color}</option>\n                                )\n                            })}\n                                \n                            </Form.Control>\n                        </Form.Group>\n                        <br/>\n                        <Form.Group >\n                            <Form.Label>Wheels</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"Enter your wheel\" onChange={handleChange} name=\"wheels\" required/>\n                        </Form.Group>\n                        <br/>\n                        <Form.Group >\n                            <Form.Label>Performance</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"Enter your performance\" onChange={handleChange} name=\"performance\" required/>\n                        </Form.Group>\n                        <br/>\n                        <Form.Group >\n                            <Form.Label>Upgrades</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"Enter your update\" onChange={handleChange} name=\"upgrades\" required />\n                        </Form.Group>\n                        <br/><br/>\n                        <Row>\n                            <Col sm={6}>\n                                <Button variant=\"secondary\" onClick={closeModal} className=\"cancel-btn\" > \n                                    Cancel\n                                </Button>\n                            </Col>\n                            <Col sm={6}>\n                                <Button variant=\"primary\" type=\"submit\" onClick={handleSubmit} className=\"save-changes-btn\">\n                                Add my new car\n                                </Button>\n                                {/* <Button onClick={testSubmit}>\n                                    test Submit\n                                </Button> */}\n                                {/* <br></br><br/>\n                                <button onClick={testImgUpload}>test upload</button> */}\n                            </Col>                          \n                        </Row>\n                    </Form>\n                    </Col>\n                </Row>\n            </Modal.Body>\n            <Modal.Footer>\n  \n            </Modal.Footer>\n        </Modal>\n    </Fragment>\n    )\n}\n\nconst mapDispatchToProps = (dispatch) =>{\n    return{\n        createMyCar: (car) => dispatch(createMyCar(car))\n    }\n}\n\nexport default connect(null, mapDispatchToProps)(CreateNewCar)","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Influencer/SubNav.js",["472","473","474","475","476"],"import React, { Fragment, useState, useEffect } from 'react'\nimport { Row, Col,  Button, Tooltip, OverlayTrigger, Nav } from 'react-bootstrap'\nimport { NavLink } from 'react-router-dom'\nimport settingsIcon from '../../assets/global/Settings-icon-white.svg'\nimport './subnav.scss'\nimport * as Realm from \"realm-web\"\nimport jwt from 'jsonwebtoken'\nimport { becomeAFan } from '../../store/actions/userActions'\nimport { openLoginModal } from '../../store/actions/authActions'\nimport { connect } from 'react-redux'\nimport doneIcon from '../../assets/global/done-white.svg'\n\nconst SubNav = (props) =>{\n    const [isFanOf, setIsFanOf] = useState(false)\n    const appConfig = {\n        id: process.env.REACT_APP_REALM_APP_ID,\n        // timeout: 10000, \n        // timeout in number of milliseconds\n      };\n    const app = new Realm.App(appConfig);\n    const influencer = props.influencer\n    const replaced = props.username.replace(\" \", \"-\")\n    const renderTooltip = (props) => (\n        <Tooltip  id=\"button-tooltip\" {...props} key=\"button-tooltip-key\">\n          <p style={{marginBottom: 0}}>You will receive notifications when the influencer publishes a video or updates their bio.</p>\n        </Tooltip>\n      );\n\n    const handleBecomeAFan = async ()=>{\n        const token = sessionStorage.getItem('session_user')\n        if(token){\n            jwt.verify(token, process.env.REACT_APP_JWT_SECRET, async (err, decoded)=>{\n                if(err){\n                    console.log('open login modal', err)\n                    props.openLoginModal(true)\n                    // open login modal \n                }else{\n                    try{\n                        await app.logIn(decoded.cre).then( async user =>{\n                            const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n                            let collectionUsers;\n                            if(user.isInfluencer){\n                                collectionUsers = mongo.db(process.env.REACT_APP_REALM_DB_NAME).collection(\"influencers\")\n                            }else{\n                                collectionUsers = mongo.db(process.env.REACT_APP_REALM_DB_NAME).collection(\"users\")\n                            }\n                            \n                            const collectionFans = mongo.db(process.env.REACT_APP_REALM_DB_NAME).collection(`fans-${influencer.username}`)\n                            \n                \n                            try{\n                                await collectionUsers.updateOne(\n                                    { \"userId\": user.id },\n                                    { $push: { fansOf: {id: influencer.userId, username: influencer.username} } },\n                                    { upsert: true }\n                                ).then(async res =>{\n                                    const fanData = {userId: user.id, date: new Date().getTime(), username: props.customData.username}\n                                    try{\n                                        await collectionFans.insertOne(fanData).then(res =>{\n                                            console.log(res)\n                                        })\n                                    }catch(err){\n                                        console.log(err)\n                                    }\n                                  \n                                    setIsFanOf(true)\n                                    \n                                })\n                            }catch(err){console.log(err)}\n                        })\n                    }catch(err){\n                        console.log(err)\n                    }\n                }\n            });\n        }else{\n            console.log('this working')\n            props.openLoginModal(true)\n        }\n    }\n    const checkFanOf = () =>{\n        if(props.customData.fansOf){\n            props.customData.fansOf.map(fan =>{\n                if(fan.id === influencer.userId){\n                    setIsFanOf(true)\n                    return\n                }\n            })\n        }else{\n            setIsFanOf(false)\n        }\n    }\n    useEffect(() => {\n       \n        checkFanOf()\n    }, [props.customData.fansOf])\n\n    useEffect(() => {\n        if(influencer.userId){\n            checkFanOf()\n        }\n        \n    }, [influencer.userId])\n\n    return(\n        <Fragment >\n            <div className=\"banner-wrapper\">\n                <img src={influencer.profileCover} alt={props.influencer.username} className=\"influencer-banner\"/>\n            </div>\n            <Row >\n                <Col style={{paddingRight:0}}>\n                <img src={influencer.profilePic} className=\"bio-profile-pic\" alt={`${influencer.username} profile picture`}/>\n                </Col>\n                <Col className=\"bio-text-wrapper\" style={{paddingLeft: 0}}>\n                {/* <img src={influencer.profile_pic} className=\"bio-profile-pic\" /> */}\n                    <div className=\"bio-creator-name\">{influencer.username}</div>\n                    <div className=\"bio-creator-data\">{props.formattedFans} Fans</div>\n                </Col>\n                <Col sm={7} className=\"bio-sub-menu\">\n                    <Nav className=\"bio-sub-nav\">\n                    <NavLink exact to={`/influencer/${replaced}`} >Featured</NavLink>\n                    <NavLink  to={`/influencer/${replaced}/all-videos`}>All Videos</NavLink>\n                    <NavLink to={`/influencer/${replaced}/garage`}>Garage</NavLink>\n                    <NavLink to={`/influencer/${replaced}/social`}>Social</NavLink>\n                    <NavLink to={`/influencer/${replaced}/swagg`}>swagg</NavLink>\n                    </Nav>\n                </Col>\n                <Col className=\"center-btn\" sm={2}>\n                \n                {props.allowEdit ?\n                        <Button className=\"garage-setting-btn\" onClick={props.handleShowSetting} >\n                            <img src={settingsIcon} alt=\"setting\" className=\"setting-icon\"/>\n                            Settings\n                        </Button>\n                :\n                    [isFanOf ? <Button className=\"btn-fan\" disabled>\n                    <img src={doneIcon} style={{width: '1rem'}} alt=\"you are already done this\" />{' '}Fan of {influencer.username}</Button> :\n                    <Fragment>\n                        <Button className=\"btn-fan\" onClick={handleBecomeAFan}>Become a fan</Button><br/>\n                        <OverlayTrigger\n                            placement=\"left\"\n                            delay={{ show: 250, hide: 200 }}\n                            overlay={renderTooltip}\n                        >\n                            <small className=\"tooltip-btn\">What this means?</small>\n                        </OverlayTrigger>\n                        \n                    </Fragment>\n                    ]\n                }\n                </Col>\n            </Row>\n        </Fragment>\n    )\n}\n\nconst mapDispatchToProps = (dispatch) =>{\n    return{\n        becomeAFan: (data) => dispatch(becomeAFan(data)),\n        openLoginModal: (state) =>dispatch(openLoginModal(state))\n    }\n}\nconst mapStateToProps = (state) =>{\n    return{\n        openmodal: state.auth.openmodal,\n        customData: state.auth.customData\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SubNav)","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Admin/AdminLoginDiv.js",[],"/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Influencer/CreateNewCar.js",["477"],"import React, { useState, Fragment } from 'react'\nimport { Row, Col, Modal, Button, Form } from 'react-bootstrap'\nimport * as Realm from \"realm-web\"\n// import ImageUpload from './ImageUpload'\nimport jwt from 'jsonwebtoken'\nimport short from 'short-uuid'\nimport loadable from '@loadable/component'\n\nconst ImageUpload = loadable(() => import('../Global/ImageUpload'))\n\nconst CreateNewCar = (props) =>{\n    const bucketName = process.env.REACT_APP_AWS_BUCKET_NAME;\n    const [imgFile, setImgFile] = useState('')\n    const [imgData64, setImgData64] = useState('')\n    const appConfig = {\n        id: process.env.REACT_APP_REALM_APP_ID,\n        timeout: 10000, // timeout in number of milliseconds\n        };\n    const app = new Realm.App(appConfig)\n    const maxAgeTest = 1 * 60 * 60\n\n    const setImgData = (obj) =>{\n        setImgFile(obj)\n        var file = obj\n        const reader = new FileReader();\n        reader.onload = (event) => {\n        const base64 = event.target.result.split(\",\").pop()\n          setImgData64(base64)\n        //   console.log(base64);\n        };\n        reader.readAsDataURL(file);\n      }\n    const closeModal = () =>{\n        setNewCarObj({name: '', category: '', color: '', wheels: '', upgrades: ''})\n        props.handleClose()\n    }\n\n\n    // const onDrop = useCallback(acceptedFiles => {\n        \n        // var file = acceptedFiles[0]\n        // const reader = new FileReader();\n        // reader.onload = (event) => {\n        // setImgFile(acceptedFiles[0])\n        // const base64 = event.target.result.split(\",\").pop()\n        //   setImgData64(base64)\n        // //   console.log(event.target.result);\n        // };\n        // reader.readAsDataURL(file);\n    //     // Do something with the files\n    //   }, [])\n    // const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\n    \n    const carColors = ['White', 'Black', 'Grey', 'Blue', 'Silver', 'Red', 'Orange', 'Bronze', 'Yellow', 'Green', 'Navy']\n    const carCategories = ['Dream Car', 'Daily Driver', 'Vehicle #2']\n    const [newCarObj, setNewCarObj] = useState({name: '', category: 'Dream Car', color: 'White', wheels: '', upgrade: ''})\n\n    const handleChange = (e) =>{\n        setNewCarObj({\n            ...newCarObj,\n            [e.target.name]: e.target.value\n        })\n    }\n    const createToken = (userData) =>{\n        return jwt.sign({ userData: userData }, process.env.REACT_APP_JWT_SECRET, {expiresIn: maxAgeTest});\n    }\n\n \n    const handleSubmit = async (e) =>{\n        e.preventDefault()\n        const baseImgUrl = `https://s3.amazonaws.com/${process.env.REACT_APP_AWS_BUCKET_NAME}/`\n        const imgId = short.generate()\n        const filekey = props.profileUser.userId + '/my-cars/' + imgId\n        const imgUrlWithKey = baseImgUrl + filekey\n        const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME);\n        const collectionInfluencer = mongo.db(process.env.REACT_APP_REALM_DB_NAME).collection(\"influencers\")\n        const collectionMyCars = mongo.db(process.env.REACT_APP_REALM_DB_NAME).collection(\"my-cars\")\n\n        const newCarData = {\n            name: newCarObj.name,\n            upgrades: newCarObj.upgrades,\n            wheels: newCarObj.wheels,\n            imgUrl: imgUrlWithKey,\n            category: newCarObj.category,\n            color: newCarObj.color,\n            userId: props.profileUser.userId,\n            performance: newCarObj.performance\n        }\n        if(app.currentUser.id === props.profileUser.userId){\n            \n            try{\n                await app.currentUser.functions.putImageObjToS3(imgData64, bucketName, filekey, imgFile.type).then( async res =>{\n                    console.log(res)\n                    try{\n                        await collectionMyCars.insertOne(newCarData).then(async res =>{\n                            console.log('res', res)\n                            await collectionInfluencer.updateOne(\n                                { \"userId\": app.currentUser.id },\n                                { $push: { myCars:  res.insertedId }},\n                                { upsert: true }\n                                ).then(res =>{\n                                    console.log('res', res)\n                                    let oldArr = []\n                                    if(props.profileUser.myCars){\n                                        oldArr = props.profileUser.myCars\n                                    }else{\n                                        oldArr = []\n                                    }\n                                    \n                                    let cars = {myCars: oldArr.push(newCarData)}\n                                    props.updateProfileData(cars, 'myCars')\n                                    props.updateCarData(newCarData)\n                                    closeModal()\n                                })\n                        })\n         \n                    }catch(err){\n                        console.log(err)\n                    }\n                })\n            }catch(err){\n                console.log(err)\n            }\n        }else{\n            console.log('warning current user and the login user do not match')\n            const token = sessionStorage.getItem('session_user')\n            const decoded = jwt.verify(token, process.env.REACT_APP_JWT_SECRET)\n            \n            try{\n                await app.logIn(decoded.cre).then(user =>{\n                    user.functions.putImageObjToS3(imgData64, bucketName, filekey, imgFile.type).then( async res =>{\n             \n                        try{\n                            await collectionMyCars.insertOne(newCarData).then(async res =>{\n                                console.log('res', res)\n                                await collectionInfluencer.updateOne(\n                                    { \"userId\": app.currentUser.id },\n                                    {$push: { myCars:  res.insertedId}},\n                                    { upsert: true }\n                                    ).then(res =>{\n                                        console.log('res', res)\n                                        const oldArr = props.profileUser.myCars\n                                        const cars = {myCars: oldArr.push(newCarData)}\n                                        props.updateProfileData(cars, 'myCars')\n                                        closeModal()\n                                    })\n                            })\n                        }catch(err){\n                            console.log(err)\n                        }\n                    })\n                    \n                })\n            }catch(err){\n                console.log(err)\n            }\n        }\n    }\n        \n\n\n    return(\n    <Fragment>\n        <Modal show={props.show} onHide={props.handleClose} className=\"modal-wrapper-bio\">\n            <Modal.Header closeButton>\n            </Modal.Header>\n            <Modal.Body>\n                <Row className=\"bio-modal-inner-wrapper\">\n                    <Col sm={6} className=\"\">\n                    <ImageUpload fileObj={setImgData} />\n                    \n                    </Col>\n                    <Col sm={6}>\n                    <Form>\n                        <Form.Group >\n                            <Form.Label>Category</Form.Label>\n                            <Form.Control as=\"select\"  onChange={handleChange} name=\"category\">\n                            {carCategories.map((category, index) =>{\n                                return(\n                                    <option key={category + index}>{category}</option>\n                                )\n                            })}\n\n                            </Form.Control>\n                        </Form.Group>\n                        <br/>\n                        <Form.Group >\n                            <Form.Label>Car name</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"Enter car name e.g. maker, model, year\" onChange={handleChange} name=\"name\"/>\n                        </Form.Group>\n                        <br/>\n                        <Form.Group >\n                            <Form.Label>Color</Form.Label>\n                            {/* <Form.Control type=\"text\" placeholder=\"Select your color\" onChange={handleChange} name=\"color\" /> */}\n                            <Form.Control as=\"select\" onChange={handleChange} name=\"color\">\n                            {carColors.map((color, index) =>{\n                                return(\n                                    <option key={color + index}>{color}</option>\n                                )\n                            })}\n                                \n                            </Form.Control>\n                        </Form.Group>\n                        <br/>\n                        <Form.Group >\n                            <Form.Label>Wheels</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"Enter your wheel\" onChange={handleChange} name=\"wheels\"/>\n                        </Form.Group>\n                        <br/>\n                        <Form.Group >\n                            <Form.Label>Performance</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"Enter your performance\" onChange={handleChange} name=\"performance\" />\n                        </Form.Group>\n                        <br/>\n                        <Form.Group >\n                            <Form.Label>Upgrades</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"Enter your update\" onChange={handleChange} name=\"upgrades\" />\n                        </Form.Group>\n                        <br/><br/>\n                        <Row>\n                            <Col sm={6}>\n                                <Button variant=\"secondary\" onClick={closeModal} className=\"cancel-btn\" > \n                                    Cancel\n                                </Button>\n                            </Col>\n                            <Col sm={6}>\n                                <Button variant=\"primary\" type=\"submit\" onClick={handleSubmit} className=\"save-changes-btn\">\n                                Add my new car\n                                </Button>\n                                {/* <br></br><br/>\n                                <button onClick={testImgUpload}>test upload</button> */}\n                            </Col>                          \n                        </Row>\n                    </Form>\n                    </Col>\n                </Row>\n            </Modal.Body>\n            <Modal.Footer>\n  \n            </Modal.Footer>\n        </Modal>\n    </Fragment>\n    )\n}\n\nexport default CreateNewCar","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Influencer/SettingModal.js",["478","479","480","481"],"import React, { useState, Fragment, useEffect} from 'react'\nimport { Row, Col, Modal, Button, Form, Alert } from 'react-bootstrap'\nimport bioPic from '../../assets/temp-photos/bio/avator-male.jpg'\nimport noImg from '../../assets/global/no_image.jpg'\nimport jwt from 'jsonwebtoken'\nimport * as Realm from \"realm-web\"\nimport short from 'short-uuid'\n\nconst appConfig = {\n    id: process.env.REACT_APP_REALM_APP_ID,\n    timeout: 10000, // timeout in number of milliseconds\n  };\nconst app = new Realm.App(appConfig);\n\nconst SettingModal = (props) =>{\n    const bucketName = process.env.REACT_APP_AWS_BUCKET_NAME\n    const [imgData64Profile, setImgData64Profile] = useState('')\n    const [imgData64Cover, setImgData64Cover] = useState('')\n    const [userObj, setUserObj] = useState({fname: props.profileUser.fname, lname: props.profileUser.lname, email: props.profileUser.email, username: props.profileUser.username})\n    const [currentUserId] = useState(app.currentUser.id)\n    const [userPw, setUserPw] = useState({newPw: '', conNewPw: '', currentPw: ''})\n    const [uploadMsg, setUploadMsg] = useState({profile: '', cover: ''})\n    const [tooBig, setTooBig] = useState({profile: false, cover: false})\n    const [profilePic, setProfilePic] = useState({})\n    const [coverPic, setCoverPic] = useState({})\n    const [imgThumb, setImgThumb] = useState()\n    const [coverImgThumb, setCoverImgThumb] = useState()\n    const msg = {profilePic: 'Your profile picture is successfully updated', coverPic: 'Your cover picture is successfully updated', userDetails: 'Your account information successfully updated', password: 'Your password is successfully updated'}\n    const [isSuccess, setIsSuccess] = useState({profilePic: false, coverPic: false, userDetails: false, password: false })\n    const [currentBioPic, setCurrentBioPic] = useState()\n    const [currentCover, setCurrentCover] = useState()\n    const [disableBtnStates, setDisableBtnStates] = useState({profilePic: true, coverPic: true, userDetails: true, password: true})\n    const baseImgUrl = `https://s3.amazonaws.com/${process.env.REACT_APP_AWS_BUCKET_NAME}/`\n\n    const handleClose = props.handleCloseSetting\n    // const handleShow = props.handleShowSetting\n\n    const handleChange = (e) =>{\n        \n        setUserObj({...userObj,\n            [e.target.name]: e.target.value\n        })\n        if(disableBtnStates){\n            setDisableBtnStates({\n                ...disableBtnStates,\n                userDetails: false\n            })\n        }\n\n    }\n    const handleChangePw = (e) =>{\n        setUserPw({\n            ...userPw,\n            [e.target.name]: e.target.value\n        })\n        setDisableBtnStates({\n            ...disableBtnStates,\n            password: false\n        })\n    }\n\n    const profilePicUpload = (e) =>{\n        if (e.target.files[0].size / (1024 * 1024) > 3){\n            setTooBig({...tooBig, profile: true})\n            setUploadMsg({...uploadMsg, profile: 'The file size is too big. Please choose different file.'})\n            return\n        }else{\n        setProfilePic(e.target.files[0])\n        setImgThumb(URL.createObjectURL(e.target.files[0]))\n        setDisableBtnStates({\n            ...disableBtnStates,\n            profilePic: false\n        })\n        const file = e.target.files[0] \n        const reader = new FileReader()\n        reader.onload = (event) => {\n        const base64 = event.target.result.split(\",\").pop()\n          setImgData64Profile(base64)\n        };\n        reader.readAsDataURL(file)\n        }\n    }\n    const saveProfilePic = async () =>{\n        \n        const imgId = short.generate()\n        const filekey = props.profileUser.userId + '/profile/' + imgId\n        const imgUrlWithKey = baseImgUrl + filekey\n        const oldProfilePic = props.profileUser.profilePic\n        if( currentUserId === props.profileUser.userId){\n            try{\n                await app.currentUser.functions.putImageObjToS3(imgData64Profile, bucketName, filekey, profilePic.type).then( async res =>{\n                    console.log('res', res)\n                    if(typeof(oldProfilePic) !== \"undefined\"){\n                  \n                            const currentUrl = props.profileUser.profilePic\n                            const splitted = currentUrl.split('/');\n                            const key = splitted.splice(4, 7).join(\"/\")\n                            deleteImgObj(key)\n                        \n                    }\n                    const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n                    const collectionInfluencer = mongo.db(\"smoke-show\").collection(\"influencers\")\n                    try{\n                        await collectionInfluencer.updateOne(\n                            { \"userId\": app.currentUser.id},\n                            { \"$set\": { \"profilePic\": imgUrlWithKey } },\n                            { upsert: true}\n                        ).then(res =>{\n                            console.log('res', res)\n                            setIsSuccess({\n                                ...isSuccess,\n                                profilePic: true\n                            })\n                            setDisableBtnStates({\n                                ...disableBtnStates,\n                                profilePic: true\n                            })\n                            props.updateProfileData(imgUrlWithKey, \"profilePic\")\n                        })\n                    }catch(err){\n                        console.log(err)\n                    }\n                })\n            }catch(err){\n            console.log(err)\n            }\n        }else{\n        console.log('I have to debug', app.currentUser.id)\n        const token = sessionStorage.getItem('session_user')\n        const decoded = jwt.verify(token, process.env.REACT_APP_JWT_SECRET)\n\n        try{\n            await app.logIn(decoded.cre).then(async user =>{\n                const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n                const collectionInfluencer = mongo.db(\"smoke-show\").collection(\"influencers\")\n                await user.functions.putImageObjToS3(imgData64Profile, bucketName, filekey, profilePic.type).then( res =>{\n                    if(typeof(oldProfilePic) !== \"undefined\"){\n                  \n                        const currentUrl = props.profileUser.profilePic\n                        const splitted = currentUrl.split('/');\n                        const key = splitted.splice(4, 7).join(\"/\")\n                        deleteImgObj(key)\n                    \n                    }\n                })\n                try{\n                    await collectionInfluencer.updateOne(\n                        { \"userId\": user.userId},\n                        { \"$set\": { \"profilePic\": imgUrlWithKey } },\n                        { upsert: true}\n                    ).then(res =>{\n                        console.log('res', res)\n                        setIsSuccess({\n                            ...isSuccess,\n                            profilePic: true\n                        })\n                        setDisableBtnStates({\n                            ...disableBtnStates,\n                            profilePic: true\n                        })\n                        props.updateProfileData(imgUrlWithKey, \"profilePic\")\n                    })\n                }catch(err){\n                    console.log(err)\n                }\n            })\n        }catch(err){\n            console.log(err)\n        }\n        }\n    }\n    const coverPicUpload = (e) =>{\n        if (e.target.files[0].size / (1024 * 1024) > 3){\n            setTooBig({...tooBig, cover: true})\n            setUploadMsg({...uploadMsg, cover: 'The file size is too big. Please choose different file.'})\n            return\n        }else{\n        setCoverPic(e.target.files[0])\n        setCoverImgThumb(URL.createObjectURL(e.target.files[0]))\n        setDisableBtnStates({\n            ...disableBtnStates,\n            coverPic: false\n        })\n        const file = e.target.files[0] \n        const reader = new FileReader()\n        reader.onload = (event) => {\n        const base64 = event.target.result.split(\",\").pop()\n          setImgData64Cover(base64)\n        };\n        reader.readAsDataURL(file)\n        }\n    }\n    const saveProfileCover = async  (e) =>{\n        const imgId = short.generate()\n        const filekey = props.profileUser.userId + '/profile/' + imgId\n        const imgUrlWithKey = baseImgUrl + filekey\n        const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n        if(currentUserId === props.profileUser.userId){\n            try{\n                await app.currentUser.functions.putImageObjToS3(imgData64Cover, bucketName, filekey, coverPic.type).then( async res =>{\n                    console.log('res', res)\n                    if( typeof(props.profileUser.profileCover) !== \"undefined\"){\n                        const currentUrl = props.profileUser.profileCover\n                        const splitted = currentUrl.split('/');\n                        const key = splitted.splice(4, 7).join(\"/\")\n                        deleteImgObj(key)\n                    }\n                    \n                    const collectionInfluencer = mongo.db(\"smoke-show\").collection(\"influencers\")\n                    try{\n                        await collectionInfluencer.updateOne(\n                            { \"userId\": props.profileUser.userId},\n                            { \"$set\": { \"profileCover\": imgUrlWithKey } },\n                            { upsert: true}\n                        ).then(res =>{\n                            console.log('res', res)\n                            setIsSuccess({\n                                ...isSuccess,\n                                coverPic: true\n                            })\n                            setDisableBtnStates({\n                                ...disableBtnStates,\n                                coverPic: true\n                            })\n                            props.updateProfileData(imgUrlWithKey, \"profileCover\")\n                        })\n                    }catch(err){\n                        console.log(err)\n                    }\n                    \n                })\n            }catch(err){\n            console.log(err)\n            }\n        }else{\n            const token = sessionStorage.getItem('session_user')\n            const decoded = jwt.verify(token, process.env.REACT_APP_JWT_SECRET)\n      \n            try{\n                await app.logIn(decoded.cre).then(async  user =>{\n                    const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n                    const collectionInfluencer = mongo.db(\"smoke-show\").collection(\"influencers\")\n                    await user.functions.putImageObjToS3(imgData64Cover, bucketName, filekey, coverPic.type).then( async res =>{\n                        if( typeof(props.profileUser.profileCover) !== \"undefined\"){\n                            const currentUrl = props.profileUser.profileCover\n                            const splitted = currentUrl.split('/');\n                            const key = splitted.splice(4, 7).join(\"/\")\n                            deleteImgObj(key)\n                        }\n\n                    })\n                try{\n                    await collectionInfluencer.updateOne(\n                        { \"userId\": user.userId},\n                        { \"$set\": { \"profileCover\": imgUrlWithKey } },\n                        { upsert: true}\n                    ).then(res =>{\n                        console.log('res', res)\n                        setIsSuccess({\n                            ...isSuccess,\n                            coverPic: true\n                        })\n                        setDisableBtnStates({\n                            ...disableBtnStates,\n                            coverPic: true\n                        })\n                        props.updateProfileData(imgUrlWithKey, 'profileCover')\n                    })\n                }catch(err){\n                    console.log(err)\n                }\n                })\n            }catch(err){\n                console.log(err)\n            }\n            \n        }\n    }\n\n\n    const handleUpdateProfile = async (e) =>{\n        e.preventDefault()\n        const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n        const collectionInfluencer = mongo.db(\"smoke-show\").collection(\"influencers\")\n       \n        if(app.currentUser.id === props.profileUser.userId){\n            try{\n                await collectionInfluencer.updateOne(\n                    { \"userId\": app.currentUser.id},\n                    {\n                        \"$set\": {\n                            \"fname\": userObj.fname,\n                            \"lname\": userObj.lname,\n                            \"username\": userObj.username\n                          }\n                    },\n                    { upsert: true}\n                ).then( res =>{\n                    console.log(res)\n                    setIsSuccess({\n                        ...isSuccess,\n                        userDetails: true\n                    })\n                    setDisableBtnStates({\n                        ...disableBtnStates,\n                        userDetails: true\n                    })\n                    props.updateUserDetails(userObj.fname, userObj.lname, userObj.username)\n                })\n            }catch(err){ console.log(err) }\n            \n        }else{\n            const token = sessionStorage.getItem('session_user')\n            const decoded = jwt.verify(token, process.env.REACT_APP_JWT_SECRET)\n    \n            try{\n                await app.logIn(decoded.cre).then( async user =>{\n                    const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n                    const collectionInfluencer = mongo.db(\"smoke-show\").collection(\"influencers\")\n                    try{\n                        await collectionInfluencer.updateOne(\n                            { \"userId\": user.userId},\n                            {\n                                \"$set\": {\n                                    \"fname\": userObj.fname,\n                                    \"lname\": userObj.lname,\n                                    \"username\": userObj.username\n                                  }\n                            },\n                            { upsert: true}\n                        ).then( res =>{\n                            console.log(res)\n                            setIsSuccess({\n                                ...isSuccess,\n                                userDetails: true\n                            })\n                            setDisableBtnStates({\n                                ...disableBtnStates,\n                                userDetails: true\n                            })\n                            props.updateUserDetails(userObj.fname, userObj.lname, userObj.username)\n                        })\n                    }catch(err){ console.log(err) }\n                })\n            }catch(err){ console.log(err) }\n        }\n        \n    }\n\nconst deleteImgObj = async (key) =>{\n\n    if(app.currentUser.id === props.profileUser.userId){\n        try{\n            await app.currentUser.functions.deleteImageObjToS3(bucketName, key).then(res =>{\n                console.log('res', res)\n            })\n        }catch(err){console.log(err)}\n    }else{\n        const token = sessionStorage.getItem('session_user')\n        const decoded = jwt.verify(token, process.env.REACT_APP_JWT_SECRET)\n\n        try{\n            await app.logIn(decoded.cre).then(async user =>{\n                await user.functions.deleteImageObjToS3(bucketName, key).then(res =>{\n                    console.log('res', res)\n                })\n            })\n        }catch(err){console.log(err)}\n    }\n}\n\n    useEffect(() => {\n\n        if( typeof(props.profileUser.profilePic) == 'undefined' || props.profileUser.profilePic  == ''){\n            setCurrentBioPic(bioPic)\n        \n        }else{\n            setCurrentBioPic(props.profileUser.profilePic)\n        }\n        setUserObj({...userObj, profilePic: bioPic})\n        if(props.profileUser.profileCover == '' || typeof(props.profileUser.profileCover) == \"undefined\"){\n            setCurrentCover(noImg)\n        }else{\n            setCurrentCover(props.profileUser.profileCover)\n        }\n      \n        \n    }, [])\n\n    return(\n    <Fragment>\n        <Modal className=\"modal-wrapper-bio\" show={props.show} onHide={handleClose}>\n            <Modal.Header closeButton>\n            </Modal.Header>\n            <Modal.Body>\n                <Row className=\"bio-modal-inner-wrapper\">\n                    <Col sm={6} className=\"\">\n                    <p className=\"heading-modal\">Your profile picture</p>\n                    <Row>\n                    \n                        <Col sm={4}>\n                            <div className=\"change-bio-pic-wrapper\">\n                                <img src={imgThumb ? imgThumb : currentBioPic} alt=\"user avator\" className=\"change-pic\" />\n                            </div>\n                            \n                        </Col>\n                        <Col sm={8} className=\"setting-file-btn\" >\n                        \n                            <Form>\n                                <Form.Group>\n                                    <Form.File \n                                    id=\"bio-pic\"\n                                    label={profilePic.name ? profilePic.name : '' }\n                                    onChange={profilePicUpload}\n                                    custom\n                                     />\n                                </Form.Group>\n                                <small >Maximum file size is 3MB.</small>\n                                {isSuccess.profilePic ? <Alert variant=\"success\" style={{padding: '5px', marginTop: '1rem', textAlign:'center'}}><small>{msg.profilePic}</small></Alert> :\n                                <div style={{marginTop: '1rem'}}></div>\n                                }\n                                <Button variant=\"primary\" onClick={saveProfilePic} className=\"save-changes-btn\" disabled={disableBtnStates.profilePic}>\n                                Upload\n                                </Button>\n                                \n                            </Form>\n                        </Col>\n                    </Row>\n                    <hr />\n                    <div className=\"spacer-2rem\"></div>\n                    <p className=\"heading-modal\">Your account information</p>\n                              \n                    <Form>\n                        <Row>\n                            <Col sm={6}>\n                                <Form.Group >\n                                    <Form.Label>First Name</Form.Label>\n                                    <Form.Control name=\"fname\" type=\"text\" placeholder={props.profileUser.fname ? props.profileUser.fname : \"Enter your first name\"} onChange={handleChange} />\n                                </Form.Group>\n                            </Col>\n                            <Col sm={6}>\n                                <Form.Group >\n                                    <Form.Label>Last Name</Form.Label>\n                                    <Form.Control name=\"lname\" type=\"text\" placeholder={props.profileUser.lname ? props.profileUser.lname : \"Enter your first name\"} onChange={handleChange} />\n                                </Form.Group>\n                            </Col>\n                        </Row>\n                        \n                        <br/>\n                        <Form.Group >\n                            <Form.Label>Email</Form.Label>\n                            <Form.Control type=\"email\" name=\"email\" placeholder={props.profileUser.email ? props.profileUser.email: \"Please add your email\"} disabled />\n                        </Form.Group>\n                        <br/>\n                        <Form.Group >\n                            <Form.Label>Username</Form.Label>\n                            <Form.Control type=\"text\" name=\"username\" placeholder={props.profileUser.username ? props.profileUser.username : \"Please add your username\"} disabled />\n                        </Form.Group>\n                        <br/>\n                        {isSuccess.userDetails ? <Alert variant=\"success\" style={{padding: '5px', marginTop: '1rem', textAlign:'center'}}><small>{msg.userDetails}</small></Alert> : \"\"}\n                        <Button variant=\"primary\" onClick={handleUpdateProfile} className=\"save-changes-btn\" disabled={disableBtnStates.userDetails}>\n                                Save Changes\n                        </Button>\n                    </Form>\n                    </Col>\n                    <Col sm={6}>\n                        <p className=\"heading-modal\">Your cover image</p>\n                        <Row>\n                            <Col sm={4}>\n                                <div className=\"change-bio-pic-wrapper\">\n                                    <img src={coverImgThumb ? coverImgThumb : currentCover} alt=\"user uploaded photo\" className=\"change-pic\" />\n                                </div>\n                                \n                            </Col>\n                            <Col sm={8} className=\"setting-file-btn\" >\n                                <Form>\n                                    <Form.Group>\n                                        <Form.File \n                                        // id=\"exampleFormControlFile2\" className=\"upload-file-btn\"\n                                        id=\"bio-pic\"\n                                        label={coverPic.name ? coverPic.name : ''}\n                                        onChange={coverPicUpload}\n                                        custom\n                                        />\n                                    </Form.Group>\n                                    <small >Maximum file size 3MB.</small>\n                                    {isSuccess.coverPic ? <Alert variant=\"success\" style={{padding: '5px', marginTop: '1rem', textAlign:'center'}}><small>{msg.coverPic}</small></Alert> :\n                                    <div style={{marginTop: '1rem'}}></div>\n                                    }\n                                    <Button variant=\"primary\" onClick={saveProfileCover} className=\"save-changes-btn \" disabled={disableBtnStates.coverPic}>\n                                    Upload\n                                    </Button>\n                                </Form>\n                            </Col>\n                        </Row>\n                        \n                        <hr />\n                        <div className=\"spacer-2rem\"></div>\n                        \n                        <p className=\"heading-modal\">Change password</p>\n                        <Form>\n                            <Form.Group >\n                                <Form.Label>Current password</Form.Label>\n                                <Form.Control type=\"password\" placeholder=\"Enter your current password\" name=\"currentPw\" onChange={handleChangePw} />\n                            </Form.Group>\n                            <br/>\n                            <Form.Group >\n                                <Form.Label>New password</Form.Label>\n                                <Form.Control type=\"password\" placeholder=\"Enter your new password\" name=\"newPw\" onChange={handleChangePw} />\n                            </Form.Group>\n                            <br/>\n                            <Form.Group >\n                                <Form.Label>Confirm new password</Form.Label>\n                                <Form.Control type=\"password\" placeholder=\"Confirm your new password\" name=\"conNewPw\" onChange={handleChangePw} />\n                            </Form.Group>\n                            <br/>\n                            { isSuccess.password && <Alert variant=\"success\">{msg.password}</Alert> }\n\n                            <Button variant=\"primary\" onClick={handleClose} className=\"save-changes-btn\" disabled={disableBtnStates.password}>\n                                    Save new password\n                            </Button>\n                        </Form>\n                    </Col>\n                </Row>\n                \n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"primary\" onClick={handleClose} className=\"save-changes-btn btn-close-settings\">\n                        Close\n                </Button>\n                {/* <Button variant=\"primary\" onClick={testDelete} className=\"save-changes-btn btn-close-settings\">\n                        test delete\n                </Button> */}\n            </Modal.Footer>\n        </Modal>\n    </Fragment>\n    )\n}\n\nexport default SettingModal","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Layout/Layout.js",["482","483"],"import React, { useState, useEffect  } from 'react'\n// import Header from './Header'\n// import Footer from './Footer'\nimport { withRouter } from \"react-router\"\nimport { connect } from 'react-redux'\nimport jwt from 'jsonwebtoken'\nimport { updateLogin, logInAsPublic } from '../../store/actions/authActions'\nimport loadable from '@loadable/component'\n\nconst Header = loadable(() => import('./Header'))\nconst Footer = loadable(() => import('./Footer'))\nconst HeaderWithRouter = withRouter(Header)\n\nconst Layout = (props) =>{\n    // const [modalShow, setModalShow] = useState(false)\n    const [user, setUser] = useState(false)\n    const [username, setUsername] = useState('')\n    const [userId, setUserId] = useState('')\n    \n\n    // const handleModal = () =>{\n    //     console.log('modal state', props.openmodal)\n    //     setModalShow(props.openmodal)\n    // }\n    const changeUserState = (id) =>{\n        setUser(false)\n        if(props.userLoggedOut){\n            props.userLoggedOut(id)\n        }\n        \n    }\n    const funcSetUsername = (name) =>{\n        setUsername(name)\n    }\n\n    useEffect(() => {\n        const tokenUser = sessionStorage.getItem('session_user')\n        jwt.verify(tokenUser, process.env.REACT_APP_JWT_SECRET, async (err, decoded)=>{\n            if(err){\n                \n                props.logInAsPublic()\n            }else{\n                props.updateLogin(decoded.cre)\n            }\n        })\n    }, [])\n\n    \n   \n\n    return(\n        <div>\n            <HeaderWithRouter  user={user} username={username} changeUserState={changeUserState} funcSetUsername={funcSetUsername}  userLoggedOut={props.userLoggedOut} userId={userId} />\n    \n                { props.children }\n            <Footer />\n        </div>\n\n    )\n}\n\nconst mapStateToProps = (state) =>{\n    // console.log('redux', state)\n    return{\n        // openmodal: state.user.openmodal\n    }\n}\nconst mapDispatchToProps = (dispatch) =>{\n    return{\n        logInAsPublic: ()=>dispatch(logInAsPublic()),\n        updateLogin: (credentials)=>dispatch(updateLogin(credentials))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Layout)","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Global/vehicleCard.js",[],"/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/store/actions/influencerActions.js",["484","485"],"import * as Realm from \"realm-web\"\nimport jwt from 'jsonwebtoken'\n\nconst appConfig = {\n    id: process.env.REACT_APP_REALM_APP_ID,\n    // timeout: 10000, \n    // timeout in number of milliseconds\n  };\nconst app = new Realm.App(appConfig);\n// const maxAgeTest = 1 * 60 * 60\n\nexport const getInfluencer = (influencerId) =>{\n    let formattedFans\n    return(dispatch, getState)=>{\n        const mongo = app.currentUser.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n        const collectionInfluencer = mongo.db(\"smoke-show\").collection(\"influencers\")\n        const filter = {userId: influencerId}\n        collectionInfluencer.findOne(filter).then(influencer =>{\n            const collectionFans = mongo.db(\"smoke-show\").collection(`fans-${influencer.username}`)\n            collectionFans.count().then(num =>{\n                if(num > 999){\n                    return formattedFans = Math.sign(num)*((Math.abs(num)/1000).toFixed(1)) + 'k'\n                }else{\n                    return formattedFans = Math.sign(num)*Math.abs(num)\n                }\n            }).then(formattedFans =>{\n                const data = {user: influencer, numOfFans: formattedFans}\n                dispatch({type: 'GET_INFLUENCER', data})\n            })\n            \n        }).catch(err =>{\n            console.log(err)\n            dispatch({type: 'NO_INFLUENCER'})\n        })\n    }\n}\n","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/store/actions/authActions.js",[],"/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/carTempData.js",[],"/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Admin/FormCheckbox.js",[],"/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Admin/FormText.js",[],"/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Admin/colorInterior.js",[],"/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Admin/colorDiv.js",[],"/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Global/ImageUpload.js",["486"],"import React from 'react'\nimport { useState, useEffect } from 'react'\nimport uploadIcon from '../../assets/global/upload.svg'\nimport { Alert } from 'react-bootstrap'\nimport { useDropzone } from 'react-dropzone'\n\n  const thumbsContainer = {\n    display: 'flex',\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    marginTop: 16\n  };\n  \n  const thumb = {\n    display: 'inline-flex',\n    borderRadius: 2,\n    border: '1px solid #eaeaea',\n    marginBottom: 8,\n    marginRight: 8,\n    width: 100,\n    height: 100,\n    padding: 4,\n    boxSizing: 'border-box'\n  };\n  \n  const thumbInner = {\n    display: 'flex',\n    minWidth: 0,\n    overflow: 'hidden'\n  };\n  \n  const img = {\n    display: 'block',\n    width: 'auto',\n    height: '100%'\n  };\n\n\nconst ImageUpload = (props ) => {\n    \n    const [files, setFiles] = useState([])\n    const [msg, setMsg] = useState('')\n    const [uploaded, setUploaded] = useState(false)\n\n    const getFileData = (obj) => {\n        // Create a root reference\n        console.log('file obj', obj)\n        // const newValue = files[0]\n        props.fileObj(obj)\n    }\n\n    const {getRootProps, getInputProps, isDragActive} = useDropzone({\n            accept: 'image/*',\n            onDrop: acceptedFiles => {\n              \n              if(acceptedFiles.length > 1){\n                  setMsg('You can upload only one image.')\n              }else if(acceptedFiles[0].size / (1024 * 1024) > 3){\n                  setMsg('The file size is too big. Please choose different file.')\n              }else{\n                    getFileData(acceptedFiles[0])\n                    setUploaded(true)\n                    if(props.imgChange){\n                      props.imgChange(true)\n                    }\n                    \n                    setFiles(acceptedFiles.map( file => Object.assign(file, {\n                              preview: URL.createObjectURL(file)\n                          \n                        })\n                        ))\n              }\n            }\n          })\n\n    const thumbs = files.map(file => (\n      <div style={thumb} key={file.name}>\n        <div style={thumbInner}>\n          <img\n            src={file.preview}\n            style={img}\n          />\n        </div>\n      </div>\n    ));\n  \n    useEffect(() => {\n      // Make sure to revoke the data uris to avoid memory leaks\n        files.forEach(file => URL.revokeObjectURL(file.preview));\n    }, [files]);\n\n    return ( \n        <React.Fragment>\n            \n                <div {...getRootProps({className: 'dropzone'})} className=\"dropzone dropzone-wrapper\" >\n                    <input {...getInputProps()} required/>\n                    {\n                            isDragActive ?\n                            <p>Drop the files here ...</p> :\n                            <div className=\"drag-dropzone\">\n                                <div className=\"bio-modal-container\">\n                                    <img src={uploadIcon} alt=\"upload files here\" />\n                                    <p style={{padding: '5px'}}>\n                                      { uploaded ? 'Change Image' : 'Drop an image file here or click to upload an image'}\n                                    </p>\n                                    {msg ? <Alert variant=\"danger\">{msg}</Alert> : ''}\n                                    <p>*3MB max image file size<br/>\n                                    *accepted file formats: jpg, png, gif</p>\n                                    <aside style={thumbsContainer}>\n                                        {uploaded ? thumbs : ''}\n                                    </aside>\n                                </div>\n                                \n                            </div>\n                        }\n                    \n                </div>\n                \n         \n        </React.Fragment>\n\n     );\n}\n \nexport default ImageUpload;","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Layout/Footer.js",[],"/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Layout/Header.js",[],"/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/store/actions/bioActions.js",[],"/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/store/actions/userActions.js",[],"/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Shopify/LineItem.js",[],"/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Shopify/Product.js",[],"/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Global/functions.js",[],"/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Comments.js",["487","488","489","490","491","492","493"],"import React, { useState, useEffect } from 'react'\nimport { Row, Button, Form, Accordion, Card } from 'react-bootstrap'\nimport Avatar from 'react-avatar'\nimport { connect } from 'react-redux'\nimport * as Realm from \"realm-web\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\nimport jwt from 'jsonwebtoken'\nimport editIcon from '../assets/global/edit-icon.svg'\nimport { openLoginModal, attachMsg } from '../store/actions/authActions'\nimport './comments.scss'\n// import VisibilitySensor from 'react-visibility-sensor'\nimport short from 'short-uuid'\nimport { EditComment } from './Edits'\n\nconst Comments = (props) =>{\n    const { customData } = props\n    const [commentsDB, setCommentsDB] = useState([])\n    const [moreComments, setMoreComments] = useState([])\n    const [isComment, setIsComment] = useState(false)\n    const [userComment, setUserComment] = useState(\"\")\n    const [editMode, setEditMode] = useState([])\n    const app = new Realm.App({ id: process.env.REACT_APP_REALM_APP_ID })\n    const [isPicSet, setIsPicSet] = useState([])\n    const [morePics, setMorePics] = useState([])\n    const [loginUser, setLoginUser] = useState('')\n    const [allowEdit, setAllowEdit] = useState([])\n\n    const handleChange = (e) =>{\n        setUserComment(e.target.value)\n    }\n    const handleSubmitComment = async (e) =>{\n        e.preventDefault()\n        let tokenSessionStorage= sessionStorage.getItem('session_token')\n        const tokenUser = sessionStorage.getItem('session_user')\n        let newComment ={}\n        let credentials = null\n        \n        if(tokenSessionStorage){\n            jwt.verify(tokenSessionStorage, process.env.REACT_APP_JWT_SECRET, (err, decoded)=>{\n                if(err){\n                    console.log('please log in. session time out')\n                }else{\n                    let profileThumb;\n                    if(typeof(decoded.userData.profileThumb) !== 'undefined'){\n                        profileThumb = decoded.userData.profileThumb\n                    }else{\n                        profileThumb = null\n                    }\n                    newComment={\n                        userId: decoded.userData.userId,\n                        comment: userComment,\n                        date_posted: new Date().getTime(),\n                        videoId: props.videoId,\n                        username: decoded.userData.fname,\n                        profileThumb: profileThumb\n                    }\n                    credentials = jwt.verify(tokenUser, process.env.REACT_APP_JWT_SECRET)\n                }\n            })\n        }\n        try{\n            // Authenticate the user\n            await app.logIn(credentials.cre).then(async user=>{\n                    setLoginUser(user.id)\n                    const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME);\n                    const mongoCollection = mongo.db(\"smoke-show\").collection(\"comments\");\n\n                    await mongoCollection.insertOne(newComment).then(res =>{\n                            e.target.reset();\n                            getComments(credentials.cre)\n                    })\n                });\n\n        }catch(error){\n            console.log('error', error)\n\n        }\n   \n    }\n    const updateComment = async (e, id, index, rewrite) =>{\n        e.preventDefault()\n        const tokenUser = sessionStorage.getItem('session_user')\n     \n        if(tokenUser){\n            jwt.verify(tokenUser, process.env.REACT_APP_JWT_SECRET, async (err, decoded)=>{\n                if(err){\n                    console.log('decode error')\n                    \n                }else{\n                    try{\n                        await app.logIn(decoded.cre).then( async user =>{\n                            const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n                            const collectionComments = mongo.db(process.env.REACT_APP_REALM_DB_NAME).collection(\"comments\")\n                            await collectionComments.updateOne(\n                                { _id: {\"$oid\": id}},\n                                {\n                                    \"$set\": {\n                                        \"comment\": rewrite\n                                    }\n                                }\n                            ).then(res =>{\n                                console.log(res)\n                                let newArr = [...editMode]\n                                newArr[index] = false\n                                setEditMode(newArr)\n                                getComments(decoded.cre)\n                            })\n                       })\n                    }catch(error){\n                        console.log(error)\n                    }\n                   \n            \n                }\n            })\n        }\n    }\n    const writeComment = () =>{\n        return (\n        <Row className=\"comment-wrapper\">\n            <div className=\"col-1\" style={{margin:0,padding:0}}>\n\n                <Avatar color={Avatar.getRandomColor('sitebase', ['red', 'green', 'teal'])} className=\"profile-pic\" name=\"\" />\n            </div>\n            <div className=\"col-11\" style={{margin: 0, paddingRight:0}}>\n                <Form onSubmit={handleSubmitComment} >\n                    <Form.Group >\n                    <Form.Control className=\"comment-input\" type=\"text\" placeholder=\"Add a comment here\" name=\"comment\" onChange={handleChange} required/>\n                        <div className=\"comment-login-wrapper\">\n                            <Button className=\"comment-btn\" type=\"submit\"> Comment</Button>\n                        </div>\n                    </Form.Group>\n                </Form>\n            </div>\n        </Row>\n        )\n        \n    }\n        \n    const askLogin = () =>{\n        props.openLoginModal(true)\n        props.attachMsg('Please login to comment.')\n    }\n    const loginToComment = () => {\n        return (\n            <Row className=\"comment-wrapper\">\n                <div className=\"col-1\" style={{margin:0,padding:0}}>\n\n                <Avatar color={Avatar.getRandomColor('sitebase', ['red', 'green', 'teal'])} className=\"profile-pic\" name=\"\" />\n                </div>\n                 <div className=\"col-11\" style={{margin: 0, paddingRight:0}}>\n                    <Form onSubmit={handleSubmitComment} >\n                        <Form.Group >\n                        <Form.Control className=\"comment-input\" type=\"text\" placeholder=\"Write a comment\" name=\"comment\" onChange={askLogin} />\n                            <div className=\"comment-login-wrapper\">\n                                <Button \n                                disabled\n                                className=\"comment-btn\" type=\"submit\">Comment</Button>\n                            </div>\n                        </Form.Group>\n                    </Form>\n                </div>\n            </Row>\n           \n        )\n       \n    }\n    const chunkArray = (allComments) =>{\n        let all = allComments.slice(2)\n        let chunk_size = 10\n        let index = 0;\n        let arrayLength = all.length;\n        let tempArray = [];\n        let myChunk\n        \n        for (index = 0; index < arrayLength; index += chunk_size) {\n            myChunk = all.slice(index, index+chunk_size);\n            // Do something if you want with the group\n            tempArray.push(myChunk);\n        }\n\n        return tempArray;\n    }\n\n    const getComments = async (credentials) =>{\n        const filter = {videoId: props.videoId} \n        const options = {sort: {date_posted: -1}, limit: 12}\n        setCommentsDB([])\n\n        try{\n            await app.logIn(credentials).then(async user =>{\n                if(user.id === app.currentUser.id){\n                }else{\n                    console.log('current user and logged in user do not match')\n                }\n                const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n                const collectionComments = mongo.db(\"smoke-show\").collection(\"comments\")\n                await collectionComments.find(filter, options).then(async resAll =>{\n                    let arr = []\n                    let arrIds = []\n                    let arrModes = []\n                    resAll.map(res =>{\n                        arr.push(true)\n                        arrIds.push(res.userId)\n                        arrModes.push(false)\n                    })\n                    setIsPicSet(arr)\n                    setAllowEdit(arrIds)\n                    setEditMode(arrModes)\n                    if( resAll.length !== 0){\n                        // let picAttached = resAll.map(async \n                        setIsComment(true)\n                         if(resAll.length == 1){\n                            setCommentsDB(resAll)\n                         }else if(resAll.length == 2){\n                            for(let i=0;i<2; i++){\n                                setCommentsDB(commentsDB=>[...commentsDB, resAll[i]])\n                            }\n                        }else if(resAll.length >= 3){\n                            const chunked = chunkArray(resAll)\n                            setMoreComments(chunked)\n                            let arr = []\n                            chunked.map(res =>{\n                                arr.push(true)\n                            })\n                            setMorePics(arr)\n                        }\n                    }else if(resAll.length == 0){\n                        setIsComment(false)\n                        setCommentsDB([])\n                    }\n                    \n                })\n            })\n                \n            }catch(err){console.log(err)}\n    }\n    const swapImg = (i) =>{\n       let newArr = [...isPicSet]\n       newArr[i] = false\n       setIsPicSet(newArr)\n    }\n    const swapMoreImg = (i) =>{\n       let newArr = [...morePics]\n       newArr[i] = false\n       setMorePics(newArr)\n    }\n    const editModeOn = (i) =>{\n        let newArr = [...editMode]\n        newArr[i] = true\n        setEditMode(newArr)\n    }\n    useEffect(() =>{\n        if(typeof(customData) !== 'undefined' && typeof(customData.userId) !== 'undefined' ){\n            setLoginUser(customData.userId)\n        }\n        \n    }, [customData])\n    useEffect( () => {\n        const tokenUser = sessionStorage.getItem('session_user')\n         if(tokenUser){\n            jwt.verify(tokenUser, process.env.REACT_APP_JWT_SECRET, (err, decoded)=>{\n                if(err){\n                    const credentials = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTH_PUBLIC_VIEW);\n                    \n                    getComments(credentials)\n                }else{\n                    getComments(decoded.cre)\n                }\n            });\n            \n         }else{\n            const credentials = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTH_PUBLIC_VIEW);\n                    getComments(credentials)\n         }\n    }, [])\n    return(\n        <React.Fragment>\n    \n        {props.isLoggedIn ? writeComment() : loginToComment() }\n        { isComment === true && commentsDB.length !== 0 ? commentsDB.map((comment, index) =>{\n            const unique = short.generate()\n            {/* var localtime = moment(comment.date_posted).local().format('MM-DD-YYYY') */}\n            let localtime = moment(comment.date_posted).fromNow()\n          \n            return(\n                <Row className=\"comment-wrapper\" key={unique}>\n                    {/* <VisibilitySensor onChange={onChange}> */}\n                    <div style={{margin:0,padding:0}} className=\"col-1\">\n                        <Link to={{\n                            pathname: `/user/${comment.userId}`\n                        }}>\n                            {isPicSet[index] ? \n                                 <img src={`https://dwdlqiq3zg6k6.cloudfront.net/${comment.userId}/profile/thumbnail`} className=\"profile-pic \" alt={comment.username} loading=\"lazy\" onError={()=>swapImg(index)} /> \n                               \n                             :\n                                <Avatar className=\"profile-pic\" name={comment.username} color=\"#6E4DD5\"/> \n                            }\n                        \n                        </Link>\n                    </div>\n                    {/* </VisibilitySensor> */}\n                    <div  style={{margin: 0, paddingRight:0}} className=\"col-11\">\n                    <div className=\"comment-username \">\n                        <Link to={{\n                            pathname: `/user/${comment.userId}`\n                        }}>\n                            <strong>{comment.username}</strong>\n                        </Link>\n                     {\" \"} | <span style={{color:'gray'}}>{localtime}</span>\n                     { allowEdit[index] === loginUser && \n                     <img src={editIcon} alt=\"edit this comment\" className=\"edit-icon-comment\" onClick={() => editModeOn(index)}/>}\n                     </div>\n                     {editMode[index] ? \n                     <EditComment handleChange={handleChange} userComment={userComment} updateComment={updateComment} comment={comment.comment} commentId={comment._id} index={index}/>\n                     :\n                     <div className=\"comment-txt\" >{comment.comment}</div>\n                     }\n                    \n                    </div>\n                </Row>\n            )\n        }) : ''\n        }\n        <Accordion defaultActiveKey=\"0\">\n         \n            <Card className=\"card-comments\">\n                <Card.Header className=\"card-comments-h\">\n                { moreComments[0] && \n                    <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"1\" className=\"btn-load\">\n                    Load more\n                    </Accordion.Toggle>\n                }\n                \n                </Card.Header>\n                <Accordion.Collapse eventKey=\"1\">\n                <Card.Body className=\"collapsed-body\">\n                { moreComments[0] == null && <p>No more comment</p>}\n                {moreComments[0] && moreComments[0].map((comment, index) =>{\n                    const unique = short.generate()\n                    let localtime = moment(comment.date_posted).fromNow()\n                    return(\n                        <Row className=\"comment-wrapper\" key={unique}>\n\n                            <div style={{margin:0,padding:0}} className=\"col-1\">\n                                <Link to={{\n                                    pathname: `/user/${comment.userId}`\n                                }}>\n                                    {morePics[index] ? <img src={comment.profile_pic} className=\"profile-pic \" alt={comment.username} loading=\"lazy\" onError={()=>swapMoreImg(index)} /> :\n                                    <Avatar className=\"profile-pic\" name={comment.username} color=\"#6E4DD5\"/>\n                                    }\n                                </Link>\n                            </div>\n                            \n                            <div  style={{margin: 0, paddingRight:0}} className=\"col-11\">\n                            <div className=\"comment-username\">\n                                <Link to={{\n                                    pathname: `/user/${comment.userId}`\n                                }}>\n                                    <strong>{comment.username}</strong>\n                                </Link>\n                            {\" \"} | <span style={{color:'gray'}}>{localtime}</span></div>\n                            {editMode[index] ? \n                            <EditComment handleChange={handleChange} loginUser={loginUser} updateComment={updateComment} /> \n                            :\n                            <div className=\"comment-txt\" >{comment.comment}</div>\n                            }\n                            \n                            </div>\n                        </Row>\n                    )\n                })}\n                </Card.Body>\n                </Accordion.Collapse>\n            </Card>\n        </Accordion>\n        </React.Fragment>\n        \n        \n    )\n}\nconst mapDispatchToProps = (dispatch)=>{\n    return{\n        openLoginModal: (state) => dispatch(openLoginModal(state)),\n        attachMsg: (msg)=> dispatch(attachMsg(msg))\n    }\n}\nconst mapStateToProps = (state) => {\n    //syntax is propName: state.key of combineReducer.key\n    return{\n        loginUserData: state.auth.loginUserData,\n        isLoggedIn: state.auth.isLoggedIn,\n        customData: state.auth.customData,\n    }\n  }\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Comments)","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/SpecDiv.js",[],"/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/adData.js",[],"/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Layout/SignUpModal.js",[],"/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Layout/LoginModal.js",["494","495","496"],"import React, { useState, useEffect } from 'react'\nimport { Modal, Button, Form, Alert } from 'react-bootstrap'\nimport * as Realm from \"realm-web\"\n// import { authUser } from '../../store/actions/authActions'\nimport { logInUser } from '../../store/actions/authActions'\nimport { connect } from 'react-redux'\nimport Logo from '../../assets/global/Logo-smoke-show.png'\nimport { openLoginModal } from '../../store/actions/authActions'\n\n// import jwt from 'jsonwebtoken'\n// import { useUID } from 'react-uid'\n\nconst LoginModal = (props) =>{\n    const [userObj, setUserObj] = useState({fname: '', lname: '', email: '', password: '', confirmPw: ''})\n    const [hasError, setHasError] = useState(false)\n    const [forgotPw, setForgotPw] = useState(false)\n    const [resetPwSent, setResetPwSent] = useState(false)\n    const [loginMsg, setLoginMsg] = useState('')\n    const [errMsg, setErrMsg] = useState('')\n    const [msgModal, setMsgModal] = useState('')\n    const appId = process.env.REACT_APP_REALM_APP_ID\n    // const appConfig = {\n    //     id: appId,\n    //     timeout: 10000, // timeout in number of milliseconds\n    //   };\n    const getApp = Realm.App.getApp(appId)\n    // const app = new Realm.App({ id: process.env.REACT_APP_REALM_APP_ID })\n    const [show, setShow] = useState(false);\n\n    const handleClose = () => {\n        setShow(false);\n        props.openLoginModal(false)\n    }\n \n    //max age one day number of day, hours, min and sec\n    // const maxAge = 1 * 24 * 60 * 60\n    const maxAgeTest = 1 * 60 * 60\n  \n    const handleResetPw = async (e) =>{\n        e.preventDefault()\n        setErrMsg('')\n        const lowerCase = userObj.email.toLowerCase()\n        // const newPW = uuidv4()\n        // Additional arguments for the reset function\n        if(userObj.password === userObj.confirmPw){\n            const args = [];\n            try{\n                await getApp.emailPasswordAuth.callResetPasswordFunction(lowerCase, userObj.password, args).then(res =>{\n                    console.log('res', res)\n                    setUserObj({fname: '', lname: '', email: '', password: '', confirmPw: ''})\n                    setResetPwSent(true)\n                })\n            }catch(err){\n                console.log(err)\n                setErrMsg('This email address is not in our system. Please signup.')\n            }\n            \n        }else{\n            setErrMsg('Your passwords do not match. Please try again.')\n        }\n    }\n \n    const handleChange =(e) =>{\n        setUserObj({\n            ...userObj,\n            [e.target.name]: e.target.value \n        })\n    }\n    let resetPassword\n    if(resetPwSent){\n        resetPassword =\n        <div>\n            <p className=\"login-form\" style={{textAlign: 'center', marginBottom: '2rem'}}>We've sent you an email link to reset your password.<br/><br /> Please check your email inbox.</p>\n            <div className=\"text-center\" ><Button className=\"comment-btn\" onClick={handleClose} style={{minWidth: '200px'}}>Close</Button></div>\n            <div style={{marginBottom: '2rem'}}></div>\n            \n        </div>\n        \n    }else if(!resetPwSent){\n        resetPassword =\n        <Form className=\"login-form\" onSubmit={handleResetPw}>\n            <Form.Group >\n                <Form.Label>Type your email address below.</Form.Label>\n                <Form.Control type=\"email\" placeholder=\"e.g. example@example.com\" name=\"email\" onChange={handleChange} required />\n            </Form.Group>\n            <div className=\"spacer-1rem\"></div>\n            <Form.Group >\n                <Form.Label>Type your new password below.</Form.Label>\n                <Form.Control type=\"password\" placeholder=\"more than six characters\" name=\"password\" onChange={handleChange} required />\n            </Form.Group>\n            <div className=\"spacer-1rem\"></div>\n            <Form.Group >\n                <Form.Label>Confirm your new password below.</Form.Label>\n                <Form.Control type=\"password\" placeholder=\"\" name=\"confirmPw\" onChange={handleChange} required />\n            </Form.Group>\n            <div className=\"spacer-1rem\"></div>\n            {errMsg && <Alert variant=\"danger\" style={{padding: '5px', marginTop: '1rem', textAlign:'center'}}><small>{errMsg}</small></Alert>}\n            <Button className=\"login-btn\" type=\"submit\">Reset Password</Button>\n            <div className=\"forgot-pw-memo\">\n                <p className=\"click-div\" style={{marginTop: '1rem'}} onClick={()=>setForgotPw(false)}>Go back to login</p>\n                <p className=\"click-div\" style={{marginTop: '1rem'}} onClick={props.toggleAuthModal}>Signup</p>\n            </div>\n            \n            <div style={{marginTop:\"4rem\"}}></div>\n        </Form>\n    }else{\n        resetPassword = ''\n    }\n    const handleSubmit =(e)=>{\n        setErrMsg('')\n        e.preventDefault()\n        const emailLowerCase = userObj.email.toLowerCase()\n        const credentials = Realm.Credentials.emailPassword(emailLowerCase, userObj.password)\n        props.logInUser(credentials, emailLowerCase)\n        \n    }\n    const handleModalSwap = () =>{\n        props.toggleAuthModal()\n    }\n    useEffect(() => {\n        if(props.hasLoginErr){\n            setHasError(true)\n            setLoginMsg(props.errMsg)\n        }else{\n            setHasError(false)\n        }\n    }, [props.hasLoginErr])\n\n    useEffect(() => {\n        setShow(props.openmodal)\n\n    }, [props.openmodal])\n\n    useEffect(() => {\n        setMsgModal(props.modalMsg)\n    }, [props.modalMsg])\n\n    useEffect(() => {\n        if(props.swapSignup === 'signup'){\n            props.toggleAuthModal()\n        }\n        \n    }, [props.swapSignup])\n    return (\n        <Modal\n          {...props}\n          show={show}\n          onHide={handleClose}\n          size=\"lg\"\n          aria-labelledby=\"contained-modal-title-vcenter\"\n          centered\n        >\n          <Modal.Header closeButton>\n     \n          </Modal.Header>\n          <div className=\"login-logo-wrapper\">\n            <img src={Logo} alt=\"The Smoke Show\" className=\"logo-header\" />\n          </div>\n          <Modal.Body className=\"custom-modal-body\">\n            {<p style={{color: 'red', textAlign: 'center'}}>{msgModal && msgModal}</p>}\n          \n            <div style={{marginBottom: '15px'}}></div>\n            {forgotPw ? resetPassword :\n            <Form className=\"login-form\" onSubmit={handleSubmit}>\n                <Form.Group controlId=\"formBasicEmail\">\n                    <Form.Label>Email address</Form.Label>\n                    <Form.Control type=\"email\" placeholder=\"e.g. example@example.com\" name=\"email\" onChange={handleChange} required/>\n                </Form.Group>\n\n                <Form.Group controlId=\"formBasicPassword\">\n                    <Form.Label>Password</Form.Label>\n                    <Form.Control type=\"password\" placeholder=\"\" name=\"password\" onChange={handleChange} required />\n                </Form.Group>\n                <p className=\"click-div\" onClick={()=>{setForgotPw(true)}}>Forgot password?</p>\n                {hasError && <Alert variant=\"danger\" style={{padding: '5px', marginTop: '1rem', textAlign:'center'}}><small>{loginMsg}</small></Alert> }\n                <div className=\"login-btn-wrapper\">\n                    <Button className=\"login-btn\" type=\"submit\">\n                        Login\n                    </Button><br /><br />\n                    <p className=\"click-div\" onClick={handleModalSwap}>Or Signup here</p>\n                </div>\n                \n            </Form>\n        }\n          </Modal.Body>\n        </Modal>\n      )\n}\n\nconst mapStateToProps = (state) => {\n    //syntax is propName: state.key of combineReducer.key\n    return{\n      userData: state.auth.userData,\n      hasLoginErr: state.auth.hasLoginErr,\n      openmodal: state.auth.openmodal,\n      modalMsg: state.auth.modalMsg,\n      errMsg: state.auth.errMsg,\n      swapSignup: state.auth.swapSignup\n    }\n  }\nconst mapDispatchToProps = (dispatch) =>{\n    return {\n        logInUser: (credentials, email) => dispatch(logInUser(credentials, email)),\n        openLoginModal: (state)=> dispatch(openLoginModal(state))\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginModal)","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Shopify/VariantSelector.js",[],"/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/Edits.js",[],"/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/VideoDiv.js",[],"/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/TermsTxt.js",[],"/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/utils/youtubeAPI.js",[],"/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/giveAwayData.js",[],"/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/GiveawayCount.js",["497","498"],"import React, { useEffect, useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport { Col, Button, Card } from 'react-bootstrap'\nimport {\n    EmailShareButton,\n    FacebookShareButton,\n    TwitterShareButton,\n  } from \"react-share\";\n  import jwt from 'jsonwebtoken'\nimport { FacebookShareCount } from \"react-share\";\nimport facebookIcon from '../assets/global/Facebook-icon.svg'\nimport twitterIcon from '../assets/global/Twitter-icon.svg'\nimport emailIcon from '../assets/global/Messages-icon.svg'\nimport carIcon from '../assets/global/car-icon-bar.svg'\nimport flagIcon from '../assets/global/chekered-flag.svg'\nimport * as Realm from \"realm-web\"\nimport { connect } from 'react-redux'\nimport { openLoginModal, attachMsg, swapToSignup } from '../store/actions/authActions'\n\nconst GiveawayCount = (props) =>{\n    // console.log('props', props)\n    // let percentBar = '60%'\n    const [percentBar, setPercentBar] = useState('0%')\n    const app = new Realm.App({ id: process.env.REACT_APP_REALM_APP_ID })\n    const [numOfUsers, setNumOfUsers] = useState(null)\n\n    const getCount = async (credentials) =>{\n\n        await app.logIn(credentials).then(async user =>{\n            const mongo = user.mongoClient(process.env.REACT_APP_REALM_SERVICE_NAME)\n            const collectionUsers = mongo.db(\"smoke-show\").collection(\"users\")\n            try {\n                await collectionUsers.count().then(res =>{\n                    setNumOfUsers(res)\n                    const result = res / 100000 * 100\n                    setPercentBar(result.toFixed(1) + '%')\n                })\n            } catch (error) {\n                console.log(error)\n            }\n        })\n    }\n    const handleSignup = () =>{\n        props.swapToSignup(false)\n    }\n\n    const loginCheck = () =>{\n        const tokenUser = sessionStorage.getItem('session_user')\n        if(tokenUser){\n           jwt.verify(tokenUser, process.env.REACT_APP_JWT_SECRET, (err, decoded)=>{\n               if(err){\n                   const credentials = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTH_PUBLIC_VIEW);\n                   getCount(credentials)\n               }else{\n                getCount(decoded.cre)\n               }\n           });\n           \n        }else{\n           const credentials = Realm.Credentials.apiKey(process.env.REACT_APP_REALM_AUTH_PUBLIC_VIEW);\n                   getCount(credentials)\n        }\n    }\n\n    useEffect(() => {\n        loginCheck()\n    }, [])\n\n    return(\n        <Col sm={6}>\n            <Card className=\"givaways-card\">\n                <Card.Img variant=\"top\" src={props.data.imgUrl} />\n                <Card.Body>\n                    <Card.Title className=\"card-title\">\n                        <div className=\"card-title-text\">\n                            <div className=\"card-left\"></div>\n                            <strong style={{marginRight: '1rem'}}>{props.data.item}</strong>{' '} giveaway\n                        \n                        <div className=\"share-btn-wrapper\">\n                            <TwitterShareButton\n                                url={props.shareUrl}\n                                quote={props.data.item}\n                                className=\"social-share-btn\"\n                            >\n                                <img src={twitterIcon} alt=\"share via facebook\" className=\"share-icon\"/>\n                            </TwitterShareButton>\n\n                            <div className=\"link-counter\">\n                                {/* <FacebookShareCount url={shareUrl} className=\"\">\n                                {count => count}\n                                </FacebookShareCount> */}\n                            </div>\n                            <FacebookShareButton\n                                url={props.shareUrl}\n                                quote={props.data.item}\n                                className=\"social-share-btn\"\n                            >\n                                <img src={facebookIcon} alt=\"share via facebook\" className=\"share-icon\"/>\n                            </FacebookShareButton>\n\n                            <div className=\"link-counter\">\n                                <FacebookShareCount url={props.shareUrl} className=\"\">\n                                {count => count}\n                                </FacebookShareCount>\n                            </div>\n                            <EmailShareButton\n                                url={props.shareUrl}\n                                quote={props.data.item}\n                                className=\"social-share-btn\"\n                            >\n                                <img src={emailIcon} alt=\"share via email\" className=\"share-icon\"/>\n                            </EmailShareButton>\n                            <div className=\"link-counter\">\n                                {/* <FacebookShareCount url={shareUrl} className=\"\">\n                                {count => count}\n                                </FacebookShareCount> */}\n                            </div>\n                        </div>\n                        </div>\n                        \n\n                        \n                        <p>by {' '}\n                        <Link to={`/user/${props.data.userId}`}>\n                            {props.data.influencer} {' '} \n                        </Link>\n                        <span className=\"card-mute-text\">\n                        | {numOfUsers && numOfUsers} {' '} entries</span></p>\n                        \n                    </Card.Title>\n                    <Card.Text>\n                        <span>\n                            <strong>How to enter:</strong><br/> {props.data.howTo}\n                        </span><br/><br/>\n                        <span>\n                            <strong>Details:</strong> <br/>{props.data.details}\n                        </span><br/><br/>\n                        <span>\n                            <strong>Flight Measurement:</strong> <br/>{props.data.measurement}\n                        </span><br/><br/>\n                        <span>\n                            <strong>Special Rules:</strong> <br/>{props.data.rules}\n                        </span>\n                    </Card.Text>\n                    <div className=\"counter-div\">\n                        <div className=\"padding-bar\">\n                        <div className=\"start\">{percentBar && percentBar}</div>\n                        <div className=\"car-wrapper\">\n                            <img src={carIcon} alt=\"car\" className=\"car-icon\" style={{left: `calc(${percentBar} - 41px)`}}/>\n                            {/* <div className=\"dot-bar\" style={{left: `calc(${percentBar} - 14px)`}}></div> */}\n                            <div className=\"dot-bar\" style={{left: '-13px'}}></div>\n                        </div>\n                        \n                        <div className=\"progress-bar-wrapper\">\n                            \n                            <div className=\"progress-bar-smoke\" className=\"bar-smoke\" style={{width: percentBar}}></div>\n                            \n                        </div>\n                        <div className=\"flag-wrapper\">\n                            <img src={flagIcon} alt=\"check flag\" className=\"flag-icon\"/>\n                        </div>\n                        <div className=\"end\">10,000 <br />users</div>\n                \n                        </div>\n                        <div className=\"padding-btn\" style={{marginTop: '-2rem'}}>\n                        {props.isLoggedIn ? <Button className=\"login-btn\" disabled>You are already in!</Button> : <Button className=\"login-btn\" onClick={handleSignup}>Signup now to win!</Button>}\n                            {/* <Button className=\"login-btn\" onClick={handleSignup}>Signup now to win!</Button> */}\n                        </div>\n                    </div>\n                </Card.Body>\n            </Card>\n        </Col>\n    )\n}\n\nconst mapDispatchToProps = (dispatch)=>{\n    return{\n        openLoginModal: (state) => dispatch(openLoginModal(state)),\n        attachMsg: (msg)=> dispatch(attachMsg(msg)),\n        swapToSignup: (state) => dispatch(swapToSignup(state))\n    }\n}\nconst mapStateToProps = (state) => {\n    //syntax is propName: state.key of combineReducer.key\n    return{\n        isLoggedIn: state.auth.isLoggedIn\n    }\n  }\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GiveawayCount)","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/InfluCard.js",["499","500"],"import React from 'react'\nimport { Row, Col, Card, Button } from 'react-bootstrap'\nimport short from 'short-uuid'\nimport ReactPlayer from 'react-player/lazy'\nimport { Link } from 'react-router-dom'\n\nconst InfluCard = (props) =>{\n    const { unique, influencer, replaced } = props\n    const videoWatchURL = 'https://www.youtube.com/watch?v='\n\n    return(\n        <Col sm={6} md={4} key={unique} className=\"bottom-space\">\n                            <Card className=\"card-influencer\" >\n                                <div className=\"videoWrapper\">\n                                        {/* <iframe src={videoEmbedURL + influencer.featuredVideo.id}\n                                                frameBorder='0'\n                                                allow='autoplay; encrypted-media'\n                                                allowFullScreen\n                                                title='video'\n                                        /> */}\n                                    <ReactPlayer\n                                    width=\"560\" \n                                    height=\"315\"\n                                    url={videoWatchURL + influencer.featuredVideo.id}\n                                    controls={true}\n                                    />\n                                </div>\n                                <Card.Body>\n                                    <Card.Title>{influencer.username}</Card.Title>\n                                    <Card.Text className=\"influencer-desc\">{influencer.desc}</Card.Text>\n                                    <Link \n                                    to={{\n                                        pathname: `/influencer/${replaced}`,\n                                        state: { influencer: influencer }\n                                    }}\n                                    // activeStyle={{\n                                    //     color: \"gray\"\n                                    // }}\n                                    >\n                                        <Button className=\"login-btn\">See {influencer.username}'s Bio</Button>\n                                    </Link>\n                                    \n                                </Card.Body>\n                            </Card>\n                        </Col>\n    )\n}\n\nexport default InfluCard","/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/components/CarStatsListsMake.js",[],"/Users/sakihayashi/Documents/JOBS/Brandon/smoke-show/src/aws-exports.js",[],{"ruleId":"501","replacedBy":"502"},{"ruleId":"503","replacedBy":"504"},{"ruleId":"505","severity":1,"message":"506","line":39,"column":8,"nodeType":"507","messageId":"508","endLine":39,"endColumn":16},{"ruleId":"509","severity":1,"message":"510","line":6,"column":5,"nodeType":"511","messageId":"512","endLine":16,"endColumn":6},{"ruleId":"505","severity":1,"message":"513","line":1,"column":13,"nodeType":"507","messageId":"508","endLine":1,"endColumn":18},{"ruleId":"509","severity":1,"message":"510","line":7,"column":5,"nodeType":"511","messageId":"512","endLine":11,"endColumn":6},{"ruleId":"509","severity":1,"message":"510","line":7,"column":5,"nodeType":"511","messageId":"512","endLine":21,"endColumn":6},{"ruleId":"509","severity":1,"message":"510","line":17,"column":5,"nodeType":"511","messageId":"512","endLine":90,"endColumn":6},{"ruleId":"514","severity":1,"message":"515","line":68,"column":4,"nodeType":"516","endLine":68,"endColumn":6,"suggestions":"517"},{"ruleId":"505","severity":1,"message":"518","line":21,"column":23,"nodeType":"507","messageId":"508","endLine":21,"endColumn":35},{"ruleId":"514","severity":1,"message":"519","line":161,"column":8,"nodeType":"516","endLine":161,"endColumn":10,"suggestions":"520"},{"ruleId":"505","severity":1,"message":"521","line":51,"column":23,"nodeType":"507","messageId":"508","endLine":51,"endColumn":35},{"ruleId":"514","severity":1,"message":"522","line":96,"column":8,"nodeType":"516","endLine":96,"endColumn":10,"suggestions":"523"},{"ruleId":"505","severity":1,"message":"524","line":115,"column":25,"nodeType":"507","messageId":"508","endLine":115,"endColumn":31},{"ruleId":"505","severity":1,"message":"525","line":10,"column":8,"nodeType":"507","messageId":"508","endLine":10,"endColumn":13},{"ruleId":"514","severity":1,"message":"526","line":72,"column":10,"nodeType":"516","endLine":72,"endColumn":12,"suggestions":"527"},{"ruleId":"514","severity":1,"message":"528","line":163,"column":10,"nodeType":"516","endLine":163,"endColumn":12,"suggestions":"529"},{"ruleId":"530","severity":1,"message":"531","line":264,"column":101,"nodeType":"532","endLine":264,"endColumn":122},{"ruleId":"505","severity":1,"message":"533","line":15,"column":22,"nodeType":"507","messageId":"508","endLine":15,"endColumn":33},{"ruleId":"505","severity":1,"message":"534","line":17,"column":17,"nodeType":"507","messageId":"508","endLine":17,"endColumn":23},{"ruleId":"505","severity":1,"message":"535","line":30,"column":11,"nodeType":"507","messageId":"508","endLine":30,"endColumn":22},{"ruleId":"514","severity":1,"message":"536","line":71,"column":8,"nodeType":"516","endLine":71,"endColumn":10,"suggestions":"537"},{"ruleId":"538","severity":1,"message":"539","line":73,"column":43,"nodeType":"540","messageId":"541","endLine":73,"endColumn":45},{"ruleId":"514","severity":1,"message":"542","line":159,"column":7,"nodeType":"516","endLine":159,"endColumn":9,"suggestions":"543"},{"ruleId":"505","severity":1,"message":"544","line":31,"column":11,"nodeType":"507","messageId":"508","endLine":31,"endColumn":15},{"ruleId":"505","severity":1,"message":"545","line":1,"column":27,"nodeType":"507","messageId":"508","endLine":1,"endColumn":35},{"ruleId":"505","severity":1,"message":"521","line":16,"column":23,"nodeType":"507","messageId":"508","endLine":16,"endColumn":35},{"ruleId":"514","severity":1,"message":"546","line":30,"column":28,"nodeType":"547","endLine":30,"endColumn":121},{"ruleId":"505","severity":1,"message":"524","line":51,"column":25,"nodeType":"507","messageId":"508","endLine":51,"endColumn":31},{"ruleId":"505","severity":1,"message":"521","line":21,"column":23,"nodeType":"507","messageId":"508","endLine":21,"endColumn":35},{"ruleId":"538","severity":1,"message":"548","line":80,"column":37,"nodeType":"540","messageId":"549","endLine":80,"endColumn":39},{"ruleId":"514","severity":1,"message":"528","line":106,"column":8,"nodeType":"516","endLine":106,"endColumn":10,"suggestions":"550"},{"ruleId":"551","severity":1,"message":"552","line":176,"column":21,"nodeType":"553","messageId":"554","endLine":176,"endColumn":60},{"ruleId":"505","severity":1,"message":"524","line":181,"column":25,"nodeType":"507","messageId":"508","endLine":181,"endColumn":31},{"ruleId":"514","severity":1,"message":"522","line":74,"column":8,"nodeType":"516","endLine":74,"endColumn":10,"suggestions":"555"},{"ruleId":"514","severity":1,"message":"522","line":80,"column":8,"nodeType":"516","endLine":80,"endColumn":10,"suggestions":"556"},{"ruleId":"557","severity":1,"message":"558","line":296,"column":17,"nodeType":"559","endLine":296,"endColumn":59},{"ruleId":"557","severity":1,"message":"558","line":309,"column":17,"nodeType":"559","endLine":309,"endColumn":161},{"ruleId":"514","severity":1,"message":"560","line":95,"column":8,"nodeType":"516","endLine":95,"endColumn":10,"suggestions":"561"},{"ruleId":"557","severity":1,"message":"558","line":153,"column":37,"nodeType":"559","endLine":153,"endColumn":90},{"ruleId":"557","severity":1,"message":"558","line":161,"column":37,"nodeType":"559","endLine":161,"endColumn":90},{"ruleId":"514","severity":1,"message":"560","line":75,"column":8,"nodeType":"516","endLine":75,"endColumn":10,"suggestions":"562"},{"ruleId":"557","severity":1,"message":"558","line":132,"column":37,"nodeType":"559","endLine":132,"endColumn":91},{"ruleId":"557","severity":1,"message":"558","line":141,"column":37,"nodeType":"559","endLine":141,"endColumn":90},{"ruleId":"557","severity":1,"message":"558","line":149,"column":37,"nodeType":"559","endLine":149,"endColumn":89},{"ruleId":"557","severity":1,"message":"558","line":157,"column":37,"nodeType":"559","endLine":157,"endColumn":88},{"ruleId":"557","severity":1,"message":"558","line":169,"column":37,"nodeType":"559","endLine":169,"endColumn":88},{"ruleId":"505","severity":1,"message":"563","line":224,"column":11,"nodeType":"507","messageId":"508","endLine":224,"endColumn":25},{"ruleId":"538","severity":1,"message":"548","line":235,"column":45,"nodeType":"540","messageId":"549","endLine":235,"endColumn":47},{"ruleId":"505","severity":1,"message":"564","line":252,"column":11,"nodeType":"507","messageId":"508","endLine":252,"endColumn":22},{"ruleId":"514","severity":1,"message":"565","line":333,"column":8,"nodeType":"516","endLine":333,"endColumn":28,"suggestions":"566"},{"ruleId":"514","severity":1,"message":"567","line":372,"column":8,"nodeType":"516","endLine":372,"endColumn":10,"suggestions":"568"},{"ruleId":"514","severity":1,"message":"542","line":198,"column":10,"nodeType":"516","endLine":198,"endColumn":12,"suggestions":"569"},{"ruleId":"530","severity":1,"message":"531","line":310,"column":90,"nodeType":"532","endLine":310,"endColumn":111},{"ruleId":"505","severity":1,"message":"570","line":341,"column":31,"nodeType":"507","messageId":"508","endLine":341,"endColumn":34},{"ruleId":"557","severity":1,"message":"558","line":128,"column":45,"nodeType":"559","endLine":128,"endColumn":81},{"ruleId":"505","severity":1,"message":"571","line":75,"column":20,"nodeType":"507","messageId":"508","endLine":75,"endColumn":29},{"ruleId":"505","severity":1,"message":"572","line":34,"column":20,"nodeType":"507","messageId":"508","endLine":34,"endColumn":29},{"ruleId":"573","severity":1,"message":"574","line":214,"column":17,"nodeType":"559","endLine":216,"endColumn":19},{"ruleId":"505","severity":1,"message":"575","line":192,"column":31,"nodeType":"507","messageId":"508","endLine":192,"endColumn":37},{"ruleId":"514","severity":1,"message":"576","line":266,"column":8,"nodeType":"516","endLine":266,"endColumn":26,"suggestions":"577"},{"ruleId":"514","severity":1,"message":"560","line":272,"column":8,"nodeType":"516","endLine":272,"endColumn":10,"suggestions":"578"},{"ruleId":"505","severity":1,"message":"579","line":5,"column":21,"nodeType":"507","messageId":"508","endLine":5,"endColumn":25},{"ruleId":"505","severity":1,"message":"580","line":5,"column":35,"nodeType":"507","messageId":"508","endLine":5,"endColumn":40},{"ruleId":"505","severity":1,"message":"581","line":16,"column":11,"nodeType":"507","messageId":"508","endLine":16,"endColumn":16},{"ruleId":"505","severity":1,"message":"582","line":25,"column":11,"nodeType":"507","messageId":"508","endLine":25,"endColumn":17},{"ruleId":"505","severity":1,"message":"583","line":57,"column":11,"nodeType":"507","messageId":"508","endLine":57,"endColumn":22},{"ruleId":"505","severity":1,"message":"584","line":58,"column":15,"nodeType":"507","messageId":"508","endLine":58,"endColumn":19},{"ruleId":"505","severity":1,"message":"585","line":59,"column":15,"nodeType":"507","messageId":"508","endLine":59,"endColumn":20},{"ruleId":"505","severity":1,"message":"586","line":67,"column":15,"nodeType":"507","messageId":"508","endLine":67,"endColumn":31},{"ruleId":"505","severity":1,"message":"587","line":91,"column":25,"nodeType":"507","messageId":"508","endLine":91,"endColumn":30},{"ruleId":"505","severity":1,"message":"588","line":172,"column":11,"nodeType":"507","messageId":"508","endLine":172,"endColumn":24},{"ruleId":"505","severity":1,"message":"584","line":208,"column":15,"nodeType":"507","messageId":"508","endLine":208,"endColumn":19},{"ruleId":"505","severity":1,"message":"589","line":226,"column":11,"nodeType":"507","messageId":"508","endLine":226,"endColumn":23},{"ruleId":"505","severity":1,"message":"590","line":14,"column":12,"nodeType":"507","messageId":"508","endLine":14,"endColumn":19},{"ruleId":"505","severity":1,"message":"591","line":17,"column":12,"nodeType":"507","messageId":"508","endLine":17,"endColumn":20},{"ruleId":"592","severity":1,"message":"593","line":162,"column":18,"nodeType":"594","messageId":"595","endLine":162,"endColumn":20},{"ruleId":"514","severity":1,"message":"596","line":187,"column":8,"nodeType":"516","endLine":187,"endColumn":10,"suggestions":"597"},{"ruleId":"514","severity":1,"message":"598","line":263,"column":8,"nodeType":"516","endLine":263,"endColumn":26,"suggestions":"599"},{"ruleId":"514","severity":1,"message":"600","line":275,"column":8,"nodeType":"516","endLine":275,"endColumn":21,"suggestions":"601"},{"ruleId":"514","severity":1,"message":"602","line":284,"column":8,"nodeType":"516","endLine":284,"endColumn":10,"suggestions":"603"},{"ruleId":"604","severity":1,"message":"605","line":300,"column":21,"nodeType":"559","endLine":304,"endColumn":24},{"ruleId":"604","severity":1,"message":"605","line":309,"column":29,"nodeType":"559","endLine":309,"endColumn":121},{"ruleId":"505","severity":1,"message":"590","line":13,"column":12,"nodeType":"507","messageId":"508","endLine":13,"endColumn":19},{"ruleId":"505","severity":1,"message":"591","line":16,"column":12,"nodeType":"507","messageId":"508","endLine":16,"endColumn":20},{"ruleId":"592","severity":1,"message":"593","line":160,"column":18,"nodeType":"594","messageId":"595","endLine":160,"endColumn":20},{"ruleId":"514","severity":1,"message":"596","line":185,"column":8,"nodeType":"516","endLine":185,"endColumn":10,"suggestions":"606"},{"ruleId":"592","severity":1,"message":"593","line":39,"column":48,"nodeType":"594","messageId":"595","endLine":39,"endColumn":50},{"ruleId":"505","severity":1,"message":"607","line":1,"column":8,"nodeType":"507","messageId":"508","endLine":1,"endColumn":13},{"ruleId":"505","severity":1,"message":"545","line":1,"column":17,"nodeType":"507","messageId":"508","endLine":1,"endColumn":25},{"ruleId":"592","severity":1,"message":"593","line":443,"column":98,"nodeType":"594","messageId":"595","endLine":443,"endColumn":100},{"ruleId":"592","severity":1,"message":"593","line":450,"column":43,"nodeType":"594","messageId":"595","endLine":450,"endColumn":45},{"ruleId":"514","severity":1,"message":"608","line":457,"column":8,"nodeType":"516","endLine":457,"endColumn":10,"suggestions":"609"},{"ruleId":"604","severity":1,"message":"605","line":541,"column":37,"nodeType":"559","endLine":541,"endColumn":144},{"ruleId":"505","severity":1,"message":"610","line":3,"column":15,"nodeType":"507","messageId":"508","endLine":3,"endColumn":24},{"ruleId":"505","severity":1,"message":"611","line":22,"column":11,"nodeType":"507","messageId":"508","endLine":22,"endColumn":21},{"ruleId":"538","severity":1,"message":"539","line":83,"column":45,"nodeType":"540","messageId":"541","endLine":83,"endColumn":47},{"ruleId":"538","severity":1,"message":"548","line":86,"column":21,"nodeType":"612","messageId":"613","endLine":86,"endColumn":27},{"ruleId":"514","severity":1,"message":"614","line":96,"column":8,"nodeType":"516","endLine":96,"endColumn":33,"suggestions":"615"},{"ruleId":"514","severity":1,"message":"614","line":103,"column":8,"nodeType":"516","endLine":103,"endColumn":27,"suggestions":"616"},{"ruleId":"604","severity":1,"message":"605","line":112,"column":17,"nodeType":"559","endLine":112,"endColumn":126},{"ruleId":"505","severity":1,"message":"535","line":64,"column":11,"nodeType":"507","messageId":"508","endLine":64,"endColumn":22},{"ruleId":"592","severity":1,"message":"593","line":374,"column":98,"nodeType":"594","messageId":"595","endLine":374,"endColumn":100},{"ruleId":"592","severity":1,"message":"593","line":381,"column":43,"nodeType":"594","messageId":"595","endLine":381,"endColumn":45},{"ruleId":"514","severity":1,"message":"608","line":388,"column":8,"nodeType":"516","endLine":388,"endColumn":10,"suggestions":"617"},{"ruleId":"604","severity":1,"message":"605","line":471,"column":37,"nodeType":"559","endLine":471,"endColumn":144},{"ruleId":"505","severity":1,"message":"618","line":18,"column":20,"nodeType":"507","messageId":"508","endLine":18,"endColumn":29},{"ruleId":"514","severity":1,"message":"619","line":46,"column":8,"nodeType":"516","endLine":46,"endColumn":10,"suggestions":"620"},{"ruleId":"505","severity":1,"message":"621","line":2,"column":8,"nodeType":"507","messageId":"508","endLine":2,"endColumn":11},{"ruleId":"505","severity":1,"message":"622","line":24,"column":28,"nodeType":"507","messageId":"508","endLine":24,"endColumn":41},{"ruleId":"573","severity":1,"message":"574","line":79,"column":11,"nodeType":"559","endLine":82,"endColumn":13},{"ruleId":"538","severity":1,"message":"548","line":203,"column":36,"nodeType":"540","messageId":"549","endLine":203,"endColumn":38},{"ruleId":"592","severity":1,"message":"593","line":214,"column":43,"nodeType":"594","messageId":"595","endLine":214,"endColumn":45},{"ruleId":"592","severity":1,"message":"593","line":216,"column":49,"nodeType":"594","messageId":"595","endLine":216,"endColumn":51},{"ruleId":"538","severity":1,"message":"548","line":224,"column":45,"nodeType":"540","messageId":"549","endLine":224,"endColumn":47},{"ruleId":"592","severity":1,"message":"593","line":229,"column":44,"nodeType":"594","messageId":"595","endLine":229,"endColumn":46},{"ruleId":"514","severity":1,"message":"623","line":277,"column":8,"nodeType":"516","endLine":277,"endColumn":10,"suggestions":"624"},{"ruleId":"551","severity":1,"message":"552","line":284,"column":13,"nodeType":"553","messageId":"554","endLine":284,"endColumn":93},{"ruleId":"505","severity":1,"message":"611","line":37,"column":11,"nodeType":"507","messageId":"508","endLine":37,"endColumn":21},{"ruleId":"514","severity":1,"message":"625","line":127,"column":8,"nodeType":"516","endLine":127,"endColumn":27,"suggestions":"626"},{"ruleId":"514","severity":1,"message":"619","line":143,"column":8,"nodeType":"516","endLine":143,"endColumn":26,"suggestions":"627"},{"ruleId":"514","severity":1,"message":"528","line":67,"column":8,"nodeType":"516","endLine":67,"endColumn":10,"suggestions":"628"},{"ruleId":"530","severity":1,"message":"531","line":156,"column":65,"nodeType":"532","endLine":156,"endColumn":86},{"ruleId":"505","severity":1,"message":"629","line":2,"column":10,"nodeType":"507","messageId":"508","endLine":2,"endColumn":13},{"ruleId":"505","severity":1,"message":"630","line":3,"column":8,"nodeType":"507","messageId":"508","endLine":3,"endColumn":13},"no-native-reassign",["631"],"no-negated-in-lhs",["632"],"no-unused-vars","'UpdateDB' is defined but never used.","Identifier","unusedVar","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'Realm' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.","ArrayExpression",["633"],"'setResendMsg' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'confirmUser'. Either include it or remove the dependency array.",["634"],"'setCarImages' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.",["635"],"'carImg' is assigned a value but never used.","'noImg' is defined but never used.","React Hook useEffect has a missing dependency: 'getInfluencers'. Either include it or remove the dependency array.",["636"],"React Hook useEffect has a missing dependency: 'loginCheck'. Either include it or remove the dependency array.",["637"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'setHasError' is assigned a value but never used.","'setMsg' is assigned a value but never used.","'createToken' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'handeleRestPw'. Either include it or remove the dependency array.",["638"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","React Hook useEffect has a missing dependency: 'checkToken'. Either include it or remove the dependency array.",["639"],"'slug' is assigned a value but never used.","'Fragment' is defined but never used.","Assignments to the 'searchedCars' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","Array.prototype.map() expects a return value from arrow function.","expectedInside",["640"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock",["641"],["642"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","React Hook useEffect has missing dependencies: 'loginCheck', 'props', and 'userIdParam'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["643"],["644"],"'checkYoutubeId' is assigned a value but never used.","'filterArray' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.influencerObj.username'. Either include it or remove the dependency array. If 'setInfluencerName' needs the current value of 'props.influencerObj.username', you can also switch to useReducer instead of useState and read 'props.influencerObj.username' in the reducer.",["645"],"React Hook useEffect has missing dependencies: 'influencerId', 'loginCheck', and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["646"],["647"],"'car' is assigned a value but never used.","'setCarObj' is assigned a value but never used.","'setResMsg' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'userId' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'userIdParam'. Either include it or remove the dependency array.",["648"],["649"],"'Form' is defined but never used.","'Alert' is defined but never used.","'yearG' is assigned a value but never used.","'update' is assigned a value but never used.","'checkCarIds' is assigned a value but never used.","'make' is assigned a value but never used.","'mongo' is assigned a value but never used.","'collectionNewCar' is assigned a value but never used.","'count' is assigned a value but never used.","'updateMissing' is assigned a value but never used.","'manualInsert' is assigned a value but never used.","'message' is assigned a value but never used.","'editMode' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'queryData'. Either include it or remove the dependency array.",["650"],"React Hook useEffect has missing dependencies: 'props.customData.userId' and 'props.match.params.id'. Either include them or remove the dependency array.",["651"],"React Hook useEffect has missing dependencies: 'getData' and 'props.profilepageid'. Either include them or remove the dependency array.",["652"],"React Hook useEffect has missing dependencies: 'getData', 'goInfluencerGarage', and 'userIdParam'. Either include them or remove the dependency array.",["653"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.",["654"],"'React' is defined but never used.","React Hook useEffect has missing dependencies: 'props.profileUser.profileCover', 'props.profileUser.profilePic', and 'userObj'. Either include them or remove the dependency array. If 'setCurrentBioPic' needs the current value of 'props.profileUser.profilePic', you can also switch to useReducer instead of useState and read 'props.profileUser.profilePic' in the reducer.",["655"],"'Container' is defined but never used.","'maxAgeTest' is assigned a value but never used.","ReturnStatement","expectedReturnValue","React Hook useEffect has a missing dependency: 'checkFanOf'. Either include it or remove the dependency array.",["656"],["657"],["658"],"'setUserId' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["659"],"'jwt' is defined but never used.","'formattedFans' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getComments'. Either include it or remove the dependency array.",["660"],"React Hook useEffect has a missing dependency: 'props.errMsg'. Either include it or remove the dependency array. If 'setLoginMsg' needs the current value of 'props.errMsg', you can also switch to useReducer instead of useState and read 'props.errMsg' in the reducer.",["661"],["662"],["663"],"'Row' is defined but never used.","'short' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"664","fix":"665"},{"desc":"666","fix":"667"},{"desc":"668","fix":"669"},{"desc":"670","fix":"671"},{"desc":"672","fix":"673"},{"desc":"674","fix":"675"},{"desc":"676","fix":"677"},{"desc":"672","fix":"678"},{"desc":"668","fix":"679"},{"desc":"668","fix":"680"},{"desc":"681","fix":"682"},{"desc":"681","fix":"683"},{"desc":"684","fix":"685"},{"desc":"686","fix":"687"},{"desc":"676","fix":"688"},{"desc":"689","fix":"690"},{"desc":"681","fix":"691"},{"desc":"692","fix":"693"},{"desc":"694","fix":"695"},{"desc":"696","fix":"697"},{"desc":"698","fix":"699"},{"desc":"692","fix":"700"},{"desc":"701","fix":"702"},{"desc":"703","fix":"704"},{"desc":"705","fix":"706"},{"desc":"701","fix":"707"},{"desc":"708","fix":"709"},{"desc":"710","fix":"711"},{"desc":"712","fix":"713"},{"desc":"714","fix":"715"},{"desc":"672","fix":"716"},"Update the dependencies array to be: [fetchData]",{"range":"717","text":"718"},"Update the dependencies array to be: [confirmUser]",{"range":"719","text":"720"},"Update the dependencies array to be: [getData]",{"range":"721","text":"722"},"Update the dependencies array to be: [getInfluencers]",{"range":"723","text":"724"},"Update the dependencies array to be: [loginCheck]",{"range":"725","text":"726"},"Update the dependencies array to be: [handeleRestPw]",{"range":"727","text":"728"},"Update the dependencies array to be: [checkToken]",{"range":"729","text":"730"},{"range":"731","text":"726"},{"range":"732","text":"722"},{"range":"733","text":"722"},"Update the dependencies array to be: [loginCheck, props, userIdParam]",{"range":"734","text":"735"},{"range":"736","text":"735"},"Update the dependencies array to be: [props.influecerObj, props.influencerObj.username]",{"range":"737","text":"738"},"Update the dependencies array to be: [influencerId, loginCheck, props]",{"range":"739","text":"740"},{"range":"741","text":"730"},"Update the dependencies array to be: [props.customData, userIdParam]",{"range":"742","text":"743"},{"range":"744","text":"735"},"Update the dependencies array to be: [queryData]",{"range":"745","text":"746"},"Update the dependencies array to be: [props.customData.userId, props.isLoggedIn, props.match.params.id]",{"range":"747","text":"748"},"Update the dependencies array to be: [getData, props.profilepageid, userIdParam]",{"range":"749","text":"750"},"Update the dependencies array to be: [getData, goInfluencerGarage, userIdParam]",{"range":"751","text":"752"},{"range":"753","text":"746"},"Update the dependencies array to be: [props.profileUser.profileCover, props.profileUser.profilePic, userObj]",{"range":"754","text":"755"},"Update the dependencies array to be: [checkFanOf, props.customData.fansOf]",{"range":"756","text":"757"},"Update the dependencies array to be: [checkFanOf, influencer.userId]",{"range":"758","text":"759"},{"range":"760","text":"755"},"Update the dependencies array to be: [props]",{"range":"761","text":"762"},"Update the dependencies array to be: [getComments]",{"range":"763","text":"764"},"Update the dependencies array to be: [props.errMsg, props.hasLoginErr]",{"range":"765","text":"766"},"Update the dependencies array to be: [props, props.swapSignup]",{"range":"767","text":"768"},{"range":"769","text":"726"},[1999,2001],"[fetchData]",[8087,8089],"[confirmUser]",[3621,3623],"[getData]",[2530,2532],"[getInfluencers]",[6939,6941],"[loginCheck]",[2652,2654],"[handeleRestPw]",[5655,5657],"[checkToken]",[3881,3883],[2442,2444],[2700,2702],[3559,3561],"[loginCheck, props, userIdParam]",[2729,2731],[12310,12330],"[props.influecerObj, props.influencerObj.username]",[14215,14217],"[influencerId, loginCheck, props]",[8296,8298],[10268,10286],"[props.customData, userIdParam]",[10410,10412],[7118,7120],"[queryData]",[10493,10511],"[props.customData.userId, props.isLoggedIn, props.match.params.id]",[10791,10804],"[getData, props.profilepageid, userIdParam]",[11085,11087],"[getData, goInfluencerGarage, userIdParam]",[7065,7067],[20406,20408],"[props.profileUser.profileCover, props.profileUser.profilePic, userObj]",[4193,4218],"[checkFanOf, props.customData.fansOf]",[4325,4344],"[checkFanOf, influencer.userId]",[16478,16480],[1437,1439],"[props]",[10980,10982],"[getComments]",[5315,5334],"[props.errMsg, props.hasLoginErr]",[5631,5649],"[props, props.swapSignup]",[2463,2465]]